{
  "version": 3,
  "sources": ["../../src/localEventService.ts", "../../src/misc/locale/localeUtils.ts", "../../src/utils/aria.ts", "../../src/utils/browser.ts", "../../src/utils/dom.ts", "../../src/utils/generic.ts", "../../src/baseUrl.ts", "../../src/utils/function.ts", "../../src/version.ts", "../../src/validation/logging.ts", "../../src/gridOptionsUtils.ts", "../../src/utils/event.ts", "../../src/context/beanStub.ts", "../../src/utils/object.ts", "../../src/entities/agColumn.ts", "../../src/entities/agProvidedColumnGroup.ts", "../../src/entities/defaultColumnTypes.ts", "../../src/columns/columnKeyCreator.ts", "../../src/utils/array.ts", "../../src/columnMove/columnMoveUtils.ts", "../../src/columns/columnEventUtils.ts", "../../src/columns/columnStateUtils.ts", "../../src/columns/selectionColService.ts", "../../src/columns/columnUtils.ts", "../../src/columns/columnFactoryUtils.ts", "../../src/columns/columnModel.ts", "../../src/columns/baseColsService.ts", "../../src/columns/groupInstanceIdCreator.ts", "../../src/components/emptyBean.ts", "../../src/rendering/cssClassManager.ts", "../../src/widgets/component.ts", "../../src/utils/promise.ts", "../../src/components/framework/userComponentFactory.ts", "../../src/components/framework/userCompUtils.ts", "../../src/components/framework/unwrapUserComp.ts", "../../src/modules/moduleRegistry.ts", "../../src/context/genericContext.ts", "../../src/context/context.ts", "../../src/headerRendering/cells/cssClassApplier.ts", "../../src/misc/animationFrameService.ts", "../../src/constants/keyCode.ts", "../../src/utils/focus.ts", "../../src/utils/string.ts", "../../src/rendering/cell/cellKeyboardListenerFeature.ts", "../../src/rendering/cell/cellMouseListenerFeature.ts", "../../src/rendering/cell/cellPositionFeature.ts", "../../src/rendering/cell/cellCtrl.ts", "../../src/gridBodyComp/mouseEventUtils.ts", "../../src/dragAndDrop/dragAndDropService.ts", "../../src/autoScrollService.ts", "../../src/entities/positionUtils.ts", "../../src/dragAndDrop/rowDragFeature.ts", "../../src/utils/mouse.ts", "../../src/dragAndDrop/dragService.ts", "../../src/entities/agColumnGroup.ts", "../../src/entities/rowNode.ts", "../../src/entities/rowNodeUtils.ts", "../../src/filter/filterWrapperComp.ts", "../../src/rendering/features/positionableFeature.ts", "../../src/widgets/managedFocusFeature.ts", "../../src/filter/filterLocaleText.ts", "../../src/filter/floating/provided/providedFilterUtils.ts", "../../src/filter/provided/providedFilter.ts", "../../src/filter/floating/floatingFilterMapper.ts", "../../src/styling/layoutFeature.ts", "../../src/gridBodyComp/gridBodyScrollFeature.ts", "../../src/gridBodyComp/centerWidthFeature.ts", "../../src/gridBodyComp/viewportSizeFeature.ts", "../../src/styling/stylingUtils.ts", "../../src/styling/rowStyleService.ts", "../../src/rendering/row/rowCtrl.ts", "../../src/utils/keyboard.ts", "../../src/gridBodyComp/rowContainer/rowContainerEventsFeature.ts", "../../src/gridBodyComp/rowContainer/setHeightFeature.ts", "../../src/gridBodyComp/rowContainer/rowContainerCtrl.ts", "../../src/gridBodyComp/gridBodyCtrl.ts", "../../src/gridBodyComp/abstractFakeScrollComp.ts", "../../src/gridBodyComp/fakeHScrollComp.ts", "../../src/gridBodyComp/fakeVScrollComp.ts", "../../src/headerRendering/headerUtils.ts", "../../src/headerRendering/gridHeaderCtrl.ts", "../../src/headerRendering/cells/abstractCell/abstractHeaderCellComp.ts", "../../src/headerRendering/cells/column/headerCellComp.ts", "../../src/headerRendering/cells/columnGroup/headerGroupCellComp.ts", "../../src/headerRendering/cells/floatingFilter/headerFilterCellComp.ts", "../../src/headerRendering/row/headerRowComp.ts", "../../src/rendering/features/setLeftFeature.ts", "../../src/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.ts", "../../src/headerRendering/cells/column/headerCellCtrl.ts", "../../src/headerRendering/row/headerRowCtrl.ts", "../../src/headerRendering/rowContainer/headerRowContainerCtrl.ts", "../../src/misc/menu/menuService.ts", "../../src/rendering/overlays/overlayComponent.ts", "../../src/rendering/overlays/loadingOverlayComponent.ts", "../../src/rendering/overlays/noRowsOverlayComponent.ts", "../../src/utils/icon.ts", "../../src/dragAndDrop/dragAndDropImageComponent.css-GENERATED.ts", "../../src/dragAndDrop/dragAndDropImageComponent.ts", "../../src/widgets/agAbstractLabel.css-GENERATED.ts", "../../src/widgets/agAbstractLabel.ts", "../../src/widgets/agAbstractField.ts", "../../src/widgets/agAbstractInputField.ts", "../../src/widgets/agCheckbox.ts", "../../src/rendering/cellRenderers/checkboxCellRenderer.css-GENERATED.ts", "../../src/rendering/cellRenderers/checkboxCellRenderer.ts", "../../src/clientSideRowModel/abstractClientSideNodeManager.ts", "../../src/interfaces/serverSideTransaction.ts", "../../src/selection/checkboxSelectionComponent.ts", "../../src/selection/rowRangeSelectionContext.ts", "../../src/selection/selectAllFeature.ts", "../../src/selection/baseSelectionService.ts", "../../src/widgets/agRadioButton.ts", "../../src/widgets/agToggleButton.css-GENERATED.ts", "../../src/widgets/agToggleButton.ts", "../../src/widgets/agInputTextField.ts", "../../src/widgets/agInputTextArea.ts", "../../src/widgets/agInputNumberField.ts", "../../src/utils/date.ts", "../../src/widgets/agInputDateField.ts", "../../src/tooltip/tooltipStateManager.ts", "../../src/tooltip/tooltipFeature.ts", "../../src/widgets/agList.ts", "../../src/widgets/agPickerField.css-GENERATED.ts", "../../src/widgets/agPickerField.ts", "../../src/widgets/agSelect.css-GENERATED.ts", "../../src/widgets/agSelect.ts", "../../src/widgets/tabGuardCtrl.ts", "../../src/widgets/tabGuardFeature.ts", "../../src/widgets/tabGuardComp.ts", "../../src/widgets/popupComponent.ts", "../../src/widgets/touchListener.ts", "../../src/interfaces/IRangeService.ts", "../../src/vanillaFrameworkOverrides.ts", "../../src/api/apiUtils.ts", "../../src/context/gridBeanComparator.ts", "../../src/headerRendering/rowContainer/headerRowContainerComp.ts", "../../src/headerRendering/gridHeaderComp.ts", "../../src/rendering/cell/cellComp.ts", "../../src/rendering/row/rowComp.ts", "../../src/gridBodyComp/rowContainer/rowContainerComp.ts", "../../src/gridBodyComp/gridBodyComp.ts", "../../src/gridComp/gridCtrl.ts", "../../src/gridComp/gridComp.ts", "../../src/api/gridApiFunctions.ts", "../../src/api/apiFunctionService.ts", "../../src/api/coreApi.ts", "../../src/rendering/dndSourceComp.ts", "../../src/dragAndDrop/dragApi.ts", "../../src/dragAndDrop/horizontalResizeService.ts", "../../src/dragAndDrop/rowDragComp.ts", "../../src/dragAndDrop/rowDragService.ts", "../../src/dragAndDrop/dragModule.ts", "../../src/columnMove/column-moving.css-GENERATED.ts", "../../src/columnMove/columnAnimationService.ts", "../../src/columnMove/columnMoveApi.ts", "../../src/columnMove/columnDrag/bodyDropPivotTarget.ts", "../../src/columnMove/internalColumnMoveUtils.ts", "../../src/columnMove/columnDrag/moveColumnFeature.ts", "../../src/columnMove/columnDrag/bodyDropTarget.ts", "../../src/columnMove/columnMoveService.ts", "../../src/columnMove/columnMoveModule.ts", "../../src/rendering/autoWidthCalculator.ts", "../../src/rendering/autoWidthModule.ts", "../../src/columnResize/columnResizeApi.ts", "../../src/columnResize/groupResizeFeature.ts", "../../src/columnResize/resizeFeature.ts", "../../src/columnResize/columnResizeService.ts", "../../src/columnResize/columnResizeModule.ts", "../../src/headerRendering/cells/columnGroup/groupWidthFeature.ts", "../../src/headerRendering/cells/columnGroup/headerGroupCellCtrl.ts", "../../src/columns/columnGroups/columnGroupApi.ts", "../../src/columns/visibleColsService.ts", "../../src/columns/columnGroups/columnGroupService.ts", "../../src/columns/columnGroups/columnGroupModule.ts", "../../src/rendering/cellRenderers/cellRendererModule.ts", "../../src/columns/columnApi.ts", "../../src/columns/columnDefFactory.ts", "../../src/columns/columnFlexService.ts", "../../src/columns/dataTypeService.ts", "../../src/columns/columnModule.ts", "../../src/columns/columnNameService.ts", "../../src/columns/columnViewportService.ts", "../../src/components/framework/agComponentUtils.ts", "../../src/components/framework/cellRendererFunctionModule.ts", "../../src/components/framework/registry.ts", "../../src/ctrlsService.ts", "../../src/theming/core/core.css-GENERATED.ts", "../../src/theming/inject.ts", "../../src/theming/Part.ts", "../../src/theming/theme-utils.ts", "../../src/theming/core/core-css.ts", "../../src/theming/theme-types.ts", "../../src/theming/Theme.ts", "../../src/theming/parts/checkbox-style/checkbox-style-default.css-GENERATED.ts", "../../src/theming/parts/checkbox-style/checkbox-styles.ts", "../../src/theming/parts/color-scheme/color-schemes.ts", "../../src/theming/parts/icon-set/shared-icon-styles.css-GENERATED.ts", "../../src/theming/parts/icon-set/alpine/icon-set-alpine.css-GENERATED.ts", "../../src/theming/parts/icon-set/alpine/icon-set-alpine.ts", "../../src/theming/parts/icon-set/material/icon-set-material.css-GENERATED.ts", "../../src/theming/parts/icon-set/material/icon-set-material.ts", "../../src/theming/parts/icon-set/overrides/icon-overrides.ts", "../../src/theming/parts/icon-set/quartz/quartz-icon-data.ts", "../../src/theming/parts/icon-set/quartz/icon-set-quartz.ts", "../../src/theming/parts/input-style/input-style-base.css-GENERATED.ts", "../../src/theming/parts/input-style/input-style-bordered.css-GENERATED.ts", "../../src/theming/parts/input-style/input-style-underlined.css-GENERATED.ts", "../../src/theming/parts/input-style/input-styles.ts", "../../src/theming/parts/tab-style/tab-style-base.css-GENERATED.ts", "../../src/theming/parts/tab-style/tab-style-rolodex.css-GENERATED.ts", "../../src/theming/parts/tab-style/tab-styles.ts", "../../src/theming/parts/theme/themes.ts", "../../src/environment.ts", "../../src/eventService.ts", "../../src/navigation/headerNavigationService.ts", "../../src/focusService.ts", "../../src/gridBodyComp/scrollVisibleService.ts", "../../src/gridDestroyService.ts", "../../src/events.ts", "../../src/gridOptionsDefault.ts", "../../src/gridOptionsService.ts", "../../src/headerRendering/cells/column/headerComp.ts", "../../src/headerRendering/cells/columnGroup/headerGroupComp.ts", "../../src/headerRendering/cells/headerModule.ts", "../../src/misc/animationFrameModule.ts", "../../src/misc/touchService.ts", "../../src/misc/touchModule.ts", "../../src/navigation/cellNavigationService.ts", "../../src/navigation/navigationApi.ts", "../../src/navigation/navigationService.ts", "../../src/navigation/navigationModule.ts", "../../src/pagination/pageBoundsListener.ts", "../../src/pagination/pageBoundsService.ts", "../../src/pinnedColumns/pinnedColumnModule.css-GENERATED.ts", "../../src/gridBodyComp/rowContainer/setPinnedWidthFeature.ts", "../../src/pinnedColumns/pinnedColumnService.ts", "../../src/pinnedColumns/pinnedColumnModule.ts", "../../src/rendering/ariaAnnouncementService.ts", "../../src/rendering/ariaModule.ts", "../../src/rendering/overlays/overlayApi.ts", "../../src/rendering/overlays/overlayWrapperComponent.css-GENERATED.ts", "../../src/rendering/overlays/overlayWrapperComponent.ts", "../../src/rendering/overlays/overlayService.ts", "../../src/rendering/overlays/overlayModule.ts", "../../src/rendering/rowContainerHeightService.ts", "../../src/rendering/rowRenderer.ts", "../../src/sort/rowNodeSorter.ts", "../../src/sort/sortApi.ts", "../../src/sort/sortIndicatorComp.ts", "../../src/sort/sortService.ts", "../../src/sort/sortModule.ts", "../../src/syncService.ts", "../../src/valueService/cellApi.ts", "../../src/utils/changedPath.ts", "../../src/valueService/changeDetectionService.ts", "../../src/valueService/expressionService.ts", "../../src/valueService/valueCache.ts", "../../src/valueService/valueModule.ts", "../../src/valueService/valueService.ts", "../../src/gridCoreModule.ts", "../../src/grid.ts", "../../src/api/rowModelApiUtils.ts", "../../src/eventTypes.ts", "../../src/misc/locale/localeService.ts", "../../src/propertyKeys.ts", "../../src/components/framework/frameworkComponentWrapper.ts", "../../src/tooltip/tooltipComponent.ts", "../../src/utils/fuzzyMatch.ts", "../../src/utils/number.ts", "../../src/export/baseCreator.ts", "../../src/export/baseGridSerializingSession.ts", "../../src/export/downloader.ts", "../../src/gridOptionsInitial.ts", "../../src/validation/apiFunctionValidator.ts", "../../src/validation/enterpriseModuleNames.ts", "../../src/validation/resolvableModuleNames.ts", "../../src/validation/rules/userCompValidations.ts", "../../src/validation/errorMessages/errorText.ts", "../../src/validation/rules/colDefValidations.ts", "../../src/validation/rules/gridOptionsValidations.ts", "../../src/validation/rules/iconValidations.ts", "../../src/validation/rules/menuItemValidations.ts", "../../src/validation/validationService.ts", "../../src/validation/validationModule.ts", "../../src/clientSideRowModel/filterStage.ts", "../../src/headerRendering/cells/floatingFilter/headerFilterCellCtrl.ts", "../../src/misc/menu/menuApi.ts", "../../src/misc/menu/sharedMenuModule.ts", "../../src/widgets/popupService.ts", "../../src/widgets/popupModule.ts", "../../src/filter/column-filters.css-GENERATED.ts", "../../src/filter/columnFilterApi.ts", "../../src/filter/columnFilterService.ts", "../../src/filter/filterApi.ts", "../../src/filter/filterManager.ts", "../../src/filter/filterMenuFactory.ts", "../../src/filter/filterValueService.ts", "../../src/filter/floating/provided/readOnlyFloatingFilter.ts", "../../src/filter/provided/optionsFactory.ts", "../../src/filter/provided/simpleFilterUtils.ts", "../../src/filter/provided/simpleFilter.ts", "../../src/filter/provided/scalarFilter.ts", "../../src/filter/provided/date/dateCompWrapper.ts", "../../src/filter/provided/date/dateFilterConstants.ts", "../../src/filter/provided/simpleFilterModelFormatter.ts", "../../src/filter/provided/date/dateFilterModelFormatter.ts", "../../src/filter/provided/date/dateFilter.ts", "../../src/filter/floating/provided/simpleFloatingFilter.ts", "../../src/filter/provided/date/dateFloatingFilter.ts", "../../src/filter/provided/date/defaultDateComponent.ts", "../../src/filter/provided/number/numberFilterConstants.ts", "../../src/filter/provided/number/numberFilterModelFormatter.ts", "../../src/filter/provided/number/numberFilterUtils.ts", "../../src/filter/provided/number/numberFilter.ts", "../../src/filter/floating/provided/floatingFilterTextInputService.ts", "../../src/filter/provided/text/textFilterUtils.ts", "../../src/filter/floating/provided/textInputFloatingFilter.ts", "../../src/filter/provided/number/numberFloatingFilter.ts", "../../src/filter/provided/text/textFilterConstants.ts", "../../src/filter/provided/text/textFilterModelFormatter.ts", "../../src/filter/provided/text/textFilter.ts", "../../src/filter/provided/text/textFloatingFilter.ts", "../../src/filter/quickFilterApi.ts", "../../src/filter/quickFilterService.ts", "../../src/filter/filterModule.ts", "../../src/undoRedo/undoRedoStack.ts", "../../src/undoRedo/undoRedoService.ts", "../../src/edit/cell-editing.css-GENERATED.ts", "../../src/edit/cellEditors/checkboxCellEditor.ts", "../../src/edit/cellEditors/simpleCellEditor.ts", "../../src/edit/cellEditors/dateCellEditor.ts", "../../src/edit/cellEditors/dateStringCellEditor.ts", "../../src/edit/cellEditors/largeTextCellEditor.ts", "../../src/edit/cellEditors/numberCellEditor.ts", "../../src/edit/cellEditors/selectCellEditor.ts", "../../src/edit/cellEditors/textCellEditor.ts", "../../src/api/scrollApi.ts", "../../src/edit/editApi.ts", "../../src/edit/cellEditors/popupEditorWrapper.ts", "../../src/edit/editService.ts", "../../src/edit/rowEditService.ts", "../../src/edit/editModule.ts", "../../src/selection/rowSelectionApi.ts", "../../src/selection/selectionService.ts", "../../src/selection/rowSelectionModule.ts", "../../src/api/csrmSsrmSharedApi.ts", "../../src/api/ssrmInfiniteSharedApi.ts", "../../src/api/sharedApiModule.ts", "../../src/alignedGrids/alignedGridsService.ts", "../../src/alignedGrids/alignedGridsModule.ts", "../../src/clientSideRowModel/clientSideNodeManager.ts", "../../src/clientSideRowModel/changedRowNodes.ts", "../../src/clientSideRowModel/sortStage.ts", "../../src/clientSideRowModel/clientSideRowModel.ts", "../../src/clientSideRowModel/clientSideRowModelApi.ts", "../../src/clientSideRowModel/clientSideRowModelModule.ts", "../../src/export/gridSerializer.ts", "../../src/export/exportModule.ts", "../../src/csvExport/csvSerializingSession.ts", "../../src/csvExport/csvCreator.ts", "../../src/csvExport/csvExportApi.ts", "../../src/csvExport/csvExportModule.ts", "../../src/infiniteRowModel/infiniteBlock.ts", "../../src/infiniteRowModel/infiniteCache.ts", "../../src/infiniteRowModel/infiniteRowModel.ts", "../../src/infiniteRowModel/infiniteRowModelApi.ts", "../../src/infiniteRowModel/rowNodeBlockLoader.ts", "../../src/infiniteRowModel/infiniteRowModelModule.ts", "../../src/rendering/cellRenderers/animateShowChangeCellRenderer.ts", "../../src/rendering/cellRenderers/animateSlideCellRenderer.css-GENERATED.ts", "../../src/rendering/cellRenderers/animateSlideCellRenderer.ts", "../../src/rendering/cell/cellFlashService.ts", "../../src/rendering/cell/highlightChangesApi.ts", "../../src/rendering/cell/highlightChangesModule.ts", "../../src/misc/state/stateApi.ts", "../../src/misc/state/stateModelMigration.ts", "../../src/misc/state/stateService.ts", "../../src/misc/state/stateModule.ts", "../../src/pagination/paginationApi.ts", "../../src/pagination/paginationAutoPageSizeService.ts", "../../src/pagination/pageSizeSelector/pageSizeSelectorComp.ts", "../../src/pagination/paginationComp.css-GENERATED.ts", "../../src/pagination/paginationComp.ts", "../../src/pagination/paginationService.ts", "../../src/pagination/paginationModule.ts", "../../src/api/rowApi.ts", "../../src/api/apiModule.ts", "../../src/rendering/renderApi.ts", "../../src/rendering/renderModule.ts", "../../src/columnAutosize/columnAutosizeApi.ts", "../../src/columnAutosize/columnAutosizeService.ts", "../../src/columnAutosize/columnAutosizeModule.ts", "../../src/pinnedRowModel/pinnedRowApi.ts", "../../src/pinnedRowModel/pinnedRowModel.ts", "../../src/pinnedRowModel/pinnedRowModule.ts", "../../src/styling/cellCustomStyleFeature.ts", "../../src/styling/cellStyleService.ts", "../../src/styling/stylingModule.ts", "../../src/columns/columnHover/columnHoverApi.ts", "../../src/columns/columnHover/hoverFeature.ts", "../../src/columns/columnHover/columnHoverService.ts", "../../src/columns/columnHover/columnHoverModule.ts", "../../src/misc/apiEvents/apiEventService.ts", "../../src/misc/apiEvents/eventApi.ts", "../../src/misc/apiEvents/apiEventModule.ts", "../../src/tooltip/tooltip.css-GENERATED.ts", "../../src/tooltip/tooltipService.ts", "../../src/tooltip/tooltipModule.ts", "../../src/misc/locale/localeModule.ts", "../../src/rendering/row/rowAutoHeightService.ts", "../../src/rendering/row/rowAutoHeightModule.ts", "../../src/allCommunityModule.ts"],
  "sourcesContent": ["import type { AgEvent, AgGridEvent } from './events';\r\nimport type { IEventEmitter, IEventListener, IGlobalEventListener } from './interfaces/iEventEmitter';\r\nimport type { IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\r\n\r\nexport class LocalEventService<TEventType extends string> implements IEventEmitter<TEventType> {\r\n    private allSyncListeners = new Map<TEventType, Set<IEventListener<TEventType>>>();\r\n    private allAsyncListeners = new Map<TEventType, Set<IEventListener<TEventType>>>();\r\n\r\n    private globalSyncListeners = new Set<IGlobalEventListener<TEventType>>();\r\n    private globalAsyncListeners = new Set<IGlobalEventListener<TEventType>>();\r\n\r\n    private frameworkOverrides?: IFrameworkOverrides;\r\n\r\n    private asyncFunctionsQueue: (() => void)[] = [];\r\n    private scheduled = false;\r\n\r\n    // using an object performs better than a Set for the number of different events we have\r\n    private firedEvents: { [key in TEventType]?: boolean } = {};\r\n\r\n    public setFrameworkOverrides(frameworkOverrides: IFrameworkOverrides): void {\r\n        this.frameworkOverrides = frameworkOverrides;\r\n    }\r\n\r\n    private getListeners(\r\n        eventType: TEventType,\r\n        async: boolean,\r\n        autoCreateListenerCollection: boolean\r\n    ): Set<IEventListener<TEventType>> | undefined {\r\n        const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\r\n        let listeners = listenerMap.get(eventType);\r\n\r\n        // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance\r\n        // getListeners() is also called during event dispatch even though no listeners are added. This measure protects\r\n        // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after\r\n        // the RowComp is destroyed, see noRegisteredListenersExist() below.\r\n        if (!listeners && autoCreateListenerCollection) {\r\n            listeners = new Set<IEventListener<TEventType>>();\r\n            listenerMap.set(eventType, listeners);\r\n        }\r\n\r\n        return listeners;\r\n    }\r\n\r\n    public noRegisteredListenersExist(): boolean {\r\n        return (\r\n            this.allSyncListeners.size === 0 &&\r\n            this.allAsyncListeners.size === 0 &&\r\n            this.globalSyncListeners.size === 0 &&\r\n            this.globalAsyncListeners.size === 0\r\n        );\r\n    }\r\n\r\n    public addEventListener<T extends TEventType>(eventType: T, listener: IEventListener<T>, async = false): void {\r\n        this.getListeners(eventType, async, true)!.add(listener);\r\n    }\r\n\r\n    public removeEventListener<T extends TEventType>(eventType: T, listener: IEventListener<T>, async = false): void {\r\n        const listeners = this.getListeners(eventType, async, false);\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        listeners.delete(listener);\r\n\r\n        if (listeners.size === 0) {\r\n            const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\r\n            listenerMap.delete(eventType);\r\n        }\r\n    }\r\n\r\n    public addGlobalListener(listener: IGlobalEventListener<TEventType>, async = false): void {\r\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);\r\n    }\r\n\r\n    public removeGlobalListener(listener: IGlobalEventListener<TEventType>, async = false): void {\r\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);\r\n    }\r\n\r\n    public dispatchEvent(event: AgEvent<TEventType>): void {\r\n        const agEvent = event as AgGridEvent<any, any, TEventType>;\r\n\r\n        this.dispatchToListeners(agEvent, true);\r\n        this.dispatchToListeners(agEvent, false);\r\n\r\n        this.firedEvents[agEvent.type] = true;\r\n    }\r\n\r\n    public dispatchEventOnce(event: AgEvent<TEventType>): void {\r\n        if (!this.firedEvents[event.type]) {\r\n            this.dispatchEvent(event);\r\n        }\r\n    }\r\n\r\n    private dispatchToListeners(event: AgGridEvent<any, any, TEventType>, async: boolean) {\r\n        const eventType = event.type;\r\n\r\n        if (async && 'event' in event) {\r\n            const browserEvent = (event as any).event;\r\n            if (browserEvent instanceof Event) {\r\n                // AG-7893 - Persist composedPath() so that its result can still be accessed by the user asynchronously.\r\n                // Within an async event handler if they call composedPath() on the event it will always return an empty [].\r\n                (event as any).eventPath = browserEvent.composedPath();\r\n            }\r\n        }\r\n\r\n        const processEventListeners = (\r\n            listeners: Set<IEventListener<TEventType>>,\r\n            originalListeners: Set<IEventListener<TEventType>>\r\n        ) =>\r\n            listeners.forEach((listener) => {\r\n                if (!originalListeners.has(listener)) {\r\n                    // A listener could have been removed by a previously processed listener. In this case we don't want to call\r\n                    return;\r\n                }\r\n                const callback = this.frameworkOverrides\r\n                    ? () => this.frameworkOverrides!.wrapIncoming(() => listener(event))\r\n                    : () => listener(event);\r\n\r\n                if (async) {\r\n                    this.dispatchAsync(callback);\r\n                } else {\r\n                    callback();\r\n                }\r\n            });\r\n\r\n        const originalListeners = this.getListeners(eventType, async, false) ?? new Set<IEventListener<TEventType>>();\r\n        // create a shallow copy to prevent listeners cyclically adding more listeners to capture this event\r\n        const listeners = new Set<IEventListener<TEventType>>(originalListeners);\r\n        if (listeners.size > 0) {\r\n            processEventListeners(listeners, originalListeners);\r\n        }\r\n\r\n        const globalListeners: Set<IGlobalEventListener<TEventType>> = new Set(\r\n            async ? this.globalAsyncListeners : this.globalSyncListeners\r\n        );\r\n\r\n        globalListeners.forEach((listener) => {\r\n            const callback = this.frameworkOverrides\r\n                ? () => this.frameworkOverrides!.wrapIncoming(() => listener(eventType, event))\r\n                : () => listener(eventType, event);\r\n\r\n            if (async) {\r\n                this.dispatchAsync(callback);\r\n            } else {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n\r\n    // this gets called inside the grid's thread, for each event that it\r\n    // wants to set async. the grid then batches the events into one setTimeout()\r\n    // because setTimeout() is an expensive operation. ideally we would have\r\n    // each event in it's own setTimeout(), but we batch for performance.\r\n    private dispatchAsync(func: () => void): void {\r\n        // add to the queue for executing later in the next VM turn\r\n        this.asyncFunctionsQueue.push(func);\r\n\r\n        // check if timeout is already scheduled. the first time the grid calls\r\n        // this within it's thread turn, this should be false, so it will schedule\r\n        // the 'flush queue' method the first time it comes here. then the flag is\r\n        // set to 'true' so it will know it's already scheduled for subsequent calls.\r\n        if (!this.scheduled) {\r\n            // if not scheduled, schedule one\r\n            const flush = () => {\r\n                window.setTimeout(this.flushAsyncQueue.bind(this), 0);\r\n            };\r\n            this.frameworkOverrides ? this.frameworkOverrides.wrapIncoming(flush) : flush();\r\n            // mark that it is scheduled\r\n            this.scheduled = true;\r\n        }\r\n    }\r\n\r\n    // this happens in the next VM turn only, and empties the queue of events\r\n    private flushAsyncQueue(): void {\r\n        this.scheduled = false;\r\n\r\n        // we take a copy, because the event listener could be using\r\n        // the grid, which would cause more events, which would be potentially\r\n        // added to the queue, so safe to take a copy, the new events will\r\n        // get executed in a later VM turn rather than risk updating the\r\n        // queue as we are flushing it.\r\n        const queueCopy = this.asyncFunctionsQueue.slice();\r\n        this.asyncFunctionsQueue = [];\r\n\r\n        // execute the queue\r\n        queueCopy.forEach((func) => func());\r\n    }\r\n}\r\n", "import type { LocaleService } from './localeService';\r\n\r\nexport type LocaleTextFunc = (key: string, defaultValue: string, variableValues?: string[]) => string;\r\n\r\nfunction defaultLocaleTextFunc(_key: string, defaultValue: string): string {\r\n    return defaultValue;\r\n}\r\n\r\nexport function _getLocaleTextFunc(localeSvc?: LocaleService): LocaleTextFunc {\r\n    return localeSvc?.getLocaleTextFunc() ?? defaultLocaleTextFunc;\r\n}\r\n", "import type { SortDirection } from '../entities/colDef';\r\nimport type { LocaleTextFunc } from '../misc/locale/localeUtils';\r\n\r\nexport type ColumnSortState = 'ascending' | 'descending' | 'other' | 'none';\r\n\r\n// ARIA HELPER FUNCTIONS\r\nfunction _toggleAriaAttribute(element: Element, attribute: string, value?: number | boolean | string | null) {\r\n    if (value == null || (typeof value === 'string' && value == '')) {\r\n        _removeAriaAttribute(element, attribute);\r\n    } else {\r\n        _setAriaAttribute(element, attribute, value);\r\n    }\r\n}\r\n\r\nfunction _setAriaAttribute(element: Element, attribute: string, value: number | boolean | string): void {\r\n    element.setAttribute(_ariaAttributeName(attribute), value.toString());\r\n}\r\n\r\nfunction _removeAriaAttribute(element: Element, attribute: string): void {\r\n    element.removeAttribute(_ariaAttributeName(attribute));\r\n}\r\n\r\nfunction _ariaAttributeName(attribute: string) {\r\n    return `aria-${attribute}`;\r\n}\r\n\r\nexport function _setAriaRole(element: Element, role?: string | null) {\r\n    if (role) {\r\n        element.setAttribute('role', role);\r\n    } else {\r\n        element.removeAttribute('role');\r\n    }\r\n}\r\n\r\nexport function _getAriaSortState(sortDirection: SortDirection | 'mixed'): ColumnSortState {\r\n    let sort: ColumnSortState;\r\n\r\n    if (sortDirection === 'asc') {\r\n        sort = 'ascending';\r\n    } else if (sortDirection === 'desc') {\r\n        sort = 'descending';\r\n    } else if (sortDirection === 'mixed') {\r\n        sort = 'other';\r\n    } else {\r\n        sort = 'none';\r\n    }\r\n\r\n    return sort;\r\n}\r\n\r\n// ARIA ATTRIBUTE GETTERS\r\nexport function _getAriaLevel(element: Element): number {\r\n    return parseInt(element.getAttribute('aria-level')!, 10);\r\n}\r\n\r\nexport function _getAriaPosInSet(element: Element): number {\r\n    return parseInt(element.getAttribute('aria-posinset')!, 10);\r\n}\r\n\r\nexport function _getAriaLabel(element: Element): string | null {\r\n    return element.getAttribute('aria-label');\r\n}\r\n\r\n// ARIA ATTRIBUTE SETTERS\r\nexport function _setAriaLabel(element: Element, label?: string | null): void {\r\n    _toggleAriaAttribute(element, 'label', label);\r\n}\r\n\r\nexport function _setAriaLabelledBy(element: Element, labelledBy?: string): void {\r\n    _toggleAriaAttribute(element, 'labelledby', labelledBy);\r\n}\r\n\r\nexport function _setAriaDescribedBy(element: Element, describedby?: string): void {\r\n    _toggleAriaAttribute(element, 'describedby', describedby);\r\n}\r\n\r\nexport function _setAriaLive(element: Element, live?: 'polite' | 'assertive' | 'off' | null) {\r\n    _toggleAriaAttribute(element, 'live', live);\r\n}\r\n\r\nexport function _setAriaAtomic(element: Element, atomic: boolean | null) {\r\n    _toggleAriaAttribute(element, 'atomic', atomic);\r\n}\r\n\r\nexport function _setAriaRelevant(\r\n    element: Element,\r\n    relevant: 'additions' | 'additions text' | 'all' | 'removals' | 'text' | null\r\n) {\r\n    _toggleAriaAttribute(element, 'relevant', relevant);\r\n}\r\n\r\nexport function _setAriaLevel(element: Element, level: number): void {\r\n    _toggleAriaAttribute(element, 'level', level);\r\n}\r\n\r\nexport function _setAriaDisabled(element: Element, disabled: boolean): void {\r\n    _toggleAriaAttribute(element, 'disabled', disabled);\r\n}\r\n\r\nexport function _setAriaHidden(element: Element, hidden: boolean): void {\r\n    _toggleAriaAttribute(element, 'hidden', hidden);\r\n}\r\n\r\nexport function _setAriaActiveDescendant(element: Element, descendantId: string | null): void {\r\n    _toggleAriaAttribute(element, 'activedescendant', descendantId);\r\n}\r\n\r\nexport function _setAriaExpanded(element: Element, expanded: boolean): void {\r\n    _setAriaAttribute(element, 'expanded', expanded);\r\n}\r\n\r\nexport function _removeAriaExpanded(element: Element): void {\r\n    _removeAriaAttribute(element, 'expanded');\r\n}\r\n\r\nexport function _setAriaSetSize(element: Element, setsize: number): void {\r\n    _setAriaAttribute(element, 'setsize', setsize);\r\n}\r\n\r\nexport function _setAriaPosInSet(element: Element, position: number): void {\r\n    _setAriaAttribute(element, 'posinset', position);\r\n}\r\n\r\nexport function _setAriaMultiSelectable(element: Element, multiSelectable: boolean): void {\r\n    _setAriaAttribute(element, 'multiselectable', multiSelectable);\r\n}\r\n\r\nexport function _setAriaRowCount(element: Element, rowCount: number): void {\r\n    _setAriaAttribute(element, 'rowcount', rowCount);\r\n}\r\n\r\nexport function _setAriaRowIndex(element: Element, rowIndex: number): void {\r\n    _setAriaAttribute(element, 'rowindex', rowIndex);\r\n}\r\n\r\nexport function _setAriaColCount(element: Element, colCount: number): void {\r\n    _setAriaAttribute(element, 'colcount', colCount);\r\n}\r\n\r\nexport function _setAriaColIndex(element: Element, colIndex: number): void {\r\n    _setAriaAttribute(element, 'colindex', colIndex);\r\n}\r\n\r\nexport function _setAriaColSpan(element: Element, colSpan: number): void {\r\n    _setAriaAttribute(element, 'colspan', colSpan);\r\n}\r\n\r\nexport function _setAriaSort(element: Element, sort: ColumnSortState): void {\r\n    _setAriaAttribute(element, 'sort', sort);\r\n}\r\n\r\nexport function _removeAriaSort(element: Element): void {\r\n    _removeAriaAttribute(element, 'sort');\r\n}\r\n\r\nexport function _setAriaSelected(element: Element, selected?: boolean): void {\r\n    _toggleAriaAttribute(element, 'selected', selected);\r\n}\r\n\r\nexport function _setAriaChecked(element: Element, checked?: boolean) {\r\n    _setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\r\n}\r\n\r\nexport function _setAriaControls(controllerElement: Element, controlledElement: Element) {\r\n    _toggleAriaAttribute(controllerElement, 'controls', controlledElement.id);\r\n    _setAriaLabelledBy(controlledElement, controllerElement.id);\r\n}\r\n\r\nexport function _getAriaCheckboxStateName(translate: LocaleTextFunc, state?: boolean): string {\r\n    return state === undefined\r\n        ? translate('ariaIndeterminate', 'indeterminate')\r\n        : state === true\r\n          ? translate('ariaChecked', 'checked')\r\n          : translate('ariaUnchecked', 'unchecked');\r\n}\r\n", "/**\r\n * These variables are lazy loaded, as otherwise they try and get initialised when we are loading\r\n * unit tests and we don't have references to window or document in the unit tests\r\n */\r\nlet isSafari: boolean;\r\nlet isChrome: boolean;\r\nlet isFirefox: boolean;\r\nlet isMacOs: boolean;\r\nlet isIOS: boolean;\r\nlet invisibleScrollbar: boolean;\r\nlet browserScrollbarWidth: number;\r\nlet maxDivHeight: number;\r\n\r\nexport function _isBrowserSafari(): boolean {\r\n    if (isSafari === undefined) {\r\n        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n    }\r\n    return isSafari;\r\n}\r\n\r\n/**\r\n * Returns true for Chrome and also for Edge (Chromium)\r\n */\r\nexport function _isBrowserChrome(): boolean {\r\n    if (isChrome === undefined) {\r\n        const win = window as any;\r\n        isChrome =\r\n            (!!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime)) ||\r\n            (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\r\n    }\r\n\r\n    return isChrome;\r\n}\r\n\r\nexport function _isBrowserFirefox(): boolean {\r\n    if (isFirefox === undefined) {\r\n        isFirefox = /(firefox)/i.test(navigator.userAgent);\r\n    }\r\n\r\n    return isFirefox;\r\n}\r\n\r\nexport function _isMacOsUserAgent(): boolean {\r\n    if (isMacOs === undefined) {\r\n        isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n    }\r\n\r\n    return isMacOs;\r\n}\r\n\r\nexport function _isIOSUserAgent(): boolean {\r\n    if (isIOS === undefined) {\r\n        isIOS =\r\n            /iPad|iPhone|iPod/.test(navigator.platform) ||\r\n            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\r\n    }\r\n\r\n    return isIOS;\r\n}\r\n\r\nexport function _getTabIndex(el: HTMLElement | null): string | null {\r\n    if (!el) {\r\n        return null;\r\n    }\r\n\r\n    const numberTabIndex = el.tabIndex;\r\n    const tabIndex = el.getAttribute('tabIndex');\r\n\r\n    if (numberTabIndex === -1 && (tabIndex === null || (tabIndex === '' && !_isBrowserFirefox()))) {\r\n        return null;\r\n    }\r\n\r\n    return numberTabIndex.toString();\r\n}\r\n\r\nexport function _getMaxDivHeight(): number {\r\n    if (maxDivHeight !== undefined) {\r\n        return maxDivHeight;\r\n    }\r\n\r\n    if (!document.body) {\r\n        return -1;\r\n    }\r\n\r\n    let res = 1000000;\r\n    // FF reports the height back but still renders blank after ~6M px\r\n    const testUpTo = _isBrowserFirefox() ? 6000000 : 1000000000;\r\n    const div = document.createElement('div');\r\n    document.body.appendChild(div);\r\n\r\n    while (true) {\r\n        const test = res * 2;\r\n        div.style.height = test + 'px';\r\n\r\n        if (test > testUpTo || div.clientHeight !== test) {\r\n            break;\r\n        } else {\r\n            res = test;\r\n        }\r\n    }\r\n\r\n    document.body.removeChild(div);\r\n    maxDivHeight = res;\r\n    return res;\r\n}\r\n\r\nexport function _getScrollbarWidth(): number | null {\r\n    if (browserScrollbarWidth == null) {\r\n        initScrollbarWidthAndVisibility();\r\n    }\r\n    return browserScrollbarWidth;\r\n}\r\n\r\nfunction initScrollbarWidthAndVisibility(): void {\r\n    const body = document.body;\r\n    const div = document.createElement('div');\r\n\r\n    div.style.width = div.style.height = '100px';\r\n    div.style.opacity = '0';\r\n    div.style.overflow = 'scroll';\r\n    (div.style as any).msOverflowStyle = 'scrollbar'; // needed for WinJS apps\r\n    div.style.position = 'absolute';\r\n\r\n    body.appendChild(div);\r\n\r\n    let width: number | null = div.offsetWidth - div.clientWidth;\r\n\r\n    // if width is 0 and client width is 0, means the DOM isn't ready\r\n    if (width === 0 && div.clientWidth === 0) {\r\n        width = null;\r\n    }\r\n\r\n    // remove div\r\n    if (div.parentNode) {\r\n        div.parentNode.removeChild(div);\r\n    }\r\n\r\n    if (width != null) {\r\n        browserScrollbarWidth = width;\r\n        invisibleScrollbar = width === 0;\r\n    }\r\n}\r\n\r\nexport function _isInvisibleScrollbar(): boolean {\r\n    if (invisibleScrollbar == null) {\r\n        initScrollbarWidthAndVisibility();\r\n    }\r\n    return invisibleScrollbar;\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { CellStyle } from '../entities/colDef';\r\nimport type { RowStyle } from '../entities/gridOptions';\r\nimport { _getWindow } from '../gridOptionsUtils';\r\nimport type { ICellRendererComp } from '../rendering/cellRenderers/iCellRenderer';\r\nimport { _setAriaHidden } from './aria';\r\nimport { _isBrowserChrome, _isBrowserSafari } from './browser';\r\nimport type { AgPromise } from './promise';\r\n\r\nlet rtlNegativeScroll: boolean;\r\n\r\n/**\r\n * This method adds a class to an element and remove that class from all siblings.\r\n * Useful for toggling state.\r\n * @param {HTMLElement} element The element to receive the class\r\n * @param {string} elementClass The class to be assigned to the element\r\n * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself\r\n */\r\nexport function _radioCssClass(element: HTMLElement, elementClass: string | null, otherElementClass?: string | null) {\r\n    const parent = element.parentElement;\r\n    let sibling = parent && (parent.firstChild as HTMLElement);\r\n\r\n    while (sibling) {\r\n        if (elementClass) {\r\n            sibling.classList.toggle(elementClass, sibling === element);\r\n        }\r\n        if (otherElementClass) {\r\n            sibling.classList.toggle(otherElementClass, sibling !== element);\r\n        }\r\n        sibling = sibling.nextSibling as HTMLElement;\r\n    }\r\n}\r\n\r\nexport const FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea, [href]';\r\nexport const FOCUSABLE_EXCLUDE = '[disabled], .ag-disabled:not(.ag-button), .ag-disabled *';\r\n\r\nexport function _isFocusableFormField(element: HTMLElement): boolean {\r\n    const matches: (str: string) => boolean = Element.prototype.matches || (Element as any).prototype.msMatchesSelector;\r\n\r\n    const inputSelector = 'input, select, button, textarea';\r\n    const isFocusable = matches.call(element, inputSelector);\r\n    const isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);\r\n    const isElementVisible = _isVisible(element);\r\n\r\n    const focusable = isFocusable && !isNotFocusable && isElementVisible;\r\n\r\n    return focusable;\r\n}\r\n\r\nexport function _setDisplayed(element: Element, displayed: boolean, options: { skipAriaHidden?: boolean } = {}) {\r\n    const { skipAriaHidden } = options;\r\n    element.classList.toggle('ag-hidden', !displayed);\r\n    if (!skipAriaHidden) {\r\n        _setAriaHidden(element, !displayed);\r\n    }\r\n}\r\n\r\nexport function _setVisible(element: HTMLElement, visible: boolean, options: { skipAriaHidden?: boolean } = {}) {\r\n    const { skipAriaHidden } = options;\r\n    element.classList.toggle('ag-invisible', !visible);\r\n    if (!skipAriaHidden) {\r\n        _setAriaHidden(element, !visible);\r\n    }\r\n}\r\n\r\nexport function _setDisabled(element: HTMLElement, disabled: boolean) {\r\n    const attributeName = 'disabled';\r\n    const addOrRemoveDisabledAttribute = disabled\r\n        ? (e: HTMLElement) => e.setAttribute(attributeName, '')\r\n        : (e: HTMLElement) => e.removeAttribute(attributeName);\r\n\r\n    addOrRemoveDisabledAttribute(element);\r\n\r\n    _nodeListForEach(element.querySelectorAll('input'), (input) => addOrRemoveDisabledAttribute(input));\r\n}\r\n\r\nexport function _isElementChildOfClass(\r\n    element: HTMLElement | null,\r\n    cls: string,\r\n    maxNest?: HTMLElement | number\r\n): boolean {\r\n    let counter = 0;\r\n\r\n    while (element) {\r\n        if (element.classList.contains(cls)) {\r\n            return true;\r\n        }\r\n\r\n        element = element.parentElement;\r\n\r\n        if (typeof maxNest == 'number') {\r\n            if (++counter > maxNest) {\r\n                break;\r\n            }\r\n        } else if (element === maxNest) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// returns back sizes as doubles instead of strings. similar to\r\n// getBoundingClientRect, however getBoundingClientRect does not:\r\n// a) work with fractions (eg browser is zooming)\r\n// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values\r\nexport function _getElementSize(el: HTMLElement): {\r\n    height: number;\r\n    width: number;\r\n    borderTopWidth: number;\r\n    borderRightWidth: number;\r\n    borderBottomWidth: number;\r\n    borderLeftWidth: number;\r\n    paddingTop: number;\r\n    paddingRight: number;\r\n    paddingBottom: number;\r\n    paddingLeft: number;\r\n    marginTop: number;\r\n    marginRight: number;\r\n    marginBottom: number;\r\n    marginLeft: number;\r\n    boxSizing: string;\r\n} {\r\n    const {\r\n        height,\r\n        width,\r\n        borderTopWidth,\r\n        borderRightWidth,\r\n        borderBottomWidth,\r\n        borderLeftWidth,\r\n        paddingTop,\r\n        paddingRight,\r\n        paddingBottom,\r\n        paddingLeft,\r\n        marginTop,\r\n        marginRight,\r\n        marginBottom,\r\n        marginLeft,\r\n        boxSizing,\r\n    } = window.getComputedStyle(el);\r\n\r\n    return {\r\n        height: parseFloat(height || '0'),\r\n        width: parseFloat(width || '0'),\r\n        borderTopWidth: parseFloat(borderTopWidth || '0'),\r\n        borderRightWidth: parseFloat(borderRightWidth || '0'),\r\n        borderBottomWidth: parseFloat(borderBottomWidth || '0'),\r\n        borderLeftWidth: parseFloat(borderLeftWidth || '0'),\r\n        paddingTop: parseFloat(paddingTop || '0'),\r\n        paddingRight: parseFloat(paddingRight || '0'),\r\n        paddingBottom: parseFloat(paddingBottom || '0'),\r\n        paddingLeft: parseFloat(paddingLeft || '0'),\r\n        marginTop: parseFloat(marginTop || '0'),\r\n        marginRight: parseFloat(marginRight || '0'),\r\n        marginBottom: parseFloat(marginBottom || '0'),\r\n        marginLeft: parseFloat(marginLeft || '0'),\r\n        boxSizing,\r\n    };\r\n}\r\n\r\nexport function _getInnerHeight(el: HTMLElement): number {\r\n    const size = _getElementSize(el);\r\n\r\n    if (size.boxSizing === 'border-box') {\r\n        return size.height - size.paddingTop - size.paddingBottom;\r\n    }\r\n\r\n    return size.height;\r\n}\r\n\r\nexport function _getInnerWidth(el: HTMLElement): number {\r\n    const size = _getElementSize(el);\r\n\r\n    if (size.boxSizing === 'border-box') {\r\n        return size.width - size.paddingLeft - size.paddingRight;\r\n    }\r\n\r\n    return size.width;\r\n}\r\n\r\nexport function _getAbsoluteHeight(el: HTMLElement): number {\r\n    const { height, marginBottom, marginTop } = _getElementSize(el);\r\n\r\n    return Math.floor(height + marginBottom + marginTop);\r\n}\r\n\r\nexport function _getAbsoluteWidth(el: HTMLElement): number {\r\n    const { width, marginLeft, marginRight } = _getElementSize(el);\r\n\r\n    return Math.floor(width + marginLeft + marginRight);\r\n}\r\n\r\nexport function _getElementRectWithOffset(el: HTMLElement): {\r\n    top: number;\r\n    left: number;\r\n    right: number;\r\n    bottom: number;\r\n} {\r\n    const offsetElementRect = el.getBoundingClientRect();\r\n    const { borderTopWidth, borderLeftWidth, borderRightWidth, borderBottomWidth } = _getElementSize(el);\r\n\r\n    return {\r\n        top: offsetElementRect.top + (borderTopWidth || 0),\r\n        left: offsetElementRect.left + (borderLeftWidth || 0),\r\n        right: offsetElementRect.right + (borderRightWidth || 0),\r\n        bottom: offsetElementRect.bottom + (borderBottomWidth || 0),\r\n    };\r\n}\r\n\r\nexport function _isRtlNegativeScroll(): boolean {\r\n    if (typeof rtlNegativeScroll === 'boolean') {\r\n        return rtlNegativeScroll;\r\n    }\r\n\r\n    const template = document.createElement('div');\r\n    template.style.direction = 'rtl';\r\n    template.style.width = '1px';\r\n    template.style.height = '1px';\r\n    template.style.position = 'fixed';\r\n    template.style.top = '0px';\r\n    template.style.overflow = 'hidden';\r\n    template.dir = 'rtl';\r\n    template.innerHTML =\r\n        /* html */\r\n        `<div style=\"width: 2px\">\r\n            <span style=\"display: inline-block; width: 1px\"></span>\r\n            <span style=\"display: inline-block; width: 1px\"></span>\r\n        </div>`;\r\n\r\n    document.body.appendChild(template);\r\n\r\n    template.scrollLeft = 1;\r\n    rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;\r\n    document.body.removeChild(template);\r\n\r\n    return rtlNegativeScroll;\r\n}\r\n\r\nexport function _getScrollLeft(element: HTMLElement, rtl: boolean): number {\r\n    let scrollLeft = element.scrollLeft;\r\n\r\n    if (rtl) {\r\n        // Absolute value - for FF that reports RTL scrolls in negative numbers\r\n        scrollLeft = Math.abs(scrollLeft);\r\n\r\n        if (_isBrowserChrome() && !_isRtlNegativeScroll()) {\r\n            scrollLeft = element.scrollWidth - element.getBoundingClientRect().width - scrollLeft;\r\n        }\r\n    }\r\n\r\n    return scrollLeft;\r\n}\r\n\r\nexport function _setScrollLeft(element: HTMLElement, value: number, rtl: boolean): void {\r\n    if (rtl) {\r\n        // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start\r\n        if (_isRtlNegativeScroll()) {\r\n            value *= -1;\r\n        } else if (_isBrowserSafari() || _isBrowserChrome()) {\r\n            value = element.scrollWidth - element.getBoundingClientRect().width - value;\r\n        }\r\n    }\r\n    element.scrollLeft = value;\r\n}\r\n\r\nexport function _clearElement(el: HTMLElement): void {\r\n    while (el && el.firstChild) {\r\n        el.removeChild(el.firstChild);\r\n    }\r\n}\r\n\r\nexport function _removeFromParent(node: Element | null) {\r\n    if (node && node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function _isInDOM(element: HTMLElement): boolean {\r\n    return !!element.offsetParent;\r\n}\r\n\r\nexport function _isVisible(element: HTMLElement) {\r\n    const el = element as any;\r\n    if (el.checkVisibility) {\r\n        return el.checkVisibility({ checkVisibilityCSS: true });\r\n    }\r\n\r\n    const isHidden = !_isInDOM(element) || window.getComputedStyle(element).visibility !== 'visible';\r\n    return !isHidden;\r\n}\r\n\r\n/**\r\n * Loads the template and returns it as an element. makes up for no simple way in\r\n * the dom api to load html directly, eg we cannot do this: document.createElement(template)\r\n * @param {string} template\r\n * @returns {HTMLElement}\r\n */\r\nexport function _loadTemplate(template: string): HTMLElement {\r\n    const tempDiv = document.createElement('div');\r\n    tempDiv.innerHTML = (template || '').trim();\r\n\r\n    return tempDiv.firstChild as HTMLElement;\r\n}\r\n\r\nexport function _ensureDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore?: HTMLElement | null): void {\r\n    // if already in right order, do nothing\r\n    if (eChildBefore && eChildBefore.nextSibling === eChild) {\r\n        return;\r\n    }\r\n\r\n    if (eChildBefore) {\r\n        if (eChildBefore.nextSibling) {\r\n            // insert between the eRowBefore and the row after it\r\n            eContainer.insertBefore(eChild, eChildBefore.nextSibling);\r\n        } else {\r\n            // if nextSibling is missing, means other row is at end, so just append new row at the end\r\n            eContainer.appendChild(eChild);\r\n        }\r\n    } else {\r\n        // otherwise put at start\r\n        if (eContainer.firstChild && eContainer.firstChild !== eChild) {\r\n            // insert it at the first location\r\n            eContainer.insertAdjacentElement('afterbegin', eChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport function _setDomChildOrder(eContainer: HTMLElement, orderedChildren: (HTMLElement | null)[]): void {\r\n    for (let i = 0; i < orderedChildren.length; i++) {\r\n        const correctCellAtIndex = orderedChildren[i];\r\n        const actualCellAtIndex = eContainer.children[i];\r\n\r\n        if (actualCellAtIndex !== correctCellAtIndex) {\r\n            eContainer.insertBefore(correctCellAtIndex!, actualCellAtIndex);\r\n        }\r\n    }\r\n}\r\n\r\nexport function _insertWithDomOrder(\r\n    eContainer: HTMLElement,\r\n    eToInsert: HTMLElement,\r\n    eChildBefore: HTMLElement | null\r\n): void {\r\n    if (eChildBefore) {\r\n        // if previous element exists, just slot in after the previous element\r\n        eChildBefore.insertAdjacentElement('afterend', eToInsert);\r\n    } else {\r\n        if (eContainer.firstChild) {\r\n            // insert it at the first location\r\n            eContainer.insertAdjacentElement('afterbegin', eToInsert);\r\n        } else {\r\n            // otherwise eContainer is empty, so just append it\r\n            eContainer.appendChild(eToInsert);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a camelCase string into hyphenated string\r\n * @param {string} camelCase\r\n * @return {string}\r\n */\r\nfunction _camelCaseToHyphenated(camelCase: string): string {\r\n    return camelCase.replace(/[A-Z]/g, (s) => `-${s.toLocaleLowerCase()}`);\r\n}\r\n\r\nexport function _addStylesToElement(eElement: any, styles: RowStyle | CellStyle | null | undefined) {\r\n    if (!styles) {\r\n        return;\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(styles)) {\r\n        if (!key || !key.length || value == null) {\r\n            continue;\r\n        }\r\n\r\n        // changes the key from camelCase into a hyphenated-string\r\n        const parsedKey = _camelCaseToHyphenated(key);\r\n        const valueAsString = value.toString();\r\n        const parsedValue = valueAsString.replace(/\\s*!important/g, '');\r\n        const priority = parsedValue.length != valueAsString.length ? 'important' : undefined;\r\n\r\n        eElement.style.setProperty(parsedKey, parsedValue, priority);\r\n    }\r\n}\r\n\r\nexport function _isHorizontalScrollShowing(element: HTMLElement): boolean {\r\n    return element.clientWidth < element.scrollWidth;\r\n}\r\n\r\nexport function _isVerticalScrollShowing(element: HTMLElement): boolean {\r\n    return element.clientHeight < element.scrollHeight;\r\n}\r\n\r\nexport function _setElementWidth(element: HTMLElement, width: string | number) {\r\n    if (width === 'flex') {\r\n        element.style.removeProperty('width');\r\n        element.style.removeProperty('minWidth');\r\n        element.style.removeProperty('maxWidth');\r\n        element.style.flex = '1 1 auto';\r\n    } else {\r\n        _setFixedWidth(element, width);\r\n    }\r\n}\r\n\r\nexport function _setFixedWidth(element: HTMLElement, width: string | number) {\r\n    width = _formatSize(width);\r\n    element.style.width = width.toString();\r\n    element.style.maxWidth = width.toString();\r\n    element.style.minWidth = width.toString();\r\n}\r\n\r\nexport function _setElementHeight(element: HTMLElement, height: string | number) {\r\n    if (height === 'flex') {\r\n        element.style.removeProperty('height');\r\n        element.style.removeProperty('minHeight');\r\n        element.style.removeProperty('maxHeight');\r\n        element.style.flex = '1 1 auto';\r\n    } else {\r\n        _setFixedHeight(element, height);\r\n    }\r\n}\r\n\r\nexport function _setFixedHeight(element: HTMLElement, height: string | number) {\r\n    height = _formatSize(height);\r\n    element.style.height = height.toString();\r\n    element.style.maxHeight = height.toString();\r\n    element.style.minHeight = height.toString();\r\n}\r\n\r\nexport function _formatSize(size: number | string) {\r\n    if (typeof size === 'number') {\r\n        return `${size}px`;\r\n    }\r\n\r\n    return size;\r\n}\r\n\r\nexport function _isNodeOrElement(o: any): o is Node | Element {\r\n    return o instanceof Node || o instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Makes a copy of a node list into a list\r\n * @param {NodeList} nodeList\r\n * @returns {Node[]}\r\n */\r\nexport function _copyNodeList(nodeList: NodeListOf<Node> | null): Node[] {\r\n    if (nodeList == null) {\r\n        return [];\r\n    }\r\n\r\n    const result: Node[] = [];\r\n\r\n    _nodeListForEach(nodeList, (node) => result.push(node));\r\n\r\n    return result;\r\n}\r\n\r\nexport function _iterateNamedNodeMap(map: NamedNodeMap, callback: (key: string, value: string) => void): void {\r\n    if (!map) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < map.length; i++) {\r\n        const attr = map[i];\r\n        callback(attr.name, attr.value);\r\n    }\r\n}\r\n\r\nexport function _addOrRemoveAttribute(element: HTMLElement, name: string, value: string | number | null | undefined) {\r\n    if (value == null || value === '') {\r\n        element.removeAttribute(name);\r\n    } else {\r\n        element.setAttribute(name, value.toString());\r\n    }\r\n}\r\n\r\nexport function _nodeListForEach<T extends Node>(nodeList: NodeListOf<T> | null, action: (value: T) => void): void {\r\n    if (nodeList == null) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n        action(nodeList[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renders as they\r\n * can return back strings (instead of html element) in the getGui() method. common code placed here to handle that.\r\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\r\n * @param {HTMLElement} eTarget\r\n */\r\nexport function _bindCellRendererToHtmlElement(\r\n    cellRendererPromise: AgPromise<ICellRendererComp>,\r\n    eTarget: HTMLElement\r\n) {\r\n    cellRendererPromise.then((cellRenderer) => {\r\n        const gui: HTMLElement | string = cellRenderer!.getGui();\r\n\r\n        if (gui != null) {\r\n            if (typeof gui === 'object') {\r\n                eTarget.appendChild(gui);\r\n            } else {\r\n                eTarget.innerHTML = gui;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function _observeResize(beans: BeanCollection, element: HTMLElement, callback: () => void): () => void {\r\n    const win = _getWindow(beans);\r\n    const ResizeObserverImpl = win.ResizeObserver;\r\n    const resizeObserver = ResizeObserverImpl ? new ResizeObserverImpl(callback) : null;\r\n    resizeObserver?.observe(element);\r\n    return () => resizeObserver?.disconnect();\r\n}\r\n", "/**\r\n * If value is undefined, null or blank, returns null, otherwise returns the value\r\n * @param {T} value\r\n * @returns {T | null}\r\n */\r\nexport function _makeNull<T>(value?: T): T | null {\r\n    if (value == null || value === '') {\r\n        return null;\r\n    }\r\n    return value;\r\n}\r\n\r\nexport function __stringify(value: any){\r\n    return JSON.stringify(value, (_,v)=> typeof v == \"bigint\" ? v.toString()+\"n\" : v);\r\n}\r\n\r\nexport function _exists(value: string | null | undefined): value is string;\r\nexport function _exists<T>(value: T): value is NonNullable<T>;\r\nexport function _exists(value: any): boolean {\r\n    return value != null && value !== '';\r\n}\r\n\r\nexport function _missing<T>(value: T | null | undefined): value is Exclude<undefined | null, T>;\r\nexport function _missing(value: any): boolean {\r\n    return !_exists(value);\r\n}\r\n\r\nexport function _toStringOrNull(value: any): string | null {\r\n    return value != null && typeof value.toString === 'function' ? value.toString() : null;\r\n}\r\n\r\nexport function _jsonEquals<T1, T2>(val1: T1, val2: T2): boolean {\r\n    const val1Json = val1 ? __stringify(val1) : null;\r\n    const val2Json = val2 ? __stringify(val2) : null;\r\n\r\n    return val1Json === val2Json;\r\n}\r\n\r\nexport function _defaultComparator(valueA: any, valueB: any, accentedCompare: boolean = false): number {\r\n    const valueAMissing = valueA == null;\r\n    const valueBMissing = valueB == null;\r\n\r\n    // this is for aggregations sum and avg, where the result can be a number that is wrapped.\r\n    // if we didn't do this, then the toString() value would be used, which would result in\r\n    // the strings getting used instead of the numbers.\r\n    if (valueA && valueA.toNumber) {\r\n        valueA = valueA.toNumber();\r\n    }\r\n\r\n    if (valueB && valueB.toNumber) {\r\n        valueB = valueB.toNumber();\r\n    }\r\n\r\n    if (valueAMissing && valueBMissing) {\r\n        return 0;\r\n    }\r\n\r\n    if (valueAMissing) {\r\n        return -1;\r\n    }\r\n\r\n    if (valueBMissing) {\r\n        return 1;\r\n    }\r\n\r\n    function doQuickCompare<T>(a: T, b: T): number {\r\n        return a > b ? 1 : a < b ? -1 : 0;\r\n    }\r\n\r\n    if (typeof valueA !== 'string') {\r\n        return doQuickCompare(valueA, valueB);\r\n    }\r\n\r\n    if (!accentedCompare) {\r\n        return doQuickCompare(valueA, valueB);\r\n    }\r\n\r\n    try {\r\n        // using local compare also allows chinese comparisons\r\n        return valueA.localeCompare(valueB);\r\n    } catch (e) {\r\n        // if something wrong with localeCompare, eg not supported\r\n        // by browser, then just continue with the quick one\r\n        return doQuickCompare(valueA, valueB);\r\n    }\r\n}\r\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\r\nexport const BASE_URL = 'https://www.ag-grid.com';\r\n", "import type { GridOptionsService } from '../gridOptionsService';\r\n\r\nconst doOnceFlags: { [key: string]: boolean } = {};\r\n\r\n/**\r\n * If the key was passed before, then doesn't execute the func\r\n * @param {Function} func\r\n * @param {string} key\r\n */\r\nexport function _doOnce(func: () => void, key: string) {\r\n    if (doOnceFlags[key]) {\r\n        return;\r\n    }\r\n\r\n    func();\r\n    doOnceFlags[key] = true;\r\n}\r\n\r\nexport function _logIfDebug(gos: GridOptionsService, message: string, ...args: any[]) {\r\n    if (gos.get('debug')) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('AG Grid: ' + message, ...args);\r\n    }\r\n}\r\n\r\nexport function _warnOnce(msg: string, ...args: any[]) {\r\n    // eslint-disable-next-line no-console\r\n    _doOnce(() => console.warn('AG Grid: ' + msg, ...args), msg + args?.join(''));\r\n}\r\nexport function _errorOnce(msg: string, ...args: any[]) {\r\n    // eslint-disable-next-line no-console\r\n    _doOnce(() => console.error('AG Grid: ' + msg, ...args), msg + args?.join(''));\r\n}\r\n\r\nconst executeNextVMTurnFuncs: ((...args: any[]) => any)[] = [];\r\nlet executeNextVMTurnPending = false;\r\n\r\nexport function _executeNextVMTurn(func: () => void): void {\r\n    executeNextVMTurnFuncs.push(func);\r\n\r\n    if (executeNextVMTurnPending) {\r\n        return;\r\n    }\r\n\r\n    executeNextVMTurnPending = true;\r\n    window.setTimeout(() => {\r\n        const funcsCopy = executeNextVMTurnFuncs.slice();\r\n        executeNextVMTurnFuncs.length = 0;\r\n        executeNextVMTurnPending = false;\r\n        funcsCopy.forEach((func) => func());\r\n    }, 0);\r\n}\r\n\r\n/**\r\n * Creates a debounced function a function, and attach it to a bean for lifecycle\r\n * @param {Function} func The function to be debounced\r\n * @param {number} delay The time in ms to debounce\r\n * @return {Function} The debounced function\r\n */\r\nexport function _debounce(\r\n    bean: { isAlive(): boolean },\r\n    func: (...args: any[]) => void,\r\n    delay: number\r\n): (...args: any[]) => void {\r\n    let timeout: any;\r\n\r\n    // Calling debounce returns a new anonymous function\r\n    return function (...args: any[]) {\r\n        //@ts-expect-error no implicit this\r\n        const context = this as any;\r\n        window.clearTimeout(timeout);\r\n\r\n        // Set the new timeout\r\n        timeout = window.setTimeout(function () {\r\n            // at the moment we just check if the bean is still alive, in the future the bean stub should\r\n            // another option is to manage a list of active timers and clear them when the bean is destroyed.\r\n            if (bean.isAlive()) {\r\n                func.apply(context, args);\r\n            }\r\n        }, delay);\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Function} func The function to be throttled\r\n * @param {number} wait The time in ms to throttle\r\n * @return {Function} The throttled function\r\n */\r\nexport function _throttle(func: (...args: any[]) => void, wait: number): (...args: any[]) => void {\r\n    let previousCall = 0;\r\n\r\n    return function (...args: any[]) {\r\n        //@ts-expect-error no implicit this\r\n        const context = this;\r\n        const currentCall = new Date().getTime();\r\n\r\n        if (currentCall - previousCall < wait) {\r\n            return;\r\n        }\r\n\r\n        previousCall = currentCall;\r\n\r\n        func.apply(context, args);\r\n    };\r\n}\r\n\r\nexport function _waitUntil(\r\n    condition: () => boolean,\r\n    callback: () => void,\r\n    timeout: number = 100,\r\n    timeoutMessage?: string\r\n) {\r\n    const timeStamp = new Date().getTime();\r\n\r\n    let interval: number | null = null;\r\n    let executed: boolean = false;\r\n\r\n    const internalCallback = () => {\r\n        const reachedTimeout = new Date().getTime() - timeStamp > timeout;\r\n        if (condition() || reachedTimeout) {\r\n            callback();\r\n            executed = true;\r\n            if (interval != null) {\r\n                window.clearInterval(interval);\r\n                interval = null;\r\n            }\r\n\r\n            if (reachedTimeout && timeoutMessage) {\r\n                _warnOnce(timeoutMessage);\r\n            }\r\n        }\r\n    };\r\n\r\n    internalCallback();\r\n\r\n    if (!executed) {\r\n        interval = window.setInterval(internalCallback, 10);\r\n    }\r\n}\r\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\r\nexport const VERSION = '33.0.1';\r\n", "import { BASE_URL } from '../baseUrl';\r\nimport { _errorOnce, _warnOnce } from '../utils/function';\r\nimport { VERSION } from '../version';\r\nimport type { ErrorId, ErrorMap, GetErrorParams } from './errorMessages/errorText';\r\nimport type { ValidationService } from './validationService';\r\n\r\nconst MAX_URL_LENGTH = 2000;\r\nconst MIN_PARAM_LENGTH = 100;\r\nconst VERSION_PARAM_NAME = '_version_';\r\n\r\nlet validation: ValidationService | null = null;\r\nlet suppressAllLogging = false;\r\nexport let baseDocLink = `${BASE_URL}/javascript-data-grid`;\r\n/**\r\n * The ValidationService passes itself in if it has been included.\r\n * @param logger\r\n */\r\nexport function provideValidationServiceLogger(logger: ValidationService) {\r\n    validation = logger;\r\n}\r\nexport function suppressAllLogs() {\r\n    suppressAllLogging = true;\r\n}\r\n/** Set by the Framework override to give us accurate links for the framework  */\r\nexport function setValidationDocLink(docLink: string) {\r\n    baseDocLink = docLink;\r\n}\r\n\r\ntype LogFn = (message: string, ...args: any[]) => void;\r\n\r\nfunction getErrorParts<TId extends ErrorId>(id: TId, args: GetErrorParams<TId>, defaultMessage?: string): any[] {\r\n    return validation?.getConsoleMessage(id, args) ?? [minifiedLog(id, args, defaultMessage)];\r\n}\r\n\r\nfunction getMsgOrDefault<TId extends ErrorId>(\r\n    logger: LogFn,\r\n    id: TId,\r\n    args: GetErrorParams<TId>,\r\n    defaultMessage?: string\r\n) {\r\n    if (suppressAllLogging) return;\r\n    logger(`error #${id}`, ...getErrorParts(id, args, defaultMessage));\r\n}\r\n\r\n/**\r\n * Stringify object, removing any circular dependencies\r\n */\r\nfunction stringifyObject(inputObj: any) {\r\n    if (!inputObj) return String(inputObj);\r\n    const object: Record<string, any> = {};\r\n    for (const prop of Object.keys(inputObj)) {\r\n        if (typeof inputObj[prop] !== 'object' && typeof inputObj[prop] !== 'function') {\r\n            object[prop] = inputObj[prop];\r\n        }\r\n    }\r\n    return JSON.stringify(object);\r\n}\r\n\r\nfunction stringifyValue(value: any) {\r\n    let output = value;\r\n    if (value instanceof Error) {\r\n        output = value.toString();\r\n    } else if (typeof value === 'object') {\r\n        output = stringifyObject(value);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Correctly formats a string or undefined or null value into a human readable string\r\n * @param input\r\n */\r\nexport function toStringWithNullUndefined(str: string | null | undefined) {\r\n    return str === undefined ? 'undefined' : str === null ? 'null' : str;\r\n}\r\n\r\nfunction getParamsUrl(baseUrl: string, params: URLSearchParams) {\r\n    return `${baseUrl}?${params.toString()}`;\r\n}\r\n\r\nfunction truncateUrl(baseUrl: string, params: URLSearchParams, maxLength: number) {\r\n    const sortedParams = Array.from(params.entries()).sort((a, b) => b[1].length - a[1].length);\r\n    let url = getParamsUrl(baseUrl, params);\r\n\r\n    for (const [key, value] of sortedParams) {\r\n        if (key === VERSION_PARAM_NAME) {\r\n            continue;\r\n        }\r\n        const excessLength = url.length - maxLength;\r\n        if (excessLength <= 0) {\r\n            break;\r\n        }\r\n\r\n        const ellipse = '...';\r\n        const truncateAmount = excessLength + ellipse.length;\r\n        // Truncate by `truncateAmount`, unless the result is shorter than the min param\r\n        // length. In which case, shorten to min param length, then continue shortening\r\n        // other params.\r\n        // Assume there isn't a lot of params that are all long.\r\n        const truncatedValue =\r\n            value.length - truncateAmount > MIN_PARAM_LENGTH\r\n                ? value.slice(0, value.length - truncateAmount) + ellipse\r\n                : value.slice(0, MIN_PARAM_LENGTH) + ellipse;\r\n\r\n        params.set(key, truncatedValue);\r\n        url = getParamsUrl(baseUrl, params);\r\n    }\r\n\r\n    return url;\r\n}\r\n\r\nexport function getErrorLink(errorNum: ErrorId, args: GetErrorParams<any>) {\r\n    const params = new URLSearchParams();\r\n    params.append(VERSION_PARAM_NAME, VERSION);\r\n    if (args) {\r\n        Object.entries(args).forEach(([key, value]) => {\r\n            params.append(key, stringifyValue(value));\r\n        });\r\n    }\r\n    const baseUrl = `${baseDocLink}/errors/${errorNum}`;\r\n    const url = getParamsUrl(baseUrl, params);\r\n\r\n    return url.length <= MAX_URL_LENGTH ? url : truncateUrl(baseUrl, params, MAX_URL_LENGTH);\r\n}\r\n\r\nconst minifiedLog = (errorNum: ErrorId, args: GetErrorParams<any>, defaultMessage?: string) => {\r\n    const errorLink = getErrorLink(errorNum, args);\r\n    return `${defaultMessage ? defaultMessage + ' \\n' : ''}Visit ${errorLink}${defaultMessage ? '' : ' \\n  Alternatively register the ValidationModule to see the full message in the console.'}`;\r\n};\r\n\r\nexport function _warn<\r\n    TId extends ErrorId,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    TShowMessageAtCallLocation = ErrorMap[TId],\r\n>(...args: undefined extends GetErrorParams<TId> ? [id: TId] : [id: TId, params: GetErrorParams<TId>]): void {\r\n    getMsgOrDefault(_warnOnce, args[0], args[1] as any);\r\n}\r\n\r\nexport function _error<\r\n    TId extends ErrorId,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    TShowMessageAtCallLocation = ErrorMap[TId],\r\n>(...args: undefined extends GetErrorParams<TId> ? [id: TId] : [id: TId, params: GetErrorParams<TId>]): void {\r\n    getMsgOrDefault(_errorOnce, args[0], args[1] as any);\r\n}\r\n\r\n/** Used for messages before the ValidationService has been created */\r\nexport function _logPreInitErr<\r\n    TId extends ErrorId,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    TShowMessageAtCallLocation = ErrorMap[TId],\r\n>(id: TId, args: GetErrorParams<TId>, defaultMessage: string) {\r\n    getMsgOrDefault(_errorOnce, id!, args as any, defaultMessage);\r\n}\r\n\r\nfunction getErrMsg<TId extends ErrorId>(\r\n    defaultMessage: string | undefined,\r\n    args: undefined extends GetErrorParams<TId> ? [id: TId] : [id: TId, params: GetErrorParams<TId>]\r\n): string {\r\n    const id = args[0];\r\n    return `error #${id} ` + getErrorParts(id, args[1] as any, defaultMessage).join(' ');\r\n}\r\n\r\nexport function _errMsg<\r\n    TId extends ErrorId,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    TShowMessageAtCallLocation = ErrorMap[TId],\r\n>(...args: undefined extends GetErrorParams<TId> ? [id: TId] : [id: TId, params: GetErrorParams<TId>]): string {\r\n    return getErrMsg(undefined, args);\r\n}\r\n\r\n/** Used for messages before the ValidationService has been created */\r\nexport function _preInitErrMsg<\r\n    TId extends ErrorId,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    TShowMessageAtCallLocation = ErrorMap[TId],\r\n>(...args: undefined extends GetErrorParams<TId> ? [id: TId] : [id: TId, params: GetErrorParams<TId>]): string {\r\n    // as well as displaying an extra line break, this will remove the part of the message about adding the validation module\r\n    return getErrMsg('\\n', args);\r\n}\r\n", "import type { GridApi } from './api/gridApi';\r\nimport type { BeanCollection } from './context/context';\r\nimport type {\r\n    CheckboxLocation,\r\n    DomLayoutType,\r\n    FillHandleOptions,\r\n    GetRowIdFunc,\r\n    GridOptions,\r\n    GroupSelectionMode,\r\n    IsRowSelectable,\r\n    MultiRowSelectionOptions,\r\n    RowSelectionMode,\r\n    RowSelectionOptions,\r\n    SelectAllMode,\r\n    SingleRowSelectionOptions,\r\n} from './entities/gridOptions';\r\nimport type { RowNode } from './entities/rowNode';\r\nimport type { ComponentStateChangedEvent, GridOptionsChangedEvent } from './events';\r\nimport type {\r\n    ExtractParamsFromCallback,\r\n    ExtractReturnTypeFromCallback,\r\n    GridOptionsService,\r\n} from './gridOptionsService';\r\nimport type {\r\n    GetGroupAggFilteringParams,\r\n    GetGroupIncludeFooterParams,\r\n    RowHeightParams,\r\n} from './interfaces/iCallbackParams';\r\nimport type { IClientSideRowModel } from './interfaces/iClientSideRowModel';\r\nimport type { WithoutGridCommon } from './interfaces/iCommon';\r\nimport type { IRowModel, RowModelType } from './interfaces/iRowModel';\r\nimport type { IRowNode } from './interfaces/iRowNode';\r\nimport type { IServerSideRowModel } from './interfaces/iServerSideRowModel';\r\nimport { _getElementRectWithOffset } from './utils/dom';\r\nimport { _exists, _missing } from './utils/generic';\r\nimport { _warn } from './validation/logging';\r\n\r\nfunction isRowModelType(gos: GridOptionsService, rowModelType: RowModelType): boolean {\r\n    return gos.get('rowModelType') === rowModelType;\r\n}\r\n\r\nexport function _isClientSideRowModel(gos: GridOptionsService, rowModel?: IRowModel): rowModel is IClientSideRowModel {\r\n    return isRowModelType(gos, 'clientSide');\r\n}\r\n\r\nexport function _isServerSideRowModel(gos: GridOptionsService, rowModel?: IRowModel): rowModel is IServerSideRowModel {\r\n    return isRowModelType(gos, 'serverSide');\r\n}\r\n\r\nexport function _isDomLayout(gos: GridOptionsService, domLayout: DomLayoutType) {\r\n    return gos.get('domLayout') === domLayout;\r\n}\r\n\r\nexport function _isRowSelection(gos: GridOptionsService): boolean {\r\n    return _getRowSelectionMode(gos) !== undefined;\r\n}\r\n\r\nexport function _isGetRowHeightFunction(gos: GridOptionsService): boolean {\r\n    return typeof gos.get('getRowHeight') === 'function';\r\n}\r\n\r\nexport function _shouldMaintainColumnOrder(gos: GridOptionsService, isPivotColumns: boolean): boolean {\r\n    if (isPivotColumns) {\r\n        return !gos.get('enableStrictPivotColumnOrder');\r\n    }\r\n    return gos.get('maintainColumnOrder');\r\n}\r\n\r\nexport function _getRowHeightForNode(\r\n    beans: BeanCollection,\r\n    rowNode: IRowNode,\r\n    allowEstimate = false,\r\n    defaultRowHeight?: number\r\n): { height: number; estimated: boolean } {\r\n    const { gos, environment } = beans;\r\n    if (defaultRowHeight == null) {\r\n        defaultRowHeight = environment.getDefaultRowHeight();\r\n    }\r\n\r\n    // check the function first, in case use set both function and\r\n    // number, when using virtual pagination then function can be\r\n    // used for pinned rows and the number for the body rows.\r\n\r\n    if (_isGetRowHeightFunction(gos)) {\r\n        if (allowEstimate) {\r\n            return { height: defaultRowHeight, estimated: true };\r\n        }\r\n\r\n        const params: WithoutGridCommon<RowHeightParams> = {\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n        };\r\n\r\n        const height = gos.getCallback('getRowHeight')!(params);\r\n\r\n        if (isNumeric(height)) {\r\n            if (height === 0) {\r\n                _warn(23);\r\n            }\r\n            return { height: Math.max(1, height), estimated: false };\r\n        }\r\n    }\r\n\r\n    if (rowNode.detail && gos.get('masterDetail')) {\r\n        return getMasterDetailRowHeight(gos);\r\n    }\r\n\r\n    const gridOptionsRowHeight = gos.get('rowHeight');\r\n\r\n    const rowHeight = gridOptionsRowHeight && isNumeric(gridOptionsRowHeight) ? gridOptionsRowHeight : defaultRowHeight;\r\n\r\n    return { height: rowHeight, estimated: false };\r\n}\r\n\r\nfunction getMasterDetailRowHeight(gos: GridOptionsService): { height: number; estimated: boolean } {\r\n    // if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,\r\n    // as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height\r\n    // (due to auto height) which looks bad, especially if doing row animation.\r\n    if (gos.get('detailRowAutoHeight')) {\r\n        return { height: 1, estimated: false };\r\n    }\r\n\r\n    const defaultRowHeight = gos.get('detailRowHeight');\r\n\r\n    if (isNumeric(defaultRowHeight)) {\r\n        return { height: defaultRowHeight, estimated: false };\r\n    }\r\n\r\n    return { height: 300, estimated: false };\r\n}\r\n\r\n// we don't allow dynamic row height for virtual paging\r\nexport function _getRowHeightAsNumber(beans: BeanCollection): number {\r\n    const { environment, gos } = beans;\r\n    const gridOptionsRowHeight = gos.get('rowHeight');\r\n    if (!gridOptionsRowHeight || _missing(gridOptionsRowHeight)) {\r\n        return environment.getDefaultRowHeight();\r\n    }\r\n\r\n    const rowHeight = environment.refreshRowHeightVariable();\r\n\r\n    if (rowHeight !== -1) {\r\n        return rowHeight;\r\n    }\r\n\r\n    _warn(24);\r\n    return environment.getDefaultRowHeight();\r\n}\r\n\r\nfunction isNumeric(value: any): value is number {\r\n    return !isNaN(value) && typeof value === 'number' && isFinite(value);\r\n}\r\n\r\n// returns the dom data, or undefined if not found\r\nexport function _getDomData(gos: GridOptionsService, element: Node | null, key: string): any {\r\n    const domData = (element as any)[gos.getDomDataKey()];\r\n\r\n    return domData ? domData[key] : undefined;\r\n}\r\n\r\nexport function _setDomData(gos: GridOptionsService, element: Element, key: string, value: any): any {\r\n    const domDataKey = gos.getDomDataKey();\r\n    let domData = (element as any)[domDataKey];\r\n\r\n    if (_missing(domData)) {\r\n        domData = {};\r\n        (element as any)[domDataKey] = domData;\r\n    }\r\n    domData[key] = value;\r\n}\r\n\r\nexport function _getDocument(beans: BeanCollection): Document {\r\n    // if user is providing document, we use the users one,\r\n    // otherwise we use the document on the global namespace.\r\n    const { gos, eGridDiv } = beans;\r\n    let result: Document | null = null;\r\n    const gridOptionsGetDocument = gos.get('getDocument');\r\n    if (gridOptionsGetDocument && _exists(gridOptionsGetDocument)) {\r\n        result = gridOptionsGetDocument();\r\n    } else if (eGridDiv) {\r\n        result = eGridDiv.ownerDocument;\r\n    }\r\n\r\n    if (result && _exists(result)) {\r\n        return result;\r\n    }\r\n\r\n    return document;\r\n}\r\n\r\nexport function _getWindow(beans: BeanCollection) {\r\n    const eDocument = _getDocument(beans);\r\n    return eDocument.defaultView || window;\r\n}\r\n\r\nexport function _getRootNode(beans: BeanCollection): Document | ShadowRoot {\r\n    return beans.eGridDiv.getRootNode() as Document | ShadowRoot;\r\n}\r\n\r\nexport function _getActiveDomElement(beans: BeanCollection): Element | null {\r\n    return _getRootNode(beans).activeElement;\r\n}\r\n\r\nexport function _getPageBody(beans: BeanCollection): HTMLElement | ShadowRoot {\r\n    let rootNode: Document | ShadowRoot | HTMLElement | null = null;\r\n    let targetEl: HTMLElement | ShadowRoot | null = null;\r\n\r\n    try {\r\n        rootNode = _getDocument(beans).fullscreenElement as HTMLElement;\r\n    } catch (e) {\r\n        // some environments like SalesForce will throw errors\r\n        // simply by trying to read the fullscreenElement property\r\n    } finally {\r\n        if (!rootNode) {\r\n            rootNode = _getRootNode(beans);\r\n        }\r\n        const body = rootNode.querySelector('body');\r\n        if (body) {\r\n            targetEl = body;\r\n        } else if (rootNode instanceof ShadowRoot) {\r\n            targetEl = rootNode;\r\n        } else if (rootNode instanceof Document) {\r\n            targetEl = rootNode?.documentElement;\r\n        } else {\r\n            targetEl = rootNode;\r\n        }\r\n    }\r\n\r\n    return targetEl;\r\n}\r\n\r\nfunction _getBodyWidth(beans: BeanCollection): number {\r\n    const body = _getPageBody(beans) as HTMLElement;\r\n    return body?.clientWidth ?? (window.innerHeight || -1);\r\n}\r\n\r\nfunction _getBodyHeight(beans: BeanCollection): number {\r\n    const body = _getPageBody(beans) as HTMLElement;\r\n    return body?.clientHeight ?? (window.innerHeight || -1);\r\n}\r\n\r\nexport function _anchorElementToMouseMoveEvent(\r\n    element: HTMLElement,\r\n    mouseMoveEvent: MouseEvent | Touch,\r\n    beans: BeanCollection\r\n): void {\r\n    const eRect = element.getBoundingClientRect();\r\n    const height = eRect.height;\r\n\r\n    const browserWidth = _getBodyWidth(beans) - 2; // 2px for 1px borderLeft and 1px borderRight\r\n    const browserHeight = _getBodyHeight(beans) - 2; // 2px for 1px borderTop and 1px borderBottom\r\n\r\n    const offsetParent = element.offsetParent;\r\n\r\n    if (!offsetParent) {\r\n        return;\r\n    }\r\n\r\n    const offsetParentSize = _getElementRectWithOffset(element.offsetParent as HTMLElement);\r\n\r\n    const { clientY, clientX } = mouseMoveEvent;\r\n\r\n    let top = clientY - offsetParentSize.top - height / 2;\r\n    let left = clientX - offsetParentSize.left - 10;\r\n\r\n    const eDocument = _getDocument(beans);\r\n    const win = eDocument.defaultView || window;\r\n    const windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;\r\n    const windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;\r\n\r\n    // check if the drag and drop image component is not positioned outside of the browser\r\n    if (browserWidth > 0 && left + element.clientWidth > browserWidth + windowScrollX) {\r\n        left = browserWidth + windowScrollX - element.clientWidth;\r\n    }\r\n\r\n    if (left < 0) {\r\n        left = 0;\r\n    }\r\n\r\n    if (browserHeight > 0 && top + element.clientHeight > browserHeight + windowScrollY) {\r\n        top = browserHeight + windowScrollY - element.clientHeight;\r\n    }\r\n\r\n    if (top < 0) {\r\n        top = 0;\r\n    }\r\n\r\n    element.style.left = `${left}px`;\r\n    element.style.top = `${top}px`;\r\n}\r\n\r\nexport function _isNothingFocused(beans: BeanCollection): boolean {\r\n    const eDocument = _getDocument(beans);\r\n    const activeEl = _getActiveDomElement(beans);\r\n\r\n    return activeEl === null || activeEl === eDocument.body;\r\n}\r\n\r\nexport function _isAnimateRows(gos: GridOptionsService) {\r\n    // never allow animating if enforcing the row order\r\n    if (gos.get('ensureDomOrder')) {\r\n        return false;\r\n    }\r\n\r\n    return gos.get('animateRows');\r\n}\r\n\r\nexport function _isGroupRowsSticky(gos: GridOptionsService): boolean {\r\n    if (gos.get('paginateChildRows') || gos.get('groupHideOpenParents') || _isDomLayout(gos, 'print')) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function _isColumnsSortingCoupledToGroup(gos: GridOptionsService): boolean {\r\n    const autoGroupColumnDef = gos.get('autoGroupColumnDef');\r\n    return !autoGroupColumnDef?.comparator && !gos.get('treeData');\r\n}\r\n\r\nexport function _getGroupAggFiltering(\r\n    gos: GridOptionsService\r\n): ((params: WithoutGridCommon<GetGroupAggFilteringParams>) => boolean) | undefined {\r\n    const userValue = gos.get('groupAggFiltering');\r\n\r\n    if (typeof userValue === 'function') {\r\n        return gos.getCallback('groupAggFiltering' as any) as any;\r\n    }\r\n\r\n    if (userValue === true) {\r\n        return () => true;\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function _getGrandTotalRow(gos: GridOptionsService): 'top' | 'bottom' | undefined {\r\n    return gos.get('grandTotalRow');\r\n}\r\n\r\nexport function _getGroupTotalRowCallback(\r\n    gos: GridOptionsService\r\n): (params: WithoutGridCommon<GetGroupIncludeFooterParams>) => 'top' | 'bottom' | undefined {\r\n    const userValue = gos.get('groupTotalRow');\r\n\r\n    if (typeof userValue === 'function') {\r\n        return gos.getCallback('groupTotalRow' as any) as any;\r\n    }\r\n\r\n    return () => userValue ?? undefined;\r\n}\r\n\r\nexport function _isGroupMultiAutoColumn(gos: GridOptionsService) {\r\n    if (gos.exists('groupDisplayType')) {\r\n        return gos.get('groupDisplayType') === 'multipleColumns';\r\n    }\r\n    // if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work\r\n    return gos.get('groupHideOpenParents');\r\n}\r\n\r\nexport function _isGroupUseEntireRow(gos: GridOptionsService, pivotMode: boolean): boolean {\r\n    // we never allow groupDisplayType = 'groupRows' if in pivot mode, otherwise we won't see the pivot values.\r\n    if (pivotMode) {\r\n        return false;\r\n    }\r\n\r\n    return gos.get('groupDisplayType') === 'groupRows';\r\n}\r\n\r\n// AG-9259 Can't use `WrappedCallback<'getRowId', ...>` here because of a strange typescript bug\r\nexport function _getRowIdCallback<TData = any>(\r\n    gos: GridOptionsService\r\n):\r\n    | ((\r\n          params: WithoutGridCommon<ExtractParamsFromCallback<GetRowIdFunc<TData>>>\r\n      ) => ExtractReturnTypeFromCallback<GetRowIdFunc<TData>>)\r\n    | undefined {\r\n    const getRowId = gos.getCallback('getRowId');\r\n\r\n    if (getRowId === undefined) {\r\n        return getRowId;\r\n    }\r\n\r\n    return (params) => {\r\n        let id = getRowId(params);\r\n\r\n        if (typeof id !== 'string') {\r\n            _warn(25, { id });\r\n            id = String(id);\r\n        }\r\n\r\n        return id;\r\n    };\r\n}\r\n\r\nexport function _canSkipShowingRowGroup(gos: GridOptionsService, node: RowNode): boolean {\r\n    const isSkippingGroups = gos.get('groupHideParentOfSingleChild');\r\n    if (isSkippingGroups === true) {\r\n        return true;\r\n    }\r\n    if (isSkippingGroups === 'leafGroupsOnly' && node.leafGroup) {\r\n        return true;\r\n    }\r\n    // deprecated\r\n    if (gos.get('groupRemoveSingleChildren')) {\r\n        return true;\r\n    }\r\n    if (gos.get('groupRemoveLowestSingleChildren') && node.leafGroup) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function _getMaxConcurrentDatasourceRequests(gos: GridOptionsService): number | undefined {\r\n    const res = gos.get('maxConcurrentDatasourceRequests');\r\n    // negative number, eg -1, means no max restriction\r\n    return res > 0 ? res : undefined;\r\n}\r\n\r\n/** Get the selection checkbox configuration. Defaults to enabled. */\r\nexport function _shouldUpdateColVisibilityAfterGroup(gos: GridOptionsService, isGrouped: boolean): boolean {\r\n    const preventVisibilityChanges = gos.get('suppressGroupChangesColumnVisibility');\r\n    if (preventVisibilityChanges === true) {\r\n        return false;\r\n    }\r\n    if (isGrouped && preventVisibilityChanges === 'suppressHideOnGroup') {\r\n        return false;\r\n    }\r\n    if (!isGrouped && preventVisibilityChanges === 'suppressShowOnUngroup') {\r\n        return false;\r\n    }\r\n\r\n    const legacySuppressOnGroup = gos.get('suppressRowGroupHidesColumns');\r\n    if (isGrouped && legacySuppressOnGroup === true) {\r\n        return false;\r\n    }\r\n\r\n    const legacySuppressOnUngroup = gos.get('suppressMakeColumnVisibleAfterUnGroup');\r\n    if (!isGrouped && legacySuppressOnUngroup === true) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/** Get the selection checkbox configuration. Defaults to enabled. */\r\nexport function _getCheckboxes(\r\n    selection: RowSelectionOptions\r\n): NonNullable<SingleRowSelectionOptions['checkboxes']> | NonNullable<MultiRowSelectionOptions['checkboxes']> {\r\n    return selection?.checkboxes ?? true;\r\n}\r\n\r\n/** Get the header checkbox configuration. Defaults to enabled in `multiRow`, otherwise disabled. */\r\nexport function _getHeaderCheckbox(selection: RowSelectionOptions): boolean {\r\n    return selection?.mode === 'multiRow' && (selection.headerCheckbox ?? true);\r\n}\r\n\r\nexport function _getCheckboxLocation(rowSelection: GridOptions['rowSelection']): CheckboxLocation | undefined {\r\n    if (typeof rowSelection !== 'object') {\r\n        return undefined;\r\n    }\r\n    return rowSelection.checkboxLocation ?? 'selectionColumn';\r\n}\r\n\r\n/** Get the display configuration for disabled checkboxes. Defaults to displaying disabled checkboxes. */\r\nexport function _getHideDisabledCheckboxes(selection: RowSelectionOptions): boolean {\r\n    return selection?.hideDisabledCheckboxes ?? false;\r\n}\r\n\r\nexport function _isUsingNewRowSelectionAPI(gos: GridOptionsService): boolean {\r\n    const rowSelection = gos.get('rowSelection');\r\n    return typeof rowSelection !== 'string';\r\n}\r\n\r\nexport function _isUsingNewCellSelectionAPI(gos: GridOptionsService): boolean {\r\n    return gos.get('cellSelection') !== undefined;\r\n}\r\n\r\nexport function _getSuppressMultiRanges(gos: GridOptionsService): boolean {\r\n    const selection = gos.get('cellSelection');\r\n    const useNewAPI = selection !== undefined;\r\n\r\n    if (!useNewAPI) {\r\n        return gos.get('suppressMultiRangeSelection');\r\n    }\r\n\r\n    return typeof selection !== 'boolean' ? selection?.suppressMultiRanges ?? false : false;\r\n}\r\n\r\nexport function _isCellSelectionEnabled(gos: GridOptionsService): boolean {\r\n    const selection = gos.get('cellSelection');\r\n    const useNewAPI = selection !== undefined;\r\n\r\n    return useNewAPI ? !!selection : gos.get('enableRangeSelection');\r\n}\r\n\r\nexport function _getFillHandle(gos: GridOptionsService): FillHandleOptions | undefined {\r\n    const selection = gos.get('cellSelection');\r\n    const useNewAPI = selection !== undefined;\r\n\r\n    if (!useNewAPI) {\r\n        return {\r\n            mode: 'fill',\r\n            setFillValue: gos.get('fillOperation'),\r\n            direction: gos.get('fillHandleDirection'),\r\n            suppressClearOnFillReduction: gos.get('suppressClearOnFillReduction'),\r\n        };\r\n    }\r\n\r\n    return typeof selection !== 'boolean' && selection.handle?.mode === 'fill' ? selection.handle : undefined;\r\n}\r\n\r\nfunction _getEnableClickSelection(gos: GridOptionsService): NonNullable<RowSelectionOptions['enableClickSelection']> {\r\n    const selection = gos.get('rowSelection') ?? 'single';\r\n\r\n    if (typeof selection === 'string') {\r\n        const suppressRowClickSelection = gos.get('suppressRowClickSelection');\r\n        const suppressRowDeselection = gos.get('suppressRowDeselection');\r\n\r\n        if (suppressRowClickSelection && suppressRowDeselection) {\r\n            return false;\r\n        } else if (suppressRowClickSelection) {\r\n            return 'enableDeselection';\r\n        } else if (suppressRowDeselection) {\r\n            return 'enableSelection';\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return selection.mode === 'singleRow' || selection.mode === 'multiRow'\r\n        ? selection.enableClickSelection ?? false\r\n        : false;\r\n}\r\n\r\nexport function _getEnableSelection(gos: GridOptionsService): boolean {\r\n    const enableClickSelection = _getEnableClickSelection(gos);\r\n    return enableClickSelection === true || enableClickSelection === 'enableSelection';\r\n}\r\n\r\nexport function _getEnableDeselection(gos: GridOptionsService): boolean {\r\n    const enableClickSelection = _getEnableClickSelection(gos);\r\n    return enableClickSelection === true || enableClickSelection === 'enableDeselection';\r\n}\r\n\r\nexport function _getIsRowSelectable(gos: GridOptionsService): IsRowSelectable | undefined {\r\n    const selection = gos.get('rowSelection');\r\n\r\n    if (typeof selection === 'string') {\r\n        return gos.get('isRowSelectable');\r\n    }\r\n\r\n    return selection?.isRowSelectable;\r\n}\r\n\r\nexport function _getRowSelectionMode(gos: GridOptionsService): RowSelectionMode | undefined {\r\n    const selection = gos.get('rowSelection');\r\n\r\n    if (typeof selection === 'string') {\r\n        switch (selection) {\r\n            case 'multiple':\r\n                return 'multiRow';\r\n            case 'single':\r\n                return 'singleRow';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    // only permit expected values for selection mode\r\n    switch (selection?.mode) {\r\n        case 'multiRow':\r\n        case 'singleRow':\r\n            return selection.mode;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport function _isMultiRowSelection(gos: GridOptionsService): boolean {\r\n    const mode = _getRowSelectionMode(gos);\r\n    return mode === 'multiRow';\r\n}\r\n\r\nexport function _getEnableSelectionWithoutKeys(gos: GridOptionsService): boolean {\r\n    const selection = gos.get('rowSelection');\r\n\r\n    if (typeof selection === 'string') {\r\n        return gos.get('rowMultiSelectWithClick');\r\n    }\r\n\r\n    return selection?.enableSelectionWithoutKeys ?? false;\r\n}\r\n\r\nexport function _getGroupSelection(gos: GridOptionsService): GroupSelectionMode | undefined {\r\n    const selection = gos.get('rowSelection');\r\n\r\n    if (typeof selection === 'string') {\r\n        const groupSelectsChildren = gos.get('groupSelectsChildren');\r\n        const groupSelectsFiltered = gos.get('groupSelectsFiltered');\r\n\r\n        if (groupSelectsChildren && groupSelectsFiltered) {\r\n            return 'filteredDescendants';\r\n        } else if (groupSelectsChildren) {\r\n            return 'descendants';\r\n        } else {\r\n            return 'self';\r\n        }\r\n    }\r\n\r\n    return selection?.mode === 'multiRow' ? selection.groupSelects : undefined;\r\n}\r\n\r\nexport function _getSelectAll(gos: GridOptionsService, defaultValue: boolean): SelectAllMode | undefined;\r\nexport function _getSelectAll(gos: GridOptionsService): SelectAllMode;\r\nexport function _getSelectAll(gos: GridOptionsService, defaultValue = true): SelectAllMode | undefined {\r\n    const rowSelection = gos.get('rowSelection');\r\n    if (typeof rowSelection !== 'object') {\r\n        return defaultValue ? 'all' : undefined;\r\n    }\r\n    return rowSelection.mode === 'multiRow' ? rowSelection.selectAll : 'all';\r\n}\r\n\r\nexport function _getGroupSelectsDescendants(gos: GridOptionsService): boolean {\r\n    const groupSelection = _getGroupSelection(gos);\r\n    return groupSelection === 'descendants' || groupSelection === 'filteredDescendants';\r\n}\r\n\r\nexport function _isSetFilterByDefault(gos: GridOptionsService): boolean {\r\n    return gos.isModuleRegistered('SetFilter') && !gos.get('suppressSetFilterByDefault');\r\n}\r\n\r\nexport function _isLegacyMenuEnabled(gos: GridOptionsService): boolean {\r\n    return gos.get('columnMenu') === 'legacy';\r\n}\r\n\r\nexport function _isColumnMenuAnchoringEnabled(gos: GridOptionsService): boolean {\r\n    return !_isLegacyMenuEnabled(gos);\r\n}\r\n\r\nexport function _areAdditionalColumnMenuItemsEnabled(gos: GridOptionsService): boolean {\r\n    return gos.get('columnMenu') === 'new';\r\n}\r\n\r\nexport function _getCallbackForEvent(eventName: string): string {\r\n    if (!eventName || eventName.length < 2) {\r\n        return eventName;\r\n    }\r\n    return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\r\n}\r\n\r\n/** Combines component props / attributes with the provided gridOptions returning a new combined gridOptions object */\r\nexport function _combineAttributesAndGridOptions(\r\n    gridOptions: GridOptions | undefined,\r\n    component: any,\r\n    gridOptionsKeys: string[]\r\n): GridOptions {\r\n    // create empty grid options if none were passed\r\n    if (typeof gridOptions !== 'object') {\r\n        gridOptions = {} as GridOptions;\r\n    }\r\n    // shallow copy (so we don't change the provided object)\r\n    const mergedOptions = { ...gridOptions } as any;\r\n    // Loop through component props, if they are not undefined and a valid gridOption copy to gridOptions\r\n    gridOptionsKeys.forEach((key) => {\r\n        const value = component[key];\r\n        if (typeof value !== 'undefined') {\r\n            mergedOptions[key] = value;\r\n        }\r\n    });\r\n    return mergedOptions;\r\n}\r\n\r\nexport function _processOnChange(changes: any, api: GridApi): void {\r\n    if (!changes) {\r\n        return;\r\n    }\r\n\r\n    const gridChanges: Record<string, any> = {};\r\n    let hasChanges = false;\r\n    Object.keys(changes).forEach((key) => {\r\n        gridChanges[key] = changes[key];\r\n        hasChanges = true;\r\n    });\r\n\r\n    if (!hasChanges) {\r\n        return;\r\n    }\r\n\r\n    const internalUpdateEvent: WithoutGridCommon<GridOptionsChangedEvent> = {\r\n        type: 'gridOptionsChanged',\r\n        options: gridChanges,\r\n    };\r\n    api.dispatchEvent(internalUpdateEvent);\r\n\r\n    // copy gridChanges into an event for dispatch\r\n    const event: WithoutGridCommon<ComponentStateChangedEvent> = {\r\n        type: 'componentStateChanged',\r\n        ...gridChanges,\r\n    };\r\n\r\n    api.dispatchEvent(event);\r\n}\r\n", "import type { GridOptionsService } from '../gridOptionsService';\r\nimport { _getDomData } from '../gridOptionsUtils';\r\nimport type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\r\n\r\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\r\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel', 'scroll'];\r\nconst NON_PASSIVE_EVENTS = ['wheel'];\r\nconst supports: { [key: string]: boolean } = {};\r\n\r\n/**\r\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\r\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\r\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\r\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\r\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\r\n * but we still let the event pass back to the body.\r\n * @param {Event} event\r\n */\r\nexport function _stopPropagationForAgGrid(event: Event): void {\r\n    (event as any)[AG_GRID_STOP_PROPAGATION] = true;\r\n}\r\n\r\nexport function _isStopPropagationForAgGrid(event: Event): boolean {\r\n    return (event as any)[AG_GRID_STOP_PROPAGATION] === true;\r\n}\r\n\r\nexport const _isEventSupported = (() => {\r\n    const tags = {\r\n        select: 'input',\r\n        change: 'input',\r\n        submit: 'form',\r\n        reset: 'form',\r\n        error: 'img',\r\n        load: 'img',\r\n        abort: 'img',\r\n    } as any;\r\n\r\n    const eventChecker = (eventName: any) => {\r\n        if (typeof supports[eventName] === 'boolean') {\r\n            return supports[eventName];\r\n        }\r\n\r\n        const el = document.createElement(tags[eventName] || 'div');\r\n        eventName = 'on' + eventName;\r\n\r\n        return (supports[eventName] = eventName in el);\r\n    };\r\n\r\n    return eventChecker;\r\n})();\r\n\r\nexport function _getCtrlForEventTarget<T>(\r\n    gos: GridOptionsService,\r\n    eventTarget: EventTarget | null,\r\n    type: string\r\n): T | null {\r\n    let sourceElement = eventTarget as HTMLElement;\r\n\r\n    while (sourceElement) {\r\n        const renderedComp = _getDomData(gos, sourceElement, type);\r\n\r\n        if (renderedComp) {\r\n            return renderedComp as T;\r\n        }\r\n\r\n        sourceElement = sourceElement.parentElement!;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function _isElementInEventPath(element: HTMLElement, event: Event): boolean {\r\n    if (!event || !element) {\r\n        return false;\r\n    }\r\n\r\n    return _getEventPath(event).indexOf(element) >= 0;\r\n}\r\n\r\nexport function _createEventPath(event: { target: EventTarget }): EventTarget[] {\r\n    const res: EventTarget[] = [];\r\n    let pointer: any = event.target;\r\n\r\n    while (pointer) {\r\n        res.push(pointer);\r\n        pointer = pointer.parentElement;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Gets the path for a browser Event or from the target on an AG Grid Event\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\r\n * @param {Event| { target: EventTarget }} event\r\n * @returns {EventTarget[]}\r\n */\r\nexport function _getEventPath(event: Event | { target: EventTarget }): EventTarget[] {\r\n    // This can be called with either a browser event or an AG Grid Event that has a target property.\r\n    const eventNoType = event as any;\r\n\r\n    if (eventNoType.path) {\r\n        return eventNoType.path;\r\n    }\r\n\r\n    if (eventNoType.composedPath) {\r\n        return eventNoType.composedPath();\r\n    }\r\n\r\n    // If this is an AG Grid event build the path ourselves\r\n    return _createEventPath(eventNoType);\r\n}\r\n\r\nexport function _addSafePassiveEventListener(\r\n    frameworkOverrides: IFrameworkOverrides,\r\n    eElement: HTMLElement,\r\n    event: string,\r\n    listener: (event?: any) => void\r\n) {\r\n    const passive = getPassiveStateForEvent(event);\r\n\r\n    let options: { passive: boolean } | undefined;\r\n\r\n    if (passive != null) {\r\n        options = { passive };\r\n    }\r\n\r\n    // this check is here for certain scenarios where I believe the user must be destroying\r\n    // the grid somehow but continuing for it to be used\r\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\r\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\r\n    }\r\n}\r\n\r\nexport const getPassiveStateForEvent = (event: string): boolean | undefined => {\r\n    const isPassive = PASSIVE_EVENTS.includes(event);\r\n    const isNonPassive = NON_PASSIVE_EVENTS.includes(event);\r\n\r\n    if (isPassive) {\r\n        return true;\r\n    }\r\n\r\n    if (isNonPassive) {\r\n        return false;\r\n    }\r\n};\r\n", "import type { GridOptions } from '../entities/gridOptions';\r\nimport type { EventService } from '../eventService';\r\nimport type { AgEventType } from '../eventTypes';\r\nimport type { AgEvent, AgEventListener, AgEventTypeParams } from '../events';\r\nimport type {\r\n    GridOptionsService,\r\n    PropertyChangedEvent,\r\n    PropertyChangedListener,\r\n    PropertyValueChangedEvent,\r\n    PropertyValueChangedListener,\r\n} from '../gridOptionsService';\r\nimport type { IEventEmitter } from '../interfaces/iEventEmitter';\r\nimport { LocalEventService } from '../localEventService';\r\nimport type { LocaleTextFunc } from '../misc/locale/localeUtils';\r\nimport { _getLocaleTextFunc } from '../misc/locale/localeUtils';\r\nimport { _addSafePassiveEventListener } from '../utils/event';\r\nimport type { Bean } from './bean';\r\nimport type { BeanCollection, Context } from './context';\r\nimport type { BaseBean } from './genericContext';\r\n\r\nexport type BeanStubEvent = 'destroyed';\r\nexport type EventOrDestroyed<TEventType extends string> = TEventType | BeanStubEvent;\r\n\r\ntype EventHandlers<TEventKey extends string, TEvent = any> = { [K in TEventKey]?: (event?: TEvent) => void };\r\n\r\ntype AgEventHandlers = { [K in AgEventType]?: (event: AgEventTypeParams[K]) => void };\r\n\r\nexport abstract class BeanStub<TEventType extends string = BeanStubEvent>\r\n    implements BaseBean<BeanCollection>, Bean, IEventEmitter<EventOrDestroyed<TEventType>>\r\n{\r\n    protected localEventService?: LocalEventService<EventOrDestroyed<TEventType>>;\r\n\r\n    private stubContext: Context; // not named context to allow children to use 'context' as a variable name\r\n    private destroyFunctions: (() => void)[] = [];\r\n    private destroyed = false;\r\n\r\n    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\r\n    // prevents vue from creating proxies for created objects and prevents identity related issues\r\n    public __v_skip = true;\r\n\r\n    protected beans: BeanCollection;\r\n    protected eventSvc: EventService;\r\n    protected gos: GridOptionsService;\r\n\r\n    public preWireBeans(beans: BeanCollection): void {\r\n        this.beans = beans;\r\n        this.stubContext = beans.context;\r\n        this.eventSvc = beans.eventSvc;\r\n        this.gos = beans.gos;\r\n    }\r\n\r\n    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\r\n    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\r\n    // points to a bean or component that was not properly disposed of.\r\n    // constructor() {\r\n    //     setTimeout(()=> {\r\n    //         if (this.isAlive()) {\r\n    //             let prototype: any = Object.getPrototypeOf(this);\r\n    //             const constructor: any = prototype.constructor;\r\n    //             const constructorString = constructor.toString();\r\n    //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\r\n    //             console.log('is alive ' + beanName);\r\n    //         }\r\n    //     }, 5000);\r\n    // }\r\n\r\n    public destroy(): void {\r\n        const { destroyFunctions } = this;\r\n        for (let i = 0; i < destroyFunctions.length; i++) {\r\n            destroyFunctions[i]();\r\n        }\r\n        destroyFunctions.length = 0;\r\n        this.destroyed = true;\r\n\r\n        // cast destroy type as we do not want to expose destroy event type to the dispatchLocalEvent method\r\n        // as no one else should be firing destroyed at the bean stub.\r\n        this.dispatchLocalEvent({ type: 'destroyed' } as { type: BeanStubEvent } as any);\r\n    }\r\n\r\n    // The typing of AgEventListener<any, any, any> is not ideal, but it's the best we can do at the moment to enable\r\n    // eventSvc to have the best typing at the expense of BeanStub local events\r\n    /** Add a local event listener against this BeanStub */\r\n    public addEventListener<T extends TEventType>(\r\n        eventType: T,\r\n        listener: AgEventListener<any, any, any>,\r\n        async?: boolean\r\n    ): void {\r\n        if (!this.localEventService) {\r\n            this.localEventService = new LocalEventService();\r\n        }\r\n        this.localEventService!.addEventListener(eventType, listener, async);\r\n    }\r\n\r\n    /** Remove a local event listener from this BeanStub */\r\n    public removeEventListener<T extends TEventType>(\r\n        eventType: T,\r\n        listener: AgEventListener<any, any, any>,\r\n        async?: boolean\r\n    ): void {\r\n        this.localEventService?.removeEventListener(eventType, listener, async);\r\n    }\r\n\r\n    public dispatchLocalEvent<TEvent extends AgEvent<TEventType>>(event: TEvent): void {\r\n        this.localEventService?.dispatchEvent(event);\r\n    }\r\n\r\n    public addManagedElementListeners<TEvent extends keyof HTMLElementEventMap>(\r\n        object: Element | Document | ShadowRoot,\r\n        handlers: EventHandlers<TEvent, HTMLElementEventMap[TEvent]>\r\n    ) {\r\n        return this._setupListeners<keyof HTMLElementEventMap>(object, handlers);\r\n    }\r\n    public addManagedEventListeners(handlers: AgEventHandlers) {\r\n        return this._setupListeners<AgEventType>(this.eventSvc, handlers);\r\n    }\r\n    public addManagedListeners<TEvent extends string>(object: IEventEmitter<TEvent>, handlers: EventHandlers<TEvent>) {\r\n        return this._setupListeners<TEvent>(object, handlers);\r\n    }\r\n\r\n    private _setupListeners<TEvent extends string>(\r\n        object: HTMLElement | IEventEmitter<TEvent>,\r\n        handlers: EventHandlers<TEvent>\r\n    ) {\r\n        const destroyFuncs: (() => null)[] = [];\r\n        for (const k of Object.keys(handlers)) {\r\n            const handler = handlers[k as TEvent];\r\n            if (handler) {\r\n                destroyFuncs.push(this._setupListener(object, k, handler));\r\n            }\r\n        }\r\n        return destroyFuncs;\r\n    }\r\n\r\n    private _setupListener<const T extends string>(\r\n        object: Window | HTMLElement | IEventEmitter<T>,\r\n        event: T,\r\n        listener: (event?: any) => void\r\n    ): () => null {\r\n        if (this.destroyed) {\r\n            return () => null;\r\n        }\r\n\r\n        if (object instanceof HTMLElement) {\r\n            _addSafePassiveEventListener(this.beans.frameworkOverrides, object, event, listener);\r\n        } else {\r\n            object.addEventListener(event, listener);\r\n        }\r\n\r\n        const destroyFunc: () => null = () => {\r\n            (object as any).removeEventListener(event, listener);\r\n            return null;\r\n        };\r\n\r\n        this.destroyFunctions.push(destroyFunc);\r\n\r\n        return () => {\r\n            destroyFunc();\r\n            // Only remove if manually called before bean is destroyed\r\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\r\n            return null;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Setup a managed property listener for the given GridOption property.\r\n     * However, stores the destroy function in the beanStub so that if this bean\r\n     * is a component the destroy function will be called when the component is destroyed\r\n     * as opposed to being cleaned up only when the GridOptionsService is destroyed.\r\n     */\r\n    private setupGridOptionListener<K extends keyof GridOptions>(\r\n        event: K,\r\n        listener: PropertyValueChangedListener<K>\r\n    ): () => null {\r\n        const { gos } = this;\r\n        gos.addPropertyEventListener(event, listener);\r\n        const destroyFunc: () => null = () => {\r\n            gos.removePropertyEventListener(event, listener);\r\n            return null;\r\n        };\r\n        this.destroyFunctions.push(destroyFunc);\r\n\r\n        return () => {\r\n            destroyFunc();\r\n            // Only remove if manually called before bean is destroyed\r\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\r\n            return null;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Setup a managed property listener for the given GridOption property.\r\n     * @param event GridOption property to listen to changes for.\r\n     * @param listener Listener to run when property value changes\r\n     */\r\n    public addManagedPropertyListener<K extends keyof GridOptions>(\r\n        event: K,\r\n        listener: PropertyValueChangedListener<K>\r\n    ): () => null {\r\n        if (this.destroyed) {\r\n            return () => null;\r\n        }\r\n\r\n        return this.setupGridOptionListener(event, listener);\r\n    }\r\n\r\n    private propertyListenerId = 0;\r\n    // Enable multiple grid properties to be updated together by the user but only trigger shared logic once.\r\n    // Closely related to logic in GridOptionsUtils.ts _processOnChange\r\n    private lastChangeSetIdLookup: Record<string, number> = {};\r\n    /**\r\n     * Setup managed property listeners for the given set of GridOption properties.\r\n     * The listener will be run if any of the property changes but will only run once if\r\n     * multiple of the properties change within the same framework lifecycle event.\r\n     * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.\r\n     * @param events Array of GridOption properties to listen for changes too.\r\n     * @param listener Shared listener to run if any of the properties change\r\n     */\r\n    public addManagedPropertyListeners(events: (keyof GridOptions)[], listener: PropertyChangedListener): void {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n\r\n        // Ensure each set of events can run for the same changeSetId\r\n        const eventsKey = events.join('-') + this.propertyListenerId++;\r\n\r\n        const wrappedListener = (event: PropertyValueChangedEvent<any>) => {\r\n            if (event.changeSet) {\r\n                // ChangeSet is only set when the property change is part of a group of changes from ComponentUtils\r\n                // Direct api calls should always be run as\r\n                if (event.changeSet && event.changeSet.id === this.lastChangeSetIdLookup[eventsKey]) {\r\n                    // Already run the listener for this set of prop changes so don't run again\r\n                    return;\r\n                }\r\n                this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;\r\n            }\r\n            // Don't expose the underlying event value changes to the group listener.\r\n            const propertiesChangeEvent: PropertyChangedEvent = {\r\n                type: 'gridPropertyChanged',\r\n                changeSet: event.changeSet,\r\n                source: event.source,\r\n            };\r\n            listener(propertiesChangeEvent);\r\n        };\r\n\r\n        events.forEach((event) => this.setupGridOptionListener(event, wrappedListener));\r\n    }\r\n\r\n    public isAlive = (): boolean => !this.destroyed;\r\n\r\n    public getLocaleTextFunc(): LocaleTextFunc {\r\n        return _getLocaleTextFunc(this.beans.localeSvc);\r\n    }\r\n\r\n    public addDestroyFunc(func: () => void): void {\r\n        // if we are already destroyed, we execute the func now\r\n        if (this.isAlive()) {\r\n            this.destroyFunctions.push(func);\r\n        } else {\r\n            func();\r\n        }\r\n    }\r\n\r\n    /** doesn't throw an error if `bean` is undefined */\r\n    public createOptionalManagedBean<T extends Bean | null | undefined>(bean: T, context?: Context): T | undefined {\r\n        return bean ? this.createManagedBean(bean, context) : undefined;\r\n    }\r\n\r\n    public createManagedBean<T extends Bean | null | undefined>(bean: T, context?: Context): T {\r\n        const res = this.createBean(bean, context);\r\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\r\n        return res;\r\n    }\r\n\r\n    public createBean<T extends Bean | null | undefined>(\r\n        bean: T,\r\n        context?: Context | null,\r\n        afterPreCreateCallback?: (bean: Bean) => void\r\n    ): T {\r\n        return (context || this.stubContext).createBean(bean, afterPreCreateCallback);\r\n    }\r\n\r\n    /**\r\n     * Destroys a bean and returns undefined to support destruction and clean up in a single line.\r\n     * this.dateComp = this.context.destroyBean(this.dateComp);\r\n     */\r\n    public destroyBean<T extends Bean | null | undefined>(bean: T, context?: Context): undefined {\r\n        return (context || this.stubContext).destroyBean(bean);\r\n    }\r\n\r\n    /**\r\n     * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.\r\n     * this.dateComps = this.context.destroyBeans(this.dateComps);\r\n     */\r\n    protected destroyBeans<T extends Bean | null | undefined>(beans: T[], context?: Context): T[] {\r\n        return (context || this.stubContext).destroyBeans(beans);\r\n    }\r\n}\r\n", "import { _exists } from './generic';\r\n\r\n// Prevents the risk of prototype pollution\r\nexport const SKIP_JS_BUILTINS = new Set<string>(['__proto__', 'constructor', 'prototype']);\r\n\r\nfunction _iterateObject<T>(\r\n    object: { [p: string]: T } | T[] | null | undefined,\r\n    callback: (key: string, value: T) => void\r\n) {\r\n    if (object == null) {\r\n        return;\r\n    }\r\n\r\n    if (Array.isArray(object)) {\r\n        for (let i = 0; i < object.length; i++) {\r\n            callback(i.toString(), object[i]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    for (const [key, value] of Object.entries<T>(object)) {\r\n        callback(key, value);\r\n    }\r\n}\r\n\r\nexport function _mergeDeep(dest: any, source: any, copyUndefined = true, makeCopyOfSimpleObjects = false): void {\r\n    if (!_exists(source)) {\r\n        return;\r\n    }\r\n\r\n    _iterateObject(source, (key: string, sourceValue: any) => {\r\n        if (SKIP_JS_BUILTINS.has(key)) {\r\n            return;\r\n        }\r\n\r\n        let destValue: any = dest[key];\r\n\r\n        if (destValue === sourceValue) {\r\n            return;\r\n        }\r\n\r\n        // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef\r\n        // and Column Types) would result in params getting shared between objects.\r\n        // by putting an empty value into destValue first, it means we end up copying over values from\r\n        // the source object, rather than just copying in the source object in it's entirety.\r\n        if (makeCopyOfSimpleObjects) {\r\n            const objectIsDueToBeCopied = destValue == null && sourceValue != null;\r\n\r\n            if (objectIsDueToBeCopied) {\r\n                // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed\r\n                // to a Class instance (such as api instance).\r\n                const doNotCopyAsSourceIsSimpleObject =\r\n                    typeof sourceValue === 'object' && sourceValue.constructor === Object;\r\n\r\n                if (doNotCopyAsSourceIsSimpleObject) {\r\n                    destValue = {};\r\n                    dest[key] = destValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isNonNullObject(sourceValue) && _isNonNullObject(destValue) && !Array.isArray(destValue)) {\r\n            _mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);\r\n        } else if (copyUndefined || sourceValue !== undefined) {\r\n            dest[key] = sourceValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function _getValueUsingField(data: any, field: string, fieldContainsDots: boolean): any {\r\n    if (!field || !data) {\r\n        return;\r\n    }\r\n\r\n    // if no '.', then it's not a deep value\r\n    if (!fieldContainsDots) {\r\n        return data[field];\r\n    }\r\n\r\n    // otherwise it is a deep value, so need to dig for it\r\n    const fields = field.split('.');\r\n    let currentObject = data;\r\n\r\n    for (let i = 0; i < fields.length; i++) {\r\n        if (currentObject == null) {\r\n            return undefined;\r\n        }\r\n        currentObject = currentObject[fields[i]];\r\n    }\r\n\r\n    return currentObject;\r\n}\r\n\r\nfunction _isNonNullObject(value: any): boolean {\r\n    return typeof value === 'object' && value !== null;\r\n}\r\n", "import type { ColumnState } from '../columns/columnStateUtils';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgEvent, ColumnEvent, ColumnEventType } from '../events';\r\nimport type {\r\n    Column,\r\n    ColumnEventName,\r\n    ColumnGroup,\r\n    ColumnGroupShowType,\r\n    ColumnHighlightPosition,\r\n    ColumnInstanceId,\r\n    ColumnPinnedType,\r\n    HeaderColumnId,\r\n    ProvidedColumnGroup,\r\n} from '../interfaces/iColumn';\r\nimport type { IFrameworkEventListenerService } from '../interfaces/iFrameworkEventListenerService';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport { LocalEventService } from '../localEventService';\r\nimport { _exists, _missing } from '../utils/generic';\r\nimport { _mergeDeep } from '../utils/object';\r\nimport { _warn } from '../validation/logging';\r\nimport type { AgColumnGroup } from './agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from './agProvidedColumnGroup';\r\nimport type {\r\n    AbstractColDef,\r\n    BaseColDefParams,\r\n    ColDef,\r\n    ColSpanParams,\r\n    ColumnFunctionCallbackParams,\r\n    IAggFunc,\r\n    RowSpanParams,\r\n    SortDirection,\r\n} from './colDef';\r\n\r\nconst COL_DEF_DEFAULTS: Partial<ColDef> = {\r\n    resizable: true,\r\n    sortable: true,\r\n};\r\n\r\nlet instanceIdSequence = 0;\r\nexport function getNextColInstanceId(): ColumnInstanceId {\r\n    return instanceIdSequence++ as ColumnInstanceId;\r\n}\r\n\r\nexport function isColumn(col: Column | ColumnGroup | ProvidedColumnGroup): col is AgColumn {\r\n    return col instanceof AgColumn;\r\n}\r\n\r\n// Wrapper around a user provide column definition. The grid treats the column definition as ready only.\r\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\r\n// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can\r\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\r\n// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup\r\n// can only appear in OriginalColumn tree).\r\nexport class AgColumn<TValue = any> extends BeanStub<ColumnEventName> implements Column {\r\n    public readonly isColumn = true as const;\r\n\r\n    private frameworkEventListenerService?: IFrameworkEventListenerService<any, any>;\r\n\r\n    // used by React (and possibly other frameworks) as key for rendering. also used to\r\n    // identify old vs new columns for destroying cols when no longer used.\r\n    private instanceId = getNextColInstanceId();\r\n\r\n    private actualWidth: any;\r\n\r\n    // The measured height of this column's header when autoHeaderHeight is enabled\r\n    private autoHeaderHeight: number | null = null;\r\n\r\n    private visible: any;\r\n    public pinned: ColumnPinnedType;\r\n    private left: number | null;\r\n    private oldLeft: number | null;\r\n    public aggFunc: string | IAggFunc | null | undefined;\r\n    public sort: SortDirection | undefined;\r\n    public sortIndex: number | null | undefined;\r\n    public moving = false;\r\n    public menuVisible = false;\r\n    public highlighted: ColumnHighlightPosition | null;\r\n\r\n    private lastLeftPinned: boolean = false;\r\n    private firstRightPinned: boolean = false;\r\n\r\n    public minWidth: number;\r\n    private maxWidth: number;\r\n\r\n    public filterActive = false;\r\n\r\n    private readonly colEventSvc: LocalEventService<ColumnEventName> = new LocalEventService();\r\n\r\n    private fieldContainsDots: boolean;\r\n    private tooltipFieldContainsDots: boolean;\r\n    public tooltipEnabled = false;\r\n\r\n    public rowGroupActive = false;\r\n    public pivotActive = false;\r\n    public aggregationActive = false;\r\n    public flex: number | null = null;\r\n\r\n    public parent: AgColumnGroup | null;\r\n    public originalParent: AgProvidedColumnGroup | null;\r\n\r\n    constructor(\r\n        public colDef: ColDef<any, TValue>,\r\n        // We do NOT use this anywhere, we just keep a reference. this is to check object equivalence\r\n        // when the user provides an updated list of columns - so we can check if we have a column already\r\n        // existing for a col def. we cannot use the this.colDef as that is the result of a merge.\r\n        // This is used in ColumnFactory\r\n        public userProvidedColDef: ColDef<any, TValue> | null,\r\n        private readonly colId: string,\r\n        private readonly primary: boolean\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public getInstanceId(): ColumnInstanceId {\r\n        return this.instanceId;\r\n    }\r\n\r\n    private setState(): void {\r\n        const {\r\n            colDef,\r\n            beans: { sortSvc, pinnedCols, colFlex },\r\n        } = this;\r\n\r\n        sortSvc?.initCol(this);\r\n\r\n        const hide = colDef.hide;\r\n        if (hide !== undefined) {\r\n            this.visible = !hide;\r\n        } else {\r\n            this.visible = !colDef.initialHide;\r\n        }\r\n\r\n        pinnedCols?.initCol(this);\r\n\r\n        colFlex?.initCol(this);\r\n    }\r\n\r\n    // gets called when user provides an alternative colDef, eg\r\n    public setColDef(\r\n        colDef: ColDef<any, TValue>,\r\n        userProvidedColDef: ColDef<any, TValue> | null,\r\n        source: ColumnEventType\r\n    ): void {\r\n        this.colDef = colDef;\r\n        this.userProvidedColDef = userProvidedColDef;\r\n        this.initMinAndMaxWidths();\r\n        this.initDotNotation();\r\n        this.initTooltip();\r\n        this.dispatchColEvent('colDefChanged', source);\r\n    }\r\n\r\n    public getUserProvidedColDef(): ColDef<any, TValue> | null {\r\n        return this.userProvidedColDef;\r\n    }\r\n\r\n    public getParent(): AgColumnGroup | null {\r\n        return this.parent;\r\n    }\r\n\r\n    public getOriginalParent(): AgProvidedColumnGroup | null {\r\n        return this.originalParent;\r\n    }\r\n\r\n    // this is done after constructor as it uses gridOptionsService\r\n    public postConstruct(): void {\r\n        this.setState();\r\n\r\n        this.initMinAndMaxWidths();\r\n\r\n        this.resetActualWidth('gridInitializing');\r\n\r\n        this.initDotNotation();\r\n\r\n        this.initTooltip();\r\n    }\r\n\r\n    private initDotNotation(): void {\r\n        const {\r\n            gos,\r\n            colDef: { field, tooltipField },\r\n        } = this;\r\n        const suppressDotNotation = gos.get('suppressFieldDotNotation');\r\n        this.fieldContainsDots = _exists(field) && field.indexOf('.') >= 0 && !suppressDotNotation;\r\n        this.tooltipFieldContainsDots = _exists(tooltipField) && tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\r\n    }\r\n\r\n    private initMinAndMaxWidths(): void {\r\n        const colDef = this.colDef;\r\n\r\n        this.minWidth = colDef.minWidth ?? this.beans.environment.getDefaultColumnMinWidth();\r\n        this.maxWidth = colDef.maxWidth ?? Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    private initTooltip(): void {\r\n        this.beans.tooltipSvc?.initCol(this);\r\n    }\r\n\r\n    public resetActualWidth(source: ColumnEventType): void {\r\n        const initialWidth = this.calculateColInitialWidth(this.colDef);\r\n        this.setActualWidth(initialWidth, source, true);\r\n    }\r\n\r\n    private calculateColInitialWidth(colDef: ColDef): number {\r\n        let width: number;\r\n        const colDefWidth = colDef.width;\r\n        const colDefInitialWidth = colDef.initialWidth;\r\n\r\n        if (colDefWidth != null) {\r\n            width = colDefWidth;\r\n        } else if (colDefInitialWidth != null) {\r\n            width = colDefInitialWidth;\r\n        } else {\r\n            width = 200;\r\n        }\r\n\r\n        return Math.max(Math.min(width, this.maxWidth), this.minWidth);\r\n    }\r\n\r\n    public isEmptyGroup(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public isRowGroupDisplayed(colId: string): boolean {\r\n        return this.beans.showRowGroupCols?.isRowGroupDisplayed(this, colId) ?? false;\r\n    }\r\n\r\n    public isPrimary(): boolean {\r\n        return this.primary;\r\n    }\r\n\r\n    public isFilterAllowed(): boolean {\r\n        // filter defined means it's a string, class or true.\r\n        // if its false, null or undefined then it's false.\r\n        const filterDefined = !!this.colDef.filter;\r\n        return filterDefined;\r\n    }\r\n\r\n    public isFieldContainsDots(): boolean {\r\n        return this.fieldContainsDots;\r\n    }\r\n\r\n    public isTooltipEnabled(): boolean {\r\n        return this.tooltipEnabled;\r\n    }\r\n\r\n    public isTooltipFieldContainsDots(): boolean {\r\n        return this.tooltipFieldContainsDots;\r\n    }\r\n\r\n    public getHighlighted(): ColumnHighlightPosition | null {\r\n        return this.highlighted;\r\n    }\r\n\r\n    public override addEventListener<T extends ColumnEventName>(\r\n        eventType: T,\r\n        userListener: (params: ColumnEvent<T>) => void\r\n    ): void {\r\n        this.frameworkEventListenerService = this.beans.frameworkOverrides.createLocalEventListenerWrapper?.(\r\n            this.frameworkEventListenerService,\r\n            this.colEventSvc\r\n        );\r\n        const listener = this.frameworkEventListenerService?.wrap(userListener) ?? userListener;\r\n\r\n        this.colEventSvc.addEventListener(eventType, listener);\r\n    }\r\n\r\n    public override removeEventListener<T extends ColumnEventName>(\r\n        eventType: T,\r\n        userListener: (params: ColumnEvent<T>) => void\r\n    ): void {\r\n        const listener = this.frameworkEventListenerService?.unwrap(userListener) ?? userListener;\r\n        this.colEventSvc.removeEventListener(eventType, listener);\r\n    }\r\n\r\n    public createColumnFunctionCallbackParams(rowNode: IRowNode): ColumnFunctionCallbackParams {\r\n        return this.gos.addGridCommonParams({\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            column: this,\r\n            colDef: this.colDef,\r\n        });\r\n    }\r\n\r\n    public isSuppressNavigable(rowNode: IRowNode): boolean {\r\n        return this.beans.cellNavigation?.isSuppressNavigable(this, rowNode) ?? false;\r\n    }\r\n\r\n    public isCellEditable(rowNode: IRowNode): boolean {\r\n        return this.beans.editSvc?.isCellEditable(this, rowNode) ?? false;\r\n    }\r\n\r\n    public isSuppressFillHandle(): boolean {\r\n        return !!this.colDef.suppressFillHandle;\r\n    }\r\n\r\n    public isAutoHeight(): boolean {\r\n        return !!this.colDef.autoHeight;\r\n    }\r\n\r\n    public isAutoHeaderHeight(): boolean {\r\n        return !!this.colDef.autoHeaderHeight;\r\n    }\r\n\r\n    public isRowDrag(rowNode: IRowNode): boolean {\r\n        return this.isColumnFunc(rowNode, this.colDef.rowDrag);\r\n    }\r\n\r\n    public isDndSource(rowNode: IRowNode): boolean {\r\n        return this.isColumnFunc(rowNode, this.colDef.dndSource);\r\n    }\r\n\r\n    public isCellCheckboxSelection(rowNode: IRowNode): boolean {\r\n        return this.beans.selectionSvc?.isCellCheckboxSelection(this, rowNode) ?? false;\r\n    }\r\n\r\n    public isSuppressPaste(rowNode: IRowNode): boolean {\r\n        return this.isColumnFunc(rowNode, this.colDef?.suppressPaste ?? null);\r\n    }\r\n\r\n    public isResizable(): boolean {\r\n        return !!this.getColDefValue('resizable');\r\n    }\r\n\r\n    /** Get value from ColDef or default if it exists. */\r\n    private getColDefValue<K extends keyof ColDef>(key: K): ColDef[K] {\r\n        return this.colDef[key] ?? COL_DEF_DEFAULTS[key];\r\n    }\r\n\r\n    public isColumnFunc(\r\n        rowNode: IRowNode,\r\n        value?: boolean | ((params: ColumnFunctionCallbackParams) => boolean) | null\r\n    ): boolean {\r\n        // if boolean set, then just use it\r\n        if (typeof value === 'boolean') {\r\n            return value;\r\n        }\r\n\r\n        // if function, then call the function to find out\r\n        if (typeof value === 'function') {\r\n            const params = this.createColumnFunctionCallbackParams(rowNode);\r\n            const editableFunc = value;\r\n            return editableFunc(params);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private createColumnEvent<T extends ColumnEventName>(type: T, source: ColumnEventType): ColumnEvent<T> {\r\n        return this.gos.addGridCommonParams({\r\n            type,\r\n            column: this,\r\n            columns: [this],\r\n            source,\r\n        });\r\n    }\r\n\r\n    public isMoving(): boolean {\r\n        return this.moving;\r\n    }\r\n\r\n    public getSort(): SortDirection | undefined {\r\n        return this.sort;\r\n    }\r\n\r\n    public isSortable(): boolean {\r\n        return !!this.getColDefValue('sortable');\r\n    }\r\n\r\n    /** @deprecated v32 use col.getSort() === 'asc */\r\n    public isSortAscending(): boolean {\r\n        return this.sort === 'asc';\r\n    }\r\n\r\n    /** @deprecated v32 use col.getSort() === 'desc */\r\n    public isSortDescending(): boolean {\r\n        return this.sort === 'desc';\r\n    }\r\n    /** @deprecated v32 use col.getSort() === undefined */\r\n    public isSortNone(): boolean {\r\n        return _missing(this.sort);\r\n    }\r\n\r\n    /** @deprecated v32 use col.getSort() !== undefined */\r\n    public isSorting(): boolean {\r\n        return _exists(this.sort);\r\n    }\r\n\r\n    public getSortIndex(): number | null | undefined {\r\n        return this.sortIndex;\r\n    }\r\n\r\n    public isMenuVisible(): boolean {\r\n        return this.menuVisible;\r\n    }\r\n\r\n    public getAggFunc(): string | IAggFunc | null | undefined {\r\n        return this.aggFunc;\r\n    }\r\n\r\n    public getLeft(): number | null {\r\n        return this.left;\r\n    }\r\n\r\n    public getOldLeft(): number | null {\r\n        return this.oldLeft;\r\n    }\r\n\r\n    public getRight(): number {\r\n        return this.left + this.actualWidth;\r\n    }\r\n\r\n    public setLeft(left: number | null, source: ColumnEventType) {\r\n        this.oldLeft = this.left;\r\n        if (this.left !== left) {\r\n            this.left = left;\r\n            this.dispatchColEvent('leftChanged', source);\r\n        }\r\n    }\r\n\r\n    public isFilterActive(): boolean {\r\n        return this.filterActive;\r\n    }\r\n\r\n    /** @deprecated v33 Use `api.isColumnHovered(column)` instead. */\r\n    public isHovered(): boolean {\r\n        _warn(261);\r\n        return !!this.beans.colHover?.isHovered(this);\r\n    }\r\n\r\n    public setFirstRightPinned(firstRightPinned: boolean, source: ColumnEventType): void {\r\n        if (this.firstRightPinned !== firstRightPinned) {\r\n            this.firstRightPinned = firstRightPinned;\r\n            this.dispatchColEvent('firstRightPinnedChanged', source);\r\n        }\r\n    }\r\n\r\n    public setLastLeftPinned(lastLeftPinned: boolean, source: ColumnEventType): void {\r\n        if (this.lastLeftPinned !== lastLeftPinned) {\r\n            this.lastLeftPinned = lastLeftPinned;\r\n            this.dispatchColEvent('lastLeftPinnedChanged', source);\r\n        }\r\n    }\r\n\r\n    public isFirstRightPinned(): boolean {\r\n        return this.firstRightPinned;\r\n    }\r\n\r\n    public isLastLeftPinned(): boolean {\r\n        return this.lastLeftPinned;\r\n    }\r\n\r\n    public isPinned(): boolean {\r\n        return this.pinned === 'left' || this.pinned === 'right';\r\n    }\r\n\r\n    public isPinnedLeft(): boolean {\r\n        return this.pinned === 'left';\r\n    }\r\n\r\n    public isPinnedRight(): boolean {\r\n        return this.pinned === 'right';\r\n    }\r\n\r\n    public getPinned(): ColumnPinnedType {\r\n        return this.pinned;\r\n    }\r\n\r\n    public setVisible(visible: boolean, source: ColumnEventType): void {\r\n        const newValue = visible === true;\r\n        if (this.visible !== newValue) {\r\n            this.visible = newValue;\r\n            this.dispatchColEvent('visibleChanged', source);\r\n        }\r\n        this.dispatchStateUpdatedEvent('hide');\r\n    }\r\n\r\n    public isVisible(): boolean {\r\n        return this.visible;\r\n    }\r\n\r\n    public isSpanHeaderHeight(): boolean {\r\n        const colDef = this.getColDef();\r\n        return !colDef.suppressSpanHeaderHeight;\r\n    }\r\n\r\n    public getColumnGroupPaddingInfo(): { numberOfParents: number; isSpanningTotal: boolean } {\r\n        let parent = this.getParent();\r\n\r\n        if (!parent || !parent.isPadding()) {\r\n            return { numberOfParents: 0, isSpanningTotal: false };\r\n        }\r\n\r\n        const numberOfParents = parent.getPaddingLevel() + 1;\r\n        let isSpanningTotal = true;\r\n\r\n        while (parent) {\r\n            if (!parent.isPadding()) {\r\n                isSpanningTotal = false;\r\n                break;\r\n            }\r\n            parent = parent.getParent();\r\n        }\r\n\r\n        return { numberOfParents, isSpanningTotal };\r\n    }\r\n\r\n    public getColDef(): ColDef<any, TValue> {\r\n        return this.colDef;\r\n    }\r\n    public getDefinition(): AbstractColDef<any, TValue> {\r\n        return this.colDef;\r\n    }\r\n\r\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\r\n        return this.colDef.columnGroupShow;\r\n    }\r\n\r\n    public getColId(): string {\r\n        return this.colId;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.colId;\r\n    }\r\n\r\n    public getUniqueId(): HeaderColumnId {\r\n        return this.colId as HeaderColumnId;\r\n    }\r\n\r\n    public getActualWidth(): number {\r\n        return this.actualWidth;\r\n    }\r\n\r\n    public getAutoHeaderHeight(): number | null {\r\n        return this.autoHeaderHeight;\r\n    }\r\n\r\n    /** Returns true if the header height has changed */\r\n    public setAutoHeaderHeight(height: number): boolean {\r\n        const changed = height !== this.autoHeaderHeight;\r\n        this.autoHeaderHeight = height;\r\n        return changed;\r\n    }\r\n\r\n    private createBaseColDefParams(rowNode: IRowNode): BaseColDefParams {\r\n        const params: BaseColDefParams = this.gos.addGridCommonParams({\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            colDef: this.colDef,\r\n            column: this,\r\n        });\r\n        return params;\r\n    }\r\n\r\n    public getColSpan(rowNode: IRowNode): number {\r\n        if (_missing(this.colDef.colSpan)) {\r\n            return 1;\r\n        }\r\n        const params: ColSpanParams = this.createBaseColDefParams(rowNode);\r\n        const colSpan = this.colDef.colSpan(params);\r\n        // colSpan must be number equal to or greater than 1\r\n\r\n        return Math.max(colSpan, 1);\r\n    }\r\n\r\n    public getRowSpan(rowNode: IRowNode): number {\r\n        if (_missing(this.colDef.rowSpan)) {\r\n            return 1;\r\n        }\r\n        const params: RowSpanParams = this.createBaseColDefParams(rowNode);\r\n        const rowSpan = this.colDef.rowSpan(params);\r\n        // rowSpan must be number equal to or greater than 1\r\n\r\n        return Math.max(rowSpan, 1);\r\n    }\r\n\r\n    public setActualWidth(actualWidth: number, source: ColumnEventType, silent: boolean = false): void {\r\n        actualWidth = Math.max(actualWidth, this.minWidth);\r\n        actualWidth = Math.min(actualWidth, this.maxWidth);\r\n        if (this.actualWidth !== actualWidth) {\r\n            // disable flex for this column if it was manually resized.\r\n            this.actualWidth = actualWidth;\r\n            if (this.flex && source !== 'flex' && source !== 'gridInitializing') {\r\n                this.flex = null;\r\n            }\r\n\r\n            if (!silent) {\r\n                this.fireColumnWidthChangedEvent(source);\r\n            }\r\n        }\r\n        this.dispatchStateUpdatedEvent('width');\r\n    }\r\n\r\n    public fireColumnWidthChangedEvent(source: ColumnEventType): void {\r\n        this.dispatchColEvent('widthChanged', source);\r\n    }\r\n\r\n    public isGreaterThanMax(width: number): boolean {\r\n        return width > this.maxWidth;\r\n    }\r\n\r\n    public getMinWidth(): number {\r\n        return this.minWidth;\r\n    }\r\n\r\n    public getMaxWidth(): number {\r\n        return this.maxWidth;\r\n    }\r\n\r\n    public getFlex(): number | null {\r\n        return this.flex;\r\n    }\r\n\r\n    public isRowGroupActive(): boolean {\r\n        return this.rowGroupActive;\r\n    }\r\n\r\n    public isPivotActive(): boolean {\r\n        return this.pivotActive;\r\n    }\r\n\r\n    public isAnyFunctionActive(): boolean {\r\n        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\r\n    }\r\n\r\n    public isAnyFunctionAllowed(): boolean {\r\n        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\r\n    }\r\n\r\n    public isValueActive(): boolean {\r\n        return this.aggregationActive;\r\n    }\r\n\r\n    public isAllowPivot(): boolean {\r\n        return this.colDef.enablePivot === true;\r\n    }\r\n\r\n    public isAllowValue(): boolean {\r\n        return this.colDef.enableValue === true;\r\n    }\r\n\r\n    public isAllowRowGroup(): boolean {\r\n        return this.colDef.enableRowGroup === true;\r\n    }\r\n\r\n    public dispatchColEvent(type: ColumnEventName, source: ColumnEventType, additionalEventAttributes?: any): void {\r\n        const colEvent = this.createColumnEvent(type, source);\r\n        if (additionalEventAttributes) {\r\n            _mergeDeep(colEvent, additionalEventAttributes);\r\n        }\r\n        this.colEventSvc.dispatchEvent(colEvent);\r\n    }\r\n\r\n    public dispatchStateUpdatedEvent(key: keyof ColumnState): void {\r\n        this.colEventSvc.dispatchEvent({\r\n            type: 'columnStateUpdated',\r\n            key,\r\n        } as AgEvent<'columnStateUpdated'>);\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { Column, ColumnGroupShowType, ColumnInstanceId, ProvidedColumnGroup } from '../interfaces/iColumn';\r\nimport type { AgColumn } from './agColumn';\r\nimport { getNextColInstanceId, isColumn } from './agColumn';\r\nimport type { ColGroupDef } from './colDef';\r\n\r\nexport function isProvidedColumnGroup(col: Column | ProvidedColumnGroup | string | null): col is AgProvidedColumnGroup {\r\n    return col instanceof AgProvidedColumnGroup;\r\n}\r\n\r\nexport type AgProvidedColumnGroupEvent = 'expandedChanged' | 'expandableChanged';\r\nexport class AgProvidedColumnGroup extends BeanStub<AgProvidedColumnGroupEvent> implements ProvidedColumnGroup {\r\n    public readonly isColumn = false as const;\r\n\r\n    public originalParent: AgProvidedColumnGroup | null;\r\n\r\n    private children: (AgColumn | AgProvidedColumnGroup)[];\r\n    private expandable = false;\r\n\r\n    private expanded: boolean;\r\n\r\n    // used by React (and possibly other frameworks) as key for rendering. also used to\r\n    // identify old vs new columns for destroying cols when no longer used.\r\n    private instanceId = getNextColInstanceId();\r\n\r\n    private expandableListenerRemoveCallback: (() => void) | null = null;\r\n\r\n    constructor(\r\n        private colGroupDef: ColGroupDef | null,\r\n        private readonly groupId: string,\r\n        private padding: boolean,\r\n        private level: number\r\n    ) {\r\n        super();\r\n        this.expanded = !!colGroupDef?.openByDefault;\r\n    }\r\n\r\n    public override destroy() {\r\n        if (this.expandableListenerRemoveCallback) {\r\n            this.reset(null, undefined);\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    private reset(colGroupDef: ColGroupDef | null, level: number | undefined): void {\r\n        this.colGroupDef = colGroupDef;\r\n        this.level = level!;\r\n\r\n        this.originalParent = null;\r\n\r\n        if (this.expandableListenerRemoveCallback) {\r\n            this.expandableListenerRemoveCallback();\r\n        }\r\n\r\n        // we use ! below, as we want to set the object back to the\r\n        // way it was when it was first created\r\n        this.children = undefined!;\r\n        this.expandable = undefined!;\r\n    }\r\n\r\n    public getInstanceId(): ColumnInstanceId {\r\n        return this.instanceId;\r\n    }\r\n\r\n    public getOriginalParent(): AgProvidedColumnGroup | null {\r\n        return this.originalParent;\r\n    }\r\n\r\n    public getLevel(): number {\r\n        return this.level;\r\n    }\r\n\r\n    public isVisible(): boolean {\r\n        // return true if at least one child is visible\r\n        if (this.children) {\r\n            return this.children.some((child) => child.isVisible());\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public isPadding(): boolean {\r\n        return this.padding;\r\n    }\r\n\r\n    public setExpanded(expanded: boolean | undefined): void {\r\n        this.expanded = expanded === undefined ? false : expanded;\r\n        this.dispatchLocalEvent({ type: 'expandedChanged' });\r\n    }\r\n\r\n    public isExpandable(): boolean {\r\n        return this.expandable;\r\n    }\r\n\r\n    public isExpanded(): boolean {\r\n        return this.expanded;\r\n    }\r\n\r\n    public getGroupId(): string {\r\n        return this.groupId;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.getGroupId();\r\n    }\r\n\r\n    public setChildren(children: (AgColumn | AgProvidedColumnGroup)[]): void {\r\n        this.children = children;\r\n    }\r\n\r\n    public getChildren(): (AgColumn | AgProvidedColumnGroup)[] {\r\n        return this.children;\r\n    }\r\n\r\n    public getColGroupDef(): ColGroupDef | null {\r\n        return this.colGroupDef;\r\n    }\r\n\r\n    public getLeafColumns(): AgColumn[] {\r\n        const result: AgColumn[] = [];\r\n        this.addLeafColumns(result);\r\n        return result;\r\n    }\r\n\r\n    private addLeafColumns(leafColumns: Column[]): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        this.children.forEach((child) => {\r\n            if (isColumn(child)) {\r\n                leafColumns.push(child);\r\n            } else if (isProvidedColumnGroup(child)) {\r\n                child.addLeafColumns(leafColumns);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\r\n        const colGroupDef = this.colGroupDef;\r\n\r\n        if (!colGroupDef) {\r\n            return;\r\n        }\r\n\r\n        return colGroupDef.columnGroupShow;\r\n    }\r\n\r\n    // need to check that this group has at least one col showing when both expanded and contracted.\r\n    // if not, then we don't allow expanding and contracting on this group\r\n\r\n    public setupExpandable() {\r\n        this.setExpandable();\r\n\r\n        if (this.expandableListenerRemoveCallback) {\r\n            this.expandableListenerRemoveCallback();\r\n        }\r\n\r\n        const listener = this.onColumnVisibilityChanged.bind(this);\r\n        this.getLeafColumns().forEach((col) => col.addEventListener('visibleChanged', listener));\r\n\r\n        this.expandableListenerRemoveCallback = () => {\r\n            this.getLeafColumns().forEach((col) => col.removeEventListener('visibleChanged', listener));\r\n            this.expandableListenerRemoveCallback = null;\r\n        };\r\n    }\r\n\r\n    public setExpandable() {\r\n        if (this.isPadding()) {\r\n            return;\r\n        }\r\n        // want to make sure the group doesn't disappear when it's open\r\n        let atLeastOneShowingWhenOpen = false;\r\n        // want to make sure the group doesn't disappear when it's closed\r\n        let atLeastOneShowingWhenClosed = false;\r\n        // want to make sure the group has something to show / hide\r\n        let atLeastOneChangeable = false;\r\n\r\n        const children = this.findChildrenRemovingPadding();\r\n\r\n        for (let i = 0, j = children.length; i < j; i++) {\r\n            const abstractColumn = children[i];\r\n            if (!abstractColumn.isVisible()) {\r\n                continue;\r\n            }\r\n            // if the abstractColumn is a grid generated group, there will be no colDef\r\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\r\n\r\n            if (headerGroupShow === 'open') {\r\n                atLeastOneShowingWhenOpen = true;\r\n                atLeastOneChangeable = true;\r\n            } else if (headerGroupShow === 'closed') {\r\n                atLeastOneShowingWhenClosed = true;\r\n                atLeastOneChangeable = true;\r\n            } else {\r\n                atLeastOneShowingWhenOpen = true;\r\n                atLeastOneShowingWhenClosed = true;\r\n            }\r\n        }\r\n\r\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\r\n\r\n        if (this.expandable !== expandable) {\r\n            this.expandable = expandable;\r\n            this.dispatchLocalEvent({ type: 'expandableChanged' });\r\n        }\r\n    }\r\n\r\n    private findChildrenRemovingPadding(): (AgColumn | AgProvidedColumnGroup)[] {\r\n        const res: (AgColumn | AgProvidedColumnGroup)[] = [];\r\n\r\n        const process = (items: (AgColumn | AgProvidedColumnGroup)[]) => {\r\n            items.forEach((item) => {\r\n                // if padding, we add this children instead of the padding\r\n                const skipBecausePadding = isProvidedColumnGroup(item) && item.isPadding();\r\n                if (skipBecausePadding) {\r\n                    process((item as AgProvidedColumnGroup).children);\r\n                } else {\r\n                    res.push(item);\r\n                }\r\n            });\r\n        };\r\n\r\n        process(this.children);\r\n\r\n        return res;\r\n    }\r\n\r\n    private onColumnVisibilityChanged(): void {\r\n        this.setExpandable();\r\n    }\r\n}\r\n", "import type { ColDef } from './colDef';\r\n\r\nexport const DefaultColumnTypes: { [key: string]: ColDef } = {\r\n    numericColumn: {\r\n        headerClass: 'ag-right-aligned-header',\r\n        cellClass: 'ag-right-aligned-cell',\r\n    },\r\n    rightAligned: {\r\n        headerClass: 'ag-right-aligned-header',\r\n        cellClass: 'ag-right-aligned-cell',\r\n    },\r\n};\r\n", "// class returns a unique id to use for the column. it checks the existing columns, and if the requested\r\n// id is already taken, it will start appending numbers until it gets a unique id.\r\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\r\n// if no field or id provided in the col, it will try the ids of natural numbers\r\nimport { _toStringOrNull } from '../utils/generic';\r\n\r\nexport class ColumnKeyCreator {\r\n    private existingKeys: { [key: string]: boolean } = {};\r\n\r\n    public addExistingKeys(keys: string[]): void {\r\n        for (let i = 0; i < keys.length; i++) {\r\n            this.existingKeys[keys[i]] = true;\r\n        }\r\n    }\r\n\r\n    public getUniqueKey(colId?: string | null, colField?: string | null): string {\r\n        // in case user passed in number for colId, convert to string\r\n        colId = _toStringOrNull(colId);\r\n\r\n        let count = 0;\r\n\r\n        while (true) {\r\n            let idToTry: string | number | null | undefined = colId ?? colField;\r\n            if (idToTry) {\r\n                if (count !== 0) {\r\n                    idToTry += '_' + count;\r\n                }\r\n            } else {\r\n                // no point in stringing this, object treats it the same anyway.\r\n                idToTry = count;\r\n            }\r\n\r\n            if (!this.existingKeys[idToTry]) {\r\n                this.existingKeys[idToTry] = true;\r\n                return String(idToTry);\r\n            }\r\n\r\n            count++;\r\n        }\r\n    }\r\n}\r\n", "/** An array that is always empty and that cannot be modified */\r\nexport const _EmptyArray = Object.freeze([]) as unknown as any[];\r\n\r\nexport function _last<T>(arr: T[]): T;\r\nexport function _last<T extends Node>(arr: NodeListOf<T>): T;\r\nexport function _last(arr: any): any {\r\n    if (!arr?.length) {\r\n        return;\r\n    }\r\n\r\n    return arr[arr.length - 1];\r\n}\r\n\r\nexport function _areEqual<T>(\r\n    a?: readonly T[] | null,\r\n    b?: readonly T[] | null,\r\n    comparator?: (a: T, b: T) => boolean\r\n): boolean {\r\n    if (a == null && b == null) {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        a != null &&\r\n        b != null &&\r\n        a.length === b.length &&\r\n        a.every((value, index) => (comparator ? comparator(value, b[index]) : b[index] === value))\r\n    );\r\n}\r\n\r\nexport function _sortNumerically(array: number[]): number[] {\r\n    return array.sort((a, b) => a - b);\r\n}\r\n\r\nexport function _removeFromArray<T>(array: T[], object: T) {\r\n    const index = array.indexOf(object);\r\n\r\n    if (index >= 0) {\r\n        array.splice(index, 1);\r\n    }\r\n}\r\n\r\n// should consider refactoring the callers to create a new array rather than mutating the original, which is expensive\r\nexport function _moveInArray<T>(array: T[], objectsToMove: T[], toIndex: number) {\r\n    // first take out items from the array\r\n    for (let i = 0; i < objectsToMove.length; i++) {\r\n        _removeFromArray(array, objectsToMove[i]);\r\n    }\r\n\r\n    // now add the objects, in same order as provided to us, that means we start at the end\r\n    // as the objects will be pushed to the right as they are inserted\r\n    for (let i = objectsToMove.length - 1; i >= 0; i--) {\r\n        array.splice(toIndex, 0, objectsToMove[i]);\r\n    }\r\n}\r\n", "import { depthFirstOriginalTreeSearch } from '../columns/columnFactoryUtils';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\n\r\nexport function placeLockedColumns(cols: AgColumn[], gos: GridOptionsService): AgColumn[] {\r\n    const left: AgColumn[] = [];\r\n    const normal: AgColumn[] = [];\r\n    const right: AgColumn[] = [];\r\n    cols.forEach((col: AgColumn) => {\r\n        const position = col.getColDef().lockPosition;\r\n        if (position === 'right') {\r\n            right.push(col);\r\n        } else if (position === 'left' || position === true) {\r\n            left.push(col);\r\n        } else {\r\n            normal.push(col);\r\n        }\r\n    });\r\n\r\n    const isRtl = gos.get('enableRtl');\r\n    if (isRtl) {\r\n        return [...right, ...normal, ...left];\r\n    }\r\n\r\n    return [...left, ...normal, ...right];\r\n}\r\n\r\nexport function doesMovePassMarryChildren(\r\n    allColumnsCopy: AgColumn[],\r\n    gridBalancedTree: (AgColumn | AgProvidedColumnGroup)[]\r\n): boolean {\r\n    let rulePassed = true;\r\n\r\n    depthFirstOriginalTreeSearch(null, gridBalancedTree, (child) => {\r\n        if (!isProvidedColumnGroup(child)) {\r\n            return;\r\n        }\r\n\r\n        const columnGroup = child;\r\n        const colGroupDef = columnGroup.getColGroupDef();\r\n        const marryChildren = colGroupDef && colGroupDef.marryChildren;\r\n\r\n        if (!marryChildren) {\r\n            return;\r\n        }\r\n\r\n        const newIndexes: number[] = [];\r\n        columnGroup.getLeafColumns().forEach((col) => {\r\n            const newColIndex = allColumnsCopy.indexOf(col);\r\n            newIndexes.push(newColIndex);\r\n        });\r\n\r\n        // eslint-disable-next-line prefer-spread\r\n        const maxIndex = Math.max.apply(Math, newIndexes);\r\n        // eslint-disable-next-line prefer-spread\r\n        const minIndex = Math.min.apply(Math, newIndexes);\r\n\r\n        // spread is how far the first column in this group is away from the last column\r\n        const spread = maxIndex - minIndex;\r\n        const maxSpread = columnGroup.getLeafColumns().length - 1;\r\n\r\n        // if the columns\r\n        if (spread > maxSpread) {\r\n            rulePassed = false;\r\n        }\r\n\r\n        // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)\r\n        // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));\r\n    });\r\n\r\n    return rulePassed;\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { EventService } from '../eventService';\r\nimport type { ColumnEvent, ColumnEventType } from '../events';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\n\r\nfunction getCommonValue<T>(cols: AgColumn[], valueGetter: (col: AgColumn) => T): T | undefined {\r\n    if (!cols || cols.length == 0) {\r\n        return undefined;\r\n    }\r\n\r\n    // compare each value to the first value. if nothing differs, then value is common so return it.\r\n    const firstValue = valueGetter(cols[0]);\r\n    for (let i = 1; i < cols.length; i++) {\r\n        if (firstValue !== valueGetter(cols[i])) {\r\n            // values differ, no common value\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return firstValue;\r\n}\r\n\r\nexport function dispatchColumnPinnedEvent(\r\n    eventSvc: EventService,\r\n    changedColumns: AgColumn[],\r\n    source: ColumnEventType\r\n): void {\r\n    if (!changedColumns.length) {\r\n        return;\r\n    }\r\n\r\n    // if just one column, we use this, otherwise we don't include the col\r\n    const column: AgColumn | null = changedColumns.length === 1 ? changedColumns[0] : null;\r\n\r\n    // only include pinned if it's common in all columns\r\n    const pinned = getCommonValue(changedColumns, (col) => col.getPinned());\r\n\r\n    eventSvc.dispatchEvent({\r\n        type: 'columnPinned',\r\n        // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'\r\n        pinned: pinned != null ? pinned : null,\r\n        columns: changedColumns,\r\n        column,\r\n        source,\r\n    });\r\n}\r\n\r\nexport function dispatchColumnVisibleEvent(\r\n    eventSvc: EventService,\r\n    changedColumns: AgColumn[],\r\n    source: ColumnEventType\r\n): void {\r\n    if (!changedColumns.length) {\r\n        return;\r\n    }\r\n\r\n    // if just one column, we use this, otherwise we don't include the col\r\n    const column: AgColumn | null = changedColumns.length === 1 ? changedColumns[0] : null;\r\n\r\n    // only include visible if it's common in all columns\r\n    const visible = getCommonValue(changedColumns, (col) => col.isVisible());\r\n\r\n    eventSvc.dispatchEvent({\r\n        type: 'columnVisible',\r\n        visible,\r\n        columns: changedColumns,\r\n        column,\r\n        source,\r\n    });\r\n}\r\n\r\nexport function dispatchColumnChangedEvent<\r\n    T extends 'columnValueChanged' | 'columnPivotChanged' | 'columnRowGroupChanged',\r\n>(eventSvc: EventService, type: T, columns: AgColumn[], source: ColumnEventType): void {\r\n    eventSvc.dispatchEvent({\r\n        type,\r\n        columns,\r\n        column: columns && columns.length == 1 ? columns[0] : null,\r\n        source,\r\n    } as WithoutGridCommon<ColumnEvent>);\r\n}\r\n\r\nexport function dispatchColumnResizedEvent(\r\n    eventSvc: EventService,\r\n    columns: AgColumn[] | null,\r\n    finished: boolean,\r\n    source: ColumnEventType,\r\n    flexColumns: AgColumn[] | null = null\r\n): void {\r\n    if (columns?.length) {\r\n        eventSvc.dispatchEvent({\r\n            type: 'columnResized',\r\n            columns,\r\n            column: columns.length === 1 ? columns[0] : null,\r\n            flexColumns,\r\n            finished,\r\n            source,\r\n        });\r\n    }\r\n}\r\n", "import { doesMovePassMarryChildren, placeLockedColumns } from '../columnMove/columnMoveUtils';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { IAggFunc } from '../entities/colDef';\r\nimport type { EventService } from '../eventService';\r\nimport type { ColumnEvent, ColumnEventType } from '../events';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport { _areEqual, _removeFromArray } from '../utils/array';\r\nimport { _exists, _missing } from '../utils/generic';\r\nimport { _warn } from '../validation/logging';\r\nimport {\r\n    dispatchColumnChangedEvent,\r\n    dispatchColumnPinnedEvent,\r\n    dispatchColumnResizedEvent,\r\n    dispatchColumnVisibleEvent,\r\n} from './columnEventUtils';\r\nimport { updateSomeColumnState } from './columnFactoryUtils';\r\nimport type { ColumnCollections, ColumnModel } from './columnModel';\r\nimport { GROUP_AUTO_COLUMN_ID, _getColumnsFromTree, getValueFactory, isColumnSelectionCol } from './columnUtils';\r\n\r\nexport interface ModifyColumnsNoEventsCallbacks {\r\n    addGroupCol(col: AgColumn): void;\r\n    removeGroupCol(col: AgColumn): void;\r\n    addPivotCol(col: AgColumn): void;\r\n    removePivotCol(col: AgColumn): void;\r\n    addValueCol(col: AgColumn): void;\r\n    removeValueCol(col: AgColumn): void;\r\n}\r\n\r\nexport interface ColumnStateParams {\r\n    /** True if the column is hidden */\r\n    hide?: boolean | null;\r\n    /** Width of the column in pixels */\r\n    width?: number;\r\n    /** Column's flex if flex is set */\r\n    flex?: number | null;\r\n    /** Sort applied to the column */\r\n    sort?: 'asc' | 'desc' | null;\r\n    /** The order of the sort, if sorting by many columns */\r\n    sortIndex?: number | null;\r\n    /** The aggregation function applied */\r\n    aggFunc?: string | IAggFunc | null;\r\n    /** True if pivot active */\r\n    pivot?: boolean | null;\r\n    /** The order of the pivot, if pivoting by many columns */\r\n    pivotIndex?: number | null;\r\n    /** Set if column is pinned */\r\n    pinned?: ColumnPinnedType;\r\n    /** True if row group active */\r\n    rowGroup?: boolean | null;\r\n    /** The order of the row group, if grouping by many columns */\r\n    rowGroupIndex?: number | null;\r\n}\r\n\r\nexport interface ColumnState extends ColumnStateParams {\r\n    /** ID of the column */\r\n    colId: string;\r\n}\r\n\r\nexport interface ApplyColumnStateParams {\r\n    /** The state from `getColumnState` */\r\n    state?: ColumnState[];\r\n    /** Whether column order should be applied */\r\n    applyOrder?: boolean;\r\n    /** State to apply to columns where state is missing for those columns */\r\n    defaultState?: ColumnStateParams;\r\n}\r\n\r\nexport function _applyColumnState(\r\n    beans: BeanCollection,\r\n    params: ApplyColumnStateParams,\r\n    source: ColumnEventType\r\n): boolean {\r\n    const {\r\n        colModel,\r\n        rowGroupColsSvc,\r\n        pivotColsSvc,\r\n        autoColSvc,\r\n        selectionColSvc,\r\n        colAnimation,\r\n        visibleCols,\r\n        pivotResultCols,\r\n        environment,\r\n        valueColsSvc,\r\n        eventSvc,\r\n        gos,\r\n    } = beans;\r\n\r\n    const providedCols = colModel.getColDefCols() || [];\r\n    if (!providedCols?.length) {\r\n        return false;\r\n    }\r\n\r\n    if (params?.state && !params.state.forEach) {\r\n        // state is not an array\r\n        _warn(32);\r\n        return false;\r\n    }\r\n\r\n    const syncColumnWithStateItem = (\r\n        column: AgColumn | null,\r\n        stateItem: ColumnState | null,\r\n        rowGroupIndexes: { [key: string]: number } | null,\r\n        pivotIndexes: { [key: string]: number } | null,\r\n        autoCol: boolean\r\n    ) => {\r\n        if (!column) {\r\n            return;\r\n        }\r\n\r\n        const getValue = getValueFactory(stateItem, params.defaultState);\r\n\r\n        const flex = getValue('flex').value1;\r\n\r\n        updateSomeColumnState(\r\n            beans,\r\n            column,\r\n            getValue('hide').value1,\r\n            getValue('sort').value1,\r\n            getValue('sortIndex').value1,\r\n            getValue('pinned').value1,\r\n            flex,\r\n            source\r\n        );\r\n\r\n        // if flex is null or undefined, fall back to setting width\r\n        if (flex == null) {\r\n            // if no flex, then use width if it's there\r\n            const width = getValue('width').value1;\r\n            if (width != null) {\r\n                // if width provided and valid, use it, otherwise stick with the old width\r\n                const minColWidth = column.getColDef().minWidth ?? environment.getDefaultColumnMinWidth();\r\n                if (minColWidth != null && width >= minColWidth) {\r\n                    column.setActualWidth(width, source);\r\n                }\r\n            }\r\n        }\r\n\r\n        // we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols\r\n        if (autoCol || !column.isPrimary()) {\r\n            return;\r\n        }\r\n\r\n        valueColsSvc?.syncColumnWithState(column, source, getValue);\r\n        rowGroupColsSvc?.syncColumnWithState(column, source, getValue, rowGroupIndexes);\r\n        pivotColsSvc?.syncColumnWithState(column, source, getValue, pivotIndexes);\r\n    };\r\n\r\n    const applyStates = (\r\n        states: ColumnState[],\r\n        existingColumns: AgColumn[],\r\n        getById: (id: string) => AgColumn | null\r\n    ) => {\r\n        const dispatchEventsFunc = _compareColumnStatesAndDispatchEvents(beans, source);\r\n\r\n        // at the end below, this list will have all columns we got no state for\r\n        const columnsWithNoState = existingColumns.slice();\r\n\r\n        const rowGroupIndexes: { [key: string]: number } = {};\r\n        const pivotIndexes: { [key: string]: number } = {};\r\n        const autoColStates: ColumnState[] = [];\r\n        const selectionColStates: ColumnState[] = [];\r\n        // If pivoting is modified, these are the states we try to reapply after\r\n        // the pivot result cols are re-generated\r\n        const unmatchedAndAutoStates: ColumnState[] = [];\r\n        let unmatchedCount = 0;\r\n\r\n        const previousRowGroupCols = rowGroupColsSvc?.columns.slice() ?? [];\r\n        const previousPivotCols = pivotColsSvc?.columns.slice() ?? [];\r\n\r\n        states.forEach((state) => {\r\n            const colId = state.colId;\r\n\r\n            // auto group columns are re-created so deferring syncing with ColumnState\r\n            const isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);\r\n            if (isAutoGroupColumn) {\r\n                autoColStates.push(state);\r\n                unmatchedAndAutoStates.push(state);\r\n                return;\r\n            }\r\n\r\n            if (isColumnSelectionCol(colId)) {\r\n                selectionColStates.push(state);\r\n                unmatchedAndAutoStates.push(state);\r\n                return;\r\n            }\r\n\r\n            const column = getById(colId);\r\n\r\n            if (!column) {\r\n                unmatchedAndAutoStates.push(state);\r\n                unmatchedCount += 1;\r\n            } else {\r\n                syncColumnWithStateItem(column, state, rowGroupIndexes, pivotIndexes, false);\r\n                _removeFromArray(columnsWithNoState, column);\r\n            }\r\n        });\r\n\r\n        // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden\r\n        const applyDefaultsFunc = (col: AgColumn) =>\r\n            syncColumnWithStateItem(col, null, rowGroupIndexes, pivotIndexes, false);\r\n\r\n        columnsWithNoState.forEach(applyDefaultsFunc);\r\n\r\n        rowGroupColsSvc?.sortColumns(comparatorByIndex.bind(rowGroupColsSvc, rowGroupIndexes, previousRowGroupCols));\r\n        pivotColsSvc?.sortColumns(comparatorByIndex.bind(pivotColsSvc, pivotIndexes, previousPivotCols));\r\n\r\n        colModel.refreshCols(false);\r\n\r\n        const syncColStates = (\r\n            getCol: (colId: string) => AgColumn | null,\r\n            colStates: ColumnState[],\r\n            columns: AgColumn[] = []\r\n        ) => {\r\n            colStates.forEach((stateItem) => {\r\n                const col = getCol(stateItem.colId);\r\n                _removeFromArray(columns, col);\r\n                syncColumnWithStateItem(col, stateItem, null, null, true);\r\n            });\r\n            columns.forEach(applyDefaultsFunc);\r\n        };\r\n\r\n        // sync newly created auto group columns with ColumnState\r\n        syncColStates(\r\n            (colId: string) => autoColSvc?.getAutoCol(colId) ?? null,\r\n            autoColStates,\r\n            autoColSvc?.getAutoCols()?.slice()\r\n        );\r\n\r\n        // sync selection columns with ColumnState\r\n        syncColStates(\r\n            (colId: string) => selectionColSvc?.getSelectionCol(colId) ?? null,\r\n            selectionColStates,\r\n            selectionColSvc?.getSelectionCols()?.slice()\r\n        );\r\n\r\n        orderLiveColsLikeState(params, colModel, gos);\r\n        visibleCols.refresh(source);\r\n        eventSvc.dispatchEvent({\r\n            type: 'columnEverythingChanged',\r\n            source,\r\n        });\r\n\r\n        dispatchEventsFunc(); // Will trigger pivot result col changes if pivoting modified\r\n        return { unmatchedAndAutoStates, unmatchedCount };\r\n    };\r\n\r\n    colAnimation?.start();\r\n\r\n    let { unmatchedAndAutoStates, unmatchedCount } = applyStates(params.state || [], providedCols, (id) =>\r\n        colModel.getColDefCol(id)\r\n    );\r\n\r\n    // If there are still states left over, see if we can apply them to newly generated\r\n    // pivot result cols or auto cols. Also if defaults exist, ensure they are applied to pivot resul cols\r\n    if (unmatchedAndAutoStates.length > 0 || _exists(params.defaultState)) {\r\n        const pivotResultColsList = pivotResultCols?.getPivotResultCols()?.list ?? [];\r\n        unmatchedCount = applyStates(\r\n            unmatchedAndAutoStates,\r\n            pivotResultColsList,\r\n            (id) => pivotResultCols?.getPivotResultCol(id) ?? null\r\n        ).unmatchedCount;\r\n    }\r\n    colAnimation?.finish();\r\n\r\n    return unmatchedCount === 0; // Successful if no states unaccounted for\r\n}\r\n\r\nexport function _resetColumnState(beans: BeanCollection, source: ColumnEventType): void {\r\n    const { colModel, autoColSvc } = beans;\r\n    const primaryCols = colModel.getColDefCols();\r\n    if (!primaryCols?.length) {\r\n        return;\r\n    }\r\n\r\n    // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,\r\n    // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.\r\n    // As a work around, developers should just put lockPosition columns first in their colDef list.\r\n\r\n    // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list\r\n    const primaryColumnTree = colModel.getColDefColTree();\r\n    const primaryColumns = _getColumnsFromTree(primaryColumnTree);\r\n    const columnStates: ColumnState[] = [];\r\n\r\n    // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.\r\n    // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,\r\n    // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000\r\n    let letRowGroupIndex = 1000;\r\n    let letPivotIndex = 1000;\r\n\r\n    let colsToProcess: AgColumn[] = [];\r\n    const groupAutoCols = autoColSvc?.getAutoCols();\r\n    if (groupAutoCols) {\r\n        colsToProcess = colsToProcess.concat(groupAutoCols);\r\n    }\r\n\r\n    if (primaryColumns) {\r\n        colsToProcess = colsToProcess.concat(primaryColumns);\r\n    }\r\n\r\n    colsToProcess.forEach((column) => {\r\n        const stateItem = getColumnStateFromColDef(column);\r\n\r\n        if (_missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {\r\n            stateItem.rowGroupIndex = letRowGroupIndex++;\r\n        }\r\n\r\n        if (_missing(stateItem.pivotIndex) && stateItem.pivot) {\r\n            stateItem.pivotIndex = letPivotIndex++;\r\n        }\r\n\r\n        columnStates.push(stateItem);\r\n    });\r\n\r\n    _applyColumnState(beans, { state: columnStates, applyOrder: true }, source);\r\n}\r\n\r\n/**\r\n * calculates what events to fire between column state changes. gets used when:\r\n * a) apply column state\r\n * b) apply new column definitions (so changes from old cols)\r\n */\r\nexport function _compareColumnStatesAndDispatchEvents(beans: BeanCollection, source: ColumnEventType): () => void {\r\n    const { rowGroupColsSvc, pivotColsSvc, valueColsSvc, colModel, sortSvc, eventSvc } = beans;\r\n    const startState = {\r\n        rowGroupColumns: rowGroupColsSvc?.columns.slice() ?? [],\r\n        pivotColumns: pivotColsSvc?.columns.slice() ?? [],\r\n        valueColumns: valueColsSvc?.columns.slice() ?? [],\r\n    };\r\n\r\n    const columnStateBefore = _getColumnState(beans);\r\n    const columnStateBeforeMap: { [colId: string]: ColumnState } = {};\r\n\r\n    columnStateBefore.forEach((col) => {\r\n        columnStateBeforeMap[col.colId!] = col;\r\n    });\r\n\r\n    return () => {\r\n        const colsForState = colModel.getAllCols();\r\n\r\n        // dispatches generic ColumnEvents where all columns are returned rather than what has changed\r\n        const dispatchWhenListsDifferent = (\r\n            eventType: 'columnPivotChanged' | 'columnRowGroupChanged',\r\n            colsBefore: AgColumn[],\r\n            colsAfter: AgColumn[],\r\n            idMapper: (column: AgColumn) => string\r\n        ) => {\r\n            const beforeList = colsBefore.map(idMapper);\r\n            const afterList = colsAfter.map(idMapper);\r\n            const unchanged = _areEqual(beforeList, afterList);\r\n\r\n            if (unchanged) {\r\n                return;\r\n            }\r\n\r\n            const changes = new Set(colsBefore);\r\n            colsAfter.forEach((id) => {\r\n                // if the first list had it, delete it, as it's unchanged.\r\n                if (!changes.delete(id)) {\r\n                    // if the second list has it, and first doesn't, add it.\r\n                    changes.add(id);\r\n                }\r\n            });\r\n\r\n            const changesArr = [...changes];\r\n\r\n            eventSvc.dispatchEvent({\r\n                type: eventType,\r\n                columns: changesArr,\r\n                column: changesArr.length === 1 ? changesArr[0] : null,\r\n                source: source,\r\n            } as WithoutGridCommon<ColumnEvent>);\r\n        };\r\n\r\n        // determines which columns have changed according to supplied predicate\r\n        const getChangedColumns = (changedPredicate: (cs: ColumnState, c: AgColumn) => boolean): AgColumn[] => {\r\n            const changedColumns: AgColumn[] = [];\r\n\r\n            colsForState.forEach((column) => {\r\n                const colStateBefore = columnStateBeforeMap[column.getColId()];\r\n                if (colStateBefore && changedPredicate(colStateBefore, column)) {\r\n                    changedColumns.push(column);\r\n                }\r\n            });\r\n\r\n            return changedColumns;\r\n        };\r\n\r\n        const columnIdMapper = (c: AgColumn) => c.getColId();\r\n\r\n        dispatchWhenListsDifferent(\r\n            'columnRowGroupChanged',\r\n            startState.rowGroupColumns,\r\n            rowGroupColsSvc?.columns ?? [],\r\n            columnIdMapper\r\n        );\r\n\r\n        dispatchWhenListsDifferent(\r\n            'columnPivotChanged',\r\n            startState.pivotColumns,\r\n            pivotColsSvc?.columns ?? [],\r\n            columnIdMapper\r\n        );\r\n\r\n        const valueChangePredicate = (cs: ColumnState, c: AgColumn) => {\r\n            const oldActive = cs.aggFunc != null;\r\n\r\n            const activeChanged = oldActive != c.isValueActive();\r\n            // we only check aggFunc if the agg is active\r\n            const aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();\r\n\r\n            return activeChanged || aggFuncChanged;\r\n        };\r\n        const changedValues = getChangedColumns(valueChangePredicate);\r\n        if (changedValues.length > 0) {\r\n            dispatchColumnChangedEvent(eventSvc, 'columnValueChanged', changedValues, source);\r\n        }\r\n\r\n        const resizeChangePredicate = (cs: ColumnState, c: AgColumn) => cs.width != c.getActualWidth();\r\n        dispatchColumnResizedEvent(eventSvc, getChangedColumns(resizeChangePredicate), true, source);\r\n\r\n        const pinnedChangePredicate = (cs: ColumnState, c: AgColumn) => cs.pinned != c.getPinned();\r\n        dispatchColumnPinnedEvent(eventSvc, getChangedColumns(pinnedChangePredicate), source);\r\n\r\n        const visibilityChangePredicate = (cs: ColumnState, c: AgColumn) => cs.hide == c.isVisible();\r\n        dispatchColumnVisibleEvent(eventSvc, getChangedColumns(visibilityChangePredicate), source);\r\n\r\n        const sortChangePredicate = (cs: ColumnState, c: AgColumn) =>\r\n            cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();\r\n        const changedColumns = getChangedColumns(sortChangePredicate);\r\n        if (changedColumns.length > 0) {\r\n            sortSvc?.dispatchSortChangedEvents(source, changedColumns);\r\n        }\r\n\r\n        const colStateAfter = _getColumnState(beans);\r\n        // special handling for moved column events\r\n        normaliseColumnMovedEventForColumnState(columnStateBefore, colStateAfter, source, colModel, eventSvc);\r\n    };\r\n}\r\n\r\nexport function _getColumnState(beans: BeanCollection): ColumnState[] {\r\n    const { colModel, rowGroupColsSvc, pivotColsSvc } = beans;\r\n    const primaryCols = colModel.getColDefCols();\r\n\r\n    if (_missing(primaryCols) || !colModel.isAlive()) {\r\n        return [];\r\n    }\r\n\r\n    const colsForState = colModel.getAllCols();\r\n    const rowGroupColumns = rowGroupColsSvc?.columns;\r\n    const pivotColumns = pivotColsSvc?.columns;\r\n\r\n    const createStateItemFromColumn = (column: AgColumn) => {\r\n        const rowGroupIndex = column.isRowGroupActive() && rowGroupColumns ? rowGroupColumns.indexOf(column) : null;\r\n        const pivotIndex = column.isPivotActive() && pivotColumns ? pivotColumns.indexOf(column) : null;\r\n\r\n        const aggFunc = column.isValueActive() ? column.getAggFunc() : null;\r\n        const sort = column.getSort() != null ? column.getSort() : null;\r\n        const sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;\r\n\r\n        const res: ColumnState = {\r\n            colId: column.getColId(),\r\n            width: column.getActualWidth(),\r\n            hide: !column.isVisible(),\r\n            pinned: column.getPinned(),\r\n            sort,\r\n            sortIndex,\r\n            aggFunc,\r\n            rowGroup: column.isRowGroupActive(),\r\n            rowGroupIndex,\r\n            pivot: column.isPivotActive(),\r\n            pivotIndex: pivotIndex,\r\n            flex: column.getFlex() ?? null,\r\n        };\r\n\r\n        return res;\r\n    };\r\n\r\n    const res = colsForState.map((col) => createStateItemFromColumn(col));\r\n\r\n    // for fast looking, store the index of each column\r\n    const colIdToGridIndexMap = new Map<string, number>(\r\n        colModel.getCols().map((col, index) => [col.getColId(), index])\r\n    );\r\n\r\n    res.sort((itemA: any, itemB: any) => {\r\n        const posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;\r\n        const posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;\r\n        return posA! - posB!;\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport function getColumnStateFromColDef(column: AgColumn): ColumnState {\r\n    const getValueOrNull = (a: any, b: any) => (a != null ? a : b != null ? b : null);\r\n\r\n    const colDef = column.getColDef();\r\n    const sort = getValueOrNull(colDef.sort, colDef.initialSort);\r\n    const sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);\r\n    const hide = getValueOrNull(colDef.hide, colDef.initialHide);\r\n    const pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);\r\n\r\n    const width = getValueOrNull(colDef.width, colDef.initialWidth);\r\n    const flex = getValueOrNull(colDef.flex, colDef.initialFlex);\r\n\r\n    let rowGroupIndex: number | null | undefined = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);\r\n    let rowGroup: boolean | null | undefined = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);\r\n\r\n    if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {\r\n        rowGroupIndex = null;\r\n        rowGroup = null;\r\n    }\r\n\r\n    let pivotIndex: number | null | undefined = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);\r\n    let pivot: boolean | null | undefined = getValueOrNull(colDef.pivot, colDef.initialPivot);\r\n\r\n    if (pivotIndex == null && (pivot == null || pivot == false)) {\r\n        pivotIndex = null;\r\n        pivot = null;\r\n    }\r\n\r\n    const aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);\r\n\r\n    return {\r\n        colId: column.getColId(),\r\n        sort,\r\n        sortIndex,\r\n        hide,\r\n        pinned,\r\n        width,\r\n        flex,\r\n        rowGroup,\r\n        rowGroupIndex,\r\n        pivot,\r\n        pivotIndex,\r\n        aggFunc,\r\n    };\r\n}\r\n\r\nfunction orderLiveColsLikeState(params: ApplyColumnStateParams, colModel: ColumnModel, gos: GridOptionsService): void {\r\n    if (!params.applyOrder || !params.state) {\r\n        return;\r\n    }\r\n    const colIds: string[] = [];\r\n    params.state.forEach((item) => {\r\n        if (item.colId != null) {\r\n            colIds.push(item.colId);\r\n        }\r\n    });\r\n    sortColsLikeKeys(colModel.cols, colIds, colModel, gos);\r\n}\r\n\r\nfunction sortColsLikeKeys(\r\n    cols: ColumnCollections | undefined,\r\n    colIds: string[],\r\n    colModel: ColumnModel,\r\n    gos: GridOptionsService\r\n): void {\r\n    if (cols == null) {\r\n        return;\r\n    }\r\n\r\n    let newOrder: AgColumn[] = [];\r\n    const processedColIds: { [id: string]: boolean } = {};\r\n\r\n    colIds.forEach((colId) => {\r\n        if (processedColIds[colId]) {\r\n            return;\r\n        }\r\n        const col = cols.map[colId];\r\n        if (col) {\r\n            newOrder.push(col);\r\n            processedColIds[colId] = true;\r\n        }\r\n    });\r\n\r\n    // add in all other columns\r\n    let autoGroupInsertIndex = 0;\r\n    cols.list.forEach((col) => {\r\n        const colId = col.getColId();\r\n        const alreadyProcessed = processedColIds[colId] != null;\r\n        if (alreadyProcessed) {\r\n            return;\r\n        }\r\n\r\n        const isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);\r\n        if (isAutoGroupCol) {\r\n            // auto group columns, if missing from state list, are added to the start.\r\n            // it's common to have autoGroup missing, as grouping could be on by default\r\n            // on a column, but the user could of since removed the grouping via the UI.\r\n            // if we don't inc the insert index, autoGroups will be inserted in reverse order\r\n            newOrder.splice(autoGroupInsertIndex++, 0, col);\r\n        } else {\r\n            // normal columns, if missing from state list, are added at the end\r\n            newOrder.push(col);\r\n        }\r\n    });\r\n\r\n    // this is already done in updateCols, however we changed the order above (to match the order of the state\r\n    // columns) so we need to do it again. we could of put logic into the order above to take into account fixed\r\n    // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here\r\n    // is less sexy for the code here, but it keeps consistency.\r\n    newOrder = placeLockedColumns(newOrder, gos);\r\n\r\n    if (!doesMovePassMarryChildren(newOrder, colModel.getColTree())) {\r\n        _warn(39);\r\n        return;\r\n    }\r\n\r\n    cols.list = newOrder;\r\n}\r\n\r\nfunction normaliseColumnMovedEventForColumnState(\r\n    colStateBefore: ColumnState[],\r\n    colStateAfter: ColumnState[],\r\n    source: ColumnEventType,\r\n    colModel: ColumnModel,\r\n    eventSvc: EventService\r\n) {\r\n    // we are only interested in columns that were both present and visible before and after\r\n\r\n    const colStateAfterMapped: { [id: string]: ColumnState } = {};\r\n    colStateAfter.forEach((s) => (colStateAfterMapped[s.colId!] = s));\r\n\r\n    // get id's of cols in both before and after lists\r\n    const colsIntersectIds: { [id: string]: boolean } = {};\r\n    colStateBefore.forEach((s) => {\r\n        if (colStateAfterMapped[s.colId!]) {\r\n            colsIntersectIds[s.colId!] = true;\r\n        }\r\n    });\r\n\r\n    // filter state lists, so we only have cols that were present before and after\r\n    const beforeFiltered = colStateBefore.filter((c) => colsIntersectIds[c.colId!]);\r\n    const afterFiltered = colStateAfter.filter((c) => colsIntersectIds[c.colId!]);\r\n\r\n    // see if any cols are in a different location\r\n    const movedColumns: AgColumn[] = [];\r\n\r\n    afterFiltered!.forEach((csAfter: ColumnState, index: number) => {\r\n        const csBefore = beforeFiltered && beforeFiltered[index];\r\n        if (csBefore && csBefore.colId !== csAfter.colId) {\r\n            const gridCol = colModel.getCol(csBefore.colId!);\r\n            if (gridCol) {\r\n                movedColumns.push(gridCol);\r\n            }\r\n        }\r\n    });\r\n\r\n    if (!movedColumns.length) {\r\n        return;\r\n    }\r\n\r\n    eventSvc.dispatchEvent({\r\n        type: 'columnMoved',\r\n        columns: movedColumns,\r\n        column: movedColumns.length === 1 ? movedColumns[0] : null,\r\n        finished: true,\r\n        source,\r\n    });\r\n}\r\n\r\n// sort the lists according to the indexes that were provided\r\nconst comparatorByIndex = (indexes: { [key: string]: number }, oldList: AgColumn[], colA: AgColumn, colB: AgColumn) => {\r\n    const indexA = indexes[colA.getId()];\r\n    const indexB = indexes[colB.getId()];\r\n\r\n    const aHasIndex = indexA != null;\r\n    const bHasIndex = indexB != null;\r\n\r\n    if (aHasIndex && bHasIndex) {\r\n        // both a and b are new cols with index, so sort on index\r\n        return indexA - indexB;\r\n    }\r\n\r\n    if (aHasIndex) {\r\n        // a has an index, so it should be before a\r\n        return -1;\r\n    }\r\n\r\n    if (bHasIndex) {\r\n        // b has an index, so it should be before a\r\n        return 1;\r\n    }\r\n\r\n    const oldIndexA = oldList.indexOf(colA);\r\n    const oldIndexB = oldList.indexOf(colB);\r\n\r\n    const aHasOldIndex = oldIndexA >= 0;\r\n    const bHasOldIndex = oldIndexB >= 0;\r\n\r\n    if (aHasOldIndex && bHasOldIndex) {\r\n        // both a and b are old cols, so sort based on last order\r\n        return oldIndexA - oldIndexB;\r\n    }\r\n\r\n    if (aHasOldIndex) {\r\n        // a is old, b is new, so b is first\r\n        return -1;\r\n    }\r\n\r\n    // this bit does matter, means both are new cols\r\n    // but without index or that b is old and a is new\r\n    return 1;\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { ColumnEventType } from '../events';\r\nimport { _getCheckboxLocation, _getCheckboxes, _getHeaderCheckbox, _isRowSelection } from '../gridOptionsUtils';\r\nimport type { ColKey, ColumnCollections } from './columnModel';\r\nimport { _applyColumnState, _getColumnState } from './columnStateUtils';\r\nimport {\r\n    _areColIdsEqual,\r\n    _columnsMatch,\r\n    _convertColumnEventSourceType,\r\n    _destroyColumnTree,\r\n    _updateColsMap,\r\n    isColumnSelectionCol,\r\n} from './columnUtils';\r\n\r\nexport const CONTROLS_COLUMN_ID_PREFIX = 'ag-Grid-SelectionColumn' as const;\r\n\r\nexport class SelectionColService extends BeanStub implements NamedBean {\r\n    beanName = 'selectionColSvc' as const;\r\n\r\n    public selectionCols: ColumnCollections | null;\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedPropertyListener('rowSelection', (event) => {\r\n            this.onSelectionOptionsChanged(\r\n                event.currentValue,\r\n                event.previousValue,\r\n                _convertColumnEventSourceType(event.source)\r\n            );\r\n        });\r\n    }\r\n\r\n    public addSelectionCols(cols: ColumnCollections): void {\r\n        const selectionCols = this.selectionCols;\r\n        if (selectionCols == null) {\r\n            return;\r\n        }\r\n        cols.list = selectionCols.list.concat(cols.list);\r\n        cols.tree = selectionCols.tree.concat(cols.tree);\r\n        _updateColsMap(cols);\r\n    }\r\n\r\n    public createSelectionCols(\r\n        cols: ColumnCollections,\r\n        updateOrders: (callback: (cols: AgColumn[] | null) => AgColumn[] | null) => void\r\n    ): void {\r\n        const destroyCollection = () => {\r\n            _destroyColumnTree(this.beans, this.selectionCols?.tree);\r\n            this.selectionCols = null;\r\n        };\r\n\r\n        // the new tree dept will equal the current tree dept of cols\r\n        const newTreeDepth = cols.treeDepth;\r\n        const oldTreeDepth = this.selectionCols?.treeDepth ?? -1;\r\n        const treeDeptSame = oldTreeDepth == newTreeDepth;\r\n\r\n        const list = this.generateSelectionCols();\r\n        const areSame = _areColIdsEqual(list, this.selectionCols?.list ?? []);\r\n\r\n        if (areSame && treeDeptSame) {\r\n            return;\r\n        }\r\n\r\n        destroyCollection();\r\n        const { colGroupSvc } = this.beans;\r\n        const treeDepth = colGroupSvc?.findDepth(cols.tree) ?? 0;\r\n        const tree = colGroupSvc?.balanceTreeForAutoCols(list, treeDepth) ?? [];\r\n        this.selectionCols = {\r\n            list,\r\n            tree,\r\n            treeDepth,\r\n            map: {},\r\n        };\r\n\r\n        const putSelectionColsFirstInList = (cols?: AgColumn[] | null): AgColumn[] | null => {\r\n            if (!cols) {\r\n                return null;\r\n            }\r\n            // we use colId, and not instance, to remove old selectionCols\r\n            const colsFiltered = cols.filter((col) => !isColumnSelectionCol(col));\r\n            return [...list, ...colsFiltered];\r\n        };\r\n\r\n        updateOrders(putSelectionColsFirstInList);\r\n    }\r\n\r\n    public isSelectionColumnEnabled(): boolean {\r\n        const { gos, beans } = this;\r\n        const rowSelection = gos.get('rowSelection');\r\n        if (typeof rowSelection !== 'object' || !_isRowSelection(gos)) {\r\n            return false;\r\n        }\r\n\r\n        const hasAutoCols = (beans.autoColSvc?.getAutoCols()?.length ?? 0) > 0;\r\n\r\n        if (rowSelection.checkboxLocation === 'autoGroupColumn' && hasAutoCols) {\r\n            return false;\r\n        }\r\n\r\n        const checkboxes = !!_getCheckboxes(rowSelection);\r\n        const headerCheckbox = _getHeaderCheckbox(rowSelection);\r\n\r\n        return checkboxes || headerCheckbox;\r\n    }\r\n\r\n    private generateSelectionCols(): AgColumn[] {\r\n        if (!this.isSelectionColumnEnabled()) {\r\n            return [];\r\n        }\r\n\r\n        const { gos, validation } = this.beans;\r\n        const selectionColumnDef = gos.get('selectionColumnDef');\r\n        const enableRTL = gos.get('enableRtl');\r\n        const colDef: ColDef = {\r\n            // overridable properties\r\n            width: 50,\r\n            resizable: false,\r\n            suppressHeaderMenuButton: true,\r\n            sortable: false,\r\n            suppressMovable: true,\r\n            lockPosition: enableRTL ? 'right' : 'left',\r\n            comparator(valueA, valueB, nodeA, nodeB) {\r\n                const aSelected = nodeA.isSelected();\r\n                const bSelected = nodeB.isSelected();\r\n                return aSelected === bSelected ? 0 : aSelected ? 1 : -1;\r\n            },\r\n            editable: false,\r\n            suppressFillHandle: true,\r\n            // overrides\r\n            ...selectionColumnDef,\r\n            // non-overridable properties\r\n            colId: CONTROLS_COLUMN_ID_PREFIX,\r\n        };\r\n        const colId = colDef.colId!;\r\n        validation?.validateColDef(colDef, colId, true);\r\n        const col = new AgColumn(colDef, null, colId, false);\r\n        this.createBean(col);\r\n        return [col];\r\n    }\r\n\r\n    public putSelectionColsFirstInList(list: AgColumn[], cols?: AgColumn[] | null): AgColumn[] | null {\r\n        if (!cols) {\r\n            return null;\r\n        }\r\n        // we use colId, and not instance, to remove old selectionCols\r\n        const colsFiltered = cols.filter((col) => !isColumnSelectionCol(col));\r\n        return [...list, ...colsFiltered];\r\n    }\r\n\r\n    public getSelectionCol(key: ColKey): AgColumn | null {\r\n        return this.selectionCols?.list.find((col) => _columnsMatch(col, key)) ?? null;\r\n    }\r\n\r\n    public getSelectionCols(): AgColumn[] | null {\r\n        return this.selectionCols?.list ?? null;\r\n    }\r\n\r\n    private onSelectionOptionsChanged(\r\n        current: GridOptions['rowSelection'],\r\n        prev: GridOptions['rowSelection'],\r\n        source: ColumnEventType\r\n    ) {\r\n        const prevCheckbox = prev && typeof prev !== 'string' ? _getCheckboxes(prev) : undefined;\r\n        const currCheckbox = current && typeof current !== 'string' ? _getCheckboxes(current) : undefined;\r\n        const checkboxHasChanged = prevCheckbox !== currCheckbox;\r\n\r\n        const prevHeaderCheckbox = prev && typeof prev !== 'string' ? _getHeaderCheckbox(prev) : undefined;\r\n        const currHeaderCheckbox = current && typeof current !== 'string' ? _getHeaderCheckbox(current) : undefined;\r\n        const headerCheckboxHasChanged = prevHeaderCheckbox !== currHeaderCheckbox;\r\n\r\n        const currLocation = _getCheckboxLocation(current);\r\n        const prevLocation = _getCheckboxLocation(prev);\r\n        const locationChanged = currLocation !== prevLocation;\r\n\r\n        if (checkboxHasChanged || headerCheckboxHasChanged || locationChanged) {\r\n            this.beans.colModel.refreshAll(source);\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        _destroyColumnTree(this.beans, this.selectionCols?.tree);\r\n        super.destroy();\r\n    }\r\n\r\n    public refreshVisibility(source: ColumnEventType): void {\r\n        if (!this.isSelectionColumnEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const beans = this.beans;\r\n        const visibleColumns = beans.visibleCols.getAllTrees() ?? [];\r\n\r\n        if (visibleColumns.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // check first: one or more columns showing -- none are selection column\r\n        if (!visibleColumns.some(isLeafColumnSelectionCol)) {\r\n            const existingState = _getColumnState(beans).find((state) => isColumnSelectionCol(state.colId));\r\n\r\n            if (existingState) {\r\n                _applyColumnState(\r\n                    beans,\r\n                    {\r\n                        state: [{ colId: existingState.colId, hide: !existingState.hide }],\r\n                    },\r\n                    source\r\n                );\r\n            }\r\n        }\r\n\r\n        // lastly, check only one column showing -- selection column\r\n        if (visibleColumns.length === 1) {\r\n            const firstColumn = visibleColumns[0];\r\n            const leafSelectionCol = getLeafColumnSelectionCol(firstColumn);\r\n\r\n            if (!leafSelectionCol) {\r\n                return;\r\n            }\r\n\r\n            _applyColumnState(beans, { state: [{ colId: leafSelectionCol.getColId(), hide: true }] }, source);\r\n        }\r\n    }\r\n}\r\n\r\nconst isLeafColumnSelectionCol = (c: AgColumn | AgColumnGroup): boolean =>\r\n    c.isColumn ? isColumnSelectionCol(c) : c.getChildren()?.some(isLeafColumnSelectionCol) ?? false;\r\n\r\nfunction getLeafColumnSelectionCol(c: AgColumn | AgColumnGroup): AgColumn | null {\r\n    if (c.isColumn) {\r\n        return isColumnSelectionCol(c) ? c : null;\r\n    }\r\n\r\n    const children = c.getChildren() ?? [];\r\n\r\n    for (const child of children) {\r\n        const selCol = getLeafColumnSelectionCol(child);\r\n        if (selCol) {\r\n            return selCol;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { isColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { PropertyChangedSource } from '../gridOptionsService';\r\nimport type { ColumnInstanceId } from '../interfaces/iColumn';\r\nimport { _areEqual } from '../utils/array';\r\nimport { _exists } from '../utils/generic';\r\nimport { depthFirstOriginalTreeSearch } from './columnFactoryUtils';\r\nimport type { ColKey, ColumnCollections } from './columnModel';\r\nimport type { ColumnState, ColumnStateParams } from './columnStateUtils';\r\nimport { CONTROLS_COLUMN_ID_PREFIX } from './selectionColService';\r\n\r\nexport const GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn' as const;\r\n\r\n// Possible candidate for reuse (alot of recursive traversal duplication)\r\nexport function _getColumnsFromTree(rootColumns: (AgColumn | AgProvidedColumnGroup)[]): AgColumn[] {\r\n    const result: AgColumn[] = [];\r\n\r\n    const recursiveFindColumns = (childColumns: (AgColumn | AgProvidedColumnGroup)[]): void => {\r\n        for (let i = 0; i < childColumns.length; i++) {\r\n            const child = childColumns[i];\r\n            if (isColumn(child)) {\r\n                result.push(child);\r\n            } else if (isProvidedColumnGroup(child)) {\r\n                recursiveFindColumns(child.getChildren());\r\n            }\r\n        }\r\n    };\r\n\r\n    recursiveFindColumns(rootColumns);\r\n\r\n    return result;\r\n}\r\n\r\nexport function getWidthOfColsInList(columnList: AgColumn[]) {\r\n    return columnList.reduce((width, col) => width + col.getActualWidth(), 0);\r\n}\r\n\r\nexport function _destroyColumnTree(\r\n    beans: BeanCollection,\r\n    oldTree: (AgColumn | AgProvidedColumnGroup)[] | null | undefined,\r\n    newTree?: (AgColumn | AgProvidedColumnGroup)[] | null\r\n): void {\r\n    const oldObjectsById: { [id: ColumnInstanceId]: (AgColumn | AgProvidedColumnGroup) | null } = {};\r\n\r\n    if (!oldTree) {\r\n        return;\r\n    }\r\n\r\n    // add in all old columns to be destroyed\r\n    depthFirstOriginalTreeSearch(null, oldTree, (child) => {\r\n        oldObjectsById[child.getInstanceId()] = child;\r\n    });\r\n\r\n    // however we don't destroy anything in the new tree. if destroying the grid, there is no new tree\r\n    if (newTree) {\r\n        depthFirstOriginalTreeSearch(null, newTree, (child) => {\r\n            oldObjectsById[child.getInstanceId()] = null;\r\n        });\r\n    }\r\n\r\n    // what's left can be destroyed\r\n    const colsToDestroy = Object.values(oldObjectsById).filter((item) => item != null);\r\n    beans.context.destroyBeans(colsToDestroy);\r\n}\r\n\r\nexport function isColumnGroupAutoCol(col: AgColumn): boolean {\r\n    const colId = col.getId();\r\n    return colId.startsWith(GROUP_AUTO_COLUMN_ID);\r\n}\r\n\r\nexport function isColumnSelectionCol(col: ColKey): boolean {\r\n    const id = typeof col === 'string' ? col : 'getColId' in col ? col.getColId() : col.colId;\r\n    return id?.startsWith(CONTROLS_COLUMN_ID_PREFIX) ?? false;\r\n}\r\n\r\nexport function convertColumnTypes(type: string | string[]): string[] {\r\n    let typeKeys: string[] = [];\r\n\r\n    if (type instanceof Array) {\r\n        typeKeys = type;\r\n    } else if (typeof type === 'string') {\r\n        typeKeys = type.split(',');\r\n    }\r\n    return typeKeys;\r\n}\r\n\r\nexport function _areColIdsEqual(colsA: AgColumn[] | null, colsB: AgColumn[] | null): boolean {\r\n    return _areEqual(colsA, colsB, (a, b) => a.getColId() === b.getColId());\r\n}\r\n\r\nexport function _updateColsMap(cols: ColumnCollections): void {\r\n    cols.map = {};\r\n    cols.list.forEach((col) => (cols.map[col.getId()] = col));\r\n}\r\n\r\nexport function _convertColumnEventSourceType(source: PropertyChangedSource): ColumnEventType {\r\n    // unfortunately they do not match so need to perform conversion\r\n    return source === 'gridOptionsUpdated' ? 'gridOptionsChanged' : source;\r\n}\r\n\r\nexport function _columnsMatch(column: AgColumn, key: ColKey): boolean {\r\n    const columnMatches = column === key;\r\n    const colDefMatches = column.getColDef() === key;\r\n    const idMatches = column.getColId() == key;\r\n\r\n    return columnMatches || colDefMatches || idMatches;\r\n}\r\n\r\nexport const getValueFactory =\r\n    (stateItem: ColumnState | null, defaultState: ColumnStateParams | undefined) =>\r\n    <U extends keyof ColumnStateParams, S extends keyof ColumnStateParams>(\r\n        key1: U,\r\n        key2?: S\r\n    ): { value1: ColumnStateParams[U] | undefined; value2: ColumnStateParams[S] | undefined } => {\r\n        const obj: { value1: ColumnStateParams[U] | undefined; value2: ColumnStateParams[S] | undefined } = {\r\n            value1: undefined,\r\n            value2: undefined,\r\n        };\r\n        let calculated: boolean = false;\r\n\r\n        if (stateItem) {\r\n            if (stateItem[key1] !== undefined) {\r\n                obj.value1 = stateItem[key1];\r\n                calculated = true;\r\n            }\r\n            if (_exists(key2) && stateItem[key2] !== undefined) {\r\n                obj.value2 = stateItem[key2];\r\n                calculated = true;\r\n            }\r\n        }\r\n\r\n        if (!calculated && defaultState) {\r\n            if (defaultState[key1] !== undefined) {\r\n                obj.value1 = defaultState[key1];\r\n            }\r\n            if (_exists(key2) && defaultState[key2] !== undefined) {\r\n                obj.value2 = defaultState[key2];\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    };\r\n", "import type { BeanCollection } from '../context/context';\r\nimport { AgColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport { isProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { ColDef, ColGroupDef, SortDirection } from '../entities/colDef';\r\nimport { DefaultColumnTypes } from '../entities/defaultColumnTypes';\r\nimport type { ColumnEventType } from '../events';\r\nimport { _isColumnsSortingCoupledToGroup } from '../gridOptionsUtils';\r\nimport { _mergeDeep } from '../utils/object';\r\nimport { _warn } from '../validation/logging';\r\nimport { ColumnKeyCreator } from './columnKeyCreator';\r\nimport { convertColumnTypes } from './columnUtils';\r\n\r\nexport function _createColumnTree(\r\n    beans: BeanCollection,\r\n    defs: (ColDef | ColGroupDef)[] | null | undefined = null,\r\n    primaryColumns: boolean,\r\n    existingTree: (AgColumn | AgProvidedColumnGroup)[] | undefined,\r\n    source: ColumnEventType\r\n): { columnTree: (AgColumn | AgProvidedColumnGroup)[]; treeDept: number } {\r\n    // column key creator dishes out unique column id's in a deterministic way,\r\n    // so if we have two grids (that could be master/slave) with same column definitions,\r\n    // then this ensures the two grids use identical id's.\r\n    const columnKeyCreator = new ColumnKeyCreator();\r\n\r\n    const { existingCols, existingGroups, existingColKeys } = extractExistingTreeData(existingTree);\r\n    columnKeyCreator.addExistingKeys(existingColKeys);\r\n\r\n    // create am unbalanced tree that maps the provided definitions\r\n    const unbalancedTree = _recursivelyCreateColumns(\r\n        beans,\r\n        defs,\r\n        0,\r\n        primaryColumns,\r\n        existingCols,\r\n        columnKeyCreator,\r\n        existingGroups,\r\n        source\r\n    );\r\n    const { colGroupSvc } = beans;\r\n    const treeDept = colGroupSvc?.findMaxDepth(unbalancedTree, 0) ?? 0;\r\n    const columnTree = colGroupSvc\r\n        ? colGroupSvc.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator)\r\n        : unbalancedTree;\r\n\r\n    const deptFirstCallback = (child: AgColumn | AgProvidedColumnGroup, parent: AgProvidedColumnGroup) => {\r\n        if (isProvidedColumnGroup(child)) {\r\n            child.setupExpandable();\r\n        }\r\n        // we set the original parents at the end, rather than when we go along, as balancing the tree\r\n        // adds extra levels into the tree. so we can only set parents when balancing is done.\r\n        child.originalParent = parent;\r\n    };\r\n\r\n    depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);\r\n\r\n    return {\r\n        columnTree,\r\n        treeDept,\r\n    };\r\n}\r\n\r\nfunction extractExistingTreeData(existingTree?: (AgColumn | AgProvidedColumnGroup)[]): {\r\n    existingCols: AgColumn[];\r\n    existingGroups: AgProvidedColumnGroup[];\r\n    existingColKeys: string[];\r\n} {\r\n    const existingCols: AgColumn[] = [];\r\n    const existingGroups: AgProvidedColumnGroup[] = [];\r\n    const existingColKeys: string[] = [];\r\n\r\n    if (existingTree) {\r\n        depthFirstOriginalTreeSearch(null, existingTree, (item: AgColumn | AgProvidedColumnGroup) => {\r\n            if (isProvidedColumnGroup(item)) {\r\n                const group = item;\r\n                existingGroups.push(group);\r\n            } else {\r\n                const col = item;\r\n                existingColKeys.push(col.getId());\r\n                existingCols.push(col);\r\n            }\r\n        });\r\n    }\r\n\r\n    return { existingCols, existingGroups, existingColKeys };\r\n}\r\n\r\nexport function _recursivelyCreateColumns(\r\n    beans: BeanCollection,\r\n    defs: (ColDef | ColGroupDef)[] | null,\r\n    level: number,\r\n    primaryColumns: boolean,\r\n    existingColsCopy: AgColumn[],\r\n    columnKeyCreator: ColumnKeyCreator,\r\n    existingGroups: AgProvidedColumnGroup[],\r\n    source: ColumnEventType\r\n): (AgColumn | AgProvidedColumnGroup)[] {\r\n    if (!defs) return [];\r\n\r\n    const { colGroupSvc } = beans;\r\n    const result = new Array(defs.length);\r\n    for (let i = 0; i < result.length; i++) {\r\n        const def = defs[i];\r\n        if (colGroupSvc && isColumnGroup(def)) {\r\n            result[i] = colGroupSvc.createProvidedColumnGroup(\r\n                primaryColumns,\r\n                def as ColGroupDef,\r\n                level,\r\n                existingColsCopy,\r\n                columnKeyCreator,\r\n                existingGroups,\r\n                source\r\n            );\r\n        } else {\r\n            result[i] = createColumn(beans, primaryColumns, def as ColDef, existingColsCopy, columnKeyCreator, source);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction createColumn(\r\n    beans: BeanCollection,\r\n    primaryColumns: boolean,\r\n    colDef: ColDef,\r\n    existingColsCopy: AgColumn[] | null,\r\n    columnKeyCreator: ColumnKeyCreator,\r\n    source: ColumnEventType\r\n): AgColumn {\r\n    // see if column already exists\r\n    const existingColAndIndex = findExistingColumn(colDef, existingColsCopy);\r\n\r\n    // make sure we remove, so if user provided duplicate id, then we don't have more than\r\n    // one column instance for colDef with common id\r\n    if (existingColAndIndex) {\r\n        existingColsCopy?.splice(existingColAndIndex.idx, 1);\r\n    }\r\n\r\n    let column = existingColAndIndex?.column;\r\n    if (!column) {\r\n        // no existing column, need to create one\r\n        const colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);\r\n        const colDefMerged = _addColumnDefaultAndTypes(beans, colDef, colId);\r\n        column = new AgColumn(colDefMerged, colDef, colId, primaryColumns);\r\n        beans.context.createBean(column);\r\n    } else {\r\n        const colDefMerged = _addColumnDefaultAndTypes(beans, colDef, column.getColId());\r\n        column.setColDef(colDefMerged, colDef, source);\r\n        _updateColumnState(beans, column, colDefMerged, source);\r\n    }\r\n\r\n    beans.dataTypeSvc?.addColumnListeners(column);\r\n\r\n    return column;\r\n}\r\n\r\n/** Updates hide, sort, sortIndex, pinned and flex */\r\n\r\nexport function updateSomeColumnState(\r\n    beans: BeanCollection,\r\n    column: AgColumn,\r\n    hide: boolean | null | undefined,\r\n    sort: SortDirection | undefined,\r\n    sortIndex: number | null | undefined,\r\n    pinned: boolean | 'left' | 'right' | null | undefined,\r\n    flex: number | null | undefined,\r\n    source: ColumnEventType\r\n): void {\r\n    const { sortSvc, pinnedCols, colFlex } = beans;\r\n\r\n    // hide - anything but undefined, thus null will clear the hide\r\n    if (hide !== undefined) {\r\n        column.setVisible(!hide, source);\r\n    }\r\n\r\n    if (sortSvc) {\r\n        // sort - anything but undefined will set sort, thus null or empty string will clear the sort\r\n        sortSvc.updateColSort(column, sort, source);\r\n\r\n        // sorted at - anything but undefined, thus null will clear the sortIndex\r\n        if (sortIndex !== undefined) {\r\n            sortSvc.setColSortIndex(column, sortIndex);\r\n        }\r\n    }\r\n\r\n    // pinned - anything but undefined, thus null or empty string will remove pinned\r\n    if (pinned !== undefined) {\r\n        pinnedCols?.setColPinned(column, pinned);\r\n    }\r\n\r\n    // flex\r\n    if (flex !== undefined) {\r\n        colFlex?.setColFlex(column, flex);\r\n    }\r\n}\r\n\r\nexport function _updateColumnState(\r\n    beans: BeanCollection,\r\n    column: AgColumn,\r\n    colDef: ColDef,\r\n    source: ColumnEventType\r\n): void {\r\n    updateSomeColumnState(\r\n        beans,\r\n        column,\r\n        colDef.hide,\r\n        colDef.sort,\r\n        colDef.sortIndex,\r\n        colDef.pinned,\r\n        colDef.flex,\r\n        source\r\n    );\r\n\r\n    const colFlex = column.getFlex();\r\n\r\n    // width - we only set width if column is not flexing\r\n    if (colFlex != null && colFlex > 0) {\r\n        return;\r\n    }\r\n\r\n    // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\r\n    if (colDef.width != null) {\r\n        column.setActualWidth(colDef.width, source);\r\n    } else {\r\n        // otherwise set the width again, in case min or max width has changed,\r\n        // and width needs to be adjusted.\r\n        const widthBeforeUpdate = column.getActualWidth();\r\n        column.setActualWidth(widthBeforeUpdate, source);\r\n    }\r\n}\r\n\r\nfunction findExistingColumn(\r\n    newColDef: ColDef,\r\n    existingColsCopy: AgColumn[] | null\r\n): { idx: number; column: AgColumn } | undefined {\r\n    if (!existingColsCopy) return undefined;\r\n\r\n    for (let i = 0; i < existingColsCopy.length; i++) {\r\n        const def = existingColsCopy[i].getUserProvidedColDef();\r\n        if (!def) continue;\r\n\r\n        const newHasId = newColDef.colId != null;\r\n        if (newHasId) {\r\n            if (existingColsCopy[i].getId() === newColDef.colId) {\r\n                return { idx: i, column: existingColsCopy[i] };\r\n            }\r\n            continue;\r\n        }\r\n\r\n        const newHasField = newColDef.field != null;\r\n        if (newHasField) {\r\n            if (def.field === newColDef.field) {\r\n                return { idx: i, column: existingColsCopy[i] };\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (def === newColDef) {\r\n            return { idx: i, column: existingColsCopy[i] };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function _addColumnDefaultAndTypes(\r\n    beans: BeanCollection,\r\n    colDef: ColDef,\r\n    colId: string,\r\n    isAutoCol?: boolean\r\n): ColDef {\r\n    const { gos, dataTypeSvc, validation } = beans;\r\n    // start with empty merged definition\r\n    const res: ColDef = {} as ColDef;\r\n\r\n    // merge properties from default column definitions\r\n    const defaultColDef = gos.get('defaultColDef');\r\n    _mergeDeep(res, defaultColDef, false, true);\r\n\r\n    const columnType = updateColDefAndGetColumnType(beans, res, colDef, colId);\r\n\r\n    if (columnType) {\r\n        assignColumnTypes(beans, columnType, res);\r\n    }\r\n\r\n    // merge properties from column definitions\r\n    _mergeDeep(res, colDef, false, true);\r\n\r\n    const autoGroupColDef = gos.get('autoGroupColumnDef');\r\n    const isSortingCoupled = _isColumnsSortingCoupledToGroup(gos);\r\n    if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {\r\n        // override the sort for row group columns where the autoGroupColDef defines these values.\r\n        _mergeDeep(\r\n            res,\r\n            { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort } as ColDef,\r\n            false,\r\n            true\r\n        );\r\n    }\r\n\r\n    dataTypeSvc?.validateColDef(res);\r\n    validation?.validateColDef(res, colId, isAutoCol);\r\n\r\n    return res;\r\n}\r\n\r\nfunction updateColDefAndGetColumnType(\r\n    beans: BeanCollection,\r\n    colDef: ColDef,\r\n    userColDef: ColDef,\r\n    colId: string\r\n): string[] | undefined {\r\n    const dataTypeDefinitionColumnType = beans.dataTypeSvc?.updateColDefAndGetColumnType(colDef, userColDef, colId);\r\n    const columnTypes = userColDef.type ?? dataTypeDefinitionColumnType ?? colDef.type;\r\n    colDef.type = columnTypes;\r\n    return columnTypes ? convertColumnTypes(columnTypes) : undefined;\r\n}\r\n\r\nfunction assignColumnTypes(beans: BeanCollection, typeKeys: string[], colDefMerged: ColDef) {\r\n    if (!typeKeys.length) {\r\n        return;\r\n    }\r\n\r\n    // merge user defined with default column types\r\n    const allColumnTypes = Object.assign({}, DefaultColumnTypes);\r\n    const userTypes = beans.gos.get('columnTypes') || {};\r\n\r\n    for (const [key, value] of Object.entries(userTypes)) {\r\n        if (key in allColumnTypes) {\r\n            // default column types cannot be overridden\r\n            _warn(34, { key });\r\n        } else {\r\n            const colType = value as any;\r\n            if (colType.type) {\r\n                // type should not be defined in column types\r\n                _warn(35);\r\n            }\r\n\r\n            allColumnTypes[key] = value;\r\n        }\r\n    }\r\n\r\n    typeKeys.forEach((t) => {\r\n        const typeColDef = allColumnTypes[t.trim()];\r\n        if (typeColDef) {\r\n            _mergeDeep(colDefMerged, typeColDef, false, true);\r\n        } else {\r\n            _warn(36, { t });\r\n        }\r\n    });\r\n}\r\n\r\n// if object has children, we assume it's a group\r\nfunction isColumnGroup(abstractColDef: ColDef | ColGroupDef): boolean {\r\n    return (abstractColDef as ColGroupDef).children !== undefined;\r\n}\r\n\r\nexport function depthFirstOriginalTreeSearch(\r\n    parent: AgProvidedColumnGroup | null,\r\n    tree: (AgColumn | AgProvidedColumnGroup)[],\r\n    callback: (treeNode: AgColumn | AgProvidedColumnGroup, parent: AgProvidedColumnGroup | null) => void\r\n): void {\r\n    if (!tree) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        const child = tree[i];\r\n        if (isProvidedColumnGroup(child)) {\r\n            depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\r\n        }\r\n        callback(child, parent);\r\n    }\r\n}\r\n", "import { placeLockedColumns } from '../columnMove/columnMoveUtils';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\r\nimport type { ColumnEventType } from '../events';\r\nimport { _shouldMaintainColumnOrder } from '../gridOptionsUtils';\r\nimport type { Column } from '../interfaces/iColumn';\r\nimport type { IPivotResultColsService } from '../interfaces/iPivotResultColsService';\r\nimport { _areEqual } from '../utils/array';\r\nimport { _createColumnTree } from './columnFactoryUtils';\r\nimport { _applyColumnState, _compareColumnStatesAndDispatchEvents } from './columnStateUtils';\r\nimport type { ColumnState } from './columnStateUtils';\r\nimport {\r\n    _columnsMatch,\r\n    _convertColumnEventSourceType,\r\n    _destroyColumnTree,\r\n    _getColumnsFromTree,\r\n    isColumnGroupAutoCol,\r\n} from './columnUtils';\r\n\r\nexport type ColKey<TData = any, TValue = any> = string | ColDef<TData, TValue> | Column<TValue>;\r\nexport type Maybe<T> = T | null | undefined;\r\n\r\nexport interface ColumnCollections {\r\n    // columns in a tree, leaf levels are columns, everything above is group column\r\n    tree: (AgColumn | AgProvidedColumnGroup)[];\r\n    treeDepth: number; // depth of the tree above\r\n    // leaf level cols of the tree\r\n    list: AgColumn[];\r\n    // cols by id, for quick lookup\r\n    map: { [id: string]: AgColumn };\r\n}\r\n\r\nexport class ColumnModel extends BeanStub implements NamedBean {\r\n    beanName = 'colModel' as const;\r\n\r\n    // as provided by gridProp columnsDefs\r\n    private colDefs?: (ColDef | ColGroupDef)[];\r\n\r\n    // columns generated from columnDefs\r\n    // this doesn't change (including order) unless columnDefs prop changses.\r\n    public colDefCols?: ColumnCollections;\r\n\r\n    // [providedCols OR pivotResultCols] PLUS autoGroupCols PLUS selectionCols\r\n    // this cols.list maintains column order.\r\n    public cols?: ColumnCollections;\r\n\r\n    // if pivotMode is on, however pivot results are NOT shown if no pivot columns are set\r\n    private pivotMode = false;\r\n\r\n    // true when pivotResultCols are in cols\r\n    private showingPivotResult: boolean;\r\n\r\n    private lastOrder: AgColumn[] | null;\r\n    private lastPivotOrder: AgColumn[] | null;\r\n\r\n    // true if we are doing column spanning\r\n    public colSpanActive: boolean;\r\n\r\n    public ready = false;\r\n    public changeEventsDispatching = false;\r\n\r\n    public postConstruct(): void {\r\n        this.pivotMode = this.gos.get('pivotMode');\r\n\r\n        this.addManagedPropertyListeners(\r\n            ['groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'],\r\n            (event) => this.refreshAll(_convertColumnEventSourceType(event.source))\r\n        );\r\n        this.addManagedPropertyListeners(\r\n            ['defaultColDef', 'defaultColGroupDef', 'columnTypes', 'suppressFieldDotNotation'],\r\n            (event) => this.recreateColumnDefs(_convertColumnEventSourceType(event.source))\r\n        );\r\n        this.addManagedPropertyListener('pivotMode', (event) =>\r\n            this.setPivotMode(this.gos.get('pivotMode'), _convertColumnEventSourceType(event.source))\r\n        );\r\n    }\r\n\r\n    // called from SyncService, when grid has finished initialising\r\n    private createColsFromColDefs(source: ColumnEventType): void {\r\n        const { beans } = this;\r\n        const {\r\n            valueCache,\r\n            colAutosize,\r\n            rowGroupColsSvc,\r\n            pivotColsSvc,\r\n            valueColsSvc,\r\n            visibleCols,\r\n            colViewport,\r\n            eventSvc,\r\n        } = beans;\r\n        // only need to dispatch before/after events if updating columns, never if setting columns for first time\r\n        const dispatchEventsFunc = this.colDefs ? _compareColumnStatesAndDispatchEvents(beans, source) : undefined;\r\n\r\n        // always invalidate cache on changing columns, as the column id's for the new columns\r\n        // could overlap with the old id's, so the cache would return old values for new columns.\r\n        valueCache?.expire();\r\n\r\n        const oldCols = this.colDefCols?.list;\r\n        const oldTree = this.colDefCols?.tree;\r\n        const newTree = _createColumnTree(beans, this.colDefs, true, oldTree, source);\r\n\r\n        _destroyColumnTree(beans, this.colDefCols?.tree, newTree.columnTree);\r\n\r\n        const tree = newTree.columnTree;\r\n        const treeDepth = newTree.treeDept;\r\n        const list = _getColumnsFromTree(tree);\r\n        const map: { [id: string]: AgColumn } = {};\r\n\r\n        list.forEach((col) => (map[col.getId()] = col));\r\n\r\n        this.colDefCols = { tree, treeDepth, list, map };\r\n\r\n        rowGroupColsSvc?.extractCols(source, oldCols);\r\n        pivotColsSvc?.extractCols(source, oldCols);\r\n        valueColsSvc?.extractCols(source, oldCols);\r\n\r\n        this.ready = true;\r\n\r\n        this.refreshCols(true);\r\n\r\n        visibleCols.refresh(source);\r\n        colViewport.checkViewportColumns();\r\n\r\n        // this event is not used by AG Grid, but left here for backwards compatibility,\r\n        // in case applications use it\r\n        eventSvc.dispatchEvent({\r\n            type: 'columnEverythingChanged',\r\n            source,\r\n        });\r\n\r\n        // Row Models react to all of these events as well as new columns loaded,\r\n        // this flag instructs row model to ignore these events to reduce refreshes.\r\n        if (dispatchEventsFunc) {\r\n            this.changeEventsDispatching = true;\r\n            dispatchEventsFunc();\r\n            this.changeEventsDispatching = false;\r\n        }\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'newColumnsLoaded',\r\n            source,\r\n        });\r\n\r\n        if (source === 'gridInitializing') {\r\n            colAutosize?.applyAutosizeStrategy();\r\n        }\r\n    }\r\n\r\n    // called from: buildAutoGroupColumns (events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents')\r\n    // createColsFromColDefs (recreateColumnDefs, setColumnsDefs),\r\n    // setPivotMode, applyColumnState,\r\n    // functionColsService.setPrimaryColList, functionColsService.updatePrimaryColList,\r\n    // pivotResultCols.setPivotResultCols\r\n    public refreshCols(newColDefs: boolean): void {\r\n        if (!this.colDefCols) {\r\n            return;\r\n        }\r\n\r\n        const prevColTree = this.cols?.tree;\r\n\r\n        this.saveColOrder();\r\n\r\n        const {\r\n            autoColSvc,\r\n            selectionColSvc,\r\n            quickFilter,\r\n            pivotResultCols,\r\n            showRowGroupCols,\r\n            rowAutoHeight,\r\n            visibleCols,\r\n            colViewport,\r\n            eventSvc,\r\n        } = this.beans;\r\n\r\n        const cols = this.selectCols(pivotResultCols, this.colDefCols);\r\n\r\n        autoColSvc?.createAutoCols(cols, (updateOrder) => {\r\n            this.lastOrder = updateOrder(this.lastOrder);\r\n            this.lastPivotOrder = updateOrder(this.lastPivotOrder);\r\n        });\r\n        autoColSvc?.addAutoCols(cols);\r\n\r\n        selectionColSvc?.createSelectionCols(cols, (updateOrder) => {\r\n            this.lastOrder = updateOrder(this.lastOrder) ?? null;\r\n            this.lastPivotOrder = updateOrder(this.lastPivotOrder) ?? null;\r\n        });\r\n        selectionColSvc?.addSelectionCols(cols);\r\n\r\n        const shouldSortNewColDefs = _shouldMaintainColumnOrder(this.gos, this.showingPivotResult);\r\n        if (!newColDefs || shouldSortNewColDefs) {\r\n            this.restoreColOrder(cols);\r\n        }\r\n\r\n        this.positionLockedCols(cols);\r\n        showRowGroupCols?.refresh();\r\n        quickFilter?.refreshCols();\r\n\r\n        this.setColSpanActive();\r\n        rowAutoHeight?.setAutoHeightActive(cols);\r\n\r\n        // make sure any part of the gui that tries to draw, eg the header,\r\n        // will get empty lists of columns rather than stale columns.\r\n        // for example, the header will received gridColumnsChanged event, so will try and draw,\r\n        // but it will draw successfully when it acts on the virtualColumnsChanged event\r\n        visibleCols.clear();\r\n        colViewport.clear();\r\n\r\n        const dispatchChangedEvent = !_areEqual(prevColTree, this.cols!.tree);\r\n        if (dispatchChangedEvent) {\r\n            eventSvc.dispatchEvent({\r\n                type: 'gridColumnsChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    private selectCols(\r\n        pivotResultColsSvc: IPivotResultColsService | undefined,\r\n        colDefCols: ColumnCollections\r\n    ): ColumnCollections {\r\n        const pivotResultCols = pivotResultColsSvc?.getPivotResultCols() ?? null;\r\n        this.showingPivotResult = pivotResultCols != null;\r\n\r\n        const { map, list, tree, treeDepth } = pivotResultCols ?? colDefCols;\r\n        this.cols = {\r\n            list: list.slice(),\r\n            map: { ...map },\r\n            tree: tree.slice(),\r\n            treeDepth,\r\n        };\r\n\r\n        if (pivotResultCols) {\r\n            // If the current columns are the same or a subset of the previous\r\n            // we keep the previous order, otherwise we go back to the order the pivot\r\n            // cols are generated in\r\n            const hasSameColumns = pivotResultCols.list.some((col) => this.cols?.map[col.getColId()] !== undefined);\r\n            if (!hasSameColumns) {\r\n                this.lastPivotOrder = null;\r\n            }\r\n        }\r\n        return this.cols;\r\n    }\r\n\r\n    public getColsToShow(): AgColumn[] {\r\n        if (!this.cols) {\r\n            return [];\r\n        }\r\n        // pivot mode is on, but we are not pivoting, so we only\r\n        // show columns we are aggregating on\r\n\r\n        const showAutoGroupAndValuesOnly = this.isPivotMode() && !this.showingPivotResult;\r\n        const valueColumns = this.beans.valueColsSvc?.columns;\r\n\r\n        const res = this.cols.list.filter((col) => {\r\n            const isAutoGroupCol = isColumnGroupAutoCol(col);\r\n            if (showAutoGroupAndValuesOnly) {\r\n                const isValueCol = valueColumns?.includes(col);\r\n                return isAutoGroupCol || isValueCol;\r\n            } else {\r\n                // keep col if a) it's auto-group or b) it's visible\r\n                return isAutoGroupCol || col.isVisible();\r\n            }\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    // on events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'\r\n    public refreshAll(source: ColumnEventType) {\r\n        if (!this.ready) {\r\n            return;\r\n        }\r\n        this.refreshCols(false);\r\n        this.beans.visibleCols.refresh(source);\r\n    }\r\n\r\n    public setColsVisible(keys: (string | AgColumn)[], visible = false, source: ColumnEventType): void {\r\n        _applyColumnState(\r\n            this.beans,\r\n            {\r\n                state: keys.map<ColumnState>((key) => ({\r\n                    colId: typeof key === 'string' ? key : key.getColId(),\r\n                    hide: !visible,\r\n                })),\r\n            },\r\n            source\r\n        );\r\n    }\r\n\r\n    private restoreColOrder(cols: ColumnCollections): void {\r\n        const lastOrder = this.showingPivotResult ? this.lastPivotOrder : this.lastOrder;\r\n        if (!lastOrder) {\r\n            return;\r\n        }\r\n\r\n        const lastOrderMapped = new Map<AgColumn, number>(lastOrder.map((col, index) => [col, index]));\r\n\r\n        // only do the sort if at least one column is accounted for. columns will be not accounted for\r\n        // if changing from pivot result cols to provided columns\r\n        const noColsFound = !cols.list.some((col) => lastOrderMapped.has(col));\r\n        if (noColsFound) {\r\n            return;\r\n        }\r\n\r\n        // order cols in the same order as before. we need to make sure that all\r\n        // cols still exists, so filter out any that no longer exist.\r\n        const colsMap = new Map<AgColumn, boolean>(cols.list.map((col) => [col, true]));\r\n        const lastOrderFiltered = lastOrder.filter((col) => colsMap.has(col));\r\n        const lastOrderFilteredMap = new Map<AgColumn, boolean>(lastOrderFiltered.map((col) => [col, true]));\r\n        const missingFromLastOrder = cols.list.filter((col) => !lastOrderFilteredMap.has(col));\r\n\r\n        // add in the new columns, at the end (if no group), or at the end of the group (if a group)\r\n        const res = lastOrderFiltered.slice();\r\n\r\n        missingFromLastOrder.forEach((newCol) => {\r\n            let parent = newCol.getOriginalParent();\r\n\r\n            // if no parent, means we are not grouping, so add the column to the end\r\n            if (!parent) {\r\n                res.push(newCol);\r\n                return;\r\n            }\r\n\r\n            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's\r\n            // own) then go up one level and look for siblings there.\r\n            const siblings: AgColumn[] = [];\r\n            while (!siblings.length && parent) {\r\n                const leafCols = parent.getLeafColumns();\r\n                leafCols.forEach((leafCol) => {\r\n                    const presentInNewCols = res.indexOf(leafCol) >= 0;\r\n                    const notYetInSiblings = siblings.indexOf(leafCol) < 0;\r\n                    if (presentInNewCols && notYetInSiblings) {\r\n                        siblings.push(leafCol);\r\n                    }\r\n                });\r\n                parent = parent.getOriginalParent();\r\n            }\r\n\r\n            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own\r\n            if (!siblings.length) {\r\n                res.push(newCol);\r\n                return;\r\n            }\r\n\r\n            // find index of last column in the group\r\n            const indexes = siblings.map((col) => res.indexOf(col));\r\n            const lastIndex = Math.max(...indexes);\r\n\r\n            res.splice(lastIndex + 1, 0, newCol);\r\n        });\r\n\r\n        cols.list = res;\r\n    }\r\n\r\n    private positionLockedCols(cols: ColumnCollections): void {\r\n        cols.list = placeLockedColumns(cols.list, this.gos);\r\n    }\r\n\r\n    private saveColOrder(): void {\r\n        if (this.showingPivotResult) {\r\n            this.lastPivotOrder = this.cols?.list ?? null;\r\n        } else {\r\n            this.lastOrder = this.cols?.list ?? null;\r\n        }\r\n    }\r\n\r\n    public getColumnDefs(): (ColDef | ColGroupDef)[] | undefined {\r\n        return this.colDefCols\r\n            ? this.beans.colDefFactory?.getColumnDefs(\r\n                  this.colDefCols.list,\r\n                  this.showingPivotResult,\r\n                  this.lastOrder,\r\n                  this.cols?.list ?? []\r\n              )\r\n            : undefined;\r\n    }\r\n\r\n    private setColSpanActive(): void {\r\n        this.colSpanActive = !!this.cols?.list.some((col) => col.getColDef().colSpan != null);\r\n    }\r\n\r\n    public isPivotMode(): boolean {\r\n        return this.pivotMode;\r\n    }\r\n\r\n    private setPivotMode(pivotMode: boolean, source: ColumnEventType): void {\r\n        if (pivotMode === this.pivotMode) {\r\n            return;\r\n        }\r\n\r\n        this.pivotMode = pivotMode;\r\n\r\n        if (!this.ready) {\r\n            return;\r\n        }\r\n\r\n        // we need to update grid columns to cover the scenario where user has groupDisplayType = 'custom', as\r\n        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),\r\n        // so need to updateCols() to check it autoGroupCol needs to be added / removed\r\n        this.refreshCols(false);\r\n        const { visibleCols, eventSvc } = this.beans;\r\n        visibleCols.refresh(source);\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'columnPivotModeChanged',\r\n        });\r\n    }\r\n\r\n    // + clientSideRowModel\r\n    public isPivotActive(): boolean {\r\n        const pivotColumns = this.beans.pivotColsSvc?.columns;\r\n        return this.pivotMode && !!pivotColumns?.length;\r\n    }\r\n\r\n    // called when dataTypes change\r\n    public recreateColumnDefs(source: ColumnEventType): void {\r\n        if (!this.cols) {\r\n            return;\r\n        }\r\n\r\n        // if we aren't going to force, update the auto cols in place\r\n        this.beans.autoColSvc?.updateAutoCols(source);\r\n        this.createColsFromColDefs(source);\r\n    }\r\n\r\n    public setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source: ColumnEventType) {\r\n        this.colDefs = columnDefs;\r\n        this.createColsFromColDefs(source);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        _destroyColumnTree(this.beans, this.colDefCols?.tree);\r\n        super.destroy();\r\n    }\r\n\r\n    public getColTree(): (AgColumn | AgProvidedColumnGroup)[] {\r\n        return this.cols?.tree ?? [];\r\n    }\r\n\r\n    // + columnSelectPanel\r\n    public getColDefColTree(): (AgColumn | AgProvidedColumnGroup)[] {\r\n        return this.colDefCols?.tree ?? [];\r\n    }\r\n\r\n    // + clientSideRowController -> sorting, building quick filter text\r\n    // + headerRenderer -> sorting (clearing icon)\r\n    public getColDefCols(): AgColumn[] | null {\r\n        return this.colDefCols?.list ?? null;\r\n    }\r\n\r\n    // + moveColumnController\r\n    public getCols(): AgColumn[] {\r\n        return this.cols?.list ?? [];\r\n    }\r\n\r\n    // returns colDefCols, pivotResultCols and autoCols\r\n    public getAllCols(): AgColumn[] {\r\n        const { pivotResultCols, autoColSvc, selectionColSvc } = this.beans;\r\n        const pivotResultColsList = pivotResultCols?.getPivotResultCols()?.list;\r\n        return [\r\n            this.colDefCols?.list ?? [],\r\n            autoColSvc?.autoCols?.list ?? [],\r\n            selectionColSvc?.selectionCols?.list ?? [],\r\n            pivotResultColsList ?? [],\r\n        ].flat();\r\n    }\r\n\r\n    public getColsForKeys(keys: ColKey[]): AgColumn[] {\r\n        if (!keys) {\r\n            return [];\r\n        }\r\n        return keys.map((key) => this.getCol(key)).filter((col): col is AgColumn => col != null);\r\n    }\r\n\r\n    public getColDefCol(key: ColKey): AgColumn | null {\r\n        if (!this.colDefCols?.list) {\r\n            return null;\r\n        }\r\n        return this.getColFromCollection(key, this.colDefCols);\r\n    }\r\n\r\n    public getCol(key: Maybe<ColKey>): AgColumn | null {\r\n        if (key == null) {\r\n            return null;\r\n        }\r\n        return this.getColFromCollection(key, this.cols);\r\n    }\r\n\r\n    public getColFromCollection(key: ColKey, cols?: ColumnCollections): AgColumn | null {\r\n        if (cols == null) {\r\n            return null;\r\n        }\r\n\r\n        const { map, list } = cols;\r\n\r\n        // most of the time this method gets called the key is a string, so we put this shortcut in\r\n        // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)\r\n        if (typeof key == 'string' && map[key]) {\r\n            return map[key];\r\n        }\r\n\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (_columnsMatch(list[i], key)) {\r\n                return list[i];\r\n            }\r\n        }\r\n\r\n        return this.beans.autoColSvc?.getAutoCol(key) ?? null;\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColumnEvent, ColumnEventType } from '../events';\r\nimport type { IAggFuncService } from '../interfaces/iAggFuncService';\r\nimport type {\r\n    ColumnExtractors,\r\n    ColumnOrdering,\r\n    ColumnProcessor,\r\n    ColumnProcessors,\r\n    IColsService,\r\n} from '../interfaces/iColsService';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport { _exists } from '../utils/generic';\r\nimport type { ColumnChangedEventType } from './columnApi';\r\nimport { dispatchColumnChangedEvent } from './columnEventUtils';\r\nimport type { ColKey, ColumnModel, Maybe } from './columnModel';\r\nimport type { ColumnState, ColumnStateParams } from './columnStateUtils';\r\nimport type { VisibleColsService } from './visibleColsService';\r\n\r\nexport abstract class BaseColsService extends BeanStub implements IColsService {\r\n    protected colModel: ColumnModel;\r\n    protected aggFuncSvc?: IAggFuncService;\r\n    protected visibleCols: VisibleColsService;\r\n    protected dispatchColumnChangedEvent = dispatchColumnChangedEvent;\r\n\r\n    abstract eventName: ColumnChangedEventType;\r\n    abstract columnProcessors: ColumnProcessors;\r\n    abstract columnExtractors: ColumnExtractors;\r\n    columnOrdering: ColumnOrdering;\r\n\r\n    public columns: AgColumn[] = [];\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.colModel = beans.colModel;\r\n        this.aggFuncSvc = beans.aggFuncSvc;\r\n        this.visibleCols = beans.visibleCols;\r\n    }\r\n\r\n    public sortColumns(compareFn?: (a: AgColumn, b: AgColumn) => number): void {\r\n        this.columns.sort(compareFn);\r\n    }\r\n\r\n    public setColumns(colKeys: ColKey[] | undefined, source: ColumnEventType): void {\r\n        this.setColList(colKeys, this.columns, this.eventName, true, true, this.columnProcessors!.set, source);\r\n    }\r\n\r\n    public addColumns(colKeys: ColKey[] | undefined, source: ColumnEventType): void {\r\n        this.updateColList(colKeys, this.columns, true, true, this.columnProcessors!.add, this.eventName, source);\r\n    }\r\n\r\n    public removeColumns(colKeys: ColKey[] | undefined, source: ColumnEventType): void {\r\n        this.updateColList(colKeys, this.columns, false, true, this.columnProcessors!.remove, this.eventName, source);\r\n    }\r\n\r\n    protected setColList(\r\n        colKeys: ColKey[] = [],\r\n        masterList: AgColumn[],\r\n        eventName: IColsService['eventName'],\r\n        detectOrderChange: boolean,\r\n        autoGroupsNeedBuilding: boolean,\r\n        columnCallback: ColumnProcessor,\r\n        source: ColumnEventType\r\n    ): void {\r\n        const gridColumns = this.colModel.getCols();\r\n        if (!gridColumns || gridColumns.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const changes: Map<AgColumn, number> = new Map();\r\n        // store all original cols and their index.\r\n        masterList.forEach((col, idx) => changes.set(col, idx));\r\n\r\n        masterList.length = 0;\r\n\r\n        if (_exists(colKeys)) {\r\n            colKeys.forEach((key) => {\r\n                const column = this.colModel.getColDefCol(key);\r\n                if (column) {\r\n                    masterList.push(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        masterList.forEach((col, idx) => {\r\n            const oldIndex = changes.get(col);\r\n            // if the column was not in the list, we add it as it's a change\r\n            // idx is irrelevant now.\r\n            if (oldIndex === undefined) {\r\n                changes.set(col, 0);\r\n                return;\r\n            }\r\n\r\n            if (detectOrderChange && oldIndex !== idx) {\r\n                // if we're detecting order changes, and the indexes differ, we retain this as it's changed\r\n                return;\r\n            }\r\n\r\n            // otherwise remove this col, as it's unchanged.\r\n            changes.delete(col);\r\n        });\r\n\r\n        const primaryCols = this.colModel.getColDefCols();\r\n        (primaryCols || []).forEach((column) => {\r\n            const added = masterList.indexOf(column) >= 0;\r\n            columnCallback(column, added, source);\r\n        });\r\n\r\n        autoGroupsNeedBuilding && this.colModel.refreshCols(false);\r\n\r\n        this.visibleCols.refresh(source);\r\n\r\n        this.dispatchColumnChangedEvent(this.eventSvc, eventName, [...changes.keys()], source);\r\n    }\r\n\r\n    protected updateColList(\r\n        keys: Maybe<ColKey>[] = [],\r\n        masterList: AgColumn[],\r\n        actionIsAdd: boolean,\r\n        autoGroupsNeedBuilding: boolean,\r\n        columnCallback: ColumnProcessor,\r\n        eventType: IColsService['eventName'],\r\n        source: ColumnEventType\r\n    ) {\r\n        if (!keys || keys.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let atLeastOne = false;\r\n        const updatedCols: Set<AgColumn> = new Set();\r\n\r\n        keys.forEach((key) => {\r\n            if (!key) {\r\n                return;\r\n            }\r\n            const columnToAdd = this.colModel.getColDefCol(key);\r\n            if (!columnToAdd) {\r\n                return;\r\n            }\r\n            updatedCols.add(columnToAdd);\r\n\r\n            if (actionIsAdd) {\r\n                if (masterList.indexOf(columnToAdd) >= 0) {\r\n                    return;\r\n                }\r\n                masterList.push(columnToAdd);\r\n            } else {\r\n                const currentIndex = masterList.indexOf(columnToAdd);\r\n                if (currentIndex < 0) {\r\n                    return;\r\n                }\r\n                for (let i = currentIndex + 1; i < masterList.length; i++) {\r\n                    // row indexes of subsequent columns have changed\r\n                    updatedCols.add(masterList[i]);\r\n                }\r\n                _removeFromArray(masterList, columnToAdd);\r\n            }\r\n\r\n            columnCallback(columnToAdd, actionIsAdd, source);\r\n            atLeastOne = true;\r\n        });\r\n\r\n        if (!atLeastOne) {\r\n            return;\r\n        }\r\n\r\n        if (autoGroupsNeedBuilding) {\r\n            this.colModel.refreshCols(false);\r\n        }\r\n\r\n        this.visibleCols.refresh(source);\r\n\r\n        const eventColumns = Array.from(updatedCols);\r\n        this.eventSvc.dispatchEvent({\r\n            type: eventType,\r\n            columns: eventColumns,\r\n            column: eventColumns.length === 1 ? eventColumns[0] : null,\r\n            source,\r\n        } as WithoutGridCommon<ColumnEvent>);\r\n    }\r\n\r\n    public extractCols(source: ColumnEventType, oldProvidedCols: AgColumn[] = []): AgColumn[] {\r\n        const previousCols = this.columns;\r\n        const colsWithIndex: AgColumn[] = [];\r\n        const colsWithValue: AgColumn[] = [];\r\n\r\n        const { setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc } =\r\n            this.columnExtractors!;\r\n\r\n        const primaryCols = this.colModel.getColDefCols() || [];\r\n\r\n        // go though all cols.\r\n        // if value, change\r\n        // if default only, change only if new\r\n        primaryCols.forEach((col) => {\r\n            const colIsNew = oldProvidedCols.indexOf(col) < 0;\r\n            const colDef = col.getColDef();\r\n\r\n            const value = getValueFunc(colDef);\r\n            const initialValue = getInitialValueFunc(colDef);\r\n            const index = getIndexFunc(colDef);\r\n            const initialIndex = getInitialIndexFunc(colDef);\r\n\r\n            let include: boolean;\r\n\r\n            const valuePresent = value !== undefined;\r\n            const indexPresent = index !== undefined;\r\n            const initialValuePresent = initialValue !== undefined;\r\n            const initialIndexPresent = initialIndex !== undefined;\r\n\r\n            if (valuePresent) {\r\n                include = value!; // boolean value is guaranteed as attrToBoolean() is used above\r\n            } else if (indexPresent) {\r\n                if (index === null) {\r\n                    // if col is new we don't want to use the default / initial if index is set to null. Similarly,\r\n                    // we don't want to include the property for existing columns, i.e. we want to 'clear' it.\r\n                    include = false;\r\n                } else {\r\n                    // note that 'null >= 0' evaluates to true which means 'rowGroupIndex = null' would enable row\r\n                    // grouping if the null check didn't exist above.\r\n                    include = index! >= 0;\r\n                }\r\n            } else {\r\n                if (colIsNew) {\r\n                    // as no value or index is 'present' we use the default / initial when col is new\r\n                    if (initialValuePresent) {\r\n                        include = initialValue!;\r\n                    } else if (initialIndexPresent) {\r\n                        include = initialIndex != null && initialIndex >= 0;\r\n                    } else {\r\n                        include = false;\r\n                    }\r\n                } else {\r\n                    // otherwise include it if included last time, e.g. if we are extracting row group cols and this col\r\n                    // is an existing row group col (i.e. it exists in 'previousCols') then we should include it.\r\n                    include = previousCols.indexOf(col) >= 0;\r\n                }\r\n            }\r\n\r\n            if (include) {\r\n                const useIndex = colIsNew ? index != null || initialIndex != null : index != null;\r\n                useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);\r\n            }\r\n        });\r\n\r\n        const getIndexForCol = (col: AgColumn): number => {\r\n            const index = getIndexFunc(col.getColDef());\r\n            const defaultIndex = getInitialIndexFunc(col.getColDef());\r\n\r\n            return index != null ? index : defaultIndex!;\r\n        };\r\n\r\n        // sort cols with index, and add these first\r\n        colsWithIndex.sort((colA, colB) => {\r\n            const indexA = getIndexForCol(colA);\r\n            const indexB = getIndexForCol(colB);\r\n\r\n            if (indexA === indexB) {\r\n                return 0;\r\n            }\r\n            if (indexA < indexB) {\r\n                return -1;\r\n            }\r\n\r\n            return 1;\r\n        });\r\n\r\n        const res: AgColumn[] = ([] as AgColumn[]).concat(colsWithIndex);\r\n\r\n        // second add columns that were there before and in the same order as they were before,\r\n        // so we are preserving order of current grouping of columns that simply have rowGroup=true\r\n        previousCols.forEach((col) => {\r\n            if (colsWithValue.indexOf(col) >= 0) {\r\n                res.push(col);\r\n            }\r\n        });\r\n\r\n        // lastly put in all remaining cols\r\n        colsWithValue.forEach((col) => {\r\n            if (res.indexOf(col) < 0) {\r\n                res.push(col);\r\n            }\r\n        });\r\n\r\n        // set flag=false for removed cols\r\n        previousCols.forEach((col) => {\r\n            if (res.indexOf(col) < 0) {\r\n                setFlagFunc(col, false, source);\r\n            }\r\n        });\r\n        // set flag=true for newly added cols\r\n        res.forEach((col) => {\r\n            if (previousCols.indexOf(col) < 0) {\r\n                setFlagFunc(col, true, source);\r\n            }\r\n        });\r\n\r\n        return (this.columns = res);\r\n    }\r\n\r\n    public abstract syncColumnWithState(\r\n        column: AgColumn,\r\n        source: ColumnEventType,\r\n        getValue: <U extends keyof ColumnStateParams, S extends keyof ColumnStateParams>(\r\n            key1: U,\r\n            key2?: S\r\n        ) => { value1: ColumnStateParams[U] | undefined; value2: ColumnStateParams[S] | undefined },\r\n        rowIndex: { [key: string]: number } | null\r\n    ): void;\r\n\r\n    public restoreColumnOrder(\r\n        columnStateAccumulator: { [colId: string]: ColumnState },\r\n        incomingColumnState: { [colId: string]: ColumnState }\r\n    ): { [colId: string]: ColumnState } {\r\n        const colList = this.columns;\r\n\r\n        const primaryCols = this.colModel.getColDefCols();\r\n        if (!colList.length || !primaryCols) {\r\n            return columnStateAccumulator;\r\n        }\r\n        const updatedColIdArray = Object.keys(incomingColumnState);\r\n        const updatedColIds = new Set(updatedColIdArray);\r\n        const newColIds = new Set(updatedColIdArray);\r\n        const allColIds = new Set(\r\n            colList\r\n                .map((column) => {\r\n                    const colId = column.getColId();\r\n                    newColIds.delete(colId);\r\n                    return colId;\r\n                })\r\n                .concat(updatedColIdArray)\r\n        );\r\n\r\n        const colIdsInOriginalOrder: string[] = [];\r\n        const originalOrderMap: { [colId: string]: number } = {};\r\n        let orderIndex = 0;\r\n        for (let i = 0; i < primaryCols.length; i++) {\r\n            const colId = primaryCols[i].getColId();\r\n            if (allColIds.has(colId)) {\r\n                colIdsInOriginalOrder.push(colId);\r\n                originalOrderMap[colId] = orderIndex++;\r\n            }\r\n        }\r\n\r\n        // follow approach in `resetColumnState`\r\n        let index = 1000;\r\n        let hasAddedNewCols = false;\r\n        let lastIndex = 0;\r\n\r\n        const enableProp = this.columnOrdering!.enableProp;\r\n        const initialEnableProp = this.columnOrdering!.initialEnableProp;\r\n        const indexProp = this.columnOrdering!.indexProp;\r\n        const initialIndexProp = this.columnOrdering!.initialIndexProp;\r\n\r\n        const processPrecedingNewCols = (colId: string) => {\r\n            const originalOrderIndex = originalOrderMap[colId];\r\n            for (let i = lastIndex; i < originalOrderIndex; i++) {\r\n                const newColId = colIdsInOriginalOrder[i];\r\n                if (newColIds.has(newColId)) {\r\n                    incomingColumnState[newColId][indexProp] = index++;\r\n                    newColIds.delete(newColId);\r\n                }\r\n            }\r\n            lastIndex = originalOrderIndex;\r\n        };\r\n\r\n        colList.forEach((column) => {\r\n            const colId = column.getColId();\r\n            if (updatedColIds.has(colId)) {\r\n                // New col already exists. Add any other new cols that should be before it.\r\n                processPrecedingNewCols(colId);\r\n                incomingColumnState[colId][indexProp] = index++;\r\n            } else {\r\n                const colDef = column.getColDef();\r\n                const missingIndex =\r\n                    colDef[indexProp] === null || (colDef[indexProp] === undefined && colDef[initialIndexProp] == null);\r\n                if (missingIndex) {\r\n                    if (!hasAddedNewCols) {\r\n                        const propEnabled =\r\n                            colDef[enableProp] || (colDef[enableProp] === undefined && colDef[initialEnableProp]);\r\n                        if (propEnabled) {\r\n                            processPrecedingNewCols(colId);\r\n                        } else {\r\n                            // Reached the first manually added column. Add all the new columns now.\r\n                            newColIds.forEach((newColId) => {\r\n                                // Rather than increment the index, just use the original order index - doesn't need to be contiguous.\r\n                                incomingColumnState[newColId][indexProp] = index + originalOrderMap[newColId];\r\n                            });\r\n                            index += colIdsInOriginalOrder.length;\r\n                            hasAddedNewCols = true;\r\n                        }\r\n                    }\r\n                    if (!columnStateAccumulator[colId]) {\r\n                        columnStateAccumulator[colId] = { colId };\r\n                    }\r\n                    columnStateAccumulator[colId][indexProp] = index++;\r\n                }\r\n            }\r\n        });\r\n\r\n        return columnStateAccumulator;\r\n    }\r\n}\r\n", "// class returns unique instance id's for columns.\r\n// eg, the following calls (in this order) will result in:\r\n//\r\n// getInstanceIdForKey('country') => 0\r\n// getInstanceIdForKey('country') => 1\r\n// getInstanceIdForKey('country') => 2\r\n// getInstanceIdForKey('country') => 3\r\n// getInstanceIdForKey('age') => 0\r\n// getInstanceIdForKey('age') => 1\r\n// getInstanceIdForKey('country') => 4\r\nexport class GroupInstanceIdCreator {\r\n    // this map contains keys to numbers, so we remember what the last call was\r\n    private existingIds: any = {};\r\n\r\n    public getInstanceIdForKey(key: string): number {\r\n        const lastResult = this.existingIds[key];\r\n        let result: number;\r\n        if (typeof lastResult !== 'number') {\r\n            // first time this key\r\n            result = 0;\r\n        } else {\r\n            result = lastResult + 1;\r\n        }\r\n\r\n        this.existingIds[key] = result;\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { Context } from '../context/context';\r\n\r\n/**\r\n * An EmptyBean can be used to manage the lifecycle of event handlers that are tied to a component instead of a controller.\r\n * Used in React to avoid duplicating listeners and setup logic while React is running in StrictMode where setComp will be called multiple times.\r\n * This is only required for the Components where the ctrl is managed by AG Grid and passed into the React component.\r\n * Both React and the Ctrl can decide to destroy the EmptyBean which will clean up listeners setup against it.\r\n */\r\nexport class EmptyBean extends BeanStub {}\r\n\r\n/**\r\n * Sets up the logic for managing the lifecycle of a compBean against a ctrl so that we always cleanup\r\n * our listeners and destroy the compBean when the ctrl is destroyed no matter which is destroyed first.\r\n * Closely related to React StrictMode as the compBean is provided from React so it can double render\r\n * and correctly cleanup listeners from the first render.\r\n * @param ctrl Ctrl that has setComp called against it\r\n * @param ctx  Context to use to destroy the compBean\r\n * @param compBean Optional compBean to use, if not provided, the ctrl will be used\r\n * @returns The compBean if provided, otherwise the ctrl\r\n */\r\nexport function setupCompBean(ctrl: BeanStub<any>, ctx: Context, compBean: BeanStub<any> | undefined): BeanStub<any> {\r\n    if (compBean) {\r\n        // If the ctrl is destroyed first, we need to destroy the compBean\r\n        ctrl.addDestroyFunc(() => ctx.destroyBean(compBean));\r\n    }\r\n    return compBean ?? ctrl;\r\n}\r\n", "export class CssClassManager {\r\n    private getGui: () => HTMLElement | undefined | null;\r\n\r\n    // to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already\r\n    // there, or removing one that wasn't present, all takes CPU.\r\n    private cssClassStates: { [cssClass: string]: boolean } = {};\r\n\r\n    constructor(getGui: () => HTMLElement | undefined | null) {\r\n        this.getGui = getGui;\r\n    }\r\n\r\n    public addCssClass(className: string): void {\r\n        this.addOrRemoveCssClass(className, true);\r\n    }\r\n\r\n    public removeCssClass(className: string): void {\r\n        this.addOrRemoveCssClass(className, false);\r\n    }\r\n\r\n    public containsCssClass(className: string): boolean {\r\n        const eGui = this.getGui();\r\n        if (!eGui) {\r\n            return false;\r\n        }\r\n\r\n        return eGui.classList.contains(className);\r\n    }\r\n\r\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\r\n        if (!className) {\r\n            return;\r\n        }\r\n\r\n        // we check for spaces before doing the split, as doing the split\r\n        // created a performance problem (on windows only, see AG-6765)\r\n        if (className.indexOf(' ') >= 0) {\r\n            const list = (className || '').split(' ');\r\n            if (list.length > 1) {\r\n                list.forEach((cls) => this.addOrRemoveCssClass(cls, addOrRemove));\r\n                return;\r\n            }\r\n        }\r\n\r\n        const updateNeeded = this.cssClassStates[className] !== addOrRemove;\r\n        if (updateNeeded && className.length) {\r\n            const eGui = this.getGui();\r\n            if (eGui) {\r\n                eGui.classList.toggle(className, addOrRemove);\r\n            }\r\n\r\n            this.cssClassStates[className] = addOrRemove;\r\n        }\r\n    }\r\n}\r\n", "import type { BeanStubEvent } from '../context/beanStub';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { BaseBean, ComponentBean } from '../context/genericContext';\r\nimport type { AgEvent } from '../events';\r\nimport { CssClassManager } from '../rendering/cssClassManager';\r\nimport {\r\n    _copyNodeList,\r\n    _isNodeOrElement,\r\n    _iterateNamedNodeMap,\r\n    _loadTemplate,\r\n    _setDisplayed,\r\n    _setVisible,\r\n} from '../utils/dom';\r\n\r\nlet compIdSequence = 0;\r\n\r\n/** The RefPlaceholder is used to control when data-ref attribute should be applied to the component\r\n * There are hanging data-refs in the DOM that are not being used internally by the component which we don't want to apply to the component.\r\n * There is also the case where data-refs are solely used for passing parameters to the component and should not be applied to the component.\r\n * It also enables validation to catch typo errors in the data-ref attribute vs component name.\r\n * The value is `null` so that it can be identified in the component and distinguished from just missing with undefined.\r\n * The `null` value also allows for existing falsy checks to work as expected when code can be run before the template is setup.\r\n */\r\nexport const RefPlaceholder: any = null;\r\n\r\nexport type ComponentEvent = 'displayChanged' | BeanStubEvent;\r\nexport interface VisibleChangedEvent extends AgEvent<'displayChanged'> {\r\n    visible: boolean;\r\n}\r\n\r\nexport type ComponentSelector = { component: { new (params?: any): Component<any> }; selector: AgComponentSelector };\r\n\r\nexport class Component<TLocalEvent extends string = ComponentEvent>\r\n    extends BeanStub<TLocalEvent | ComponentEvent>\r\n    implements ComponentBean, BaseBean<BeanCollection>\r\n{\r\n    private eGui: HTMLElement;\r\n    private componentSelectors: Map<AgComponentSelector, ComponentSelector>;\r\n    private suppressDataRefValidation: boolean = false;\r\n\r\n    // if false, then CSS class \"ag-hidden\" is applied, which sets \"display: none\"\r\n    private displayed = true;\r\n\r\n    // if false, then CSS class \"ag-invisible\" is applied, which sets \"visibility: hidden\"\r\n    private visible = true;\r\n\r\n    private css: string[] | undefined;\r\n\r\n    protected parentComponent: Component | undefined;\r\n\r\n    // unique id for this row component. this is used for getting a reference to the HTML dom.\r\n    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\r\n    // around as we create a new rowComp instance for the same row node).\r\n    private compId = compIdSequence++;\r\n\r\n    private cssClassManager: CssClassManager;\r\n\r\n    constructor(template?: string, componentSelectors?: ComponentSelector[]) {\r\n        super();\r\n\r\n        this.cssClassManager = new CssClassManager(() => this.eGui);\r\n\r\n        this.componentSelectors = new Map((componentSelectors ?? []).map((comp) => [comp.selector, comp]));\r\n        if (template) {\r\n            this.setTemplate(template);\r\n        }\r\n    }\r\n\r\n    public preConstruct(): void {\r\n        this.wireTemplate(this.getGui());\r\n        const debugId = 'component-' + Object.getPrototypeOf(this)?.constructor?.name;\r\n        this.css?.forEach((css) => this.beans.environment.addGlobalCSS(css, debugId));\r\n    }\r\n\r\n    private wireTemplate(element: HTMLElement | undefined, paramsMap?: { [key: string]: any }): void {\r\n        // ui exists if user sets template in constructor. when this happens,\r\n        // We have to wait for the context to be autoWired first before we can create child components.\r\n        if (element && this.gos) {\r\n            this.applyElementsToComponent(element);\r\n            this.createChildComponentsFromTags(element, paramsMap);\r\n        }\r\n    }\r\n\r\n    public getCompId(): number {\r\n        return this.compId;\r\n    }\r\n\r\n    private getDataRefAttribute(element: Element): string | null {\r\n        if (element.getAttribute) {\r\n            return element.getAttribute('data-ref');\r\n        }\r\n        // Plain text nodes don't have attributes or getAttribute method\r\n        return null;\r\n    }\r\n\r\n    private applyElementsToComponent(\r\n        element: Element,\r\n        elementRef?: string | null,\r\n        paramsMap?: { [key: string]: any },\r\n        newComponent: Component | null = null\r\n    ) {\r\n        if (elementRef === undefined) {\r\n            elementRef = this.getDataRefAttribute(element);\r\n        }\r\n        if (elementRef) {\r\n            // We store the reference to the element in the parent component under that same name\r\n            // if there is a placeholder property with the same name.\r\n            const current = (this as any)[elementRef];\r\n            if (current === RefPlaceholder) {\r\n                (this as any)[elementRef] = newComponent ?? element;\r\n            } else {\r\n                // Don't warn if the data-ref is used for passing parameters to the component\r\n                const usedAsParamRef = paramsMap && paramsMap[elementRef];\r\n                if (!this.suppressDataRefValidation && !usedAsParamRef) {\r\n                    // This can happen because of:\r\n                    // 1. The data-ref has a typo and doesn't match the property in the component\r\n                    // 2. The  property is not initialised with the RefPlaceholder and should be.\r\n                    // 3. The property is on a child component and not available on the parent during construction.\r\n                    //    In which case you may need to pass the template via setTemplate() instead of in the super constructor.\r\n                    // 4. The data-ref is not used by the component and should be removed from the template.\r\n                    throw new Error(`data-ref: ${elementRef} on ${this.constructor.name} with ${current}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag\r\n    private createChildComponentsFromTags(parentNode: Element, paramsMap?: { [key: string]: any }): void {\r\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\r\n        // which messes up the traversal order of the children.\r\n        const childNodeList: Node[] = _copyNodeList(parentNode.childNodes);\r\n\r\n        childNodeList.forEach((childNode) => {\r\n            if (!(childNode instanceof HTMLElement)) {\r\n                return;\r\n            }\r\n\r\n            const childComp = this.createComponentFromElement(\r\n                childNode,\r\n                (childComp) => {\r\n                    // copy over all attributes, including css classes, so any attributes user put on the tag\r\n                    // wll be carried across\r\n                    const childGui = childComp.getGui();\r\n                    if (childGui) {\r\n                        this.copyAttributesFromNode(childNode, childComp.getGui());\r\n                    }\r\n                },\r\n                paramsMap\r\n            );\r\n\r\n            if (childComp) {\r\n                if ((childComp as any).addItems && childNode.children.length) {\r\n                    this.createChildComponentsFromTags(childNode, paramsMap);\r\n\r\n                    // converting from HTMLCollection to Array\r\n                    const items = Array.prototype.slice.call(childNode.children);\r\n\r\n                    (childComp as any).addItems(items);\r\n                }\r\n                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom\r\n                this.swapComponentForNode(childComp, parentNode, childNode);\r\n            } else if (childNode.childNodes) {\r\n                this.createChildComponentsFromTags(childNode, paramsMap);\r\n            }\r\n        });\r\n    }\r\n\r\n    private createComponentFromElement(\r\n        element: HTMLElement,\r\n        afterPreCreateCallback?: (comp: Component) => void,\r\n        paramsMap?: { [key: string]: any }\r\n    ): Component | null {\r\n        const key = element.nodeName;\r\n\r\n        const elementRef = this.getDataRefAttribute(element);\r\n\r\n        const isAgGridComponent = key.indexOf('AG-') === 0;\r\n        const componentSelector = isAgGridComponent ? this.componentSelectors.get(key as AgComponentSelector) : null;\r\n        let newComponent: Component | null = null;\r\n        if (componentSelector) {\r\n            const componentParams = paramsMap && elementRef ? paramsMap[elementRef] : undefined;\r\n            newComponent = new componentSelector.component(componentParams);\r\n            newComponent.setParentComponent(this as Component);\r\n\r\n            this.createBean(newComponent, null, afterPreCreateCallback);\r\n        } else if (isAgGridComponent) {\r\n            throw new Error(`selector: ${key}`);\r\n        }\r\n\r\n        this.applyElementsToComponent(element, elementRef, paramsMap, newComponent);\r\n\r\n        return newComponent;\r\n    }\r\n\r\n    private copyAttributesFromNode(source: Element, dest: Element): void {\r\n        _iterateNamedNodeMap(source.attributes, (name, value) => dest.setAttribute(name, value));\r\n    }\r\n\r\n    private swapComponentForNode(newComponent: Component, parentNode: Element, childNode: Node): void {\r\n        const eComponent = newComponent.getGui();\r\n        parentNode.replaceChild(eComponent, childNode);\r\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\r\n        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));\r\n    }\r\n\r\n    protected activateTabIndex(elements?: Element[]): void {\r\n        const tabIndex = this.gos.get('tabIndex');\r\n\r\n        if (!elements) {\r\n            elements = [];\r\n        }\r\n\r\n        if (!elements.length) {\r\n            elements.push(this.getGui());\r\n        }\r\n\r\n        elements.forEach((el) => el.setAttribute('tabindex', tabIndex.toString()));\r\n    }\r\n\r\n    public setTemplate(\r\n        template: string | null | undefined,\r\n        componentSelectors?: ComponentSelector[],\r\n        paramsMap?: { [key: string]: any }\r\n    ): void {\r\n        const eGui = _loadTemplate(template as string);\r\n        this.setTemplateFromElement(eGui, componentSelectors, paramsMap);\r\n    }\r\n\r\n    public setTemplateFromElement(\r\n        element: HTMLElement,\r\n        components?: ComponentSelector[],\r\n        paramsMap?: { [key: string]: any },\r\n        suppressDataRefValidation = false\r\n    ): void {\r\n        this.eGui = element;\r\n        this.suppressDataRefValidation = suppressDataRefValidation;\r\n        if (components) {\r\n            for (let i = 0; i < components.length; i++) {\r\n                const component = components[i];\r\n                this.componentSelectors.set(component.selector, component);\r\n            }\r\n        }\r\n        this.wireTemplate(element, paramsMap);\r\n    }\r\n\r\n    public getGui(): HTMLElement {\r\n        return this.eGui;\r\n    }\r\n\r\n    public getFocusableElement(): HTMLElement {\r\n        return this.eGui;\r\n    }\r\n\r\n    public getAriaElement(): Element {\r\n        return this.getFocusableElement();\r\n    }\r\n\r\n    public setParentComponent(component: Component<any>) {\r\n        this.parentComponent = component;\r\n    }\r\n\r\n    public getParentComponent(): Component | undefined {\r\n        return this.parentComponent;\r\n    }\r\n\r\n    // this method is for older code, that wants to provide the gui element,\r\n    // it is not intended for this to be in ag-Stack\r\n    protected setGui(eGui: HTMLElement): void {\r\n        this.eGui = eGui;\r\n    }\r\n\r\n    protected queryForHtmlElement(cssSelector: string): HTMLElement {\r\n        return this.eGui.querySelector(cssSelector) as HTMLElement;\r\n    }\r\n\r\n    private getContainerAndElement(\r\n        newChild: Component<any> | HTMLElement,\r\n        container?: HTMLElement\r\n    ): { element: HTMLElement; parent: HTMLElement } | null {\r\n        let parent = container;\r\n\r\n        if (newChild == null) {\r\n            return null;\r\n        }\r\n\r\n        if (!parent) {\r\n            parent = this.eGui;\r\n        }\r\n\r\n        if (_isNodeOrElement(newChild)) {\r\n            return {\r\n                element: newChild,\r\n                parent,\r\n            };\r\n        }\r\n\r\n        return {\r\n            element: newChild.getGui(),\r\n            parent,\r\n        };\r\n    }\r\n\r\n    public prependChild(newChild: HTMLElement | Component<any>, container?: HTMLElement) {\r\n        const { element, parent } = this.getContainerAndElement(newChild, container) || {};\r\n\r\n        if (!element || !parent) {\r\n            return;\r\n        }\r\n\r\n        parent.insertAdjacentElement('afterbegin', element);\r\n    }\r\n\r\n    public appendChild(newChild: HTMLElement | Component<any>, container?: HTMLElement): void {\r\n        const { element, parent } = this.getContainerAndElement(newChild, container) || {};\r\n\r\n        if (!element || !parent) {\r\n            return;\r\n        }\r\n\r\n        parent.appendChild(element);\r\n    }\r\n\r\n    public isDisplayed(): boolean {\r\n        return this.displayed;\r\n    }\r\n\r\n    public setVisible(visible: boolean, options: { skipAriaHidden?: boolean } = {}): void {\r\n        if (visible !== this.visible) {\r\n            this.visible = visible;\r\n            const { skipAriaHidden } = options;\r\n            _setVisible(this.eGui, visible, { skipAriaHidden });\r\n        }\r\n    }\r\n\r\n    public setDisplayed(displayed: boolean, options: { skipAriaHidden?: boolean } = {}): void {\r\n        if (displayed !== this.displayed) {\r\n            this.displayed = displayed;\r\n            const { skipAriaHidden } = options;\r\n            _setDisplayed(this.eGui, displayed, { skipAriaHidden });\r\n\r\n            const event: VisibleChangedEvent = {\r\n                type: 'displayChanged',\r\n                visible: this.displayed,\r\n            };\r\n\r\n            this.dispatchLocalEvent(event);\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        if (this.parentComponent) {\r\n            this.parentComponent = undefined;\r\n        }\r\n\r\n        super.destroy();\r\n    }\r\n\r\n    public addGuiEventListener(event: string, listener: (event: any) => void, options?: AddEventListenerOptions): void {\r\n        this.eGui.addEventListener(event, listener, options);\r\n        this.addDestroyFunc(() => this.eGui.removeEventListener(event, listener));\r\n    }\r\n\r\n    public addCssClass(className: string): void {\r\n        this.cssClassManager.addCssClass(className);\r\n    }\r\n\r\n    public removeCssClass(className: string): void {\r\n        this.cssClassManager.removeCssClass(className);\r\n    }\r\n\r\n    public containsCssClass(className: string): boolean {\r\n        return this.cssClassManager.containsCssClass(className);\r\n    }\r\n\r\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\r\n        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);\r\n    }\r\n\r\n    protected registerCSS(css: string): void {\r\n        this.css ||= [];\r\n        this.css.push(css);\r\n    }\r\n}\r\n\r\n/** All the AG Grid components that are used within internal templates via <ag-autocomplete> syntax */\r\nexport type AgComponentSelector =\r\n    | 'AG-AUTOCOMPLETE'\r\n    | 'AG-CHECKBOX'\r\n    | 'AG-COLOR-INPUT'\r\n    | 'AG-COLOR-PICKER'\r\n    | 'AG-FAKE-HORIZONTAL-SCROLL'\r\n    | 'AG-FAKE-VERTICAL-SCROLL'\r\n    | 'AG-FILTERS-TOOL-PANEL-HEADER'\r\n    | 'AG-FILTERS-TOOL-PANEL-LIST'\r\n    | 'AG-GRID-BODY'\r\n    | 'AG-GRID-HEADER-DROP-ZONES'\r\n    | 'AG-GROUP-COMPONENT'\r\n    | 'AG-HEADER-ROOT'\r\n    | 'AG-INPUT-DATE-FIELD'\r\n    | 'AG-INPUT-NUMBER-FIELD'\r\n    | 'AG-INPUT-RANGE'\r\n    | 'AG-INPUT-TEXT-AREA'\r\n    | 'AG-INPUT-TEXT-FIELD'\r\n    | 'AG-NAME-VALUE'\r\n    | 'AG-OVERLAY-WRAPPER'\r\n    | 'AG-PAGE-SIZE-SELECTOR'\r\n    | 'AG-PAGINATION'\r\n    | 'AG-PRIMARY-COLS-HEADER'\r\n    | 'AG-PRIMARY-COLS-LIST'\r\n    | 'AG-PRIMARY-COLS'\r\n    | 'AG-ROW-CONTAINER'\r\n    | 'AG-SELECT'\r\n    | 'AG-SIDE-BAR'\r\n    | 'AG-SIDE-BAR-BUTTONS'\r\n    | 'AG-SLIDER'\r\n    | 'AG-SORT-INDICATOR'\r\n    | 'AG-STATUS-BAR'\r\n    | 'AG-TOGGLE-BUTTON'\r\n    | 'AG-WATERMARK';\r\n", "export function _isPromise<T>(fn: any): fn is Promise<T> {\r\n    if (typeof fn.then === 'function') {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport type ResolveAndRejectCallback<T> = (resolve: (value: T | null) => void, reject: (params: any) => void) => void;\r\n\r\nenum AgPromiseStatus {\r\n    IN_PROGRESS,\r\n    RESOLVED,\r\n}\r\n\r\nexport class AgPromise<T> {\r\n    private status: AgPromiseStatus = AgPromiseStatus.IN_PROGRESS;\r\n    private resolution: T | null = null;\r\n    private waiters: ((value: T | null) => void)[] = [];\r\n\r\n    static all<T>(promises: AgPromise<T | null>[]): AgPromise<(T | null)[]> {\r\n        return promises.length\r\n            ? new AgPromise((resolve) => {\r\n                  let remainingToResolve = promises.length;\r\n                  const combinedValues = new Array<T | null>(remainingToResolve);\r\n\r\n                  promises.forEach((promise, index) => {\r\n                      promise.then((value) => {\r\n                          combinedValues[index] = value;\r\n                          remainingToResolve--;\r\n\r\n                          if (remainingToResolve === 0) {\r\n                              resolve(combinedValues);\r\n                          }\r\n                      });\r\n                  });\r\n              })\r\n            : AgPromise.resolve();\r\n    }\r\n\r\n    static resolve<T>(value: T | null = null): AgPromise<T> {\r\n        return new AgPromise<T>((resolve) => resolve(value));\r\n    }\r\n\r\n    constructor(callback: ResolveAndRejectCallback<T>) {\r\n        callback(\r\n            (value) => this.onDone(value),\r\n            (params) => this.onReject(params)\r\n        );\r\n    }\r\n\r\n    public then<V>(func: (result: T | null) => V): AgPromise<V> {\r\n        return new AgPromise((resolve) => {\r\n            if (this.status === AgPromiseStatus.RESOLVED) {\r\n                resolve(func(this.resolution));\r\n            } else {\r\n                this.waiters.push((value) => resolve(func(value)));\r\n            }\r\n        });\r\n    }\r\n\r\n    private onDone(value: T | null): void {\r\n        this.status = AgPromiseStatus.RESOLVED;\r\n        this.resolution = value;\r\n\r\n        this.waiters.forEach((waiter) => waiter(value));\r\n    }\r\n\r\n    private onReject(_: any): void {}\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { CellEditorSelectorFunc, CellEditorSelectorResult, CellRendererSelectorFunc } from '../../entities/colDef';\r\nimport type { GridOptions } from '../../entities/gridOptions';\r\nimport type { AgGridCommon } from '../../interfaces/iCommon';\r\nimport type { IComponent } from '../../interfaces/iComponent';\r\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\r\nimport type { ComponentType, UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { _mergeDeep } from '../../utils/object';\r\nimport { AgPromise } from '../../utils/promise';\r\nimport { _error } from '../../validation/logging';\r\nimport type { AgComponentUtils } from './agComponentUtils';\r\nimport type { FrameworkComponentWrapper } from './frameworkComponentWrapper';\r\nimport type { Registry } from './registry';\r\n\r\nfunction doesImplementIComponent(candidate: any): boolean {\r\n    if (!candidate) {\r\n        return false;\r\n    }\r\n    return (candidate as any).prototype && 'getGui' in (candidate as any).prototype;\r\n}\r\n\r\nexport function _getUserCompKeys<TDefinition>(\r\n    frameworkOverrides: IFrameworkOverrides,\r\n    defObject: TDefinition,\r\n    type: ComponentType,\r\n    params?: any\r\n): {\r\n    compName?: string;\r\n    jsComp: any;\r\n    fwComp: any;\r\n    paramsFromSelector: any;\r\n    popupFromSelector?: boolean;\r\n    popupPositionFromSelector?: 'over' | 'under';\r\n} {\r\n    const { name } = type;\r\n\r\n    let compName: string | undefined;\r\n    let jsComp: any;\r\n    let fwComp: any;\r\n\r\n    let paramsFromSelector: any;\r\n    let popupFromSelector: boolean | undefined;\r\n    let popupPositionFromSelector: 'over' | 'under' | undefined;\r\n\r\n    // there are two types of js comps, class based and func based. we can only check for\r\n    // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\r\n    // const isJsClassComp = (comp: any) => doesImplementIComponent(comp);\r\n    // const fwActive = this.frameworkCompWrapper != null;\r\n\r\n    // pull from defObject if available\r\n    if (defObject) {\r\n        const defObjectAny = defObject as any;\r\n\r\n        // if selector, use this\r\n        const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc = defObjectAny[name + 'Selector'];\r\n        const selectorRes = selectorFunc ? selectorFunc(params) : null;\r\n\r\n        const assignComp = (providedJsComp: any) => {\r\n            if (typeof providedJsComp === 'string') {\r\n                compName = providedJsComp as string;\r\n            } else if (providedJsComp != null && providedJsComp !== true) {\r\n                const isFwkComp = frameworkOverrides.isFrameworkComponent(providedJsComp);\r\n                if (isFwkComp) {\r\n                    fwComp = providedJsComp;\r\n                } else {\r\n                    jsComp = providedJsComp;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (selectorRes) {\r\n            assignComp(selectorRes.component);\r\n            paramsFromSelector = selectorRes.params;\r\n            popupFromSelector = (selectorRes as CellEditorSelectorResult).popup;\r\n            popupPositionFromSelector = (selectorRes as CellEditorSelectorResult).popupPosition;\r\n        } else {\r\n            // if no selector, or result of selector is empty, take from defObject\r\n            assignComp(defObjectAny[name]);\r\n        }\r\n    }\r\n\r\n    return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\r\n}\r\n\r\nexport class UserComponentFactory extends BeanStub implements NamedBean {\r\n    beanName = 'userCompFactory' as const;\r\n\r\n    private gridOptions: GridOptions;\r\n    private agCompUtils?: AgComponentUtils;\r\n    private registry: Registry;\r\n    private frameworkCompWrapper?: FrameworkComponentWrapper;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.agCompUtils = beans.agCompUtils;\r\n        this.registry = beans.registry;\r\n        this.frameworkCompWrapper = beans.frameworkCompWrapper;\r\n        this.gridOptions = beans.gridOptions;\r\n    }\r\n\r\n    public getCompDetailsFromGridOptions(\r\n        type: ComponentType,\r\n        defaultName: string | undefined,\r\n        params: any,\r\n        mandatory = false\r\n    ): UserCompDetails | undefined {\r\n        return this.getCompDetails(this.gridOptions, type, defaultName, params, mandatory);\r\n    }\r\n\r\n    public getCompDetails<TDefinition, TComp extends IComponent<any>>(\r\n        defObject: TDefinition,\r\n        type: ComponentType,\r\n        defaultName: string | undefined,\r\n        params: any,\r\n        mandatory = false\r\n    ): UserCompDetails<TComp> | undefined {\r\n        const { name, cellRenderer } = type;\r\n\r\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } =\r\n            _getUserCompKeys(this.beans.frameworkOverrides, defObject, type, params);\r\n\r\n        // for grid-provided comps only\r\n        let defaultCompParams: any;\r\n\r\n        const lookupFromRegistry = (key: string) => {\r\n            const item = this.registry.getUserComponent(name, key);\r\n            if (item) {\r\n                jsComp = !item.componentFromFramework ? item.component : undefined;\r\n                fwComp = item.componentFromFramework ? item.component : undefined;\r\n                defaultCompParams = item.params;\r\n            }\r\n        };\r\n\r\n        // if compOption is a string, means we need to look the item up\r\n        if (compName != null) {\r\n            lookupFromRegistry(compName);\r\n        }\r\n\r\n        // if lookup brought nothing back, and we have a default, lookup the default\r\n        if (jsComp == null && fwComp == null && defaultName != null) {\r\n            lookupFromRegistry(defaultName);\r\n        }\r\n\r\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\r\n        if (jsComp && cellRenderer && !doesImplementIComponent(jsComp)) {\r\n            jsComp = this.agCompUtils?.adaptFunction(type, jsComp);\r\n        }\r\n\r\n        if (!jsComp && !fwComp) {\r\n            const { validation } = this.beans;\r\n            if (mandatory && (compName !== defaultName || !defaultName)) {\r\n                // expecting the user to provide a component with this name\r\n                if (compName) {\r\n                    // If we have validation and this is a grid comp without a default (e.g. filters tool panel),\r\n                    // we will have already warned about this\r\n                    if (!validation?.isProvidedUserComp(compName)) {\r\n                        _error(50, { compName });\r\n                    }\r\n                } else {\r\n                    if (defaultName) {\r\n                        // validation will have already warned about this\r\n                        if (!validation) {\r\n                            _error(260, {\r\n                                ...this.gos.getModuleErrorParams(),\r\n                                propName: name,\r\n                                compName: defaultName,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        _error(216, { name });\r\n                    }\r\n                }\r\n            } else if (defaultName && !validation) {\r\n                // Grid should be providing this component.\r\n                // Validation service will have already warned about this with the correct module name if it was present.\r\n                _error(146, { comp: defaultName });\r\n            }\r\n            return;\r\n        }\r\n\r\n        const paramsMerged = this.mergeParams(defObject, type, params, paramsFromSelector, defaultCompParams);\r\n\r\n        const componentFromFramework = jsComp == null;\r\n        const componentClass = jsComp ?? fwComp;\r\n\r\n        return {\r\n            componentFromFramework,\r\n            componentClass,\r\n            params: paramsMerged,\r\n            type: type,\r\n            popupFromSelector,\r\n            popupPositionFromSelector,\r\n            newAgStackInstance: () =>\r\n                this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type),\r\n        };\r\n    }\r\n\r\n    private newAgStackInstance<TComp extends IComponent<any>>(\r\n        ComponentClass: any,\r\n        componentFromFramework: boolean,\r\n        params: any,\r\n        type: ComponentType\r\n    ): AgPromise<TComp> {\r\n        const jsComponent = !componentFromFramework;\r\n        // using javascript component\r\n        let instance: TComp;\r\n\r\n        if (jsComponent) {\r\n            instance = new ComponentClass();\r\n        } else {\r\n            // Using framework component\r\n            instance = this.frameworkCompWrapper!.wrap(\r\n                ComponentClass,\r\n                type.mandatoryMethods,\r\n                type.optionalMethods,\r\n                type\r\n            );\r\n        }\r\n\r\n        this.createBean(instance);\r\n        const deferredInit = instance.init?.(params);\r\n        if (deferredInit == null) {\r\n            return AgPromise.resolve(instance);\r\n        }\r\n\r\n        return deferredInit.then(() => instance);\r\n    }\r\n\r\n    /**\r\n     * merges params with application provided params\r\n     * used by Floating Filter\r\n     */\r\n    public mergeParams<TDefinition>(\r\n        defObject: TDefinition,\r\n        type: ComponentType,\r\n        paramsFromGrid: any,\r\n        paramsFromSelector: any = null,\r\n        defaultCompParams?: any\r\n    ): any {\r\n        const params: AgGridCommon<any, any> = this.gos.getGridCommonParams();\r\n\r\n        _mergeDeep(params, paramsFromGrid);\r\n\r\n        if (defaultCompParams) {\r\n            _mergeDeep(params, defaultCompParams);\r\n        }\r\n\r\n        // pull user params from either the old prop name and new prop name\r\n        // eg either cellRendererParams and cellCompParams\r\n        const defObjectAny = defObject as any;\r\n        const userParams = defObjectAny && defObjectAny[type.name + 'Params'];\r\n\r\n        if (typeof userParams === 'function') {\r\n            const userParamsFromFunc = userParams(paramsFromGrid);\r\n            _mergeDeep(params, userParamsFromFunc);\r\n        } else if (typeof userParams === 'object') {\r\n            _mergeDeep(params, userParams);\r\n        }\r\n\r\n        _mergeDeep(params, paramsFromSelector);\r\n\r\n        return params;\r\n    }\r\n}\r\n", "import type { IDragAndDropImageComponent, IDragAndDropImageParams } from '../../dragAndDrop/dragAndDropImageComponent';\r\nimport type { ColDef } from '../../entities/colDef';\r\nimport type { IFloatingFilterComp, IFloatingFilterParams } from '../../filter/floating/floatingFilter';\r\nimport type { ISimpleFilter } from '../../filter/provided/iSimpleFilter';\r\nimport type { IHeaderComp, IHeaderParams, IInnerHeaderComponent } from '../../headerRendering/cells/column/headerComp';\r\nimport type {\r\n    IHeaderGroupComp,\r\n    IHeaderGroupParams,\r\n    IInnerHeaderGroupComponent,\r\n} from '../../headerRendering/cells/columnGroup/headerGroupComp';\r\nimport type { IDateComp, IDateParams } from '../../interfaces/dateComponent';\r\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport type { AgGridCommon, WithoutGridCommon } from '../../interfaces/iCommon';\r\nimport type { IFilterComp, IFilterDef, IFilterParams } from '../../interfaces/iFilter';\r\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\r\nimport type { ILoadingCellRendererComp } from '../../interfaces/iLoadingCellRenderer';\r\nimport type { ComponentType, UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport type { ICellRendererComp, ICellRendererParams } from '../../rendering/cellRenderers/iCellRenderer';\r\nimport type { ILoadingOverlayComp, ILoadingOverlayParams } from '../../rendering/overlays/loadingOverlayComponent';\r\nimport type { INoRowsOverlayComp, INoRowsOverlayParams } from '../../rendering/overlays/noRowsOverlayComponent';\r\nimport type { ITooltipComp, ITooltipParams } from '../../tooltip/tooltipComponent';\r\nimport type { UserComponentFactory } from './userComponentFactory';\r\nimport { _getUserCompKeys } from './userComponentFactory';\r\n\r\nconst DateComponent: ComponentType<IDateComp> = {\r\n    name: 'dateComponent',\r\n    mandatoryMethods: ['getDate', 'setDate'],\r\n    optionalMethods: ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel', 'setDisabled', 'refresh'],\r\n};\r\n\r\nconst DragAndDropImageComponent: ComponentType<IDragAndDropImageComponent> = {\r\n    name: 'dragAndDropImageComponent',\r\n    mandatoryMethods: ['setIcon', 'setLabel'],\r\n};\r\n\r\nconst HeaderComponent: ComponentType = { name: 'headerComponent', optionalMethods: ['refresh'] };\r\n\r\nconst InnerHeaderComponent: ComponentType = { name: 'innerHeaderComponent' };\r\nconst InnerHeaderGroupComponent: ComponentType = { name: 'innerHeaderGroupComponent' };\r\n\r\nconst HeaderGroupComponent: ComponentType = { name: 'headerGroupComponent' };\r\n\r\nconst InnerCellRendererComponent: ComponentType = {\r\n    name: 'innerRenderer',\r\n    cellRenderer: true,\r\n    optionalMethods: ['afterGuiAttached'],\r\n};\r\n\r\nconst CellRendererComponent: ComponentType = {\r\n    name: 'cellRenderer',\r\n    optionalMethods: ['refresh', 'afterGuiAttached'],\r\n    cellRenderer: true,\r\n};\r\n\r\nconst EditorRendererComponent: ComponentType = {\r\n    name: 'cellRenderer',\r\n    optionalMethods: ['refresh', 'afterGuiAttached'],\r\n};\r\n\r\nconst LoadingCellRendererComponent: ComponentType = { name: 'loadingCellRenderer', cellRenderer: true };\r\n\r\nconst CellEditorComponent: ComponentType<ICellEditorComp> = {\r\n    name: 'cellEditor',\r\n    mandatoryMethods: ['getValue'],\r\n    optionalMethods: [\r\n        'isPopup',\r\n        'isCancelBeforeStart',\r\n        'isCancelAfterEnd',\r\n        'getPopupPosition',\r\n        'focusIn',\r\n        'focusOut',\r\n        'afterGuiAttached',\r\n        'refresh',\r\n    ],\r\n};\r\n\r\nconst LoadingOverlayComponent: ComponentType = { name: 'loadingOverlayComponent', optionalMethods: ['refresh'] };\r\n\r\nconst NoRowsOverlayComponent: ComponentType = { name: 'noRowsOverlayComponent', optionalMethods: ['refresh'] };\r\n\r\nconst TooltipComponent: ComponentType = { name: 'tooltipComponent' };\r\n\r\nconst FilterComponent: ComponentType<ISimpleFilter> = {\r\n    name: 'filter',\r\n    mandatoryMethods: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\r\n    optionalMethods: [\r\n        'afterGuiAttached',\r\n        'afterGuiDetached',\r\n        'onNewRowsLoaded',\r\n        'getModelAsString',\r\n        'onFloatingFilterChanged',\r\n        'onAnyFilterChanged',\r\n        'refresh',\r\n    ],\r\n};\r\n\r\nconst FloatingFilterComponent: ComponentType<IFloatingFilterComp> = {\r\n    name: 'floatingFilterComponent',\r\n    mandatoryMethods: ['onParentModelChanged'],\r\n    optionalMethods: ['afterGuiAttached', 'refresh'],\r\n};\r\n\r\nconst FullWidth: ComponentType = {\r\n    name: 'fullWidthCellRenderer',\r\n    optionalMethods: ['refresh', 'afterGuiAttached'],\r\n    cellRenderer: true,\r\n};\r\n\r\nconst FullWidthLoading: ComponentType = { name: 'loadingCellRenderer', cellRenderer: true };\r\n\r\nconst FullWidthGroup: ComponentType = {\r\n    name: 'groupRowRenderer',\r\n    optionalMethods: ['afterGuiAttached'],\r\n    cellRenderer: true,\r\n};\r\n\r\nconst FullWidthDetail: ComponentType = { name: 'detailCellRenderer', optionalMethods: ['refresh'], cellRenderer: true };\r\n\r\nexport function _getDragAndDropImageCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<IDragAndDropImageParams>\r\n): UserCompDetails<IDragAndDropImageComponent> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(DragAndDropImageComponent, 'agDragAndDropImage', params, true);\r\n}\r\n\r\nexport function _getInnerCellRendererDetails<TDefinition = any>(\r\n    userCompFactory: UserComponentFactory,\r\n    def: TDefinition,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ICellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, InnerCellRendererComponent, undefined, params);\r\n}\r\n\r\nexport function _getHeaderCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    colDef: ColDef,\r\n    params: WithoutGridCommon<IHeaderParams>\r\n): UserCompDetails<IHeaderComp> | undefined {\r\n    return userCompFactory.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\r\n}\r\n\r\nexport function _getInnerHeaderCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    headerCompParams: IHeaderParams,\r\n    params: WithoutGridCommon<IHeaderParams>\r\n): UserCompDetails<IInnerHeaderComponent> | undefined {\r\n    return userCompFactory.getCompDetails(headerCompParams, InnerHeaderComponent, undefined, params);\r\n}\r\n\r\nexport function _getHeaderGroupCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<IHeaderGroupParams>\r\n): UserCompDetails<IHeaderGroupComp> | undefined {\r\n    const colGroupDef = params.columnGroup.getColGroupDef()!;\r\n    return userCompFactory.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\r\n}\r\n\r\nexport function _getInnerHeaderGroupCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    headerGroupCompParams: IHeaderGroupParams,\r\n    params: WithoutGridCommon<IHeaderGroupParams>\r\n): UserCompDetails<IInnerHeaderGroupComponent> | undefined {\r\n    return userCompFactory.getCompDetails(headerGroupCompParams, InnerHeaderGroupComponent, undefined, params);\r\n}\r\n// this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\r\n// so we have to pass the type in.\r\n\r\nexport function _getFullWidthCellRendererDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ICellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(FullWidth, undefined, params, true);\r\n}\r\n\r\nexport function _getFullWidthLoadingCellRendererDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ILoadingCellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(FullWidthLoading, 'agLoadingCellRenderer', params, true);\r\n}\r\n\r\nexport function _getFullWidthGroupCellRendererDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ICellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(FullWidthGroup, 'agGroupRowRenderer', params, true);\r\n}\r\n\r\nexport function _getFullWidthDetailCellRendererDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ICellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(FullWidthDetail, 'agDetailCellRenderer', params, true);\r\n}\r\n// CELL RENDERER\r\n\r\nexport function _getCellRendererDetails<TDefinition = ColDef, TParams = ICellRendererParams>(\r\n    userCompFactory: UserComponentFactory,\r\n    def: TDefinition,\r\n    params: WithoutGridCommon<TParams>\r\n): UserCompDetails<ICellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, CellRendererComponent, undefined, params);\r\n}\r\n\r\nexport function _getEditorRendererDetails<TDefinition, TEditorParams extends AgGridCommon<any, any>>(\r\n    userCompFactory: UserComponentFactory,\r\n    def: TDefinition,\r\n    params: WithoutGridCommon<TEditorParams>\r\n): UserCompDetails | undefined {\r\n    return userCompFactory.getCompDetails<TDefinition, ICellRendererComp>(\r\n        def,\r\n        EditorRendererComponent,\r\n        undefined,\r\n        params\r\n    );\r\n}\r\n\r\nexport function _getLoadingCellRendererDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    def: ColDef,\r\n    params: WithoutGridCommon<ICellRendererParams>\r\n): UserCompDetails<ILoadingCellRendererComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, LoadingCellRendererComponent, 'agSkeletonCellRenderer', params, true);\r\n}\r\n// CELL EDITOR\r\n\r\nexport function _getCellEditorDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    def: ColDef,\r\n    params: WithoutGridCommon<ICellEditorParams>\r\n): UserCompDetails<ICellEditorComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\r\n}\r\n// FILTER\r\n\r\n/**\r\n * @param defaultFilter provided filters only\r\n */\r\nexport function _getFilterDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    def: IFilterDef,\r\n    params: WithoutGridCommon<IFilterParams>,\r\n    defaultFilter: string\r\n): UserCompDetails<IFilterComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, FilterComponent, defaultFilter, params, true);\r\n}\r\n\r\nexport function _getDateCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<IDateParams>\r\n): UserCompDetails<IDateComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(DateComponent, 'agDateInput', params, true);\r\n}\r\n\r\nexport function _getLoadingOverlayCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ILoadingOverlayParams>\r\n): UserCompDetails<ILoadingOverlayComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(LoadingOverlayComponent, 'agLoadingOverlay', params, true);\r\n}\r\n\r\nexport function _getNoRowsOverlayCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<INoRowsOverlayParams>\r\n): UserCompDetails<INoRowsOverlayComp> | undefined {\r\n    return userCompFactory.getCompDetailsFromGridOptions(NoRowsOverlayComponent, 'agNoRowsOverlay', params, true);\r\n}\r\n\r\nexport function _getTooltipCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    params: WithoutGridCommon<ITooltipParams>\r\n): UserCompDetails<ITooltipComp> | undefined {\r\n    return userCompFactory.getCompDetails(params.colDef!, TooltipComponent, 'agTooltipComponent', params, true);\r\n}\r\n\r\n/**\r\n * @param defaultFloatingFilter provided floating filters only\r\n */\r\nexport function _getFloatingFilterCompDetails(\r\n    userCompFactory: UserComponentFactory,\r\n    def: IFilterDef,\r\n    params: WithoutGridCommon<IFloatingFilterParams<any>>,\r\n    defaultFloatingFilter: string\r\n): UserCompDetails<IFloatingFilterComp> | undefined {\r\n    return userCompFactory.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\r\n}\r\n\r\nexport function _getFilterCompKeys(frameworkOverrides: IFrameworkOverrides, def: IFilterDef) {\r\n    return _getUserCompKeys(frameworkOverrides, def, FilterComponent);\r\n}\r\n\r\nexport function _mergeFilterParamsWithApplicationProvidedParams(\r\n    userCompFactory: UserComponentFactory,\r\n    defObject: ColDef,\r\n    paramsFromGrid: IFilterParams\r\n): IFilterParams {\r\n    return userCompFactory.mergeParams(defObject, FilterComponent, paramsFromGrid);\r\n}\r\n", "export function _unwrapUserComp<T>(comp: T): T {\r\n    const compAsAny = comp as any;\r\n    const isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;\r\n    return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;\r\n}\r\n", "import type { Module, ModuleName, ModuleValidationInvalidResult } from '../interfaces/iModule';\r\nimport type { RowModelType } from '../interfaces/iRowModel';\r\nimport { _errorOnce } from '../utils/function';\r\n\r\ninterface RowModelModuleStore {\r\n    [name: string]: Module;\r\n}\r\n\r\ntype ModuleStore = {\r\n    [modelType in RowModelType | 'all']?: RowModelModuleStore;\r\n};\r\n\r\nconst allRegisteredModules = new Set<Module>();\r\nconst globalModulesMap: ModuleStore = {};\r\nconst gridModulesMap: { [gridId: string]: ModuleStore } = {};\r\nlet currentModuleVersion: string;\r\nlet areGridScopedModules = false;\r\n\r\nfunction isValidModuleVersion(module: Module): boolean {\r\n    const [moduleMajor, moduleMinor] = module.version.split('.') || [];\r\n    const [currentModuleMajor, currentModuleMinor] = currentModuleVersion.split('.') || [];\r\n\r\n    return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;\r\n}\r\n\r\nfunction runVersionChecks(module: Module) {\r\n    if (!currentModuleVersion) {\r\n        currentModuleVersion = module.version;\r\n    }\r\n    const errorMsg = (details: string) =>\r\n        `You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. ${details} Please update all modules to the same version.`;\r\n    if (!module.version) {\r\n        _errorOnce(errorMsg(`'${module.moduleName}' is incompatible.`));\r\n    } else if (!isValidModuleVersion(module)) {\r\n        _errorOnce(\r\n            errorMsg(\r\n                `'${module.moduleName}' is version ${module.version} but the other modules are version ${currentModuleVersion}.`\r\n            )\r\n        );\r\n    }\r\n\r\n    if (module.validate) {\r\n        const result = module.validate();\r\n        if (!result.isValid) {\r\n            const errorResult = result as ModuleValidationInvalidResult;\r\n            _errorOnce(`${errorResult.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport function _registerModule(module: Module, gridId: string | undefined): void {\r\n    runVersionChecks(module);\r\n    const rowModels = module.rowModels ?? ['all'];\r\n\r\n    allRegisteredModules.add(module);\r\n\r\n    let moduleStore: ModuleStore;\r\n    if (gridId !== undefined) {\r\n        areGridScopedModules = true;\r\n        if (gridModulesMap[gridId] === undefined) {\r\n            gridModulesMap[gridId] = {};\r\n        }\r\n        moduleStore = gridModulesMap[gridId];\r\n    } else {\r\n        moduleStore = globalModulesMap;\r\n    }\r\n    rowModels.forEach((rowModel) => {\r\n        if (moduleStore[rowModel] === undefined) {\r\n            moduleStore[rowModel] = {};\r\n        }\r\n        moduleStore[rowModel]![module.moduleName] = module;\r\n    });\r\n\r\n    if (module.dependsOn) {\r\n        module.dependsOn.forEach((dependency) => _registerModule(dependency, gridId));\r\n    }\r\n}\r\n\r\nexport function _unRegisterGridModules(gridId: string): void {\r\n    delete gridModulesMap[gridId];\r\n}\r\n\r\nexport function _isModuleRegistered(moduleName: ModuleName, gridId: string, rowModel: RowModelType): boolean {\r\n    const isRegisteredForRowModel = (model: RowModelType | 'all') =>\r\n        !!globalModulesMap[model]?.[moduleName] || !!gridModulesMap[gridId]?.[model]?.[moduleName];\r\n    return isRegisteredForRowModel(rowModel) || isRegisteredForRowModel('all');\r\n}\r\n\r\nexport function _areModulesGridScoped(): boolean {\r\n    return areGridScopedModules;\r\n}\r\n\r\nexport function _getRegisteredModules(gridId: string, rowModel: RowModelType): Module[] {\r\n    const gridModules = gridModulesMap[gridId] ?? {};\r\n    return [\r\n        ...Object.values(globalModulesMap['all'] ?? {}),\r\n        ...Object.values(gridModules['all'] ?? {}),\r\n        ...Object.values(globalModulesMap[rowModel] ?? {}),\r\n        ...Object.values(gridModules[rowModel] ?? {}),\r\n    ];\r\n}\r\n\r\nexport function _getAllRegisteredModules(): Set<Module> {\r\n    return new Set(allRegisteredModules);\r\n}\r\n\r\nexport function _getGridRegisteredModules(gridId: string, rowModel: RowModelType): Module[] {\r\n    const gridModules = gridModulesMap[gridId] ?? {};\r\n    return [...Object.values(gridModules['all'] ?? {}), ...Object.values(gridModules[rowModel] ?? {})];\r\n}\r\n\r\nexport class ModuleRegistry {\r\n    /**\r\n     * @deprecated v33 Use `registerModules([module])` instead.\r\n     */\r\n    public static register(module: Module): void {\r\n        _registerModule(module, undefined);\r\n    }\r\n    /**\r\n     * Globally register the given modules for all grids.\r\n     * @param modules - modules to register\r\n     */\r\n    public static registerModules(modules: Module[]): void {\r\n        modules.forEach((module) => _registerModule(module, undefined));\r\n    }\r\n}\r\n", "import type { GenericBean } from './genericBean';\r\n\r\ntype BeanComparator<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> = (\r\n    bean1: GenericBean<TBeanName, TBeanCollection>,\r\n    bean2: GenericBean<TBeanName, TBeanCollection>\r\n) => number;\r\n\r\nexport interface GenericContextParams<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\r\n    providedBeanInstances: Partial<{ [key in TBeanName]: GenericBean<TBeanName, TBeanCollection> }>;\r\n    beanClasses: GenericSingletonBean<TBeanName, TBeanCollection>[];\r\n    derivedBeans?: ((context: GenericContext<TBeanName, TBeanCollection>) => {\r\n        beanName: TBeanName;\r\n        bean: TBeanCollection[TBeanName];\r\n    })[];\r\n    beanInitComparator?: BeanComparator<TBeanName, TBeanCollection>;\r\n    beanDestroyComparator?: BeanComparator<TBeanName, TBeanCollection>;\r\n}\r\n\r\nexport interface GenericSingletonBean<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\r\n    new (): GenericBean<TBeanName, TBeanCollection>;\r\n}\r\n\r\nexport interface ComponentBean {\r\n    preConstruct(): void;\r\n}\r\n\r\n/**\r\n * The BaseBean can be used to avoid having to call super.wireBeans() in every subclass of a shared base bean, .i.e BeanStub, Component\r\n * It is used to pre-wire beans before the wireBeans() method is called which is equivalent to calling super.wireBeans() in a sub class\r\n */\r\nexport interface BaseBean<TBeanCollection> {\r\n    preWireBeans?(beans: TBeanCollection): void;\r\n}\r\n\r\nexport class GenericContext<TBeanName extends string, TBeanCollection extends { [key in TBeanName]?: any }> {\r\n    protected beans: TBeanCollection = {} as TBeanCollection;\r\n    private createdBeans: GenericBean<TBeanName, TBeanCollection>[] = [];\r\n    private beanDestroyComparator?: BeanComparator<TBeanName, TBeanCollection>;\r\n\r\n    private destroyed = false;\r\n\r\n    constructor(params: GenericContextParams<TBeanName, TBeanCollection>) {\r\n        if (!params || !params.beanClasses) {\r\n            return;\r\n        }\r\n\r\n        this.beanDestroyComparator = params.beanDestroyComparator;\r\n\r\n        this.init(params);\r\n    }\r\n\r\n    protected init(params: GenericContextParams<TBeanName, TBeanCollection>): void {\r\n        Object.entries(params.providedBeanInstances).forEach(([beanName, beanInstance]: [TBeanName, any]) => {\r\n            this.beans[beanName] = beanInstance;\r\n        });\r\n\r\n        params.beanClasses.forEach((BeanClass) => {\r\n            const instance = new BeanClass();\r\n            if (instance.beanName) {\r\n                this.beans[instance.beanName] = instance as any;\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.error(`Bean ${BeanClass.name} is missing beanName`);\r\n            }\r\n            this.createdBeans.push(instance);\r\n        });\r\n\r\n        params.derivedBeans?.forEach((beanFunc) => {\r\n            const { beanName, bean } = beanFunc(this);\r\n            this.beans[beanName] = bean;\r\n            this.createdBeans.push(bean);\r\n        });\r\n\r\n        if (params.beanInitComparator) {\r\n            // sort the beans so that they are in a consistent order\r\n            this.createdBeans.sort(params.beanInitComparator);\r\n        }\r\n\r\n        this.initBeans(this.createdBeans);\r\n    }\r\n\r\n    private getBeanInstances(): GenericBean<TBeanName, TBeanCollection>[] {\r\n        return Object.values(this.beans);\r\n    }\r\n\r\n    public createBean<T extends GenericBean<TBeanName, TBeanCollection> | null | undefined>(\r\n        bean: T,\r\n        afterPreCreateCallback?: (bean: GenericBean<TBeanName, TBeanCollection>) => void\r\n    ): T {\r\n        if (!bean) {\r\n            throw Error('null bean');\r\n        }\r\n        this.initBeans([bean], afterPreCreateCallback);\r\n        return bean;\r\n    }\r\n\r\n    private initBeans(\r\n        beanInstances: GenericBean<TBeanName, TBeanCollection>[],\r\n        afterPreCreateCallback?: (bean: GenericBean<TBeanName, TBeanCollection>) => void\r\n    ): void {\r\n        beanInstances.forEach((instance) => {\r\n            // used by BaseBeans to avoid the need for calling super.wireBeans() in every subclasses\r\n            (instance as BaseBean<TBeanCollection>).preWireBeans?.(this.beans);\r\n            instance.wireBeans?.(this.beans);\r\n        });\r\n\r\n        // used by the component class\r\n        beanInstances.forEach((instance) => (instance as ComponentBean).preConstruct?.());\r\n        if (afterPreCreateCallback) {\r\n            beanInstances.forEach(afterPreCreateCallback);\r\n        }\r\n        beanInstances.forEach((instance) => instance.postConstruct?.());\r\n    }\r\n\r\n    public getBeans(): TBeanCollection {\r\n        return this.beans;\r\n    }\r\n\r\n    public getBean<T extends TBeanName>(name: T): TBeanCollection[T] {\r\n        return this.beans[name];\r\n    }\r\n\r\n    public destroy(): void {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n\r\n        // Set before doing the destroy, so if context.destroy() gets called via another bean\r\n        // we are marked as destroyed already to prevent running destroy() twice\r\n        this.destroyed = true;\r\n\r\n        const beanInstances = this.getBeanInstances();\r\n        if (this.beanDestroyComparator) {\r\n            beanInstances.sort(this.beanDestroyComparator);\r\n        }\r\n        this.destroyBeans(beanInstances);\r\n\r\n        this.beans = {} as TBeanCollection;\r\n        this.createdBeans = [];\r\n    }\r\n\r\n    /**\r\n     * Destroys a bean and returns undefined to support destruction and clean up in a single line.\r\n     * this.dateComp = this.context.destroyBean(this.dateComp);\r\n     */\r\n    public destroyBean(bean: GenericBean<TBeanName, TBeanCollection> | null | undefined): undefined {\r\n        bean?.destroy?.();\r\n    }\r\n\r\n    /**\r\n     * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.\r\n     * this.dateComps = this.context.destroyBeans(this.dateComps);\r\n     */\r\n    public destroyBeans(beans: (GenericBean<TBeanName, TBeanCollection> | null | undefined)[]): [] {\r\n        if (beans) {\r\n            for (let i = 0; i < beans.length; i++) {\r\n                this.destroyBean(beans[i]);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public isDestroyed(): boolean {\r\n        return this.destroyed;\r\n    }\r\n}\r\n", "import type { AlignedGridsService } from '../alignedGrids/alignedGridsService';\r\nimport type { ApiFunctionService } from '../api/apiFunctionService';\r\nimport type { GridApi } from '../api/gridApi';\r\nimport type { ColumnAutosizeService } from '../columnAutosize/columnAutosizeService';\r\nimport type { ColumnAnimationService } from '../columnMove/columnAnimationService';\r\nimport type { ColumnMoveService } from '../columnMove/columnMoveService';\r\nimport type { ColumnResizeService } from '../columnResize/columnResizeService';\r\nimport type { ColumnDefFactory } from '../columns/columnDefFactory';\r\nimport type { ColumnFlexService } from '../columns/columnFlexService';\r\nimport type { ColumnGroupService } from '../columns/columnGroups/columnGroupService';\r\nimport type { ColumnHoverService } from '../columns/columnHover/columnHoverService';\r\nimport type { ColumnModel } from '../columns/columnModel';\r\nimport type { ColumnNameService } from '../columns/columnNameService';\r\nimport type { ColumnViewportService } from '../columns/columnViewportService';\r\nimport type { DataTypeService } from '../columns/dataTypeService';\r\nimport type { SelectionColService } from '../columns/selectionColService';\r\nimport type { VisibleColsService } from '../columns/visibleColsService';\r\nimport type { AgComponentUtils } from '../components/framework/agComponentUtils';\r\nimport type { FrameworkComponentWrapper } from '../components/framework/frameworkComponentWrapper';\r\nimport type { Registry } from '../components/framework/registry';\r\nimport type { UserComponentFactory } from '../components/framework/userComponentFactory';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { DragAndDropService } from '../dragAndDrop/dragAndDropService';\r\nimport type { DragService } from '../dragAndDrop/dragService';\r\nimport type { HorizontalResizeService } from '../dragAndDrop/horizontalResizeService';\r\nimport type { RowDragService } from '../dragAndDrop/rowDragService';\r\nimport type { EditService } from '../edit/editService';\r\nimport type { RowEditService } from '../edit/rowEditService';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { Environment } from '../environment';\r\nimport type { EventService } from '../eventService';\r\nimport type { AgGlobalEventListener } from '../events';\r\nimport type { ColumnFilterService } from '../filter/columnFilterService';\r\nimport type { FilterManager } from '../filter/filterManager';\r\nimport type { FilterValueService } from '../filter/filterValueService';\r\nimport type { QuickFilterService } from '../filter/quickFilterService';\r\nimport type { FocusService } from '../focusService';\r\nimport type { ScrollVisibleService } from '../gridBodyComp/scrollVisibleService';\r\nimport type { GridDestroyService } from '../gridDestroyService';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { RowNodeBlockLoader } from '../infiniteRowModel/rowNodeBlockLoader';\r\nimport type { IChartService } from '../interfaces/IChartService';\r\nimport type { IRangeService } from '../interfaces/IRangeService';\r\nimport type { IAdvancedFilterService } from '../interfaces/iAdvancedFilterService';\r\nimport type { IAggColumnNameService } from '../interfaces/iAggColumnNameService';\r\nimport type { IAggFuncService } from '../interfaces/iAggFuncService';\r\nimport type { IAutoColService } from '../interfaces/iAutoColService';\r\nimport type { IClientSideNodeManager } from '../interfaces/iClientSideNodeManager';\r\nimport type { IClipboardService } from '../interfaces/iClipboardService';\r\nimport type { IColsService } from '../interfaces/iColsService';\r\nimport type { IContextMenuService } from '../interfaces/iContextMenu';\r\nimport type { ICsvCreator } from '../interfaces/iCsvCreator';\r\nimport type { IExcelCreator } from '../interfaces/iExcelCreator';\r\nimport type { IExpansionService } from '../interfaces/iExpansionService';\r\nimport type { IFooterService } from '../interfaces/iFooterService';\r\nimport type { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\r\nimport type { IGroupHideOpenParentsService } from '../interfaces/iGroupHideOpenParentsService';\r\nimport type { IMenuFactory } from '../interfaces/iMenuFactory';\r\nimport type { IPivotColDefService } from '../interfaces/iPivotColDefService';\r\nimport type { IPivotResultColsService } from '../interfaces/iPivotResultColsService';\r\nimport type { IRowChildrenService } from '../interfaces/iRowChildrenService';\r\nimport type { IRowModel } from '../interfaces/iRowModel';\r\nimport type { IRowNodeStage } from '../interfaces/iRowNodeStage';\r\nimport type { ISelectionService } from '../interfaces/iSelectionService';\r\nimport type { IServerSideTransactionManager } from '../interfaces/iServerSideRowModel';\r\nimport type { IShowRowGroupColsService } from '../interfaces/iShowRowGroupColsService';\r\nimport type { ISideBarService } from '../interfaces/iSideBar';\r\nimport type { IStickyRowService } from '../interfaces/iStickyRows';\r\nimport type { IMasterDetailService } from '../interfaces/masterDetail';\r\nimport type { IRenderStatusService } from '../interfaces/renderStatusService';\r\nimport type { AnimationFrameService } from '../misc/animationFrameService';\r\nimport type { ApiEventService } from '../misc/apiEvents/apiEventService';\r\nimport type { LocaleService } from '../misc/locale/localeService';\r\nimport type { MenuService } from '../misc/menu/menuService';\r\nimport type { StateService } from '../misc/state/stateService';\r\nimport type { TouchService } from '../misc/touchService';\r\nimport { _unRegisterGridModules } from '../modules/moduleRegistry';\r\nimport type { CellNavigationService } from '../navigation/cellNavigationService';\r\nimport type { HeaderNavigationService } from '../navigation/headerNavigationService';\r\nimport type { NavigationService } from '../navigation/navigationService';\r\nimport type { PageBoundsListener } from '../pagination/pageBoundsListener';\r\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\r\nimport type { PaginationAutoPageSizeService } from '../pagination/paginationAutoPageSizeService';\r\nimport type { PaginationService } from '../pagination/paginationService';\r\nimport type { PinnedColumnService } from '../pinnedColumns/pinnedColumnService';\r\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\r\nimport type { AriaAnnouncementService } from '../rendering/ariaAnnouncementService';\r\nimport type { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\r\nimport type { CellFlashService } from '../rendering/cell/cellFlashService';\r\nimport type { OverlayService } from '../rendering/overlays/overlayService';\r\nimport type { RowAutoHeightService } from '../rendering/row/rowAutoHeightService';\r\nimport type { RowContainerHeightService } from '../rendering/rowContainerHeightService';\r\nimport type { RowRenderer } from '../rendering/rowRenderer';\r\nimport type { RowNodeSorter } from '../sort/rowNodeSorter';\r\nimport type { SortService } from '../sort/sortService';\r\nimport type { CellStyleService } from '../styling/cellStyleService';\r\nimport type { RowStyleService } from '../styling/rowStyleService';\r\nimport type { SyncService } from '../syncService';\r\nimport type { TooltipService } from '../tooltip/tooltipService';\r\nimport type { UndoRedoService } from '../undoRedo/undoRedoService';\r\nimport type { ValidationService } from '../validation/validationService';\r\nimport type { ExpressionService } from '../valueService/expressionService';\r\nimport type { ValueCache } from '../valueService/valueCache';\r\nimport type { ValueService } from '../valueService/valueService';\r\nimport type { PopupService } from '../widgets/popupService';\r\nimport type { GenericContextParams, GenericSingletonBean } from './genericContext';\r\nimport { GenericContext } from './genericContext';\r\n\r\nexport interface ContextParams extends GenericContextParams<BeanName, BeanCollection> {\r\n    gridId: string;\r\n    destroyCallback?: () => void;\r\n}\r\n\r\nexport interface SingletonBean extends GenericSingletonBean<BeanName, BeanCollection> {}\r\n\r\nexport type DynamicBeanName =\r\n    | 'detailCellRendererCtrl'\r\n    | 'dndSourceComp'\r\n    | 'fillHandle'\r\n    | 'groupCellRendererCtrl'\r\n    | 'headerFilterCellCtrl'\r\n    | 'headerGroupCellCtrl'\r\n    | 'rangeHandle'\r\n    | 'tooltipFeature';\r\n\r\nexport type UserComponentName =\r\n    | 'agDragAndDropImage'\r\n    | 'agColumnHeader'\r\n    | 'agColumnGroupHeader'\r\n    | 'agSortIndicator'\r\n    | 'agAnimateShowChangeCellRenderer'\r\n    | 'agAnimateSlideCellRenderer'\r\n    | 'agLoadingCellRenderer'\r\n    | 'agSkeletonCellRenderer'\r\n    | 'agCheckboxCellRenderer'\r\n    | 'agLoadingOverlay'\r\n    | 'agNoRowsOverlay'\r\n    | 'agTooltipComponent'\r\n    | 'agReadOnlyFloatingFilter'\r\n    | 'agTextColumnFilter'\r\n    | 'agNumberColumnFilter'\r\n    | 'agDateColumnFilter'\r\n    | 'agDateInput'\r\n    | 'agTextColumnFloatingFilter'\r\n    | 'agNumberColumnFloatingFilter'\r\n    | 'agDateColumnFloatingFilter'\r\n    | 'agMultiColumnFilter'\r\n    | 'agMultiColumnFloatingFilter'\r\n    | 'agGroupColumnFilter'\r\n    | 'agGroupColumnFloatingFilter'\r\n    | 'agSetColumnFilter'\r\n    | 'agSetColumnFloatingFilter'\r\n    | 'agCellEditor'\r\n    | 'agSelectCellEditor'\r\n    | 'agTextCellEditor'\r\n    | 'agNumberCellEditor'\r\n    | 'agDateCellEditor'\r\n    | 'agDateStringCellEditor'\r\n    | 'agCheckboxCellEditor'\r\n    | 'agLargeTextCellEditor'\r\n    | 'agRichSelect'\r\n    | 'agRichSelectCellEditor'\r\n    | 'agMenuItem'\r\n    | 'agColumnsToolPanel'\r\n    | 'agFiltersToolPanel'\r\n    | 'agGroupRowRenderer'\r\n    | 'agGroupCellRenderer'\r\n    | 'agDetailCellRenderer'\r\n    | 'agSparklineCellRenderer'\r\n    | 'agAggregationComponent'\r\n    | 'agSelectedRowCountComponent'\r\n    | 'agTotalRowCountComponent'\r\n    | 'agFilteredRowCountComponent'\r\n    | 'agTotalAndFilteredRowCountComponent';\r\n\r\nexport type ClassImp = new (...args: []) => object;\r\nexport type ComponentMeta =\r\n    | ClassImp\r\n    | {\r\n          classImp: ClassImp;\r\n          /** Default params for provided components */\r\n          params?: any;\r\n      };\r\n\r\nexport interface CoreBeanCollection {\r\n    context: Context;\r\n    pageBoundsListener: PageBoundsListener;\r\n    gos: GridOptionsService;\r\n    environment: Environment;\r\n    rowRenderer: RowRenderer;\r\n    valueSvc: ValueService;\r\n    eventSvc: EventService;\r\n    colModel: ColumnModel;\r\n    colViewport: ColumnViewportService;\r\n    colNames: ColumnNameService;\r\n    visibleCols: VisibleColsService;\r\n    colMoves?: ColumnMoveService;\r\n    colFlex?: ColumnFlexService;\r\n    colResize?: ColumnResizeService;\r\n    headerNavigation?: HeaderNavigationService;\r\n    navigation?: NavigationService;\r\n    colAnimation?: ColumnAnimationService;\r\n    focusSvc: FocusService;\r\n    popupSvc?: PopupService;\r\n    cellStyles?: CellStyleService;\r\n    colHover?: ColumnHoverService;\r\n    userCompFactory: UserComponentFactory;\r\n    registry: Registry;\r\n    animationFrameSvc?: AnimationFrameService;\r\n    dragSvc?: DragService;\r\n    dragAndDrop?: DragAndDropService;\r\n    sortSvc?: SortService;\r\n    colFilter?: ColumnFilterService;\r\n    filterManager?: FilterManager;\r\n    rowContainerHeight: RowContainerHeightService;\r\n    frameworkOverrides: IFrameworkOverrides;\r\n    selectionSvc?: ISelectionService;\r\n    rowStyleSvc?: RowStyleService;\r\n    rowModel: IRowModel;\r\n    ctrlsSvc: CtrlsService;\r\n    valueCache?: ValueCache;\r\n    localeSvc?: LocaleService;\r\n    syncSvc: SyncService;\r\n    ariaAnnounce: AriaAnnouncementService;\r\n    rangeSvc?: IRangeService;\r\n    validation?: ValidationService;\r\n    gridApi: GridApi;\r\n    gridOptions: GridOptions;\r\n    eGridDiv: HTMLElement;\r\n    pivotResultCols?: IPivotResultColsService;\r\n    autoColSvc?: IAutoColService;\r\n    selectionColSvc?: SelectionColService;\r\n    colDefFactory?: ColumnDefFactory;\r\n    colAutosize?: ColumnAutosizeService;\r\n    rowGroupColsSvc?: IColsService;\r\n    valueColsSvc?: IColsService;\r\n    pivotColsSvc?: IColsService;\r\n    quickFilter?: QuickFilterService;\r\n    showRowGroupCols?: IShowRowGroupColsService;\r\n    dataTypeSvc?: DataTypeService;\r\n    globalListener: AgGlobalEventListener;\r\n    globalSyncListener: AgGlobalEventListener;\r\n    stateSvc?: StateService;\r\n    overlays?: OverlayService;\r\n    pinnedRowModel?: PinnedRowModel;\r\n    menuSvc?: MenuService;\r\n    apiEventSvc?: ApiEventService;\r\n    undoRedo?: UndoRedoService;\r\n    rowNodeBlockLoader?: RowNodeBlockLoader;\r\n    csvCreator?: ICsvCreator;\r\n    excelCreator?: IExcelCreator;\r\n    clipboardSvc?: IClipboardService;\r\n    cellNavigation?: CellNavigationService;\r\n    scrollVisibleSvc: ScrollVisibleService;\r\n    pinnedCols?: PinnedColumnService;\r\n    expressionSvc?: ExpressionService;\r\n    autoWidthCalc?: AutoWidthCalculator;\r\n    agCompUtils?: AgComponentUtils;\r\n    frameworkCompWrapper: FrameworkComponentWrapper;\r\n    horizontalResizeSvc?: HorizontalResizeService;\r\n    filterMenuFactory?: IMenuFactory;\r\n    enterpriseMenuFactory?: IMenuFactory;\r\n    contextMenuSvc?: IContextMenuService;\r\n    editSvc?: EditService;\r\n    rowEditSvc?: RowEditService;\r\n    alignedGridsSvc?: AlignedGridsService;\r\n    paginationAutoPageSizeSvc?: PaginationAutoPageSizeService;\r\n    pagination?: PaginationService;\r\n    pageBounds: PageBoundsService;\r\n    apiFunctionSvc: ApiFunctionService;\r\n    gridDestroySvc: GridDestroyService;\r\n    expansionSvc?: IExpansionService;\r\n    sideBar?: ISideBarService;\r\n    ssrmTxnManager?: IServerSideTransactionManager;\r\n    aggFuncSvc?: IAggFuncService;\r\n    advancedFilter: IAdvancedFilterService;\r\n    filterStage?: IRowNodeStage;\r\n    sortStage?: IRowNodeStage;\r\n    flattenStage?: IRowNodeStage;\r\n    groupStage?: IRowNodeStage;\r\n    aggStage?: IRowNodeStage;\r\n    pivotStage?: IRowNodeStage;\r\n    filterAggStage?: IRowNodeStage;\r\n    rowNodeSorter?: RowNodeSorter;\r\n    pivotColDefSvc?: IPivotColDefService;\r\n    chartSvc?: IChartService;\r\n    aggColNameSvc?: IAggColumnNameService;\r\n    renderStatus?: IRenderStatusService;\r\n    rowDragSvc?: RowDragService;\r\n    stickyRowSvc?: IStickyRowService;\r\n    groupHideOpenParentsSvc?: IGroupHideOpenParentsService;\r\n    filterValueSvc?: FilterValueService;\r\n    csrmNodeSvc?: IClientSideNodeManager;\r\n    csrmPathTreeNodeSvc?: IClientSideNodeManager;\r\n    csrmChildrenTreeNodeSvc?: IClientSideNodeManager;\r\n    cellFlashSvc?: CellFlashService;\r\n    masterDetailSvc?: IMasterDetailService;\r\n    tooltipSvc?: TooltipService;\r\n    colGroupSvc?: ColumnGroupService;\r\n    rowAutoHeight?: RowAutoHeightService;\r\n    rowChildrenSvc?: IRowChildrenService;\r\n    footerSvc?: IFooterService;\r\n    touchSvc?: TouchService;\r\n}\r\n\r\nexport type BeanCollection = CoreBeanCollection & {\r\n    // `unknown | undefined` to make sure the type is handled correctly when used\r\n    [key in Exclude<BeanName, keyof CoreBeanCollection>]?: unknown;\r\n};\r\n\r\nexport class Context extends GenericContext<BeanName, BeanCollection> {\r\n    private gridId: string;\r\n    private destroyCallback?: () => void;\r\n\r\n    protected override init(params: ContextParams): void {\r\n        this.gridId = params.gridId;\r\n\r\n        this.beans.context = this;\r\n        this.destroyCallback = params.destroyCallback;\r\n        super.init(params);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        _unRegisterGridModules(this.gridId);\r\n        this.destroyCallback?.();\r\n    }\r\n\r\n    public getGridId(): string {\r\n        return this.gridId;\r\n    }\r\n}\r\n\r\nexport type BeanName =\r\n    | 'advFilterExpSvc'\r\n    | 'advancedFilter'\r\n    | 'advSettingsMenuFactory'\r\n    | 'aggFuncSvc'\r\n    | 'agCompUtils'\r\n    | 'aggColNameSvc'\r\n    | 'aggStage'\r\n    | 'alignedGridsSvc'\r\n    | 'animationFrameSvc'\r\n    | 'apiFunctionSvc'\r\n    | 'ariaAnnounce'\r\n    | 'apiEventSvc'\r\n    | 'autoColSvc'\r\n    | 'autoWidthCalc'\r\n    | 'beans'\r\n    | 'cellFlashSvc'\r\n    | 'cellNavigation'\r\n    | 'cellStyles'\r\n    | 'changeDetectionSvc'\r\n    | 'chartColSvc'\r\n    | 'chartCrossFilterSvc'\r\n    | 'chartMenuItemMapper'\r\n    | 'chartMenuListFactory'\r\n    | 'chartMenuSvc'\r\n    | 'chartTranslation'\r\n    | 'chartSvc'\r\n    | 'agChartsExports'\r\n    | 'clipboardSvc'\r\n    | 'colAnimation'\r\n    | 'colAutosize'\r\n    | 'colChooserFactory'\r\n    | 'colDefFactory'\r\n    | 'colFilter'\r\n    | 'colFlex'\r\n    | 'colGroupSvc'\r\n    | 'colHover'\r\n    | 'colMenuFactory'\r\n    | 'colModel'\r\n    | 'colMoves'\r\n    | 'colNames'\r\n    | 'colResize'\r\n    | 'colToolPanelFactory'\r\n    | 'colViewport'\r\n    | 'pivotResultCols'\r\n    | 'context'\r\n    | 'contextMenuSvc'\r\n    | 'selectionColSvc'\r\n    | 'ctrlsSvc'\r\n    | 'csvCreator'\r\n    | 'dataTypeSvc'\r\n    | 'visibleCols'\r\n    | 'dragAndDrop'\r\n    | 'dragSvc'\r\n    | 'editSvc'\r\n    | 'excelCreator'\r\n    | 'enterpriseMenuFactory'\r\n    | 'environment'\r\n    | 'eventSvc'\r\n    | 'eGridDiv'\r\n    | 'enterpriseChartProxyFactory'\r\n    | 'expansionSvc'\r\n    | 'expressionSvc'\r\n    | 'filterAggStage'\r\n    | 'filterManager'\r\n    | 'filterMenuFactory'\r\n    | 'filterStage'\r\n    | 'filterValueSvc'\r\n    | 'flashCellSvc'\r\n    | 'flattenStage'\r\n    | 'focusSvc'\r\n    | 'footerSvc'\r\n    | 'funcColsSvc'\r\n    | 'pivotColsSvc'\r\n    | 'rowGroupColsSvc'\r\n    | 'valueColsSvc'\r\n    | 'frameworkCompWrapper'\r\n    | 'frameworkOverrides'\r\n    | 'globalListener'\r\n    | 'globalSyncListener'\r\n    | 'gridApi'\r\n    | 'gridDestroySvc'\r\n    | 'gridOptions'\r\n    | 'gos'\r\n    | 'gridOptionsWrapper'\r\n    | 'gridSerializer'\r\n    | 'groupHideOpenParentsSvc'\r\n    | 'groupStage'\r\n    | 'headerNavigation'\r\n    | 'horizontalResizeSvc'\r\n    | 'lazyBlockLoadingSvc'\r\n    | 'licenseManager'\r\n    | 'localeSvc'\r\n    | 'masterDetailSvc'\r\n    | 'menuItemMapper'\r\n    | 'menuSvc'\r\n    | 'menuUtils'\r\n    | 'navigation'\r\n    | 'overlays'\r\n    | 'paginationAutoPageSizeSvc'\r\n    | 'pagination'\r\n    | 'pinnedRowModel'\r\n    | 'pinnedCols'\r\n    | 'pivotColDefSvc'\r\n    | 'pivotStage'\r\n    | 'popupSvc'\r\n    | 'quickFilter'\r\n    | 'rangeSvc'\r\n    | 'pageBoundsListener'\r\n    | 'pageBounds'\r\n    | 'registry'\r\n    | 'renderStatus'\r\n    | 'rowAutoHeight'\r\n    | 'rowChildrenSvc'\r\n    | 'rowContainerHeight'\r\n    | 'rowDragSvc'\r\n    | 'rowEditSvc'\r\n    | 'rowModel'\r\n    | 'rowNodeBlockLoader'\r\n    | 'rowNodeSorter'\r\n    | 'rowRenderer'\r\n    | 'rowStyleSvc'\r\n    | 'scrollVisibleSvc'\r\n    | 'selectionController'\r\n    | 'selectionSvc'\r\n    | 'showRowGroupCols'\r\n    | 'sideBar'\r\n    | 'sortSvc'\r\n    | 'sortStage'\r\n    | 'ssrmBlockUtils'\r\n    | 'ssrmExpandListener'\r\n    | 'ssrmFilterListener'\r\n    | 'ssrmListenerUtils'\r\n    | 'ssrmNodeManager'\r\n    | 'ssrmSortSvc'\r\n    | 'ssrmStoreFactory'\r\n    | 'ssrmStoreUtils'\r\n    | 'ssrmTxnManager'\r\n    | 'stateSvc'\r\n    | 'statusBarSvc'\r\n    | 'stickyRowSvc'\r\n    | 'syncSvc'\r\n    | 'tooltipSvc'\r\n    | 'touchSvc'\r\n    | 'undoRedo'\r\n    | 'userCompFactory'\r\n    | 'valueCache'\r\n    | 'valueSvc'\r\n    | 'validationLogger'\r\n    | 'validation'\r\n    | 'csrmNodeSvc'\r\n    | 'csrmPathTreeNodeSvc'\r\n    | 'csrmChildrenTreeNodeSvc';\r\n", "import type { VisibleColsService } from '../../columns/visibleColsService';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\r\nimport type { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from '../../entities/colDef';\r\nimport type { GridOptionsService } from '../../gridOptionsService';\r\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\r\nimport type { ICellComp } from '../../rendering/cell/cellCtrl';\r\nimport { _missing } from '../../utils/generic';\r\nimport type { IAbstractHeaderCellComp } from './abstractCell/abstractHeaderCellCtrl';\r\n\r\nconst CSS_FIRST_COLUMN = 'ag-column-first';\r\nconst CSS_LAST_COLUMN = 'ag-column-last';\r\n\r\nexport function _getHeaderClassesFromColDef(\r\n    abstractColDef: AbstractColDef | null,\r\n    gos: GridOptionsService,\r\n    column: AgColumn | null,\r\n    columnGroup: AgColumnGroup | null\r\n): string[] {\r\n    if (_missing(abstractColDef)) {\r\n        return [];\r\n    }\r\n\r\n    return getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gos, column, columnGroup);\r\n}\r\n\r\nexport function _getToolPanelClassesFromColDef(\r\n    abstractColDef: AbstractColDef | null,\r\n    gos: GridOptionsService,\r\n    column: AgColumn | null,\r\n    columnGroup: AgProvidedColumnGroup | null\r\n): string[] {\r\n    if (_missing(abstractColDef)) {\r\n        return [];\r\n    }\r\n\r\n    return getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gos, column, columnGroup);\r\n}\r\n\r\nexport function refreshFirstAndLastStyles(\r\n    comp: IAbstractHeaderCellComp | ICellComp,\r\n    column: AgColumn | AgColumnGroup,\r\n    presentedColsService: VisibleColsService\r\n) {\r\n    comp.addOrRemoveCssClass(CSS_FIRST_COLUMN, presentedColsService.isColAtEdge(column, 'first'));\r\n    comp.addOrRemoveCssClass(CSS_LAST_COLUMN, presentedColsService.isColAtEdge(column, 'last'));\r\n}\r\n\r\nfunction getClassParams<T extends HeaderClassParams | ToolPanelClassParams>(\r\n    abstractColDef: AbstractColDef,\r\n    gos: GridOptionsService,\r\n    column: AgColumn | null,\r\n    columnGroup: T['columnGroup']\r\n): T {\r\n    return gos.addGridCommonParams({\r\n        // bad naming, as colDef here can be a group or a column,\r\n        // however most people won't appreciate the difference,\r\n        // so keeping it as colDef to avoid confusion.\r\n        colDef: abstractColDef,\r\n        column: column,\r\n        columnGroup: columnGroup,\r\n    } as WithoutGridCommon<T>);\r\n}\r\n\r\nfunction getColumnClassesFromCollDef<T extends HeaderClassParams | ToolPanelClassParams>(\r\n    classesOrFunc: string | string[] | ((params: T) => string | string[] | undefined) | null | undefined,\r\n    abstractColDef: AbstractColDef,\r\n    gos: GridOptionsService,\r\n    column: AgColumn | null,\r\n    columnGroup: AgColumnGroup | AgProvidedColumnGroup | null\r\n): string[] {\r\n    if (_missing(classesOrFunc)) {\r\n        return [];\r\n    }\r\n\r\n    let classToUse: string | string[] | undefined;\r\n\r\n    if (typeof classesOrFunc === 'function') {\r\n        const params: T = getClassParams(abstractColDef, gos, column, columnGroup);\r\n        classToUse = classesOrFunc(params);\r\n    } else {\r\n        classToUse = classesOrFunc;\r\n    }\r\n\r\n    if (typeof classToUse === 'string') {\r\n        return [classToUse];\r\n    }\r\n    if (Array.isArray(classToUse)) {\r\n        return [...classToUse];\r\n    }\r\n\r\n    return [];\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _getWindow } from '../gridOptionsUtils';\r\nimport { _warn } from '../validation/logging';\r\n\r\ninterface TaskItem {\r\n    task: () => void;\r\n    index: number;\r\n    createOrder: number;\r\n}\r\n\r\ninterface TaskList {\r\n    list: TaskItem[];\r\n    sorted: boolean;\r\n}\r\n\r\nexport function _requestAnimationFrame(beans: BeanCollection, callback: any) {\r\n    const win = _getWindow(beans);\r\n\r\n    if (win.requestAnimationFrame) {\r\n        win.requestAnimationFrame(callback);\r\n    } else if ((win as any).webkitRequestAnimationFrame) {\r\n        (win as any).webkitRequestAnimationFrame(callback);\r\n    } else {\r\n        win.setTimeout(callback, 0);\r\n    }\r\n}\r\n\r\nexport class AnimationFrameService extends BeanStub implements NamedBean {\r\n    beanName = 'animationFrameSvc' as const;\r\n\r\n    // p1 and p2 are create tasks are to do with row and cell creation.\r\n    // for them we want to execute according to row order, so we use\r\n    // TaskItem so we know what index the item is for.\r\n    private createTasksP1: TaskList = { list: [], sorted: false }; // eg drawing back-ground of rows\r\n    private createTasksP2: TaskList = { list: [], sorted: false }; // eg cell renderers, adding hover functionality\r\n\r\n    // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new\r\n    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as\r\n    // important.\r\n    private destroyTasks: (() => void)[] = [];\r\n    private ticking = false;\r\n    public active: boolean;\r\n\r\n    // we need to know direction of scroll, to build up rows in the direction of\r\n    // the scroll. eg if user scrolls down, we extend the rows by building down.\r\n    private scrollGoingDown = true;\r\n    private lastPage = 0;\r\n    private lastScrollTop = 0;\r\n\r\n    private taskCount = 0;\r\n    private cancelledTasks = new Set();\r\n\r\n    public setScrollTop(scrollTop: number): void {\r\n        const { gos, pagination } = this.beans;\r\n        const isPaginationActive = gos.get('pagination');\r\n        this.scrollGoingDown = scrollTop >= this.lastScrollTop;\r\n\r\n        if (isPaginationActive && scrollTop === 0) {\r\n            const currentPage = pagination?.getCurrentPage() ?? 0;\r\n            if (currentPage !== this.lastPage) {\r\n                this.lastPage = currentPage;\r\n                this.scrollGoingDown = true;\r\n            }\r\n        }\r\n\r\n        this.lastScrollTop = scrollTop;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.active = !this.gos.get('suppressAnimationFrame');\r\n    }\r\n\r\n    // this method is for our AG Grid sanity only - if animation frames are turned off,\r\n    // then no place in the code should be looking to add any work to be done in animation\r\n    // frames. this stops bugs - where some code is asking for a frame to be executed\r\n    // when it should not.\r\n    private verifyAnimationFrameOn(methodName: string): void {\r\n        if (this.active === false) {\r\n            _warn(92, { methodName });\r\n        }\r\n    }\r\n\r\n    public createTask(task: () => void, index: number, list: 'createTasksP1' | 'createTasksP2') {\r\n        this.verifyAnimationFrameOn(list);\r\n        const taskItem: TaskItem = { task, index, createOrder: ++this.taskCount };\r\n        this.addTaskToList(this[list], taskItem);\r\n        this.schedule();\r\n    }\r\n\r\n    public cancelTask(task: () => void) {\r\n        this.cancelledTasks.add(task);\r\n    }\r\n\r\n    private addTaskToList(taskList: TaskList, task: TaskItem): void {\r\n        taskList.list.push(task);\r\n        taskList.sorted = false;\r\n    }\r\n\r\n    private sortTaskList(taskList: TaskList) {\r\n        if (taskList.sorted) {\r\n            return;\r\n        }\r\n\r\n        const sortDirection = this.scrollGoingDown ? 1 : -1;\r\n\r\n        // sort first by row index (taking into account scroll direction), then by\r\n        // order of task creation (always ascending, so cells will render left-to-right)\r\n        taskList.list.sort((a, b) =>\r\n            a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder\r\n        );\r\n        taskList.sorted = true;\r\n    }\r\n\r\n    public addDestroyTask(task: () => void): void {\r\n        this.verifyAnimationFrameOn('createTasksP3');\r\n        this.destroyTasks.push(task);\r\n        this.schedule();\r\n    }\r\n\r\n    private executeFrame(millis: number): void {\r\n        this.verifyAnimationFrameOn('executeFrame');\r\n\r\n        const p1TaskList = this.createTasksP1;\r\n        const p1Tasks = p1TaskList.list;\r\n\r\n        const p2TaskList = this.createTasksP2;\r\n        const p2Tasks = p2TaskList.list;\r\n\r\n        const destroyTasks = this.destroyTasks;\r\n\r\n        const frameStart = new Date().getTime();\r\n        let duration = new Date().getTime() - frameStart;\r\n\r\n        // 16ms is 60 fps\r\n        const noMaxMillis = millis <= 0;\r\n\r\n        const scrollFeature = this.beans.ctrlsSvc.getScrollFeature();\r\n\r\n        while (noMaxMillis || duration < millis) {\r\n            const gridBodyDidSomething = scrollFeature.scrollGridIfNeeded();\r\n\r\n            if (!gridBodyDidSomething) {\r\n                let task: () => void;\r\n                if (p1Tasks.length) {\r\n                    this.sortTaskList(p1TaskList);\r\n                    task = p1Tasks.pop()!.task;\r\n                } else if (p2Tasks.length) {\r\n                    this.sortTaskList(p2TaskList);\r\n                    task = p2Tasks.pop()!.task;\r\n                } else if (destroyTasks.length) {\r\n                    task = destroyTasks.pop()!;\r\n                } else {\r\n                    this.cancelledTasks.clear();\r\n                    break;\r\n                }\r\n\r\n                if (!this.cancelledTasks.has(task)) {\r\n                    task();\r\n                }\r\n            }\r\n\r\n            duration = new Date().getTime() - frameStart;\r\n        }\r\n\r\n        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {\r\n            this.requestFrame();\r\n        } else {\r\n            this.ticking = false;\r\n        }\r\n    }\r\n\r\n    public flushAllFrames(): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        this.executeFrame(-1);\r\n    }\r\n\r\n    public schedule(): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        if (!this.ticking) {\r\n            this.ticking = true;\r\n            this.requestFrame();\r\n        }\r\n    }\r\n\r\n    private requestFrame(): void {\r\n        // check for the existence of requestAnimationFrame, and if\r\n        // it's missing, then we polyfill it with setTimeout()\r\n        const callback = this.executeFrame.bind(this, 60);\r\n        _requestAnimationFrame(this.beans, callback);\r\n    }\r\n\r\n    public isQueueEmpty(): boolean {\r\n        return !this.ticking;\r\n    }\r\n}\r\n", "export const KeyCode = {\r\n    BACKSPACE: 'Backspace',\r\n    TAB: 'Tab',\r\n    ENTER: 'Enter',\r\n    ESCAPE: 'Escape',\r\n    SPACE: ' ',\r\n    LEFT: 'ArrowLeft',\r\n    UP: 'ArrowUp',\r\n    RIGHT: 'ArrowRight',\r\n    DOWN: 'ArrowDown',\r\n    DELETE: 'Delete',\r\n\r\n    F2: 'F2',\r\n\r\n    PAGE_UP: 'PageUp',\r\n    PAGE_DOWN: 'PageDown',\r\n    PAGE_HOME: 'Home',\r\n    PAGE_END: 'End',\r\n\r\n    // these should be used with `event.code` instead of `event.key`\r\n    // as `event.key` changes when non-latin keyboards are used\r\n    A: 'KeyA',\r\n    C: 'KeyC',\r\n    D: 'KeyD',\r\n    V: 'KeyV',\r\n    X: 'KeyX',\r\n    Y: 'KeyY',\r\n    Z: 'KeyZ',\r\n} as const;\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _getActiveDomElement, _getDocument } from '../gridOptionsUtils';\r\nimport type { Component } from '../widgets/component';\r\nimport { _last } from './array';\r\nimport { _getTabIndex } from './browser';\r\nimport { FOCUSABLE_EXCLUDE, FOCUSABLE_SELECTOR, _isVisible } from './dom';\r\n\r\nlet keyboardModeActive: boolean = false;\r\nlet instanceCount: number = 0;\r\n\r\nfunction addKeyboardModeEvents(doc: Document): void {\r\n    if (instanceCount > 0) {\r\n        return;\r\n    }\r\n    doc.addEventListener('keydown', toggleKeyboardMode);\r\n    doc.addEventListener('mousedown', toggleKeyboardMode);\r\n}\r\n\r\nfunction removeKeyboardModeEvents(doc: Document): void {\r\n    if (instanceCount > 0) return;\r\n    doc.removeEventListener('keydown', toggleKeyboardMode);\r\n    doc.removeEventListener('mousedown', toggleKeyboardMode);\r\n}\r\n\r\nfunction toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void {\r\n    const isKeyboardActive = keyboardModeActive;\r\n    const isKeyboardEvent = event.type === 'keydown';\r\n\r\n    if (isKeyboardEvent) {\r\n        // the following keys should not toggle keyboard mode.\r\n        if (event.ctrlKey || event.metaKey || event.altKey) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (isKeyboardActive === isKeyboardEvent) {\r\n        return;\r\n    }\r\n\r\n    keyboardModeActive = isKeyboardEvent;\r\n}\r\n\r\nexport function _registerKeyboardFocusEvents(beans: BeanCollection): () => void {\r\n    const eDocument = _getDocument(beans);\r\n    addKeyboardModeEvents(eDocument);\r\n\r\n    instanceCount++;\r\n    return () => {\r\n        instanceCount--;\r\n        removeKeyboardModeEvents(eDocument);\r\n    };\r\n}\r\n\r\nexport function _isKeyboardMode(): boolean {\r\n    return keyboardModeActive;\r\n}\r\n\r\nexport function _addFocusableContainerListener(beans: BeanCollection, comp: Component, eGui: HTMLElement): void {\r\n    comp.addManagedElementListeners(eGui, {\r\n        keydown: (e: KeyboardEvent) => {\r\n            if (!e.defaultPrevented && e.key === KeyCode.TAB) {\r\n                const backwards = e.shiftKey;\r\n                if (!_findNextFocusableElement(beans, eGui, false, backwards)) {\r\n                    if (_focusNextGridCoreContainer(beans, backwards)) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\nexport function _findFocusableElements(\r\n    rootNode: HTMLElement,\r\n    exclude?: string | null,\r\n    onlyUnmanaged = false\r\n): HTMLElement[] {\r\n    const focusableString = FOCUSABLE_SELECTOR;\r\n    let excludeString = FOCUSABLE_EXCLUDE;\r\n\r\n    if (exclude) {\r\n        excludeString += ', ' + exclude;\r\n    }\r\n\r\n    if (onlyUnmanaged) {\r\n        excludeString += ', [tabindex=\"-1\"]';\r\n    }\r\n\r\n    const nodes = Array.prototype.slice\r\n        .apply(rootNode.querySelectorAll(focusableString))\r\n        .filter((node: HTMLElement) => {\r\n            return _isVisible(node);\r\n        }) as HTMLElement[];\r\n    const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\r\n\r\n    if (!excludeNodes.length) {\r\n        return nodes;\r\n    }\r\n\r\n    const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter((element) => b.indexOf(element) === -1);\r\n    return diff(nodes, excludeNodes);\r\n}\r\n\r\nexport function _focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\r\n    const focusableElements = _findFocusableElements(rootNode, null, onlyUnmanaged);\r\n    const toFocus = up ? _last(focusableElements) : focusableElements[0];\r\n\r\n    if (toFocus) {\r\n        toFocus.focus({ preventScroll: true });\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function _findNextFocusableElement(\r\n    beans: BeanCollection,\r\n    rootNode: HTMLElement,\r\n    onlyManaged?: boolean | null,\r\n    backwards?: boolean\r\n): HTMLElement | null {\r\n    const focusable = _findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\r\n    const activeEl = _getActiveDomElement(beans) as HTMLElement;\r\n    let currentIndex: number;\r\n\r\n    if (onlyManaged) {\r\n        currentIndex = focusable.findIndex((el) => el.contains(activeEl));\r\n    } else {\r\n        currentIndex = focusable.indexOf(activeEl);\r\n    }\r\n\r\n    const nextIndex = currentIndex + (backwards ? -1 : 1);\r\n\r\n    if (nextIndex < 0 || nextIndex >= focusable.length) {\r\n        return null;\r\n    }\r\n\r\n    return focusable[nextIndex];\r\n}\r\n\r\nexport function _findTabbableParent(node: HTMLElement | null, limit: number = 5): HTMLElement | null {\r\n    let counter = 0;\r\n\r\n    while (node && _getTabIndex(node) === null && ++counter <= limit) {\r\n        node = node.parentElement;\r\n    }\r\n\r\n    if (_getTabIndex(node) === null) {\r\n        return null;\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function _focusGridInnerElement(beans: BeanCollection, fromBottom?: boolean): boolean {\r\n    return beans.ctrlsSvc.get('gridCtrl').focusInnerElement(fromBottom);\r\n}\r\n\r\nexport function _isHeaderFocusSuppressed(beans: BeanCollection): boolean {\r\n    return beans.gos.get('suppressHeaderFocus') || !!beans.overlays?.isExclusive();\r\n}\r\n\r\nexport function _isCellFocusSuppressed(beans: BeanCollection): boolean {\r\n    return beans.gos.get('suppressCellFocus') || !!beans.overlays?.isExclusive();\r\n}\r\n\r\nexport function _focusNextGridCoreContainer(\r\n    beans: BeanCollection,\r\n    backwards: boolean,\r\n    forceOut: boolean = false\r\n): boolean {\r\n    const gridCtrl = beans.ctrlsSvc.get('gridCtrl');\r\n    if (!forceOut && gridCtrl.focusNextInnerContainer(backwards)) {\r\n        return true;\r\n    }\r\n\r\n    if (forceOut || (!backwards && !gridCtrl.isDetailGrid())) {\r\n        gridCtrl.forceFocusOutOfContainer(backwards);\r\n    }\r\n\r\n    return false;\r\n}\r\n", "const reUnescapedHtml = /[&<>\"']/g;\r\n\r\n/**\r\n * HTML Escapes.\r\n */\r\nconst HTML_ESCAPES: { [id: string]: string } = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;',\r\n};\r\n\r\nexport function _escapeString(toEscape?: string | null, skipEscapingHtmlChars?: boolean): string | null {\r\n    if (toEscape == null) {\r\n        return null;\r\n    }\r\n\r\n    // we call toString() twice, in case value is an object, where user provides\r\n    // a toString() method, and first call to toString() returns back something other\r\n    // than a string (eg a number to render)\r\n    const stringResult = toEscape.toString().toString();\r\n\r\n    if (skipEscapingHtmlChars) {\r\n        return stringResult;\r\n    }\r\n\r\n    // in react we don't need to escape html characters, as it's done by the framework\r\n    return stringResult.replace(reUnescapedHtml, (chr) => HTML_ESCAPES[chr]);\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport { _isCellSelectionEnabled, _isRowSelection } from '../../gridOptionsUtils';\r\nimport { _isMacOsUserAgent } from '../../utils/browser';\r\nimport type { RowCtrl } from '../row/rowCtrl';\r\nimport type { CellCtrl } from './cellCtrl';\r\n\r\nfunction _isDeleteKey(key: string, alwaysReturnFalseOnBackspace = false) {\r\n    if (key === KeyCode.DELETE) {\r\n        return true;\r\n    }\r\n    if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {\r\n        return _isMacOsUserAgent();\r\n    }\r\n    return false;\r\n}\r\n\r\nexport class CellKeyboardListenerFeature extends BeanStub {\r\n    private eGui: HTMLElement;\r\n\r\n    constructor(\r\n        private readonly cellCtrl: CellCtrl,\r\n        beans: BeanCollection,\r\n        private readonly rowNode: RowNode,\r\n        private readonly rowCtrl: RowCtrl\r\n    ) {\r\n        super();\r\n        this.beans = beans;\r\n    }\r\n\r\n    public setComp(eGui: HTMLElement): void {\r\n        this.eGui = eGui;\r\n    }\r\n\r\n    public onKeyDown(event: KeyboardEvent): void {\r\n        const key = event.key;\r\n\r\n        switch (key) {\r\n            case KeyCode.ENTER:\r\n                this.onEnterKeyDown(event);\r\n                break;\r\n            case KeyCode.F2:\r\n                this.onF2KeyDown(event);\r\n                break;\r\n            case KeyCode.ESCAPE:\r\n                this.onEscapeKeyDown(event);\r\n                break;\r\n            case KeyCode.TAB:\r\n                this.onTabKeyDown(event);\r\n                break;\r\n            case KeyCode.BACKSPACE:\r\n            case KeyCode.DELETE:\r\n                this.onBackspaceOrDeleteKeyDown(key, event);\r\n                break;\r\n            case KeyCode.DOWN:\r\n            case KeyCode.UP:\r\n            case KeyCode.RIGHT:\r\n            case KeyCode.LEFT:\r\n                this.onNavigationKeyDown(event, key);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onNavigationKeyDown(event: KeyboardEvent, key: string): void {\r\n        if (this.cellCtrl.editing) {\r\n            return;\r\n        }\r\n\r\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\r\n            this.onShiftRangeSelect(event);\r\n        } else {\r\n            this.beans.navigation?.navigateToNextCell(event, key, this.cellCtrl.cellPosition, true);\r\n        }\r\n\r\n        // if we don't prevent default, the grid will scroll with the navigation keys\r\n        event.preventDefault();\r\n    }\r\n\r\n    private onShiftRangeSelect(event: KeyboardEvent): void {\r\n        const { rangeSvc, navigation } = this.beans;\r\n        if (!rangeSvc) {\r\n            return;\r\n        }\r\n\r\n        const endCell = rangeSvc.extendLatestRangeInDirection(event);\r\n\r\n        if (endCell) {\r\n            navigation?.ensureCellVisible(endCell);\r\n        }\r\n    }\r\n\r\n    private onTabKeyDown(event: KeyboardEvent): void {\r\n        this.beans.navigation?.onTabKeyDown(this.cellCtrl, event);\r\n    }\r\n\r\n    private onBackspaceOrDeleteKeyDown(key: string, event: KeyboardEvent): void {\r\n        const { cellCtrl, beans, rowNode } = this;\r\n        const { gos, rangeSvc, eventSvc } = beans;\r\n\r\n        if (cellCtrl.editing) {\r\n            return;\r\n        }\r\n\r\n        eventSvc.dispatchEvent({ type: 'keyShortcutChangedCellStart' });\r\n\r\n        if (_isDeleteKey(key, gos.get('enableCellEditingOnBackspace'))) {\r\n            if (rangeSvc && _isCellSelectionEnabled(gos)) {\r\n                rangeSvc.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: 'deleteKey' });\r\n            } else if (cellCtrl.isCellEditable()) {\r\n                const { column } = cellCtrl;\r\n                const emptyValue = this.beans.valueSvc.getDeleteValue(column, rowNode);\r\n                rowNode.setDataValue(column, emptyValue, 'cellClear');\r\n            }\r\n        } else {\r\n            beans.editSvc?.startRowOrCellEdit(cellCtrl, key, event);\r\n        }\r\n\r\n        eventSvc.dispatchEvent({ type: 'keyShortcutChangedCellEnd' });\r\n    }\r\n\r\n    private onEnterKeyDown(e: KeyboardEvent): void {\r\n        const { cellCtrl, beans } = this;\r\n        if (cellCtrl.editing || this.rowCtrl.editing) {\r\n            cellCtrl.stopEditingAndFocus(false, e.shiftKey);\r\n        } else {\r\n            if (beans.gos.get('enterNavigatesVertically')) {\r\n                const key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;\r\n                beans.navigation?.navigateToNextCell(null, key, cellCtrl.cellPosition, false);\r\n            } else {\r\n                beans.editSvc?.startRowOrCellEdit(cellCtrl, KeyCode.ENTER, e);\r\n                if (cellCtrl.editing) {\r\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\r\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\r\n                    // preventing default results in a 'new line' character getting inserted in the text area\r\n                    // when the editing was started\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onF2KeyDown(event: KeyboardEvent): void {\r\n        const { cellCtrl, beans } = this;\r\n        if (!cellCtrl.editing) {\r\n            beans.editSvc?.startRowOrCellEdit(cellCtrl, KeyCode.F2, event);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private onEscapeKeyDown(event: KeyboardEvent): void {\r\n        const { cellCtrl, beans } = this;\r\n        if (cellCtrl.editing) {\r\n            beans.editSvc?.stopRowOrCellEdit(cellCtrl, true);\r\n            cellCtrl.focusCell(true);\r\n        }\r\n    }\r\n\r\n    public processCharacter(event: KeyboardEvent): void {\r\n        // check this, in case focus is on a (for example) a text field inside the cell,\r\n        // in which cse we should not be listening for these key pressed\r\n        const eventTarget = event.target;\r\n        const eventOnChildComponent = eventTarget !== this.eGui;\r\n\r\n        if (eventOnChildComponent || this.cellCtrl.editing) {\r\n            return;\r\n        }\r\n\r\n        const key = event.key;\r\n        if (key === KeyCode.SPACE) {\r\n            this.onSpaceKeyDown(event);\r\n        } else {\r\n            if (this.beans.editSvc?.startRowOrCellEdit(this.cellCtrl, key, event)) {\r\n                // if we don't prevent default, then the event also gets applied to the text field\r\n                // (at least when doing the default editor), but we need to allow the editor to decide\r\n                // what it wants to do. we only do this IF editing was started - otherwise it messes\r\n                // up when the use is not doing editing, but using rendering with text fields in cellRenderer\r\n                // (as it would block the the user from typing into text fields).\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onSpaceKeyDown(event: KeyboardEvent): void {\r\n        const { gos } = this.beans;\r\n\r\n        if (!this.cellCtrl.editing && _isRowSelection(gos)) {\r\n            this.beans.selectionSvc?.handleSelectionEvent(event, this.rowNode, 'spaceKey');\r\n        }\r\n\r\n        // prevent default as space key, by default, moves browser scroll down\r\n        event.preventDefault();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { CellClickedEvent, CellDoubleClickedEvent } from '../../events';\r\nimport { _isBrowserSafari } from '../../utils/browser';\r\nimport { _isElementChildOfClass, _isFocusableFormField } from '../../utils/dom';\r\nimport { _isStopPropagationForAgGrid } from '../../utils/event';\r\nimport type { CellCtrl } from './cellCtrl';\r\n\r\nexport class CellMouseListenerFeature extends BeanStub {\r\n    public lastIPadMouseClickEvent: number;\r\n\r\n    constructor(\r\n        private readonly cellCtrl: CellCtrl,\r\n        beans: BeanCollection,\r\n        private readonly column: AgColumn\r\n    ) {\r\n        super();\r\n        this.beans = beans;\r\n    }\r\n\r\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\r\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        switch (eventName) {\r\n            case 'click':\r\n                this.onCellClicked(mouseEvent);\r\n                break;\r\n            case 'mousedown':\r\n            case 'touchstart':\r\n                this.onMouseDown(mouseEvent);\r\n                break;\r\n            case 'dblclick':\r\n                this.onCellDoubleClicked(mouseEvent);\r\n                break;\r\n            case 'mouseout':\r\n                this.onMouseOut(mouseEvent);\r\n                break;\r\n            case 'mouseover':\r\n                this.onMouseOver(mouseEvent);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onCellClicked(mouseEvent: MouseEvent): void {\r\n        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.\r\n        if (this.beans.touchSvc?.handleCellDoubleClick(this, mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        const { eventSvc, rangeSvc, gos, editSvc } = this.beans;\r\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\r\n\r\n        if (rangeSvc && isMultiKey) {\r\n            // the mousedown event has created the range already, so we only intersect if there is more than one\r\n            // range on this cell\r\n            if (rangeSvc.getCellRangeCount(this.cellCtrl.cellPosition) > 1) {\r\n                rangeSvc.intersectLastRange(true);\r\n            }\r\n        }\r\n\r\n        const cellClickedEvent: CellClickedEvent = this.cellCtrl.createEvent(mouseEvent, 'cellClicked');\r\n        eventSvc.dispatchEvent(cellClickedEvent);\r\n\r\n        const colDef = this.column.getColDef();\r\n\r\n        if (colDef.onCellClicked) {\r\n            // to make callback async, do in a timeout\r\n            window.setTimeout(() => {\r\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\r\n                    colDef.onCellClicked!(cellClickedEvent);\r\n                });\r\n            }, 0);\r\n        }\r\n\r\n        const editOnSingleClick =\r\n            (gos.get('singleClickEdit') || colDef.singleClickEdit) && !gos.get('suppressClickEdit');\r\n\r\n        // edit on single click, but not if extending a range\r\n        if (editOnSingleClick && !(mouseEvent.shiftKey && rangeSvc?.getCellRanges().length != 0)) {\r\n            editSvc?.startRowOrCellEdit(this.cellCtrl);\r\n        }\r\n    }\r\n\r\n    public onCellDoubleClicked(mouseEvent: MouseEvent) {\r\n        const { column, beans, cellCtrl } = this;\r\n        const { eventSvc, frameworkOverrides, gos, editSvc } = beans;\r\n\r\n        const colDef = column.getColDef();\r\n        // always dispatch event to eventService\r\n        const cellDoubleClickedEvent: CellDoubleClickedEvent = cellCtrl.createEvent(mouseEvent, 'cellDoubleClicked');\r\n        eventSvc.dispatchEvent(cellDoubleClickedEvent);\r\n\r\n        // check if colDef also wants to handle event\r\n        if (typeof colDef.onCellDoubleClicked === 'function') {\r\n            // to make the callback async, do in a timeout\r\n            window.setTimeout(() => {\r\n                frameworkOverrides.wrapOutgoing(() => {\r\n                    (colDef.onCellDoubleClicked as any)(cellDoubleClickedEvent);\r\n                });\r\n            }, 0);\r\n        }\r\n\r\n        const editOnDoubleClick = !gos.get('singleClickEdit') && !gos.get('suppressClickEdit');\r\n        if (editOnDoubleClick) {\r\n            editSvc?.startRowOrCellEdit(cellCtrl, null, mouseEvent);\r\n        }\r\n    }\r\n\r\n    private onMouseDown(mouseEvent: MouseEvent): void {\r\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\r\n        const target = mouseEvent.target as HTMLElement;\r\n        const { cellCtrl, beans } = this;\r\n        const { eventSvc, rangeSvc, focusSvc, gos } = beans;\r\n\r\n        // do not change the range for right-clicks inside an existing range\r\n        if (this.isRightClickInExistingRange(mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        const hasRanges = rangeSvc && !rangeSvc.isEmpty();\r\n        const containsWidget = this.containsWidget(target);\r\n        const { cellPosition } = cellCtrl;\r\n\r\n        if (!shiftKey || !hasRanges) {\r\n            const isEnableCellTextSelection = gos.get('enableCellTextSelection');\r\n            // when `enableCellTextSelection` is true, we call prevent default on `mousedown`\r\n            // within the row dragger to block text selection while dragging, but the cell\r\n            // should still be selected/focused.\r\n            const shouldFocus = isEnableCellTextSelection && mouseEvent.defaultPrevented;\r\n            // however, this should never be true if the mousedown was triggered\r\n            // due to a click on a cell editor for example, otherwise cell selection within\r\n            // an editor would be blocked.\r\n            const forceBrowserFocus =\r\n                (_isBrowserSafari() || shouldFocus) &&\r\n                !cellCtrl.editing &&\r\n                !_isFocusableFormField(target) &&\r\n                !containsWidget;\r\n\r\n            cellCtrl.focusCell(forceBrowserFocus);\r\n        }\r\n\r\n        // if shift clicking, and a range exists, we keep the focus on the cell that started the\r\n        // range as the user then changes the range selection.\r\n        if (shiftKey && hasRanges && !focusSvc.isCellFocused(cellPosition)) {\r\n            // this stops the cell from getting focused\r\n            mouseEvent.preventDefault();\r\n\r\n            const focusedCellPosition = focusSvc.getFocusedCell();\r\n            if (focusedCellPosition) {\r\n                const { column, rowIndex, rowPinned } = focusedCellPosition;\r\n                const focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\r\n                const focusedCellCtrl = focusedRowCtrl?.getCellCtrl(column as AgColumn);\r\n\r\n                // if the focused cell is editing, need to stop editing first\r\n                if (focusedCellCtrl?.editing) {\r\n                    focusedCellCtrl.stopEditing();\r\n                }\r\n\r\n                // focus could have been lost, so restore it to the starting cell in the range if needed\r\n                focusSvc.setFocusedCell({\r\n                    column,\r\n                    rowIndex,\r\n                    rowPinned,\r\n                    forceBrowserFocus: true,\r\n                    preventScrollOnBrowserFocus: true,\r\n                });\r\n            }\r\n        }\r\n\r\n        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox\r\n        // is focused but we don't want to change the range selection, so return here.\r\n        if (containsWidget) {\r\n            return;\r\n        }\r\n\r\n        if (rangeSvc) {\r\n            if (shiftKey) {\r\n                rangeSvc.extendLatestRangeToCell(cellPosition);\r\n            } else {\r\n                const isMultiKey = ctrlKey || metaKey;\r\n                rangeSvc.setRangeToCell(cellPosition, isMultiKey);\r\n            }\r\n        }\r\n\r\n        eventSvc.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, 'cellMouseDown'));\r\n    }\r\n\r\n    private isRightClickInExistingRange(mouseEvent: MouseEvent): boolean {\r\n        const { rangeSvc } = this.beans;\r\n\r\n        if (rangeSvc) {\r\n            const cellInRange = rangeSvc.isCellInAnyRange(this.cellCtrl.cellPosition);\r\n            const isRightClick =\r\n                mouseEvent.button === 2 || (mouseEvent.ctrlKey && this.beans.gos.get('allowContextMenuWithControlKey'));\r\n\r\n            if (cellInRange && isRightClick) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private containsWidget(target: HTMLElement): boolean {\r\n        return (\r\n            _isElementChildOfClass(target, 'ag-selection-checkbox', 3) ||\r\n            _isElementChildOfClass(target, 'ag-drag-handle', 3)\r\n        );\r\n    }\r\n\r\n    private onMouseOut(mouseEvent: MouseEvent): void {\r\n        if (this.mouseStayingInsideCell(mouseEvent)) {\r\n            return;\r\n        }\r\n        const { eventSvc, colHover } = this.beans;\r\n        eventSvc.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, 'cellMouseOut'));\r\n        colHover?.clearMouseOver();\r\n    }\r\n\r\n    private onMouseOver(mouseEvent: MouseEvent): void {\r\n        if (this.mouseStayingInsideCell(mouseEvent)) {\r\n            return;\r\n        }\r\n        const { eventSvc, colHover } = this.beans;\r\n        eventSvc.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, 'cellMouseOver'));\r\n        colHover?.setMouseOver([this.column]);\r\n    }\r\n\r\n    private mouseStayingInsideCell(e: MouseEvent): boolean {\r\n        if (!e.target || !e.relatedTarget) {\r\n            return false;\r\n        }\r\n        const { eGui } = this.cellCtrl;\r\n        const cellContainsTarget = eGui.contains(e.target as Node);\r\n        const cellContainsRelatedTarget = eGui.contains(e.relatedTarget as Node);\r\n        return cellContainsTarget && cellContainsRelatedTarget;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport { _getRowHeightAsNumber } from '../../gridOptionsUtils';\r\nimport { _areEqual, _last } from '../../utils/array';\r\nimport { _missing } from '../../utils/generic';\r\nimport type { CellCtrl } from './cellCtrl';\r\n\r\n/**\r\n * Takes care of:\r\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\r\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\r\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\r\n */\r\nexport class CellPositionFeature extends BeanStub {\r\n    private eGui: HTMLElement;\r\n\r\n    private readonly column: AgColumn;\r\n    private readonly rowNode: RowNode;\r\n\r\n    private colsSpanning: AgColumn[];\r\n    private rowSpan: number;\r\n\r\n    constructor(\r\n        private readonly cellCtrl: CellCtrl,\r\n        beans: BeanCollection\r\n    ) {\r\n        super();\r\n\r\n        this.beans = beans;\r\n\r\n        this.column = cellCtrl.column;\r\n        this.rowNode = cellCtrl.rowNode;\r\n    }\r\n\r\n    private setupRowSpan(): void {\r\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\r\n\r\n        this.addManagedListeners(this.beans.eventSvc, { newColumnsLoaded: () => this.onNewColumnsLoaded() });\r\n    }\r\n\r\n    public setComp(eGui: HTMLElement): void {\r\n        this.eGui = eGui;\r\n\r\n        // add event handlers only after GUI is attached,\r\n        // so we don't get events before we are ready\r\n        this.setupColSpan();\r\n        this.setupRowSpan();\r\n\r\n        this.onLeftChanged();\r\n        this.onWidthChanged();\r\n        this.applyRowSpan();\r\n    }\r\n\r\n    private onNewColumnsLoaded(): void {\r\n        const rowSpan = this.column.getRowSpan(this.rowNode);\r\n        if (this.rowSpan === rowSpan) {\r\n            return;\r\n        }\r\n\r\n        this.rowSpan = rowSpan;\r\n        this.applyRowSpan(true);\r\n    }\r\n\r\n    private onDisplayColumnsChanged(): void {\r\n        const colsSpanning: AgColumn[] = this.getColSpanningList();\r\n\r\n        if (!_areEqual(this.colsSpanning, colsSpanning)) {\r\n            this.colsSpanning = colsSpanning;\r\n            this.onWidthChanged();\r\n            this.onLeftChanged(); // left changes when doing RTL\r\n        }\r\n    }\r\n\r\n    private setupColSpan(): void {\r\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\r\n        if (this.column.getColDef().colSpan == null) {\r\n            return;\r\n        }\r\n\r\n        this.colsSpanning = this.getColSpanningList();\r\n\r\n        this.addManagedListeners(this.beans.eventSvc, {\r\n            // because we are col spanning, a reorder of the cols can change what cols we are spanning over\r\n            displayedColumnsChanged: this.onDisplayColumnsChanged.bind(this),\r\n            // because we are spanning over multiple cols, we check for width any time any cols width changes.\r\n            // this is expensive - really we should be explicitly checking only the cols we are spanning over\r\n            // instead of every col, however it would be tricky code to track the cols we are spanning over, so\r\n            // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\r\n            displayedColumnsWidthChanged: this.onWidthChanged.bind(this),\r\n        });\r\n    }\r\n\r\n    public onWidthChanged(): void {\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        const width = this.getCellWidth();\r\n        this.eGui.style.width = `${width}px`;\r\n    }\r\n\r\n    private getCellWidth(): number {\r\n        if (!this.colsSpanning) {\r\n            return this.column.getActualWidth();\r\n        }\r\n\r\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\r\n    }\r\n\r\n    public getColSpanningList(): AgColumn[] {\r\n        const { column, rowNode } = this;\r\n        const colSpan = column.getColSpan(rowNode);\r\n        const colsSpanning: AgColumn[] = [];\r\n\r\n        // if just one col, the col span is just the column we are in\r\n        if (colSpan === 1) {\r\n            colsSpanning.push(column);\r\n        } else {\r\n            let pointer: AgColumn | null = column;\r\n            const pinned = column.getPinned();\r\n            for (let i = 0; pointer && i < colSpan; i++) {\r\n                colsSpanning.push(pointer);\r\n                pointer = this.beans.visibleCols.getColAfter(pointer);\r\n                if (!pointer || _missing(pointer)) {\r\n                    break;\r\n                }\r\n                // we do not allow col spanning to span outside of pinned areas\r\n                if (pinned !== pointer.getPinned()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return colsSpanning;\r\n    }\r\n\r\n    public onLeftChanged(): void {\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\r\n        this.eGui.style.left = left + 'px';\r\n    }\r\n\r\n    private getCellLeft(): number | null {\r\n        let mostLeftCol: AgColumn;\r\n\r\n        if (this.beans.gos.get('enableRtl') && this.colsSpanning) {\r\n            mostLeftCol = _last(this.colsSpanning);\r\n        } else {\r\n            mostLeftCol = this.column;\r\n        }\r\n\r\n        return mostLeftCol.getLeft();\r\n    }\r\n\r\n    private modifyLeftForPrintLayout(leftPosition: number | null): number | null {\r\n        if (!this.cellCtrl.printLayout || this.column.getPinned() === 'left') {\r\n            return leftPosition;\r\n        }\r\n\r\n        const { visibleCols } = this.beans;\r\n        const leftWidth = visibleCols.getColsLeftWidth();\r\n\r\n        if (this.column.getPinned() === 'right') {\r\n            const bodyWidth = visibleCols.bodyWidth;\r\n            return leftWidth + bodyWidth + (leftPosition || 0);\r\n        }\r\n\r\n        // is in body\r\n        return leftWidth + (leftPosition || 0);\r\n    }\r\n\r\n    private applyRowSpan(force?: boolean): void {\r\n        if (this.rowSpan === 1 && !force) {\r\n            return;\r\n        }\r\n\r\n        const singleRowHeight = _getRowHeightAsNumber(this.beans);\r\n        const totalRowHeight = singleRowHeight * this.rowSpan;\r\n\r\n        this.eGui.style.height = `${totalRowHeight}px`;\r\n        this.eGui.style.zIndex = '1';\r\n    }\r\n\r\n    // overriding to make public, as we don't dispose this bean via context\r\n    public override destroy() {\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { isColumnSelectionCol } from '../../columns/columnUtils';\r\nimport { _getCellRendererDetails, _getLoadingCellRendererDetails } from '../../components/framework/userCompUtils';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { RowDragComp } from '../../dragAndDrop/rowDragComp';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { CellStyle, CheckboxSelectionCallback, ColDef } from '../../entities/colDef';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport type { AgEventType } from '../../eventTypes';\r\nimport type { CellContextMenuEvent, CellEvent, CellFocusedEvent } from '../../events';\r\nimport type { GridOptionsService } from '../../gridOptionsService';\r\nimport { _getCheckboxes, _isCellSelectionEnabled, _setDomData } from '../../gridOptionsUtils';\r\nimport { refreshFirstAndLastStyles } from '../../headerRendering/cells/cssClassApplier';\r\nimport type { BrandedType } from '../../interfaces/brandedType';\r\nimport type { ICellEditor } from '../../interfaces/iCellEditor';\r\nimport type { CellPosition } from '../../interfaces/iCellPosition';\r\nimport type { ICellRangeFeature } from '../../interfaces/iCellRangeFeature';\r\nimport type { CellChangedEvent } from '../../interfaces/iRowNode';\r\nimport type { RowPosition } from '../../interfaces/iRowPosition';\r\nimport type { UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { _requestAnimationFrame } from '../../misc/animationFrameService';\r\nimport type { CheckboxSelectionComponent } from '../../selection/checkboxSelectionComponent';\r\nimport type { CellCustomStyleFeature } from '../../styling/cellCustomStyleFeature';\r\nimport type { TooltipFeature } from '../../tooltip/tooltipFeature';\r\nimport { _setAriaColIndex } from '../../utils/aria';\r\nimport { _addOrRemoveAttribute } from '../../utils/dom';\r\nimport { _getCtrlForEventTarget } from '../../utils/event';\r\nimport { _findFocusableElements, _isCellFocusSuppressed } from '../../utils/focus';\r\nimport { _makeNull } from '../../utils/generic';\r\nimport { _escapeString } from '../../utils/string';\r\nimport type { ICellRenderer, ICellRendererParams } from '../cellRenderers/iCellRenderer';\r\nimport type { DndSourceComp } from '../dndSourceComp';\r\nimport type { RowCtrl } from '../row/rowCtrl';\r\nimport { CellKeyboardListenerFeature } from './cellKeyboardListenerFeature';\r\nimport { CellMouseListenerFeature } from './cellMouseListenerFeature';\r\nimport { CellPositionFeature } from './cellPositionFeature';\r\n\r\nconst CSS_CELL = 'ag-cell';\r\nconst CSS_AUTO_HEIGHT = 'ag-cell-auto-height';\r\nconst CSS_NORMAL_HEIGHT = 'ag-cell-normal-height';\r\nconst CSS_CELL_FOCUS = 'ag-cell-focus';\r\nconst CSS_CELL_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';\r\nconst CSS_CELL_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';\r\nconst CSS_CELL_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';\r\nconst CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';\r\n\r\nexport interface ICellComp {\r\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\r\n    setUserStyles(styles: CellStyle): void;\r\n    getFocusableElement(): HTMLElement;\r\n\r\n    setIncludeSelection(include: boolean): void;\r\n    setIncludeRowDrag(include: boolean): void;\r\n    setIncludeDndSource(include: boolean): void;\r\n\r\n    getCellEditor(): ICellEditor | null;\r\n    getCellRenderer(): ICellRenderer | null;\r\n    getParentOfValue(): HTMLElement | null;\r\n\r\n    setRenderDetails(\r\n        compDetails: UserCompDetails | undefined,\r\n        valueToDisplay: any,\r\n        forceNewCellRendererInstance: boolean\r\n    ): void;\r\n    setEditDetails(\r\n        compDetails?: UserCompDetails,\r\n        popup?: boolean,\r\n        position?: 'over' | 'under',\r\n        reactiveCustomComponents?: boolean\r\n    ): void;\r\n}\r\n\r\nexport const DOM_DATA_KEY_CELL_CTRL = 'cellCtrl';\r\n\r\nexport function _getCellCtrlForEventTarget(gos: GridOptionsService, eventTarget: EventTarget | null): CellCtrl | null {\r\n    return _getCtrlForEventTarget(gos, eventTarget, DOM_DATA_KEY_CELL_CTRL);\r\n}\r\n\r\nlet instanceIdSequence = 0;\r\nexport type CellCtrlInstanceId = BrandedType<string, 'CellCtrlInstanceId'>;\r\n\r\nexport class CellCtrl extends BeanStub {\r\n    public readonly instanceId: CellCtrlInstanceId;\r\n    public readonly colIdSanitised: string;\r\n\r\n    public eGui: HTMLElement;\r\n    public comp: ICellComp;\r\n    public editCompDetails?: UserCompDetails;\r\n\r\n    private focusEventToRestore: CellFocusedEvent | undefined;\r\n\r\n    public printLayout: boolean;\r\n\r\n    public value: any;\r\n    public valueFormatted: any;\r\n\r\n    private rangeFeature: ICellRangeFeature | undefined = undefined;\r\n    private positionFeature: CellPositionFeature | undefined = undefined;\r\n    private customStyleFeature: CellCustomStyleFeature | undefined = undefined;\r\n    private tooltipFeature: TooltipFeature | undefined = undefined;\r\n    private mouseListener: CellMouseListenerFeature | undefined = undefined;\r\n    private keyboardListener: CellKeyboardListenerFeature | undefined = undefined;\r\n\r\n    public cellPosition: CellPosition;\r\n    public editing: boolean;\r\n\r\n    private includeSelection: boolean;\r\n    private includeDndSource: boolean;\r\n    private includeRowDrag: boolean;\r\n    private isAutoHeight: boolean;\r\n\r\n    public suppressRefreshCell = false;\r\n\r\n    // this comp used only for custom row drag handle (ie when user calls params.registerRowDragger)\r\n    private customRowDragComp: RowDragComp;\r\n\r\n    public onCompAttachedFuncs: (() => void)[] = [];\r\n    public onEditorAttachedFuncs: (() => void)[] = [];\r\n\r\n    constructor(\r\n        public readonly column: AgColumn,\r\n        public readonly rowNode: RowNode,\r\n        beans: BeanCollection,\r\n        public readonly rowCtrl: RowCtrl\r\n    ) {\r\n        super();\r\n        this.beans = beans;\r\n\r\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\r\n        this.instanceId = (column.getId() + '-' + instanceIdSequence++) as CellCtrlInstanceId;\r\n\r\n        this.colIdSanitised = _escapeString(this.column.getId())!;\r\n\r\n        this.createCellPosition();\r\n        this.updateAndFormatValue(false);\r\n    }\r\n\r\n    public shouldRestoreFocus(): boolean {\r\n        // Used in React to determine if the cell should restore focus after re-rendering\r\n        return this.beans.focusSvc.shouldRestoreFocus(this.cellPosition);\r\n    }\r\n\r\n    public onFocusOut(): void {\r\n        // Used in React\r\n        this.beans.focusSvc.clearRestoreFocus();\r\n    }\r\n\r\n    private addFeatures(): void {\r\n        const { beans } = this;\r\n        this.positionFeature = new CellPositionFeature(this, beans);\r\n        this.customStyleFeature = beans.cellStyles?.createCellCustomStyleFeature(this, beans);\r\n        this.mouseListener = new CellMouseListenerFeature(this, beans, this.column);\r\n\r\n        this.keyboardListener = new CellKeyboardListenerFeature(this, beans, this.rowNode, this.rowCtrl);\r\n\r\n        if (this.column.isTooltipEnabled()) {\r\n            this.enableTooltipFeature();\r\n        }\r\n\r\n        const { rangeSvc } = beans;\r\n        const cellSelectionEnabled = rangeSvc && _isCellSelectionEnabled(beans.gos);\r\n        if (cellSelectionEnabled) {\r\n            this.rangeFeature = rangeSvc!.createCellRangeFeature(beans, this);\r\n        }\r\n    }\r\n\r\n    private removeFeatures(): void {\r\n        const context = this.beans.context;\r\n        this.positionFeature = context.destroyBean(this.positionFeature);\r\n        this.customStyleFeature = context.destroyBean(this.customStyleFeature);\r\n        this.mouseListener = context.destroyBean(this.mouseListener);\r\n        this.keyboardListener = context.destroyBean(this.keyboardListener);\r\n        this.rangeFeature = context.destroyBean(this.rangeFeature);\r\n\r\n        this.disableTooltipFeature();\r\n    }\r\n\r\n    private enableTooltipFeature(value?: string, shouldDisplayTooltip?: () => boolean): void {\r\n        this.tooltipFeature = this.beans.tooltipSvc?.enableCellTooltipFeature(this, value, shouldDisplayTooltip);\r\n    }\r\n\r\n    private disableTooltipFeature() {\r\n        this.tooltipFeature = this.beans.context.destroyBean(this.tooltipFeature);\r\n    }\r\n\r\n    public setComp(\r\n        comp: ICellComp,\r\n        eGui: HTMLElement,\r\n        eCellWrapper: HTMLElement | undefined,\r\n        printLayout: boolean,\r\n        startEditing: boolean,\r\n        compBean: BeanStub | undefined\r\n    ): void {\r\n        this.comp = comp;\r\n        this.eGui = eGui;\r\n        this.printLayout = printLayout;\r\n        compBean ??= this;\r\n\r\n        this.addDomData(compBean);\r\n        this.addFeatures();\r\n        compBean.addDestroyFunc(() => this.removeFeatures());\r\n\r\n        this.onSuppressCellFocusChanged(this.beans.gos.get('suppressCellFocus'));\r\n\r\n        this.onCellFocused(this.focusEventToRestore);\r\n        this.applyStaticCssClasses();\r\n        this.setWrapText();\r\n\r\n        this.onFirstRightPinnedChanged();\r\n        this.onLastLeftPinnedChanged();\r\n        this.onColumnHover();\r\n        this.setupControlComps();\r\n\r\n        this.setupAutoHeight(eCellWrapper, compBean);\r\n\r\n        this.refreshFirstAndLastStyles();\r\n        this.refreshAriaColIndex();\r\n\r\n        this.positionFeature?.setComp(eGui);\r\n        this.customStyleFeature?.setComp(comp);\r\n        this.tooltipFeature?.refreshTooltip();\r\n        this.keyboardListener?.setComp(this.eGui);\r\n\r\n        if (this.rangeFeature) {\r\n            this.rangeFeature.setComp(comp, eGui);\r\n        }\r\n\r\n        if (startEditing && this.isCellEditable()) {\r\n            this.beans.editSvc?.startEditing(this);\r\n        } else {\r\n            this.showValue();\r\n        }\r\n\r\n        if (this.onCompAttachedFuncs.length) {\r\n            this.onCompAttachedFuncs.forEach((func) => func());\r\n            this.onCompAttachedFuncs = [];\r\n        }\r\n    }\r\n\r\n    private setupAutoHeight(eCellWrapper: HTMLElement | undefined, compBean: BeanStub): void {\r\n        this.isAutoHeight = this.column.isAutoHeight();\r\n        if (!this.isAutoHeight || !eCellWrapper) {\r\n            return;\r\n        }\r\n\r\n        this.beans.rowAutoHeight?.setupCellAutoHeight(this, eCellWrapper, compBean);\r\n    }\r\n\r\n    public getCellAriaRole(): string {\r\n        return this.column.getColDef().cellAriaRole ?? 'gridcell';\r\n    }\r\n\r\n    public isCellRenderer(): boolean {\r\n        const colDef = this.column.getColDef();\r\n        return colDef.cellRenderer != null || colDef.cellRendererSelector != null;\r\n    }\r\n    public getValueToDisplay(): any {\r\n        return this.valueFormatted ?? this.value;\r\n    }\r\n\r\n    private showValue(forceNewCellRendererInstance = false): void {\r\n        const { beans, column, rowNode, rangeFeature } = this;\r\n        const { userCompFactory } = beans;\r\n        const valueToDisplay = this.getValueToDisplay();\r\n        let compDetails: UserCompDetails | undefined;\r\n\r\n        // if node is stub, and no group data for this node (groupSelectsChildren can populate group data)\r\n        const isSsrmLoading = rowNode.stub && rowNode.groupData?.[column.getId()] == null;\r\n        if (isSsrmLoading) {\r\n            const params = this.createCellRendererParams();\r\n            compDetails = _getLoadingCellRendererDetails(userCompFactory, column.getColDef(), params);\r\n        } else if (this.isCellRenderer()) {\r\n            const params = this.createCellRendererParams();\r\n            compDetails = _getCellRendererDetails(userCompFactory, column.getColDef(), params);\r\n        }\r\n        this.comp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);\r\n        if (rangeFeature) {\r\n            _requestAnimationFrame(beans, () => rangeFeature?.refreshHandle());\r\n        }\r\n    }\r\n\r\n    private setupControlComps(): void {\r\n        const colDef = this.column.getColDef();\r\n        this.includeSelection = this.isIncludeControl(this.isCheckboxSelection(colDef));\r\n        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);\r\n        this.includeDndSource = this.isIncludeControl(colDef.dndSource);\r\n\r\n        this.comp.setIncludeSelection(this.includeSelection);\r\n        this.comp.setIncludeDndSource(this.includeDndSource);\r\n        this.comp.setIncludeRowDrag(this.includeRowDrag);\r\n    }\r\n\r\n    public isForceWrapper(): boolean {\r\n        // text selection requires the value to be wrapped in another element\r\n        const forceWrapper = this.beans.gos.get('enableCellTextSelection') || this.column.isAutoHeight();\r\n        return forceWrapper;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    private isIncludeControl(value: boolean | Function | undefined): boolean {\r\n        const rowNodePinned = this.rowNode.rowPinned != null;\r\n        const isFunc = typeof value === 'function';\r\n        const res = rowNodePinned ? false : isFunc || value === true;\r\n\r\n        return res;\r\n    }\r\n\r\n    private isCheckboxSelection(colDef: ColDef): boolean | CheckboxSelectionCallback | undefined {\r\n        const { rowSelection } = this.beans.gridOptions;\r\n        return (\r\n            colDef.checkboxSelection ||\r\n            (isColumnSelectionCol(this.column) &&\r\n                rowSelection &&\r\n                typeof rowSelection !== 'string' &&\r\n                _getCheckboxes(rowSelection))\r\n        );\r\n    }\r\n\r\n    private refreshShouldDestroy(): boolean {\r\n        const colDef = this.column.getColDef();\r\n        const selectionChanged = this.includeSelection != this.isIncludeControl(this.isCheckboxSelection(colDef));\r\n        const rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);\r\n        const dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);\r\n        // auto height uses wrappers, so need to destroy\r\n        const autoHeightChanged = this.isAutoHeight != this.column.isAutoHeight();\r\n\r\n        return selectionChanged || rowDragChanged || dndSourceChanged || autoHeightChanged;\r\n    }\r\n\r\n    public onPopupEditorClosed(): void {\r\n        if (!this.editing) {\r\n            return;\r\n        }\r\n        // note: this happens because of a click outside of the grid or if the popupEditor\r\n        // is closed with `Escape` key. if another cell was clicked, then the editing will\r\n        // have already stopped and returned on the conditional above.\r\n        this.stopEditingAndFocus();\r\n    }\r\n\r\n    /**\r\n     * Ends the Cell Editing\r\n     * @param cancel `True` if the edit process is being canceled.\r\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\r\n     */\r\n    public stopEditing(cancel = false): boolean {\r\n        return this.beans.editSvc?.stopEditing(this, cancel) ?? false;\r\n    }\r\n\r\n    private createCellRendererParams(): ICellRendererParams {\r\n        const {\r\n            value,\r\n            valueFormatted,\r\n            column,\r\n            rowNode,\r\n            comp,\r\n            eGui,\r\n            beans: { valueSvc, gos },\r\n        } = this;\r\n        const res: ICellRendererParams = gos.addGridCommonParams({\r\n            value: value,\r\n            valueFormatted: valueFormatted,\r\n            getValue: () => valueSvc.getValueForDisplay(column, rowNode),\r\n            setValue: (value: any) => valueSvc.setValue(rowNode, column, value),\r\n            formatValue: this.formatValue.bind(this),\r\n            data: rowNode.data,\r\n            node: rowNode,\r\n            pinned: column.getPinned() as any,\r\n            colDef: column.getColDef(),\r\n            column,\r\n            refreshCell: this.refreshCell.bind(this),\r\n            eGridCell: eGui,\r\n            eParentOfValue: comp.getParentOfValue()!,\r\n\r\n            registerRowDragger: (\r\n                rowDraggerElement: HTMLElement,\r\n                dragStartPixels: number,\r\n                value?: string,\r\n                suppressVisibilityChange?: boolean\r\n            ) => this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange),\r\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\r\n                gos.assertModuleRegistered('Tooltip', 3);\r\n                if (this.tooltipFeature) {\r\n                    this.disableTooltipFeature();\r\n                }\r\n                this.enableTooltipFeature(value, shouldDisplayTooltip);\r\n                this.tooltipFeature?.refreshTooltip();\r\n            },\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    public onCellChanged(event: CellChangedEvent): void {\r\n        const eventImpactsThisCell = event.column === this.column;\r\n\r\n        if (eventImpactsThisCell) {\r\n            this.refreshCell({});\r\n        }\r\n    }\r\n\r\n    public refreshOrDestroyCell(params?: { suppressFlash?: boolean; newData?: boolean; forceRefresh?: boolean }): void {\r\n        if (this.refreshShouldDestroy()) {\r\n            this.rowCtrl?.recreateCell(this);\r\n        } else {\r\n            this.refreshCell(params);\r\n        }\r\n    }\r\n\r\n    // + stop editing {forceRefresh: true, suppressFlash: true}\r\n    // + event cellChanged {}\r\n    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything\r\n    // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}\r\n    // + rowCtrl: api refreshCells() {animate: true/false}\r\n    // + rowRenderer: api softRefreshView() {}\r\n    public refreshCell(params?: { suppressFlash?: boolean; newData?: boolean; forceRefresh?: boolean }) {\r\n        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly\r\n        if (this.suppressRefreshCell || this.editing) {\r\n            return;\r\n        }\r\n\r\n        const colDef = this.column.getColDef();\r\n        const newData = params != null && !!params.newData;\r\n        const suppressFlash = params != null && !!params.suppressFlash;\r\n        // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the\r\n        // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe\r\n        // printing the current time (which would be silly)???. Generally speaking\r\n        // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's\r\n        // best always refresh and take the performance hit rather than never refresh and users complaining in support\r\n        // that cells are not updating.\r\n        const noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;\r\n        const forceRefresh = (params && params.forceRefresh) || noValueProvided || newData;\r\n\r\n        const isCellCompReady = !!this.comp;\r\n        // Only worth comparing values if the cellComp is ready\r\n        const valuesDifferent = this.updateAndFormatValue(isCellCompReady);\r\n        const dataNeedsUpdating = forceRefresh || valuesDifferent;\r\n\r\n        // In React, due to async, it's possible a refresh was asked for before the CellComp was created and calls setComp()\r\n        // So we do not run the cell comp refresh logic at this point in time.\r\n        if (!isCellCompReady) {\r\n            return;\r\n        }\r\n\r\n        if (dataNeedsUpdating) {\r\n            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.\r\n            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')\r\n            // then we are not showing a movement in the stock price, rather we are showing different stock.\r\n            this.showValue(newData);\r\n\r\n            // we don't want to flash the cells when processing a filter change, as otherwise the UI would\r\n            // be to busy. see comment in FilterManager with regards processingFilterChange\r\n            const processingFilterChange = this.beans.filterManager?.isSuppressFlashingCellsBecauseFiltering();\r\n\r\n            const flashCell = !suppressFlash && !processingFilterChange && colDef.enableCellChangeFlash;\r\n\r\n            if (flashCell) {\r\n                this.beans.cellFlashSvc?.flashCell(this);\r\n            }\r\n\r\n            this.customStyleFeature?.applyUserStyles();\r\n            this.customStyleFeature?.applyClassesFromColDef();\r\n        }\r\n\r\n        this.tooltipFeature?.refreshTooltip();\r\n\r\n        // we do cellClassRules even if the value has not changed, so that users who have rules that\r\n        // look at other parts of the row (where the other part of the row might of changed) will work.\r\n        this.customStyleFeature?.applyCellClassRules();\r\n    }\r\n\r\n    // cell editors call this, when they want to stop for reasons other\r\n    // than what we pick up on. eg selecting from a dropdown ends editing.\r\n    public stopEditingAndFocus(suppressNavigateAfterEdit = false, shiftKey: boolean = false): void {\r\n        this.beans.editSvc?.stopEditingAndFocus(this, suppressNavigateAfterEdit, shiftKey);\r\n    }\r\n\r\n    public isCellEditable(): boolean {\r\n        return this.column.isCellEditable(this.rowNode);\r\n    }\r\n\r\n    public formatValue(value: any): any {\r\n        return this.callValueFormatter(value) ?? value;\r\n    }\r\n\r\n    private callValueFormatter(value: any): string | null {\r\n        return this.beans.valueSvc.formatValue(this.column, this.rowNode, value);\r\n    }\r\n\r\n    public updateAndFormatValue(compareValues: boolean): boolean {\r\n        const oldValue = this.value;\r\n        const oldValueFormatted = this.valueFormatted;\r\n\r\n        this.value = this.beans.valueSvc.getValueForDisplay(this.column, this.rowNode);\r\n        this.valueFormatted = this.callValueFormatter(this.value);\r\n\r\n        if (compareValues) {\r\n            return !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private valuesAreEqual(val1: any, val2: any): boolean {\r\n        // if the user provided an equals method, use that, otherwise do simple comparison\r\n        const colDef = this.column.getColDef();\r\n        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;\r\n    }\r\n\r\n    private addDomData(compBean: BeanStub): void {\r\n        const element = this.eGui;\r\n\r\n        _setDomData(this.beans.gos, element, DOM_DATA_KEY_CELL_CTRL, this);\r\n        compBean.addDestroyFunc(() => _setDomData(this.beans.gos, element, DOM_DATA_KEY_CELL_CTRL, null));\r\n    }\r\n\r\n    public createEvent<T extends AgEventType>(domEvent: Event | null, eventType: T): CellEvent<T> {\r\n        const { rowNode, column, value } = this;\r\n        const event: CellEvent<T> = this.beans.gos.addGridCommonParams({\r\n            type: eventType,\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            value,\r\n            column,\r\n            colDef: column.getColDef(),\r\n            rowPinned: rowNode.rowPinned,\r\n            event: domEvent,\r\n            rowIndex: rowNode.rowIndex!,\r\n        });\r\n\r\n        return event;\r\n    }\r\n\r\n    public processCharacter(event: KeyboardEvent): void {\r\n        this.keyboardListener?.processCharacter(event);\r\n    }\r\n\r\n    public onKeyDown(event: KeyboardEvent): void {\r\n        this.keyboardListener?.onKeyDown(event);\r\n    }\r\n\r\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\r\n        this.mouseListener?.onMouseEvent(eventName, mouseEvent);\r\n    }\r\n\r\n    public getColSpanningList(): AgColumn[] {\r\n        return this.positionFeature!.getColSpanningList();\r\n    }\r\n\r\n    public onLeftChanged(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n        this.positionFeature?.onLeftChanged();\r\n    }\r\n\r\n    public onDisplayedColumnsChanged(): void {\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        this.refreshAriaColIndex();\r\n        this.refreshFirstAndLastStyles();\r\n    }\r\n\r\n    private refreshFirstAndLastStyles(): void {\r\n        const { comp, column, beans } = this;\r\n        refreshFirstAndLastStyles(comp, column, beans.visibleCols);\r\n    }\r\n\r\n    private refreshAriaColIndex(): void {\r\n        const colIdx = this.beans.visibleCols.getAriaColIndex(this.column);\r\n        _setAriaColIndex(this.eGui, colIdx); // for react, we don't use JSX, as it slowed down column moving\r\n    }\r\n\r\n    public onWidthChanged(): void {\r\n        return this.positionFeature?.onWidthChanged();\r\n    }\r\n\r\n    public getRowPosition(): RowPosition {\r\n        const { rowIndex, rowPinned } = this.cellPosition;\r\n        return {\r\n            rowIndex,\r\n            rowPinned,\r\n        };\r\n    }\r\n\r\n    public updateRangeBordersIfRangeCount(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n        this.rangeFeature?.updateRangeBordersIfRangeCount();\r\n    }\r\n\r\n    public onCellSelectionChanged(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n        this.rangeFeature?.onCellSelectionChanged();\r\n    }\r\n\r\n    public isRangeSelectionEnabled(): boolean {\r\n        return this.rangeFeature != null;\r\n    }\r\n\r\n    public focusCell(forceBrowserFocus = false): void {\r\n        this.beans.focusSvc.setFocusedCell({\r\n            rowIndex: this.cellPosition.rowIndex,\r\n            column: this.column,\r\n            rowPinned: this.rowNode.rowPinned,\r\n            forceBrowserFocus,\r\n        });\r\n    }\r\n\r\n    public onRowIndexChanged(): void {\r\n        // when index changes, this influences items that need the index, so we update the\r\n        // grid cell so they are working off the new index.\r\n        this.createCellPosition();\r\n        // when the index of the row changes, ie means the cell may have lost or gained focus\r\n        this.onCellFocused();\r\n        // check range selection\r\n        this.rangeFeature?.onCellSelectionChanged();\r\n    }\r\n\r\n    public onSuppressCellFocusChanged(suppressCellFocus: boolean): void {\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        _addOrRemoveAttribute(this.eGui, 'tabindex', suppressCellFocus ? undefined : -1);\r\n    }\r\n\r\n    public onFirstRightPinnedChanged(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n        const firstRightPinned = this.column.isFirstRightPinned();\r\n        this.comp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);\r\n    }\r\n\r\n    public onLastLeftPinnedChanged(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n        const lastLeftPinned = this.column.isLastLeftPinned();\r\n        this.comp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);\r\n    }\r\n\r\n    public onCellFocused(event?: CellFocusedEvent): void {\r\n        const { beans } = this;\r\n        if (_isCellFocusSuppressed(beans)) {\r\n            return;\r\n        }\r\n        const cellFocused = beans.focusSvc.isCellFocused(this.cellPosition);\r\n\r\n        if (!this.comp) {\r\n            if (cellFocused && event?.forceBrowserFocus) {\r\n                // The cell comp has not been rendered yet, but the browser focus is being forced for this cell\r\n                // so lets save the event to apply it when setComp is called in the next turn.\r\n                this.focusEventToRestore = event;\r\n            }\r\n            return;\r\n        }\r\n        // Clear the saved focus event\r\n        this.focusEventToRestore = undefined;\r\n\r\n        this.comp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);\r\n\r\n        // see if we need to force browser focus - this can happen if focus is programmatically set\r\n        if (cellFocused && event && event.forceBrowserFocus) {\r\n            let focusEl = this.comp.getFocusableElement();\r\n\r\n            if (this.editing) {\r\n                const focusableEls = _findFocusableElements(focusEl, null, true);\r\n                if (focusableEls.length) {\r\n                    focusEl = focusableEls[0];\r\n                }\r\n            }\r\n\r\n            focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });\r\n        }\r\n\r\n        // if another cell was focused, and we are editing, then stop editing\r\n        const fullRowEdit = beans.gos.get('editType') === 'fullRow';\r\n\r\n        if (!cellFocused && !fullRowEdit && this.editing) {\r\n            beans.editSvc?.stopRowOrCellEdit(this);\r\n        }\r\n\r\n        if (cellFocused) {\r\n            this.rowCtrl.announceDescription();\r\n        }\r\n    }\r\n\r\n    private createCellPosition(): void {\r\n        const { rowIndex, rowPinned } = this.rowNode;\r\n        this.cellPosition = {\r\n            rowIndex: rowIndex!,\r\n            rowPinned: _makeNull(rowPinned),\r\n            column: this.column,\r\n        };\r\n    }\r\n\r\n    public setInlineEditingCss(): void {\r\n        this.beans.editSvc?.setInlineEditingCss(this.rowCtrl);\r\n    }\r\n\r\n    // CSS Classes that only get applied once, they never change\r\n    private applyStaticCssClasses(): void {\r\n        const { comp } = this;\r\n        comp.addOrRemoveCssClass(CSS_CELL, true);\r\n        comp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);\r\n\r\n        // normal cells fill the height of the row. autoHeight cells have no height to let them\r\n        // fit the height of content.\r\n\r\n        const autoHeight = this.column.isAutoHeight() == true;\r\n        comp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);\r\n        comp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);\r\n    }\r\n\r\n    public onColumnHover(): void {\r\n        this.beans.colHover?.onCellColumnHover(this.column, this.comp);\r\n    }\r\n\r\n    public onColDefChanged(): void {\r\n        if (!this.comp) {\r\n            return;\r\n        }\r\n\r\n        if (this.column.isTooltipEnabled()) {\r\n            this.disableTooltipFeature();\r\n            this.enableTooltipFeature();\r\n        } else {\r\n            this.disableTooltipFeature();\r\n        }\r\n\r\n        this.setWrapText();\r\n\r\n        if (!this.editing) {\r\n            this.refreshOrDestroyCell({ forceRefresh: true, suppressFlash: true });\r\n        } else {\r\n            this.beans.editSvc?.handleColDefChanged(this);\r\n        }\r\n    }\r\n\r\n    private setWrapText(): void {\r\n        const value = this.column.getColDef().wrapText == true;\r\n\r\n        this.comp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);\r\n    }\r\n\r\n    public dispatchCellContextMenuEvent(event: Event | null) {\r\n        const colDef = this.column.getColDef();\r\n        const cellContextMenuEvent: CellContextMenuEvent = this.createEvent(event, 'cellContextMenu');\r\n\r\n        const { beans } = this;\r\n        beans.eventSvc.dispatchEvent(cellContextMenuEvent);\r\n\r\n        if (colDef.onCellContextMenu) {\r\n            // to make the callback async, do in a timeout\r\n            window.setTimeout(() => {\r\n                beans.frameworkOverrides.wrapOutgoing(() => {\r\n                    (colDef.onCellContextMenu as any)(cellContextMenuEvent);\r\n                });\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    public getCellRenderer(): ICellRenderer | null {\r\n        return this.comp?.getCellRenderer() ?? null;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.onCompAttachedFuncs = [];\r\n        this.onEditorAttachedFuncs = [];\r\n        super.destroy();\r\n    }\r\n\r\n    public createSelectionCheckbox(): CheckboxSelectionComponent | undefined {\r\n        const cbSelectionComponent = this.beans.selectionSvc?.createCheckboxSelectionComponent();\r\n        if (!cbSelectionComponent) {\r\n            return undefined;\r\n        }\r\n\r\n        this.beans.context.createBean(cbSelectionComponent);\r\n        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });\r\n\r\n        // put the checkbox in before the value\r\n        return cbSelectionComponent;\r\n    }\r\n\r\n    public createDndSource(): DndSourceComp | undefined {\r\n        const dndSourceComp = this.beans.registry.createDynamicBean<DndSourceComp>(\r\n            'dndSourceComp',\r\n            false,\r\n            this.rowNode,\r\n            this.column,\r\n            this.eGui\r\n        );\r\n        if (dndSourceComp) {\r\n            this.beans.context.createBean(dndSourceComp);\r\n        }\r\n\r\n        return dndSourceComp;\r\n    }\r\n\r\n    public registerRowDragger(\r\n        customElement: HTMLElement,\r\n        dragStartPixels?: number,\r\n        suppressVisibilityChange?: boolean\r\n    ): void {\r\n        // if previously existed, then we are only updating\r\n        if (this.customRowDragComp) {\r\n            this.customRowDragComp.setDragElement(customElement, dragStartPixels);\r\n            return;\r\n        }\r\n\r\n        const newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);\r\n\r\n        if (newComp) {\r\n            this.customRowDragComp = newComp;\r\n            this.addDestroyFunc(() => {\r\n                this.beans.context.destroyBean(newComp);\r\n                (this.customRowDragComp as any) = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    public createRowDragComp(\r\n        customElement?: HTMLElement,\r\n        dragStartPixels?: number,\r\n        suppressVisibilityChange?: boolean\r\n    ): RowDragComp | undefined {\r\n        const rowDragComp = this.beans.rowDragSvc?.createRowDragCompForCell(\r\n            this.rowNode,\r\n            this.column,\r\n            () => this.value,\r\n            customElement,\r\n            dragStartPixels,\r\n            suppressVisibilityChange\r\n        );\r\n        if (!rowDragComp) {\r\n            return undefined;\r\n        }\r\n        this.beans.context.createBean(rowDragComp);\r\n\r\n        return rowDragComp;\r\n    }\r\n\r\n    public cellEditorAttached(): void {\r\n        this.onEditorAttachedFuncs.forEach((func) => func());\r\n        this.onEditorAttachedFuncs = [];\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { DraggingEvent } from '../dragAndDrop/dragAndDropService';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport { _isDomLayout } from '../gridOptionsUtils';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport { _getCellCtrlForEventTarget } from '../rendering/cell/cellCtrl';\r\nimport { _exists } from '../utils/generic';\r\n\r\nconst GRID_DOM_KEY = '__ag_grid_instance';\r\n\r\n// we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\r\n// so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\r\n// for where this is used.\r\nexport function _stampTopLevelGridCompWithGridInstance(gos: GridOptionsService, eGridDiv: HTMLElement): void {\r\n    (eGridDiv as any)[GRID_DOM_KEY] = gos.gridInstanceId;\r\n}\r\n\r\n// walks the path of the event, and returns true if this grid is the first one that it finds. if doing\r\n// master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\r\n// getting executed on many grids at the same time.\r\nexport function _isEventFromThisGrid(gos: GridOptionsService, event: UIEvent): boolean {\r\n    const res = _isElementInThisGrid(gos, event.target as HTMLElement);\r\n    return res;\r\n}\r\n\r\nexport function _isElementInThisGrid(gos: GridOptionsService, element: HTMLElement): boolean {\r\n    let pointer: HTMLElement | null = element;\r\n    while (pointer) {\r\n        const instanceId = (pointer as any)[GRID_DOM_KEY];\r\n        if (_exists(instanceId)) {\r\n            const eventFromThisGrid = instanceId === gos.gridInstanceId;\r\n            return eventFromThisGrid;\r\n        }\r\n        pointer = pointer.parentElement;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function _getCellPositionForEvent(\r\n    gos: GridOptionsService,\r\n    event: MouseEvent | KeyboardEvent\r\n): CellPosition | null {\r\n    return _getCellCtrlForEventTarget(gos, event.target)?.cellPosition ?? null;\r\n}\r\n\r\nexport function _getNormalisedMousePosition(\r\n    beans: BeanCollection,\r\n    event: MouseEvent | DraggingEvent\r\n): { x: number; y: number } {\r\n    const gridPanelHasScrolls = _isDomLayout(beans.gos, 'normal');\r\n    const e = event as MouseEvent;\r\n    let x: number;\r\n    let y: number;\r\n\r\n    if (e.clientX != null || e.clientY != null) {\r\n        x = e.clientX;\r\n        y = e.clientY;\r\n    } else {\r\n        x = e.x;\r\n        y = e.y;\r\n    }\r\n\r\n    if (gridPanelHasScrolls) {\r\n        const scrollFeature = beans.ctrlsSvc.getScrollFeature();\r\n        const vRange = scrollFeature.getVScrollPosition();\r\n        const hRange = scrollFeature.getHScrollPosition();\r\n        x += hRange.left;\r\n        y += vRange.top;\r\n    }\r\n\r\n    return { x, y };\r\n}\r\n", "import { _getDragAndDropImageCompDetails } from '../components/framework/userCompUtils';\r\nimport type { UserComponentFactory } from '../components/framework/userComponentFactory';\r\nimport type { HorizontalDirection, VerticalDirection } from '../constants/direction';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { Environment } from '../environment';\r\nimport { _stampTopLevelGridCompWithGridInstance } from '../gridBodyComp/mouseEventUtils';\r\nimport { _anchorElementToMouseMoveEvent, _getPageBody, _getRootNode } from '../gridOptionsUtils';\r\nimport type { AgGridCommon } from '../interfaces/iCommon';\r\nimport type { DragItem } from '../interfaces/iDragItem';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport type { AgPromise } from '../utils/promise';\r\nimport { _warn } from '../validation/logging';\r\nimport type { IDragAndDropImageComponent } from './dragAndDropImageComponent';\r\nimport type { DragListenerParams, DragService } from './dragService';\r\nimport type { RowDropZoneParams } from './rowDragFeature';\r\n\r\nexport enum DragSourceType {\r\n    ToolPanel,\r\n    HeaderCell,\r\n    RowDrag,\r\n    ChartPanel,\r\n    AdvancedFilterBuilder,\r\n}\r\n\r\nexport interface DragSource {\r\n    /**\r\n     * The type of the drag source, used by the drop target to know where the\r\n     * drag originated from.\r\n     */\r\n    type: DragSourceType;\r\n    /** Can be used to identify a specific component as the source */\r\n    sourceId?: string;\r\n    /**\r\n     * Element which, when dragged, will kick off the DnD process\r\n     */\r\n    eElement: Element;\r\n    /**\r\n     * If eElement is dragged, then the dragItem is the object that gets passed around.\r\n     */\r\n    getDragItem: () => DragItem;\r\n    /**\r\n     * This name appears in the drag and drop image component when dragging.\r\n     */\r\n    dragItemName: string | (() => string) | null;\r\n    /**\r\n     * Icon to show when not over a drop zone\r\n     */\r\n    getDefaultIconName?: () => DragAndDropIcon;\r\n    /**\r\n     * The drag source DOM Data Key, this is useful to detect if the origin grid is the same\r\n     * as the target grid.\r\n     */\r\n    dragSourceDomDataKey?: string;\r\n    /**\r\n     * After how many pixels of dragging should the drag operation start. Default is 4.\r\n     */\r\n    dragStartPixels?: number;\r\n    /**\r\n     * Callback for drag started\r\n     */\r\n    onDragStarted?: () => void;\r\n    /**\r\n     * Callback for drag stopped\r\n     */\r\n    onDragStopped?: () => void;\r\n    /**\r\n     * Callback for drag cancelled\r\n     */\r\n    onDragCancelled?: () => void;\r\n    /**\r\n     * Callback for entering the grid\r\n     */\r\n    onGridEnter?: (dragItem: DragItem | null) => void;\r\n    /**\r\n     * Callback for exiting the grid\r\n     */\r\n    onGridExit?: (dragItem: DragItem | null) => void;\r\n}\r\n\r\nexport interface DropTarget {\r\n    /** The main container that will get the drop. */\r\n    getContainer(): HTMLElement;\r\n    /** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\r\n     * in the header as well as the body (main rows and pinned rows) of the grid. */\r\n    getSecondaryContainers?(): HTMLElement[][];\r\n    /** Icon to show when drag is over */\r\n    getIconName?(): DragAndDropIcon | null;\r\n\r\n    isInterestedIn(type: DragSourceType, el: Element): boolean;\r\n\r\n    /**\r\n     * If `true`, the DragSources will only be allowed to be dragged within the DragTarget that contains them.\r\n     * This is useful for changing order of items within a container, and not moving items across containers.\r\n     * @default false\r\n     */\r\n    targetContainsSource?: boolean;\r\n\r\n    /** Callback for when drag enters */\r\n    onDragEnter?(params: DraggingEvent): void;\r\n    /** Callback for when drag leaves */\r\n    onDragLeave?(params: DraggingEvent): void;\r\n    /** Callback for when dragging */\r\n    onDragging?(params: DraggingEvent): void;\r\n    /** Callback for when drag stops */\r\n    onDragStop?(params: DraggingEvent): void;\r\n    /** Callback for when the drag is cancelled */\r\n    onDragCancel?(params: DraggingEvent): void;\r\n    external?: boolean;\r\n}\r\n\r\nexport interface DraggingEvent<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\r\n    event: MouseEvent;\r\n    x: number;\r\n    y: number;\r\n    vDirection: VerticalDirection | null;\r\n    hDirection: HorizontalDirection | null;\r\n    dragSource: DragSource;\r\n    dragItem: DragItem;\r\n    fromNudge: boolean;\r\n    dropZoneTarget: HTMLElement;\r\n}\r\n\r\nexport type DragAndDropIcon =\r\n    | 'pinned'\r\n    | 'move'\r\n    | 'left'\r\n    | 'right'\r\n    | 'group'\r\n    | 'aggregate'\r\n    | 'pivot'\r\n    | 'notAllowed'\r\n    | 'hide';\r\n\r\nexport class DragAndDropService extends BeanStub implements NamedBean {\r\n    beanName = 'dragAndDrop' as const;\r\n\r\n    private ctrlsSvc: CtrlsService;\r\n    private dragSvc: DragService;\r\n    private environment: Environment;\r\n    private userCompFactory: UserComponentFactory;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.ctrlsSvc = beans.ctrlsSvc;\r\n        this.dragSvc = beans.dragSvc!;\r\n        this.environment = beans.environment;\r\n        this.userCompFactory = beans.userCompFactory;\r\n    }\r\n\r\n    private dragSourceAndParamsList: { params: DragListenerParams; dragSource: DragSource }[] = [];\r\n\r\n    private dragItem: DragItem | null;\r\n    private eventLastTime: MouseEvent | null;\r\n    private dragSource: DragSource | null;\r\n    private dragging: boolean;\r\n\r\n    private dragAndDropImageComp: {\r\n        promise: AgPromise<IDragAndDropImageComponent>;\r\n        comp?: IDragAndDropImageComponent;\r\n    } | null;\r\n    private dragAndDropImageParent: HTMLElement | ShadowRoot;\r\n\r\n    private dropTargets: DropTarget[] = [];\r\n    private lastDropTarget: DropTarget | null | undefined;\r\n\r\n    public addDragSource(dragSource: DragSource, allowTouch = false): void {\r\n        const params: DragListenerParams = {\r\n            eElement: dragSource.eElement,\r\n            dragStartPixels: dragSource.dragStartPixels,\r\n            onDragStart: this.onDragStart.bind(this, dragSource),\r\n            onDragStop: this.onDragStop.bind(this),\r\n            onDragging: this.onDragging.bind(this),\r\n            onDragCancel: this.onDragCancel.bind(this),\r\n            includeTouch: allowTouch,\r\n        };\r\n\r\n        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });\r\n        this.dragSvc.addDragSource(params);\r\n    }\r\n\r\n    public getDragAndDropImageComponent(): IDragAndDropImageComponent | null {\r\n        const { dragAndDropImageComp } = this;\r\n        if (!dragAndDropImageComp || !dragAndDropImageComp.comp) {\r\n            return null;\r\n        }\r\n\r\n        return dragAndDropImageComp.comp;\r\n    }\r\n\r\n    public removeDragSource(dragSource: DragSource): void {\r\n        const { dragSourceAndParamsList, dragSvc } = this;\r\n        const sourceAndParams = dragSourceAndParamsList.find((item) => item.dragSource === dragSource);\r\n\r\n        if (sourceAndParams) {\r\n            dragSvc.removeDragSource(sourceAndParams.params);\r\n            _removeFromArray(dragSourceAndParamsList, sourceAndParams);\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        const { dragSourceAndParamsList, dragSvc, dropTargets } = this;\r\n        dragSourceAndParamsList.forEach((sourceAndParams) => dragSvc.removeDragSource(sourceAndParams.params));\r\n        dragSourceAndParamsList.length = 0;\r\n        dropTargets.length = 0;\r\n        this.clearDragAndDropProperties();\r\n        super.destroy();\r\n    }\r\n\r\n    public nudge(): void {\r\n        if (this.dragging) {\r\n            this.onDragging(this.eventLastTime!, true);\r\n        }\r\n    }\r\n\r\n    private onDragStart(dragSource: DragSource, mouseEvent: MouseEvent): void {\r\n        this.dragging = true;\r\n        this.dragSource = dragSource;\r\n        this.eventLastTime = mouseEvent;\r\n        this.dragItem = dragSource.getDragItem();\r\n\r\n        dragSource.onDragStarted?.();\r\n        this.createDragAndDropImageComponent();\r\n    }\r\n\r\n    private onDragStop(mouseEvent: MouseEvent): void {\r\n        this.dragSource?.onDragStopped?.();\r\n\r\n        const { lastDropTarget } = this;\r\n        if (lastDropTarget?.onDragStop) {\r\n            const draggingEvent = this.createDropTargetEvent(lastDropTarget, mouseEvent, null, null, false);\r\n            lastDropTarget.onDragStop(draggingEvent);\r\n        }\r\n\r\n        this.clearDragAndDropProperties();\r\n    }\r\n\r\n    private onDragCancel(): void {\r\n        const { dragSource, lastDropTarget } = this;\r\n        dragSource?.onDragCancelled?.();\r\n\r\n        if (lastDropTarget?.onDragCancel) {\r\n            lastDropTarget.onDragCancel(\r\n                this.createDropTargetEvent(lastDropTarget, this.eventLastTime!, null, null, false)\r\n            );\r\n        }\r\n        this.clearDragAndDropProperties();\r\n    }\r\n\r\n    private clearDragAndDropProperties(): void {\r\n        this.eventLastTime = null;\r\n        this.dragging = false;\r\n        this.lastDropTarget = undefined;\r\n        this.dragItem = null;\r\n        this.dragSource = null;\r\n        this.removeDragAndDropImageComponent();\r\n    }\r\n\r\n    private onDragging(mouseEvent: MouseEvent, fromNudge: boolean = false): void {\r\n        const hDirection = this.getHorizontalDirection(mouseEvent);\r\n        const vDirection = this.getVerticalDirection(mouseEvent);\r\n\r\n        this.eventLastTime = mouseEvent;\r\n        this.positionDragAndDropImageComp(mouseEvent);\r\n\r\n        // check if mouseEvent intersects with any of the drop targets\r\n        const validDropTargets = this.dropTargets.filter((target) => this.isMouseOnDropTarget(mouseEvent, target));\r\n        const dropTarget: DropTarget | null = this.findCurrentDropTarget(mouseEvent, validDropTargets);\r\n\r\n        const { lastDropTarget, dragSource, dragAndDropImageComp, dragItem } = this;\r\n\r\n        if (dropTarget !== lastDropTarget) {\r\n            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);\r\n\r\n            if (lastDropTarget !== null && dropTarget === null) {\r\n                dragSource?.onGridExit?.(dragItem);\r\n            }\r\n            if (lastDropTarget === null && dropTarget !== null) {\r\n                dragSource?.onGridEnter?.(dragItem);\r\n            }\r\n            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\r\n\r\n            if (dropTarget && dragAndDropImageComp) {\r\n                const { comp, promise } = dragAndDropImageComp;\r\n                if (comp) {\r\n                    comp.setIcon(dropTarget.getIconName ? dropTarget.getIconName() : null, false);\r\n                } else {\r\n                    promise.then((resolvedComponent) => {\r\n                        if (resolvedComponent) {\r\n                            resolvedComponent.setIcon(dropTarget.getIconName ? dropTarget.getIconName() : null, false);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.lastDropTarget = dropTarget;\r\n        } else if (dropTarget && dropTarget.onDragging) {\r\n            const draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\r\n            dropTarget.onDragging(draggingEvent);\r\n        }\r\n    }\r\n\r\n    private getAllContainersFromDropTarget(dropTarget: DropTarget): HTMLElement[][] {\r\n        const secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;\r\n        const containers: HTMLElement[][] = [[dropTarget.getContainer()]];\r\n\r\n        return secondaryContainers ? containers.concat(secondaryContainers) : containers;\r\n    }\r\n\r\n    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers\r\n    private isMouseOnDropTarget(mouseEvent: MouseEvent, dropTarget: DropTarget): boolean {\r\n        const allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);\r\n        let mouseOverTarget = false;\r\n\r\n        const allContainersIntersect = (mouseEvent: MouseEvent, containers: HTMLElement[]) => {\r\n            for (const container of containers) {\r\n                const { width, height, left, right, top, bottom } = container.getBoundingClientRect();\r\n\r\n                // if element is not visible, then width and height are zero\r\n                if (width === 0 || height === 0) {\r\n                    return false;\r\n                }\r\n\r\n                const horizontalFit = mouseEvent.clientX >= left && mouseEvent.clientX < right;\r\n                const verticalFit = mouseEvent.clientY >= top && mouseEvent.clientY < bottom;\r\n\r\n                if (!horizontalFit || !verticalFit) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        for (const currentContainers of allContainersFromDropTarget) {\r\n            if (allContainersIntersect(mouseEvent, currentContainers)) {\r\n                mouseOverTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        const { eElement, type } = this.dragSource!;\r\n        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(eElement)) {\r\n            return false;\r\n        }\r\n\r\n        return mouseOverTarget && dropTarget.isInterestedIn(type, eElement);\r\n    }\r\n\r\n    private findCurrentDropTarget(mouseEvent: MouseEvent, validDropTargets: DropTarget[]): DropTarget | null {\r\n        const len = validDropTargets.length;\r\n\r\n        if (len === 0) {\r\n            return null;\r\n        }\r\n        if (len === 1) {\r\n            return validDropTargets[0];\r\n        }\r\n\r\n        const rootNode = _getRootNode(this.beans);\r\n\r\n        // elementsFromPoint return a list of elements under\r\n        // the mouseEvent sorted from topMost to bottomMost\r\n        const elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY) as HTMLElement[];\r\n\r\n        // loop over the sorted elementStack to find which dropTarget comes first\r\n        for (const el of elementStack) {\r\n            for (const dropTarget of validDropTargets) {\r\n                const containers = this.getAllContainersFromDropTarget(dropTarget).flatMap((a) => a);\r\n                if (containers.indexOf(el) !== -1) {\r\n                    return dropTarget;\r\n                }\r\n            }\r\n        }\r\n\r\n        // we should never hit this point of the code because only\r\n        // valid dropTargets should be provided to this method.\r\n        return null;\r\n    }\r\n\r\n    private enterDragTargetIfExists(\r\n        dropTarget: DropTarget | null,\r\n        mouseEvent: MouseEvent,\r\n        hDirection: HorizontalDirection | null,\r\n        vDirection: VerticalDirection | null,\r\n        fromNudge: boolean\r\n    ): void {\r\n        if (!dropTarget) {\r\n            return;\r\n        }\r\n\r\n        if (dropTarget.onDragEnter) {\r\n            const dragEnterEvent = this.createDropTargetEvent(\r\n                dropTarget,\r\n                mouseEvent,\r\n                hDirection,\r\n                vDirection,\r\n                fromNudge\r\n            );\r\n\r\n            dropTarget.onDragEnter(dragEnterEvent);\r\n        }\r\n    }\r\n\r\n    private leaveLastTargetIfExists(\r\n        mouseEvent: MouseEvent,\r\n        hDirection: HorizontalDirection | null,\r\n        vDirection: VerticalDirection | null,\r\n        fromNudge: boolean\r\n    ): void {\r\n        const { lastDropTarget } = this;\r\n        if (!lastDropTarget) {\r\n            return;\r\n        }\r\n\r\n        if (lastDropTarget.onDragLeave) {\r\n            const dragLeaveEvent = this.createDropTargetEvent(\r\n                lastDropTarget,\r\n                mouseEvent,\r\n                hDirection,\r\n                vDirection,\r\n                fromNudge\r\n            );\r\n\r\n            lastDropTarget.onDragLeave(dragLeaveEvent);\r\n        }\r\n\r\n        const dragAndDropImageComponent = this.getDragAndDropImageComponent();\r\n\r\n        if (dragAndDropImageComponent) {\r\n            dragAndDropImageComponent.setIcon(null, false);\r\n        }\r\n    }\r\n\r\n    public addDropTarget(dropTarget: DropTarget) {\r\n        this.dropTargets.push(dropTarget);\r\n    }\r\n\r\n    public removeDropTarget(dropTarget: DropTarget) {\r\n        this.dropTargets = this.dropTargets.filter((target) => target.getContainer() !== dropTarget.getContainer());\r\n    }\r\n\r\n    public hasExternalDropZones(): boolean {\r\n        return this.dropTargets.some((zones) => zones.external);\r\n    }\r\n\r\n    public findExternalZone(params: RowDropZoneParams): DropTarget | null {\r\n        const externalTargets = this.dropTargets.filter((target) => target.external);\r\n\r\n        return externalTargets.find((zone) => zone.getContainer() === params.getContainer()) || null;\r\n    }\r\n\r\n    public isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\r\n        const gridBodyCon = this.ctrlsSvc.getGridBodyCtrl();\r\n        const gridGui = gridBodyCon.eGridBody;\r\n        const { dropZoneTarget } = draggingEvent;\r\n\r\n        return gridGui.contains(dropZoneTarget);\r\n    }\r\n\r\n    public getHorizontalDirection(event: MouseEvent): HorizontalDirection | null {\r\n        const clientX = this.eventLastTime?.clientX;\r\n        const eClientX = event.clientX;\r\n\r\n        if (clientX === eClientX) {\r\n            return null;\r\n        }\r\n\r\n        return clientX! > eClientX ? 'left' : 'right';\r\n    }\r\n\r\n    public getVerticalDirection(event: MouseEvent): VerticalDirection | null {\r\n        const clientY = this.eventLastTime?.clientY;\r\n        const eClientY = event.clientY;\r\n\r\n        if (clientY === eClientY) {\r\n            return null;\r\n        }\r\n\r\n        return clientY! > eClientY ? 'up' : 'down';\r\n    }\r\n\r\n    public createDropTargetEvent(\r\n        dropTarget: DropTarget,\r\n        event: MouseEvent,\r\n        hDirection: HorizontalDirection | null,\r\n        vDirection: VerticalDirection | null,\r\n        fromNudge: boolean\r\n    ): DraggingEvent {\r\n        // localise x and y to the target\r\n        const dropZoneTarget = dropTarget.getContainer();\r\n        const rect = dropZoneTarget.getBoundingClientRect();\r\n        const { dragItem, dragSource, gos } = this;\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n\r\n        return gos.addGridCommonParams({\r\n            event,\r\n            x,\r\n            y,\r\n            vDirection,\r\n            hDirection,\r\n            dragSource: dragSource!,\r\n            fromNudge,\r\n            dragItem: dragItem as DragItem,\r\n            dropZoneTarget,\r\n        });\r\n    }\r\n\r\n    private positionDragAndDropImageComp(event: MouseEvent): void {\r\n        const dragAndDropImageComponent = this.getDragAndDropImageComponent();\r\n\r\n        if (!dragAndDropImageComponent) {\r\n            return;\r\n        }\r\n\r\n        _anchorElementToMouseMoveEvent(dragAndDropImageComponent.getGui(), event, this.beans);\r\n    }\r\n\r\n    private removeDragAndDropImageComponent(): void {\r\n        const { dragAndDropImageComp } = this;\r\n        if (dragAndDropImageComp) {\r\n            const { comp } = dragAndDropImageComp;\r\n            if (comp) {\r\n                const eGui = comp.getGui();\r\n                this.dragAndDropImageParent?.removeChild(eGui);\r\n                this.destroyBean(comp);\r\n            }\r\n        }\r\n\r\n        this.dragAndDropImageComp = null;\r\n    }\r\n\r\n    private createDragAndDropImageComponent(): void {\r\n        const { dragSource } = this;\r\n\r\n        if (!dragSource) {\r\n            return;\r\n        }\r\n\r\n        const userCompDetails = _getDragAndDropImageCompDetails(this.userCompFactory, {\r\n            dragSource,\r\n        });\r\n        if (!userCompDetails) {\r\n            return;\r\n        }\r\n\r\n        const promise = userCompDetails.newAgStackInstance()!;\r\n        this.dragAndDropImageComp = {\r\n            promise,\r\n        };\r\n\r\n        promise.then((comp) => {\r\n            if (!comp || !this.isAlive()) {\r\n                return;\r\n            }\r\n\r\n            this.processDragAndDropImageComponent(comp);\r\n            this.dragAndDropImageComp!.comp = comp;\r\n        });\r\n    }\r\n\r\n    private processDragAndDropImageComponent(dragAndDropImageComponent: IDragAndDropImageComponent): void {\r\n        const { dragSource, environment } = this;\r\n\r\n        if (!dragSource) {\r\n            return;\r\n        }\r\n        const eGui = dragAndDropImageComponent.getGui();\r\n\r\n        eGui.style.setProperty('position', 'absolute');\r\n        eGui.style.setProperty('z-index', '9999');\r\n\r\n        _stampTopLevelGridCompWithGridInstance(this.gos, eGui);\r\n        environment.applyThemeClasses(eGui);\r\n        dragAndDropImageComponent.setIcon(null, false);\r\n\r\n        let { dragItemName } = dragSource;\r\n\r\n        if (typeof dragItemName === 'function') {\r\n            dragItemName = dragItemName();\r\n        }\r\n\r\n        dragAndDropImageComponent.setLabel(dragItemName || '');\r\n\r\n        eGui.style.top = '20px';\r\n        eGui.style.left = '20px';\r\n\r\n        const targetEl = _getPageBody(this.beans);\r\n\r\n        this.dragAndDropImageParent = targetEl;\r\n\r\n        if (!targetEl) {\r\n            _warn(54);\r\n        } else {\r\n            targetEl.appendChild(eGui);\r\n        }\r\n    }\r\n\r\n    public registerGridDropTarget(elementFn: () => HTMLElement, ctrl: BeanStub): void {\r\n        // this drop target is just used to see if the drop event is inside the grid\r\n        const dropTarget: DropTarget = {\r\n            getContainer: elementFn,\r\n            isInterestedIn: (type) => type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel,\r\n            getIconName: () => 'notAllowed',\r\n        };\r\n        this.addDropTarget(dropTarget);\r\n        ctrl.addDestroyFunc(() => this.removeDropTarget(dropTarget));\r\n    }\r\n}\r\n", "export class AutoScrollService {\r\n    private tickingInterval: number | null = null;\r\n\r\n    private scrollHorizontally: boolean;\r\n    private scrollVertically: boolean;\r\n\r\n    private tickLeft: boolean;\r\n    private tickRight: boolean;\r\n    private tickUp: boolean;\r\n    private tickDown: boolean;\r\n\r\n    private scrollContainer: HTMLElement;\r\n    private scrollByTick: number;\r\n\r\n    private getVerticalPosition: () => number;\r\n    private setVerticalPosition: (position: number) => void;\r\n\r\n    private getHorizontalPosition: () => number;\r\n    private setHorizontalPosition: (position: number) => void;\r\n\r\n    private shouldSkipVerticalScroll: () => boolean;\r\n    private shouldSkipHorizontalScroll: () => boolean;\r\n\r\n    private onScrollCallback: (() => void) | null = null;\r\n\r\n    private tickCount: number;\r\n\r\n    constructor(params: {\r\n        scrollContainer: HTMLElement;\r\n        scrollAxis: 'x' | 'y' | 'xy';\r\n        scrollByTick?: number;\r\n        getVerticalPosition?: () => number;\r\n        setVerticalPosition?: (position: number) => void;\r\n        getHorizontalPosition?: () => number;\r\n        setHorizontalPosition?: (position: number) => void;\r\n        shouldSkipVerticalScroll?: () => boolean;\r\n        shouldSkipHorizontalScroll?: () => boolean;\r\n        onScrollCallback?: () => void;\r\n    }) {\r\n        this.scrollContainer = params.scrollContainer;\r\n        this.scrollHorizontally = params.scrollAxis.indexOf('x') !== -1;\r\n        this.scrollVertically = params.scrollAxis.indexOf('y') !== -1;\r\n\r\n        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;\r\n\r\n        if (params.onScrollCallback) {\r\n            this.onScrollCallback = params.onScrollCallback;\r\n        }\r\n\r\n        if (this.scrollVertically) {\r\n            this.getVerticalPosition = params.getVerticalPosition!;\r\n            this.setVerticalPosition = params.setVerticalPosition!;\r\n        }\r\n\r\n        if (this.scrollHorizontally) {\r\n            this.getHorizontalPosition = params.getHorizontalPosition!;\r\n            this.setHorizontalPosition = params.setHorizontalPosition!;\r\n        }\r\n\r\n        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || (() => false);\r\n        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || (() => false);\r\n    }\r\n\r\n    public check(mouseEvent: MouseEvent, forceSkipVerticalScroll: boolean = false): void {\r\n        const skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();\r\n\r\n        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {\r\n            return;\r\n        }\r\n\r\n        const rect = this.scrollContainer.getBoundingClientRect();\r\n        const scrollTick = this.scrollByTick;\r\n\r\n        this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;\r\n        this.tickRight = mouseEvent.clientX > rect.right - scrollTick;\r\n        this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;\r\n        this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;\r\n\r\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\r\n            this.ensureTickingStarted();\r\n        } else {\r\n            this.ensureCleared();\r\n        }\r\n    }\r\n\r\n    private ensureTickingStarted(): void {\r\n        if (this.tickingInterval === null) {\r\n            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);\r\n            this.tickCount = 0;\r\n        }\r\n    }\r\n\r\n    private doTick(): void {\r\n        this.tickCount++;\r\n\r\n        const tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;\r\n\r\n        if (this.scrollVertically) {\r\n            const vScrollPosition = this.getVerticalPosition();\r\n            if (this.tickUp) {\r\n                this.setVerticalPosition(vScrollPosition - tickAmount);\r\n            }\r\n\r\n            if (this.tickDown) {\r\n                this.setVerticalPosition(vScrollPosition + tickAmount);\r\n            }\r\n        }\r\n\r\n        if (this.scrollHorizontally) {\r\n            const hScrollPosition = this.getHorizontalPosition();\r\n            if (this.tickLeft) {\r\n                this.setHorizontalPosition(hScrollPosition - tickAmount);\r\n            }\r\n\r\n            if (this.tickRight) {\r\n                this.setHorizontalPosition(hScrollPosition + tickAmount);\r\n            }\r\n        }\r\n\r\n        if (this.onScrollCallback) {\r\n            this.onScrollCallback();\r\n        }\r\n    }\r\n\r\n    public ensureCleared(): void {\r\n        if (this.tickingInterval) {\r\n            window.clearInterval(this.tickingInterval);\r\n            this.tickingInterval = null;\r\n        }\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { RowPinnedType } from '../interfaces/iRowNode';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport { _exists } from '../utils/generic';\r\nimport type { AgColumn } from './agColumn';\r\nimport type { RowNode } from './rowNode';\r\n\r\nexport function _createCellId(cellPosition: CellPosition): string {\r\n    const { rowIndex, rowPinned, column } = cellPosition;\r\n    return `${rowIndex}.${rowPinned == null ? 'null' : rowPinned}.${column.getId()}`;\r\n}\r\n\r\nexport function _areCellsEqual(cellA: CellPosition, cellB: CellPosition): boolean {\r\n    const colsMatch = cellA.column === cellB.column;\r\n    const floatingMatch = cellA.rowPinned === cellB.rowPinned;\r\n    const indexMatch = cellA.rowIndex === cellB.rowIndex;\r\n    return colsMatch && floatingMatch && indexMatch;\r\n}\r\n\r\n// tests if this row selection is before the other row selection\r\nexport function _isRowBefore(rowA: RowPosition, rowB: RowPosition): boolean {\r\n    switch (rowA.rowPinned) {\r\n        case 'top':\r\n            // we we are floating top, and other isn't, then we are always before\r\n            if (rowB.rowPinned !== 'top') {\r\n                return true;\r\n            }\r\n            break;\r\n        case 'bottom':\r\n            // if we are floating bottom, and the other isn't, then we are never before\r\n            if (rowB.rowPinned !== 'bottom') {\r\n                return false;\r\n            }\r\n            break;\r\n        default:\r\n            // if we are not floating, but the other one is floating...\r\n            if (_exists(rowB.rowPinned)) {\r\n                return rowB.rowPinned !== 'top';\r\n            }\r\n            break;\r\n    }\r\n    return rowA.rowIndex < rowB.rowIndex;\r\n}\r\n\r\nexport function _isSameRow(rowA: RowPosition | undefined, rowB: RowPosition | undefined): boolean {\r\n    // if both missing\r\n    if (!rowA && !rowB) {\r\n        return true;\r\n    }\r\n    // if only one missing\r\n    if ((rowA && !rowB) || (!rowA && rowB)) {\r\n        return false;\r\n    }\r\n    // otherwise compare (use == to compare rowPinned because it can be null or undefined)\r\n    return rowA!.rowIndex === rowB!.rowIndex && rowA!.rowPinned == rowB!.rowPinned;\r\n}\r\n\r\nexport function _getFirstRow(beans: BeanCollection): RowPosition | null {\r\n    let rowIndex = 0;\r\n    let rowPinned: RowPinnedType;\r\n\r\n    const { pinnedRowModel, rowModel, pageBounds } = beans;\r\n\r\n    if (pinnedRowModel?.getPinnedTopRowCount()) {\r\n        rowPinned = 'top';\r\n    } else if (rowModel.getRowCount()) {\r\n        rowPinned = null;\r\n        rowIndex = pageBounds.getFirstRow();\r\n    } else if (pinnedRowModel?.getPinnedBottomRowCount()) {\r\n        rowPinned = 'bottom';\r\n    }\r\n\r\n    return rowPinned === undefined ? null : { rowIndex, rowPinned };\r\n}\r\n\r\nexport function _getLastRow(beans: BeanCollection): RowPosition | null {\r\n    let rowIndex;\r\n    let rowPinned: RowPinnedType = null;\r\n\r\n    const { pinnedRowModel, pageBounds } = beans;\r\n\r\n    const pinnedBottomCount = pinnedRowModel?.getPinnedBottomRowCount();\r\n    const pinnedTopCount = pinnedRowModel?.getPinnedTopRowCount();\r\n\r\n    if (pinnedBottomCount) {\r\n        rowPinned = 'bottom';\r\n        rowIndex = pinnedBottomCount - 1;\r\n    } else if (beans.rowModel.getRowCount()) {\r\n        rowPinned = null;\r\n        rowIndex = pageBounds.getLastRow();\r\n    } else if (pinnedTopCount) {\r\n        rowPinned = 'top';\r\n        rowIndex = pinnedTopCount - 1;\r\n    }\r\n\r\n    return rowIndex === undefined ? null : { rowIndex, rowPinned };\r\n}\r\n\r\nexport function _getRowNode(beans: BeanCollection, gridRow: RowPosition): RowNode | undefined {\r\n    switch (gridRow.rowPinned) {\r\n        case 'top':\r\n            return beans.pinnedRowModel?.getPinnedTopRow(gridRow.rowIndex);\r\n        case 'bottom':\r\n            return beans.pinnedRowModel?.getPinnedBottomRow(gridRow.rowIndex);\r\n        default:\r\n            return beans.rowModel.getRow(gridRow.rowIndex);\r\n    }\r\n}\r\n\r\nexport function _getCellByPosition(beans: BeanCollection, cellPosition: CellPosition): CellCtrl | null {\r\n    const rowCtrl = beans.rowRenderer.getRowByPosition(cellPosition);\r\n    if (!rowCtrl) {\r\n        return null;\r\n    }\r\n\r\n    return rowCtrl.getCellCtrl(cellPosition.column as AgColumn);\r\n}\r\n", "import { AutoScrollService } from '../autoScrollService';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _getCellByPosition } from '../entities/positionUtils';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type {\r\n    RowDragCancelEvent,\r\n    RowDragEndEvent,\r\n    RowDragEnterEvent,\r\n    RowDragEvent,\r\n    RowDragLeaveEvent,\r\n    RowDragMoveEvent,\r\n} from '../events';\r\nimport { _getNormalisedMousePosition } from '../gridBodyComp/mouseEventUtils';\r\nimport { _getRowIdCallback, _isClientSideRowModel } from '../gridOptionsUtils';\r\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\r\nimport { _last } from '../utils/array';\r\nimport { _warn } from '../validation/logging';\r\nimport type { DragAndDropIcon, DraggingEvent, DropTarget } from './dragAndDropService';\r\nimport { DragSourceType } from './dragAndDropService';\r\n\r\nexport interface RowDropZoneEvents {\r\n    /** Callback function that will be executed when the rowDrag enters the target. */\r\n    onDragEnter?: (params: RowDragEnterEvent) => void;\r\n    /** Callback function that will be executed when the rowDrag leaves the target */\r\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\r\n    /**\r\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\r\n     * Note: this gets called multiple times.\r\n     */\r\n    onDragging?: (params: RowDragMoveEvent) => void;\r\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\r\n    onDragStop?: (params: RowDragEndEvent) => void;\r\n    onDragCancel?: (params: RowDragCancelEvent) => void;\r\n}\r\n\r\n/** We actually have a different interface if we are passing params out of the grid and\r\n * directly into another grid. These internal params just work directly off the DraggingEvent.\r\n * However, we don't want to expose these to the user, so we have a different interface for\r\n * them called RowDropZoneParams which works with RowDragEvents.\r\n */\r\ninterface InternalRowDropZoneEvents {\r\n    /** Callback function that will be executed when the rowDrag enters the target. */\r\n    onDragEnter?: (params: DraggingEvent) => void;\r\n    /** Callback function that will be executed when the rowDrag leaves the target */\r\n    onDragLeave?: (params: DraggingEvent) => void;\r\n    /**\r\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\r\n     * Note: this gets called multiple times.\r\n     */\r\n    onDragging?: (params: DraggingEvent) => void;\r\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\r\n    onDragStop?: (params: DraggingEvent) => void;\r\n    onDragCancel?: (params: DraggingEvent) => void;\r\n}\r\ninterface InternalRowDropZoneParams extends InternalRowDropZoneEvents {\r\n    /** A callback method that returns the DropZone HTMLElement. */\r\n    getContainer: () => HTMLElement;\r\n    /** internal flag for identifying params from the grid. */\r\n    fromGrid?: boolean;\r\n}\r\n\r\nexport interface RowDropZoneParams extends RowDropZoneEvents {\r\n    /** A callback method that returns the DropZone HTMLElement. */\r\n    getContainer: () => HTMLElement;\r\n}\r\n\r\ntype RowDragEventType = 'rowDragEnter' | 'rowDragLeave' | 'rowDragMove' | 'rowDragEnd' | 'rowDragCancel';\r\n\r\nexport class RowDragFeature extends BeanStub implements DropTarget {\r\n    private clientSideRowModel: IClientSideRowModel;\r\n    private eContainer: HTMLElement;\r\n    private lastDraggingEvent: DraggingEvent;\r\n    private autoScrollService: AutoScrollService;\r\n\r\n    constructor(eContainer: HTMLElement) {\r\n        super();\r\n        this.eContainer = eContainer;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const { rowModel, gos, ctrlsSvc } = this.beans;\r\n        if (_isClientSideRowModel(gos, rowModel)) {\r\n            this.clientSideRowModel = rowModel;\r\n        }\r\n\r\n        ctrlsSvc.whenReady(this, (p) => {\r\n            const gridBodyCon = p.gridBodyCtrl;\r\n            this.autoScrollService = new AutoScrollService({\r\n                scrollContainer: gridBodyCon.eBodyViewport,\r\n                scrollAxis: 'y',\r\n                getVerticalPosition: () => gridBodyCon.scrollFeature.getVScrollPosition().top,\r\n                setVerticalPosition: (position) => gridBodyCon.scrollFeature.setVerticalScrollPosition(position),\r\n                onScrollCallback: () => {\r\n                    this.onDragging(this.lastDraggingEvent);\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    public getContainer(): HTMLElement {\r\n        return this.eContainer;\r\n    }\r\n\r\n    public isInterestedIn(type: DragSourceType): boolean {\r\n        return type === DragSourceType.RowDrag;\r\n    }\r\n\r\n    public getIconName(): DragAndDropIcon {\r\n        const managedDrag = this.gos.get('rowDragManaged');\r\n\r\n        if (managedDrag && this.shouldPreventRowMove()) {\r\n            return 'notAllowed';\r\n        }\r\n\r\n        return 'move';\r\n    }\r\n\r\n    public shouldPreventRowMove(): boolean {\r\n        const { rowGroupColsSvc, filterManager, sortSvc } = this.beans;\r\n        const rowGroupCols = rowGroupColsSvc?.columns ?? [];\r\n        if (rowGroupCols.length) {\r\n            return true;\r\n        }\r\n        const isFilterPresent = filterManager?.isAnyFilterPresent();\r\n        if (isFilterPresent) {\r\n            return true;\r\n        }\r\n        const isSortActive = sortSvc?.isSortActive();\r\n        if (isSortActive) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\r\n        if (!this.isFromThisGrid(draggingEvent)) {\r\n            return (draggingEvent.dragItem.rowNodes || []) as RowNode[];\r\n        }\r\n\r\n        const currentNode = draggingEvent.dragItem.rowNode! as RowNode;\r\n        const isRowDragMultiRow = this.gos.get('rowDragMultiRow');\r\n        if (isRowDragMultiRow) {\r\n            const selectedNodes = [...(this.beans.selectionSvc?.getSelectedNodes() ?? [])].sort((a, b) => {\r\n                if (a.rowIndex == null || b.rowIndex == null) {\r\n                    return 0;\r\n                }\r\n\r\n                return this.getRowIndexNumber(a) - this.getRowIndexNumber(b);\r\n            });\r\n            if (selectedNodes.indexOf(currentNode) !== -1) {\r\n                return selectedNodes;\r\n            }\r\n        }\r\n\r\n        return [currentNode];\r\n    }\r\n\r\n    public onDragEnter(draggingEvent: DraggingEvent): void {\r\n        // builds a lits of all rows being dragged before firing events\r\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\r\n\r\n        // when entering, we fire the enter event, then in onEnterOrDragging,\r\n        // we also fire the move event. so we get both events when entering.\r\n        this.dispatchGridEvent('rowDragEnter', draggingEvent);\r\n\r\n        this.getRowNodes(draggingEvent).forEach((rowNode) => {\r\n            this.setRowNodeDragging(rowNode, true);\r\n        });\r\n\r\n        this.onEnterOrDragging(draggingEvent);\r\n    }\r\n\r\n    public onDragging(draggingEvent: DraggingEvent): void {\r\n        this.onEnterOrDragging(draggingEvent);\r\n    }\r\n\r\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\r\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\r\n\r\n        return dragSourceDomDataKey === this.gos.getDomDataKey();\r\n    }\r\n\r\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\r\n        // this event is fired for enter and move\r\n        this.dispatchGridEvent('rowDragMove', draggingEvent);\r\n\r\n        this.lastDraggingEvent = draggingEvent;\r\n\r\n        const pixel = _getNormalisedMousePosition(this.beans, draggingEvent).y;\r\n        const managedDrag = this.gos.get('rowDragManaged');\r\n\r\n        if (managedDrag) {\r\n            this.doManagedDrag(draggingEvent, pixel);\r\n        }\r\n\r\n        this.autoScrollService.check(draggingEvent.event);\r\n    }\r\n\r\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\r\n        const { dragAndDrop, gos } = this.beans;\r\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\r\n        const managedDrag = gos.get('rowDragManaged');\r\n        const rowNodes = draggingEvent.dragItem.rowNodes! as RowNode[];\r\n\r\n        if (managedDrag && this.shouldPreventRowMove()) {\r\n            return;\r\n        }\r\n\r\n        if (gos.get('suppressMoveWhenRowDragging') || !isFromThisGrid) {\r\n            if (dragAndDrop!.isDropZoneWithinThisGrid(draggingEvent)) {\r\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\r\n            }\r\n        } else {\r\n            this.moveRows(rowNodes, pixel);\r\n        }\r\n    }\r\n\r\n    private getRowIndexNumber(rowNode: RowNode): number {\r\n        const rowIndexStr = rowNode.getRowIndexString()!;\r\n\r\n        return parseInt(_last(rowIndexStr.split('-')), 10);\r\n    }\r\n\r\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\r\n        const clientSideRowModel = this.clientSideRowModel;\r\n        const lastHighlightedRowNode = clientSideRowModel.getLastHighlightedRowNode();\r\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === 'Below';\r\n        const pixel = _getNormalisedMousePosition(this.beans, draggingEvent).y;\r\n        const rowNodes = draggingEvent.dragItem.rowNodes as RowNode[];\r\n\r\n        let increment = isBelow ? 1 : 0;\r\n\r\n        if (this.isFromThisGrid(draggingEvent)) {\r\n            rowNodes!.forEach((rowNode) => {\r\n                if (rowNode.rowTop! < pixel) {\r\n                    increment -= 1;\r\n                }\r\n            });\r\n            this.moveRows(rowNodes!, pixel, increment);\r\n        } else {\r\n            const getRowIdFunc = _getRowIdCallback(this.gos);\r\n\r\n            let addIndex = clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\r\n\r\n            if (clientSideRowModel.getHighlightPosition(pixel) === 'Above') {\r\n                addIndex--;\r\n            }\r\n\r\n            clientSideRowModel.updateRowData({\r\n                add: rowNodes!\r\n                    .filter(\r\n                        (node) =>\r\n                            !clientSideRowModel.getRowNode(\r\n                                getRowIdFunc?.({ data: node.data, level: 0, rowPinned: node.rowPinned }) ?? node.data.id\r\n                            )\r\n                    )\r\n                    .map((node) => node.data),\r\n                addIndex,\r\n            });\r\n        }\r\n\r\n        this.clearRowHighlight();\r\n    }\r\n\r\n    private clearRowHighlight(): void {\r\n        this.clientSideRowModel.highlightRowAtPixel(null);\r\n    }\r\n\r\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\r\n        const focusSvc = this.beans.focusSvc;\r\n        // Get the focussed cell so we can ensure it remains focussed after the move\r\n        const cellPosition = focusSvc.getFocusedCell();\r\n        const cellCtrl = cellPosition && _getCellByPosition(this.beans, cellPosition);\r\n\r\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\r\n        if (rowWasMoved) {\r\n            if (cellCtrl) {\r\n                cellCtrl.focusCell();\r\n            } else {\r\n                focusSvc.clearFocusedCell();\r\n            }\r\n        }\r\n    }\r\n\r\n    public addRowDropZone(params: RowDropZoneParams & { fromGrid?: boolean }): void {\r\n        if (!params.getContainer()) {\r\n            _warn(55);\r\n            return;\r\n        }\r\n\r\n        const dragAndDrop = this.beans.dragAndDrop!;\r\n        if (dragAndDrop.findExternalZone(params)) {\r\n            _warn(56);\r\n            return;\r\n        }\r\n\r\n        let processedParams: RowDropZoneParams = {\r\n            getContainer: params.getContainer,\r\n        };\r\n\r\n        if (params.fromGrid) {\r\n            processedParams = params;\r\n        } else {\r\n            if (params.onDragEnter) {\r\n                processedParams.onDragEnter = (e) => {\r\n                    params.onDragEnter!(this.draggingToRowDragEvent('rowDragEnter', e as any));\r\n                };\r\n            }\r\n            if (params.onDragLeave) {\r\n                processedParams.onDragLeave = (e) => {\r\n                    params.onDragLeave!(this.draggingToRowDragEvent('rowDragLeave', e as any));\r\n                };\r\n            }\r\n            if (params.onDragging) {\r\n                processedParams.onDragging = (e) => {\r\n                    params.onDragging!(this.draggingToRowDragEvent('rowDragMove', e as any));\r\n                };\r\n            }\r\n            if (params.onDragStop) {\r\n                processedParams.onDragStop = (e) => {\r\n                    params.onDragStop!(this.draggingToRowDragEvent('rowDragEnd', e as any));\r\n                };\r\n            }\r\n            if (params.onDragCancel) {\r\n                processedParams.onDragCancel = (e) => {\r\n                    params.onDragCancel!(this.draggingToRowDragEvent('rowDragCancel', e as any));\r\n                };\r\n            }\r\n        }\r\n\r\n        const dropTarget: DropTarget = {\r\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\r\n            getIconName: () => 'move',\r\n            external: true,\r\n            ...(processedParams as any),\r\n        };\r\n        dragAndDrop.addDropTarget(dropTarget);\r\n        this.addDestroyFunc(() => dragAndDrop.removeDropTarget(dropTarget));\r\n    }\r\n\r\n    public getRowDropZone(events?: RowDropZoneEvents): RowDropZoneParams {\r\n        const getContainer = this.getContainer.bind(this);\r\n        const onDragEnter = this.onDragEnter.bind(this);\r\n        const onDragLeave = this.onDragLeave.bind(this);\r\n        const onDragging = this.onDragging.bind(this);\r\n        const onDragStop = this.onDragStop.bind(this);\r\n        const onDragCancel = this.onDragCancel.bind(this);\r\n\r\n        let params: InternalRowDropZoneParams;\r\n        if (!events) {\r\n            params = {\r\n                getContainer,\r\n                onDragEnter,\r\n                onDragLeave,\r\n                onDragging,\r\n                onDragStop,\r\n                onDragCancel,\r\n                /* @private */ fromGrid: true,\r\n            };\r\n        } else {\r\n            params = {\r\n                getContainer,\r\n                onDragEnter: events.onDragEnter\r\n                    ? (e) => {\r\n                          onDragEnter(e);\r\n                          events.onDragEnter!(this.draggingToRowDragEvent('rowDragEnter', e));\r\n                      }\r\n                    : onDragEnter,\r\n                onDragLeave: events.onDragLeave\r\n                    ? (e) => {\r\n                          onDragLeave(e);\r\n                          events.onDragLeave!(this.draggingToRowDragEvent('rowDragLeave', e));\r\n                      }\r\n                    : onDragLeave,\r\n                onDragging: events.onDragging\r\n                    ? (e) => {\r\n                          onDragging(e);\r\n                          events.onDragging!(this.draggingToRowDragEvent('rowDragMove', e));\r\n                      }\r\n                    : onDragging,\r\n                onDragStop: events.onDragStop\r\n                    ? (e) => {\r\n                          onDragStop(e);\r\n                          events.onDragStop!(this.draggingToRowDragEvent('rowDragEnd', e));\r\n                      }\r\n                    : onDragStop,\r\n                onDragCancel: events.onDragCancel\r\n                    ? (e) => {\r\n                          onDragCancel(e);\r\n                          events.onDragCancel!(this.draggingToRowDragEvent('rowDragCancel', e));\r\n                      }\r\n                    : onDragCancel,\r\n                fromGrid: true /* @private */,\r\n            };\r\n        }\r\n        // Cast to RowDropZoneParams to hide the internal properties\r\n        return params as RowDropZoneParams;\r\n    }\r\n\r\n    private draggingToRowDragEvent<T extends RowDragEventType>(type: T, draggingEvent: DraggingEvent): RowDragEvent<T> {\r\n        const beans = this.beans;\r\n        const { pageBounds, rowModel, gos } = beans;\r\n        const yNormalised = _getNormalisedMousePosition(beans, draggingEvent).y;\r\n        const mouseIsPastLastRow = yNormalised > pageBounds.getCurrentPageHeight();\r\n\r\n        let overIndex = -1;\r\n        let overNode: RowNode | undefined;\r\n\r\n        if (!mouseIsPastLastRow) {\r\n            overIndex = rowModel.getRowIndexAtPixel(yNormalised);\r\n            overNode = rowModel.getRow(overIndex);\r\n        }\r\n\r\n        const event: RowDragEvent<T> = gos.addGridCommonParams({\r\n            type: type,\r\n            event: draggingEvent.event,\r\n            node: draggingEvent.dragItem.rowNode!,\r\n            nodes: draggingEvent.dragItem.rowNodes!,\r\n            overIndex: overIndex,\r\n            overNode: overNode,\r\n            y: yNormalised,\r\n            vDirection: draggingEvent.vDirection,\r\n        });\r\n\r\n        return event;\r\n    }\r\n\r\n    private dispatchGridEvent(type: RowDragEventType, draggingEvent: DraggingEvent): void {\r\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\r\n\r\n        this.eventSvc.dispatchEvent(event);\r\n    }\r\n\r\n    public onDragLeave(draggingEvent: DraggingEvent): void {\r\n        this.dispatchGridEvent('rowDragLeave', draggingEvent);\r\n        this.stopDragging(draggingEvent);\r\n\r\n        if (this.gos.get('rowDragManaged')) {\r\n            this.clearRowHighlight();\r\n        }\r\n    }\r\n\r\n    public onDragStop(draggingEvent: DraggingEvent): void {\r\n        this.dispatchGridEvent('rowDragEnd', draggingEvent);\r\n        this.stopDragging(draggingEvent);\r\n        const { dragAndDrop, gos } = this.beans;\r\n\r\n        if (\r\n            gos.get('rowDragManaged') &&\r\n            (gos.get('suppressMoveWhenRowDragging') || !this.isFromThisGrid(draggingEvent)) &&\r\n            dragAndDrop!.isDropZoneWithinThisGrid(draggingEvent)\r\n        ) {\r\n            this.moveRowAndClearHighlight(draggingEvent);\r\n        }\r\n    }\r\n\r\n    public onDragCancel(draggingEvent: DraggingEvent): void {\r\n        this.dispatchGridEvent('rowDragCancel', draggingEvent);\r\n        this.stopDragging(draggingEvent);\r\n        const { dragAndDrop, gos } = this.beans;\r\n\r\n        if (\r\n            gos.get('rowDragManaged') &&\r\n            (gos.get('suppressMoveWhenRowDragging') || !this.isFromThisGrid(draggingEvent)) &&\r\n            dragAndDrop!.isDropZoneWithinThisGrid(draggingEvent)\r\n        ) {\r\n            this.clearRowHighlight();\r\n        }\r\n    }\r\n\r\n    private stopDragging(draggingEvent: DraggingEvent): void {\r\n        this.autoScrollService.ensureCleared();\r\n\r\n        this.getRowNodes(draggingEvent).forEach((rowNode) => {\r\n            this.setRowNodeDragging(rowNode, false);\r\n        });\r\n    }\r\n\r\n    private setRowNodeDragging(rowNode: RowNode, dragging: boolean): void {\r\n        if (rowNode.dragging !== dragging) {\r\n            rowNode.dragging = dragging;\r\n            rowNode.dispatchRowEvent('draggingChanged');\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\r\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\r\n * @param {MouseEvent | TouchEvent} e1\r\n * @param {MouseEvent | TouchEvent} e2\r\n * @param {number} pixelCount\r\n * @returns {boolean}\r\n */\r\nexport function _areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean {\r\n    // by default, we wait 4 pixels before starting the drag\r\n    if (pixelCount === 0) {\r\n        return false;\r\n    }\r\n\r\n    const diffX = Math.abs(e1.clientX - e2.clientX);\r\n    const diffY = Math.abs(e1.clientY - e2.clientY);\r\n\r\n    return Math.max(diffX, diffY) <= pixelCount;\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _isEventFromThisGrid } from '../gridBodyComp/mouseEventUtils';\r\nimport { _getDocument, _getRootNode } from '../gridOptionsUtils';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport { _isBrowserSafari } from '../utils/browser';\r\nimport { _isFocusableFormField } from '../utils/dom';\r\nimport { _exists } from '../utils/generic';\r\nimport { _areEventsNear } from '../utils/mouse';\r\n\r\n/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,\r\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\r\nexport class DragService extends BeanStub implements NamedBean {\r\n    beanName = 'dragSvc' as const;\r\n\r\n    private currentDragParams: DragListenerParams | null;\r\n    public dragging: boolean;\r\n    public startTarget: EventTarget | null;\r\n    private mouseStartEvent: MouseEvent | null;\r\n    private touchLastTime: Touch | null;\r\n    private touchStart: Touch | null;\r\n\r\n    private dragEndFunctions: ((...args: any[]) => any)[] = [];\r\n\r\n    private readonly dragSources: DragSourceAndListener[] = [];\r\n\r\n    public override destroy(): void {\r\n        const { dragSources } = this;\r\n        dragSources.forEach(this.removeListener.bind(this));\r\n        dragSources.length = 0;\r\n        super.destroy();\r\n    }\r\n\r\n    private removeListener(dragSourceAndListener: DragSourceAndListener): void {\r\n        const element = dragSourceAndListener.dragSource.eElement;\r\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\r\n        element.removeEventListener('mousedown', mouseDownListener);\r\n\r\n        // remove touch listener only if it exists\r\n        if (dragSourceAndListener.touchEnabled) {\r\n            const touchStartListener = dragSourceAndListener.touchStartListener;\r\n            element.removeEventListener('touchstart', touchStartListener!, { passive: true } as any);\r\n        }\r\n    }\r\n\r\n    public removeDragSource(params: DragListenerParams): void {\r\n        const { dragSources } = this;\r\n        const dragSourceAndListener = dragSources.find((item) => item.dragSource === params);\r\n\r\n        if (!dragSourceAndListener) {\r\n            return;\r\n        }\r\n\r\n        this.removeListener(dragSourceAndListener);\r\n        _removeFromArray(dragSources, dragSourceAndListener);\r\n    }\r\n\r\n    public addDragSource(params: DragListenerParams): void {\r\n        const mouseListener = this.onMouseDown.bind(this, params);\r\n        const { eElement, includeTouch, stopPropagationForTouch } = params;\r\n\r\n        eElement.addEventListener('mousedown', mouseListener);\r\n\r\n        let touchListener: ((touchEvent: TouchEvent) => void) | null = null;\r\n\r\n        const suppressTouch = this.gos.get('suppressTouch');\r\n\r\n        if (includeTouch && !suppressTouch) {\r\n            touchListener = (touchEvent: TouchEvent) => {\r\n                if (_isFocusableFormField(touchEvent.target as HTMLElement)) {\r\n                    return;\r\n                }\r\n                if (stopPropagationForTouch) {\r\n                    touchEvent.stopPropagation();\r\n                }\r\n                this.onTouchStart(params, touchEvent);\r\n            };\r\n            // we set passive=false, as we want to prevent default on this event\r\n            eElement.addEventListener('touchstart', touchListener, { passive: false });\r\n        }\r\n\r\n        this.dragSources.push({\r\n            dragSource: params,\r\n            mouseDownListener: mouseListener,\r\n            touchStartListener: touchListener,\r\n            touchEnabled: !!includeTouch,\r\n        });\r\n    }\r\n\r\n    // gets called whenever mouse down on any drag source\r\n    private onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void {\r\n        this.currentDragParams = params;\r\n        this.dragging = false;\r\n\r\n        const touch = touchEvent.touches[0];\r\n\r\n        this.touchLastTime = touch;\r\n        this.touchStart = touch;\r\n\r\n        const touchMoveEvent = (e: TouchEvent) => this.onTouchMove(e, params.eElement);\r\n        const touchEndEvent = (e: TouchEvent) => this.onTouchUp(e, params.eElement);\r\n        const documentTouchMove = (e: TouchEvent) => {\r\n            if (e.cancelable) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n        const target = touchEvent.target as Document | ShadowRoot | EventTarget;\r\n        const events = [\r\n            // Prevents the page document from moving while we are dragging items around.\r\n            // preventDefault needs to be called in the touchmove listener and never inside the\r\n            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.\r\n            {\r\n                target: _getRootNode(this.beans),\r\n                type: 'touchmove',\r\n                listener: documentTouchMove,\r\n                options: { passive: false },\r\n            },\r\n            { target, type: 'touchmove', listener: touchMoveEvent, options: { passive: true } },\r\n            { target, type: 'touchend', listener: touchEndEvent, options: { passive: true } },\r\n            { target, type: 'touchcancel', listener: touchEndEvent, options: { passive: true } },\r\n        ];\r\n        // temporally add these listeners, for the duration of the drag\r\n        this.addTemporaryEvents(events);\r\n\r\n        // see if we want to start dragging straight away\r\n        if (params.dragStartPixels === 0) {\r\n            this.onCommonMove(touch, this.touchStart, params.eElement);\r\n        }\r\n    }\r\n\r\n    // gets called whenever mouse down on any drag source\r\n    private onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void {\r\n        const e = mouseEvent as any;\r\n\r\n        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        // if there are two elements with parent / child relationship, and both are draggable,\r\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\r\n        // and range selection - row moving should get preference when use drags the rowDrag component.\r\n        if (e._alreadyProcessedByDragService) {\r\n            return;\r\n        }\r\n\r\n        e._alreadyProcessedByDragService = true;\r\n\r\n        // only interested in left button clicks\r\n        if (mouseEvent.button !== 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\r\n            mouseEvent.preventDefault();\r\n        }\r\n\r\n        this.currentDragParams = params;\r\n        this.dragging = false;\r\n\r\n        this.mouseStartEvent = mouseEvent;\r\n        this.startTarget = mouseEvent.target;\r\n\r\n        const mouseMoveEvent = (event: MouseEvent) => this.onMouseMove(event, params.eElement);\r\n        const mouseUpEvent = (event: MouseEvent) => this.onMouseUp(event, params.eElement);\r\n        const contextEvent = (event: MouseEvent) => event.preventDefault();\r\n        const keydownEvent = (event: KeyboardEvent) => {\r\n            if (event.key === KeyCode.ESCAPE) {\r\n                this.cancelDrag(params.eElement);\r\n            }\r\n        };\r\n\r\n        const target = _getRootNode(this.beans);\r\n        const events = [\r\n            { target, type: 'mousemove', listener: mouseMoveEvent },\r\n            { target, type: 'mouseup', listener: mouseUpEvent },\r\n            { target, type: 'contextmenu', listener: contextEvent },\r\n            { target, type: 'keydown', listener: keydownEvent },\r\n        ];\r\n        // temporally add these listeners, for the duration of the drag\r\n        this.addTemporaryEvents(events);\r\n\r\n        //see if we want to start dragging straight away\r\n        if (params.dragStartPixels === 0) {\r\n            this.onMouseMove(mouseEvent, params.eElement);\r\n        }\r\n    }\r\n\r\n    private addTemporaryEvents(\r\n        events: {\r\n            target: Document | ShadowRoot | EventTarget;\r\n            type: string;\r\n            listener: (e: MouseEvent | TouchEvent | KeyboardEvent, el: HTMLElement) => void;\r\n            options?: any;\r\n        }[]\r\n    ): void {\r\n        events.forEach((currentEvent) => {\r\n            const { target, type, listener, options } = currentEvent;\r\n            target.addEventListener(type, listener as any, options);\r\n        });\r\n\r\n        this.dragEndFunctions.push(() => {\r\n            events.forEach((currentEvent) => {\r\n                const { target, type, listener, options } = currentEvent;\r\n                target.removeEventListener(type, listener as any, options);\r\n            });\r\n        });\r\n    }\r\n\r\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\r\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\r\n    private isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean {\r\n        // by default, we wait 4 pixels before starting the drag\r\n        const { dragStartPixels } = this.currentDragParams!;\r\n        const requiredPixelDiff = _exists(dragStartPixels) ? dragStartPixels : 4;\r\n        return _areEventsNear(currentEvent, startEvent, requiredPixelDiff);\r\n    }\r\n\r\n    private getFirstActiveTouch(touchList: TouchList): Touch | null {\r\n        for (let i = 0; i < touchList.length; i++) {\r\n            if (touchList[i].identifier === this.touchStart!.identifier) {\r\n                return touchList[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch, el: Element): void {\r\n        if (!this.dragging) {\r\n            // if mouse hasn't travelled from the start position enough, do nothing\r\n            if (this.isEventNearStartEvent(currentEvent, startEvent)) {\r\n                return;\r\n            }\r\n\r\n            this.dragging = true;\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'dragStarted',\r\n                target: el,\r\n            });\r\n\r\n            this.currentDragParams!.onDragStart(startEvent);\r\n            // we need ONE drag action at the startEvent, so that we are guaranteed the drop target\r\n            // at the start gets notified. this is because the drag can start outside of the element\r\n            // that started it, as the mouse is allowed drag away from the mouse down before it's\r\n            // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then\r\n            // it would be possible to click a column by the edge, then drag outside of the drop zone\r\n            // in less than 4 pixels and the drag officially starts outside of the header but the header\r\n            // wouldn't be notified of the dragging.\r\n\r\n            // if currentDragParams is null here, it means that drag has been cancelled.\r\n            if (!this.currentDragParams) {\r\n                this.dragging = false;\r\n                return;\r\n            }\r\n\r\n            this.currentDragParams.onDragging(startEvent);\r\n        }\r\n\r\n        this.currentDragParams?.onDragging(currentEvent);\r\n    }\r\n\r\n    private onTouchMove(touchEvent: TouchEvent, el: Element): void {\r\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\r\n        if (!touch) {\r\n            return;\r\n        }\r\n\r\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\r\n        this.onCommonMove(touch, this.touchStart!, el);\r\n    }\r\n\r\n    // only gets called after a mouse down - as this is only added after mouseDown\r\n    // and is removed when mouseUp happens\r\n    private onMouseMove(mouseEvent: MouseEvent, el: Element): void {\r\n        if (_isBrowserSafari()) {\r\n            const eDocument = _getDocument(this.beans);\r\n            eDocument.getSelection()?.removeAllRanges();\r\n        }\r\n\r\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\r\n            mouseEvent.preventDefault();\r\n        }\r\n\r\n        this.onCommonMove(mouseEvent, this.mouseStartEvent!, el);\r\n    }\r\n\r\n    private shouldPreventMouseEvent(mouseEvent: MouseEvent): boolean {\r\n        const { gos } = this;\r\n        const isEnableCellTextSelect = gos.get('enableCellTextSelection');\r\n        const isMouseMove = mouseEvent.type === 'mousemove';\r\n        const isOverFormFieldElement = (mouseEvent: MouseEvent) => {\r\n            const el = mouseEvent.target as HTMLElement | null;\r\n            const tagName = el?.tagName.toLocaleLowerCase();\r\n\r\n            return !!tagName?.match('^a$|textarea|input|select|button');\r\n        };\r\n\r\n        return (\r\n            // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove\r\n            // to avoid the grid text being selected while dragging components.\r\n            isEnableCellTextSelect &&\r\n            isMouseMove &&\r\n            mouseEvent.cancelable &&\r\n            _isEventFromThisGrid(gos, mouseEvent) &&\r\n            !isOverFormFieldElement(mouseEvent)\r\n        );\r\n    }\r\n\r\n    public onTouchUp(touchEvent: TouchEvent, el: Element): void {\r\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\r\n\r\n        // i haven't worked this out yet, but there is no matching touch\r\n        // when we get the touch up event. to get around this, we swap in\r\n        // the last touch. this is a hack to 'get it working' while we\r\n        // figure out what's going on, why we are not getting a touch in\r\n        // current event.\r\n        if (!touch) {\r\n            touch = this.touchLastTime;\r\n        }\r\n\r\n        // if mouse was left up before we started to move, then this is a tap.\r\n        // we check this before onUpCommon as onUpCommon resets the dragging\r\n        // let tap = !this.dragging;\r\n        // let tapTarget = this.currentDragParams.eElement;\r\n\r\n        this.onUpCommon(touch!, el);\r\n\r\n        // if tap, tell user\r\n        // console.log(`${Math.random()} tap = ${tap}`);\r\n        // if (tap) {\r\n        //     tapTarget.click();\r\n        // }\r\n    }\r\n\r\n    public onMouseUp(mouseEvent: MouseEvent, el: Element): void {\r\n        this.onUpCommon(mouseEvent, el);\r\n    }\r\n\r\n    public onUpCommon(eventOrTouch: MouseEvent | Touch, el: Element): void {\r\n        if (this.dragging) {\r\n            this.dragging = false;\r\n            this.currentDragParams!.onDragStop(eventOrTouch);\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'dragStopped',\r\n                target: el,\r\n            });\r\n        }\r\n        this.resetDragProperties();\r\n    }\r\n\r\n    public cancelDrag(el: Element): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'dragCancelled',\r\n            target: el,\r\n        });\r\n\r\n        this.currentDragParams?.onDragCancel?.();\r\n        this.resetDragProperties();\r\n    }\r\n\r\n    private resetDragProperties(): void {\r\n        this.mouseStartEvent = null;\r\n        this.startTarget = null;\r\n        this.touchStart = null;\r\n        this.touchLastTime = null;\r\n        this.currentDragParams = null;\r\n\r\n        const { dragEndFunctions } = this;\r\n        dragEndFunctions.forEach((func) => func());\r\n        dragEndFunctions.length = 0;\r\n    }\r\n}\r\n\r\ninterface DragSourceAndListener {\r\n    dragSource: DragListenerParams;\r\n    mouseDownListener: (mouseEvent: MouseEvent) => void;\r\n    touchEnabled: boolean;\r\n    touchStartListener: ((touchEvent: TouchEvent) => void) | null;\r\n}\r\n\r\nexport interface DragListenerParams {\r\n    /** After how many pixels of dragging should the drag operation start. Default is 4px. */\r\n    dragStartPixels?: number;\r\n    /** Dom element to add the drag handling to */\r\n    eElement: Element;\r\n    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */\r\n    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;\r\n    /** Callback for drag starting */\r\n    onDragStart: (mouseEvent: MouseEvent | Touch) => void;\r\n    /** Callback for drag stopping */\r\n    onDragStop: (mouseEvent: MouseEvent | Touch) => void;\r\n    /** Callback for drag cancel */\r\n    onDragCancel?: () => void;\r\n    /** Callback for mouse move while dragging */\r\n    onDragging: (mouseEvent: MouseEvent | Touch) => void;\r\n    /** Include touch events for this Drag Listener */\r\n    includeTouch?: boolean;\r\n    /** If `true`, it will stop the propagation of Touch Events */\r\n    stopPropagationForTouch?: boolean;\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type {\r\n    AgColumnGroupEvent,\r\n    Column,\r\n    ColumnGroup,\r\n    ColumnGroupShowType,\r\n    ColumnPinnedType,\r\n    HeaderColumnId,\r\n} from '../interfaces/iColumn';\r\nimport { _last } from '../utils/array';\r\nimport type { AgColumn } from './agColumn';\r\nimport { isColumn } from './agColumn';\r\nimport type { AgProvidedColumnGroup } from './agProvidedColumnGroup';\r\nimport type { AbstractColDef, ColGroupDef } from './colDef';\r\n\r\nexport function createUniqueColumnGroupId(groupId: string, instanceId: number): HeaderColumnId {\r\n    return (groupId + '_' + instanceId) as HeaderColumnId;\r\n}\r\n\r\nexport function isColumnGroup(col: Column | ColumnGroup | string): col is AgColumnGroup {\r\n    return col instanceof AgColumnGroup;\r\n}\r\n\r\nexport class AgColumnGroup<TValue = any> extends BeanStub<AgColumnGroupEvent> implements ColumnGroup<TValue> {\r\n    public readonly isColumn = false as const;\r\n\r\n    // all the children of this group, regardless of whether they are opened or closed\r\n    private children: (AgColumn | AgColumnGroup)[] | null;\r\n    // depends on the open/closed state of the group, only displaying columns are stored here\r\n    private displayedChildren: (AgColumn | AgColumnGroup)[] | null = [];\r\n\r\n    // The measured height of this column's header when autoHeaderHeight is enabled\r\n    private autoHeaderHeight: number | null = null;\r\n\r\n    // private moving = false\r\n    private left: number | null;\r\n    private oldLeft: number | null;\r\n\r\n    public parent: AgColumnGroup | null = null;\r\n\r\n    constructor(\r\n        private readonly providedColumnGroup: AgProvidedColumnGroup,\r\n        private readonly groupId: string,\r\n        private readonly partId: number,\r\n        private readonly pinned: ColumnPinnedType\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    // as the user is adding and removing columns, the groups are recalculated.\r\n    // this reset clears out all children, ready for children to be added again\r\n    public reset(): void {\r\n        this.parent = null;\r\n        this.children = null;\r\n        this.displayedChildren = null;\r\n    }\r\n\r\n    public getParent(): AgColumnGroup | null {\r\n        return this.parent;\r\n    }\r\n\r\n    public getUniqueId(): HeaderColumnId {\r\n        return createUniqueColumnGroupId(this.groupId, this.partId);\r\n    }\r\n\r\n    public isEmptyGroup(): boolean {\r\n        return this.displayedChildren!.length === 0;\r\n    }\r\n\r\n    public isMoving(): boolean {\r\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\r\n        if (!allLeafColumns || allLeafColumns.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        return allLeafColumns.every((col) => col.isMoving());\r\n    }\r\n\r\n    public checkLeft(): void {\r\n        // first get all children to setLeft, as it impacts our decision below\r\n        this.displayedChildren!.forEach((child) => {\r\n            if (isColumnGroup(child)) {\r\n                child.checkLeft();\r\n            }\r\n        });\r\n\r\n        // set our left based on first displayed column\r\n        if (this.displayedChildren!.length > 0) {\r\n            if (this.gos.get('enableRtl')) {\r\n                const lastChild = _last(this.displayedChildren!);\r\n                const lastChildLeft = lastChild.getLeft();\r\n                this.setLeft(lastChildLeft);\r\n            } else {\r\n                const firstChildLeft = this.displayedChildren![0].getLeft();\r\n                this.setLeft(firstChildLeft);\r\n            }\r\n        } else {\r\n            // this should never happen, as if we have no displayed columns, then\r\n            // this groups should not even exist.\r\n            this.setLeft(null);\r\n        }\r\n    }\r\n\r\n    public getLeft(): number | null {\r\n        return this.left;\r\n    }\r\n\r\n    public getOldLeft(): number | null {\r\n        return this.oldLeft;\r\n    }\r\n\r\n    public setLeft(left: number | null) {\r\n        this.oldLeft = this.left;\r\n        if (this.left !== left) {\r\n            this.left = left;\r\n            this.dispatchLocalEvent({ type: 'leftChanged' });\r\n        }\r\n    }\r\n\r\n    public getPinned(): ColumnPinnedType {\r\n        return this.pinned;\r\n    }\r\n\r\n    public getGroupId(): string {\r\n        return this.groupId;\r\n    }\r\n\r\n    public getPartId(): number {\r\n        return this.partId;\r\n    }\r\n\r\n    public getActualWidth(): number {\r\n        let groupActualWidth = 0;\r\n        this.displayedChildren?.forEach((child) => {\r\n            groupActualWidth += child.getActualWidth();\r\n        });\r\n        return groupActualWidth;\r\n    }\r\n\r\n    public isResizable(): boolean {\r\n        if (!this.displayedChildren) {\r\n            return false;\r\n        }\r\n\r\n        // if at least one child is resizable, then the group is resizable\r\n        let result = false;\r\n        this.displayedChildren.forEach((child) => {\r\n            if (child.isResizable()) {\r\n                result = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public getMinWidth(): number {\r\n        let result = 0;\r\n        this.displayedChildren!.forEach((groupChild) => {\r\n            result += groupChild.getMinWidth();\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public addChild(child: AgColumn | AgColumnGroup): void {\r\n        if (!this.children) {\r\n            this.children = [];\r\n        }\r\n        this.children.push(child);\r\n    }\r\n\r\n    public getDisplayedChildren(): (AgColumn | AgColumnGroup)[] | null {\r\n        return this.displayedChildren;\r\n    }\r\n\r\n    public getLeafColumns(): AgColumn[] {\r\n        const result: AgColumn[] = [];\r\n        this.addLeafColumns(result);\r\n        return result;\r\n    }\r\n\r\n    public getDisplayedLeafColumns(): AgColumn[] {\r\n        const result: AgColumn[] = [];\r\n        this.addDisplayedLeafColumns(result);\r\n        return result;\r\n    }\r\n\r\n    public getDefinition(): AbstractColDef | null {\r\n        return this.providedColumnGroup.getColGroupDef();\r\n    }\r\n\r\n    public getColGroupDef(): ColGroupDef | null {\r\n        return this.providedColumnGroup.getColGroupDef();\r\n    }\r\n\r\n    public isPadding(): boolean {\r\n        return this.providedColumnGroup.isPadding();\r\n    }\r\n\r\n    public isExpandable(): boolean {\r\n        return this.providedColumnGroup.isExpandable();\r\n    }\r\n\r\n    public isExpanded(): boolean {\r\n        return this.providedColumnGroup.isExpanded();\r\n    }\r\n\r\n    public setExpanded(expanded: boolean): void {\r\n        this.providedColumnGroup.setExpanded(expanded);\r\n    }\r\n\r\n    public isAutoHeaderHeight(): boolean {\r\n        return !!this.getColGroupDef()?.autoHeaderHeight;\r\n    }\r\n\r\n    public getAutoHeaderHeight(): number | null {\r\n        return this.autoHeaderHeight;\r\n    }\r\n\r\n    /** Returns true if the header height has changed */\r\n    public setAutoHeaderHeight(height: number): boolean {\r\n        const changed = height !== this.autoHeaderHeight;\r\n        this.autoHeaderHeight = height;\r\n        return changed;\r\n    }\r\n\r\n    private addDisplayedLeafColumns(leafColumns: AgColumn[]): void {\r\n        this.displayedChildren!.forEach((child) => {\r\n            if (isColumn(child)) {\r\n                leafColumns.push(child);\r\n            } else if (isColumnGroup(child)) {\r\n                child.addDisplayedLeafColumns(leafColumns);\r\n            }\r\n        });\r\n    }\r\n\r\n    private addLeafColumns(leafColumns: AgColumn[]): void {\r\n        this.children!.forEach((child) => {\r\n            if (isColumn(child)) {\r\n                leafColumns.push(child);\r\n            } else if (isColumnGroup(child)) {\r\n                child.addLeafColumns(leafColumns);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getChildren(): (AgColumn | AgColumnGroup)[] | null {\r\n        return this.children;\r\n    }\r\n\r\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\r\n        return this.providedColumnGroup.getColumnGroupShow();\r\n    }\r\n\r\n    public getProvidedColumnGroup(): AgProvidedColumnGroup {\r\n        return this.providedColumnGroup;\r\n    }\r\n\r\n    public getPaddingLevel(): number {\r\n        const parent = this.getParent();\r\n\r\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + parent.getPaddingLevel();\r\n    }\r\n\r\n    public calculateDisplayedColumns() {\r\n        // clear out last time we calculated\r\n        this.displayedChildren = [];\r\n\r\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\r\n        // groups, where the expandable is actually the first parent that is not a padding group.\r\n        let parentWithExpansion: AgColumnGroup | null = this;\r\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\r\n            parentWithExpansion = parentWithExpansion.getParent();\r\n        }\r\n\r\n        const isExpandable = parentWithExpansion ? parentWithExpansion.getProvidedColumnGroup().isExpandable() : false;\r\n        // it not expandable, everything is visible\r\n        if (!isExpandable) {\r\n            this.displayedChildren = this.children;\r\n            this.dispatchLocalEvent({ type: 'displayedChildrenChanged' });\r\n            return;\r\n        }\r\n\r\n        // Add cols based on columnGroupShow\r\n        // Note - the below also adds padding groups, these are always added because they never have\r\n        // colDef.columnGroupShow set.\r\n        this.children!.forEach((child) => {\r\n            // never add empty groups\r\n            const emptyGroup = isColumnGroup(child) && (!child.displayedChildren || !child.displayedChildren.length);\r\n            if (emptyGroup) {\r\n                return;\r\n            }\r\n\r\n            const headerGroupShow = child.getColumnGroupShow();\r\n            switch (headerGroupShow) {\r\n                case 'open':\r\n                    // when set to open, only show col if group is open\r\n                    if (parentWithExpansion!.getProvidedColumnGroup().isExpanded()) {\r\n                        this.displayedChildren!.push(child);\r\n                    }\r\n                    break;\r\n                case 'closed':\r\n                    // when set to open, only show col if group is open\r\n                    if (!parentWithExpansion!.getProvidedColumnGroup().isExpanded()) {\r\n                        this.displayedChildren!.push(child);\r\n                    }\r\n                    break;\r\n                default:\r\n                    this.displayedChildren!.push(child);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.dispatchLocalEvent({ type: 'displayedChildrenChanged' });\r\n    }\r\n}\r\n", "import type { DetailGridInfo } from '../api/gridApi';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { SelectionEventSourceType } from '../events';\r\nimport { _getRowIdCallback } from '../gridOptionsUtils';\r\nimport type { IServerSideStore } from '../interfaces/IServerSideStore';\r\nimport type { IEventEmitter } from '../interfaces/iEventEmitter';\r\nimport type { IFrameworkEventListenerService } from '../interfaces/iFrameworkEventListenerService';\r\nimport type {\r\n    AgRowNodeEventListener,\r\n    CellChangedEvent,\r\n    DataChangedEvent,\r\n    IRowNode,\r\n    RowNodeEvent,\r\n    RowNodeEventType,\r\n    RowPinnedType,\r\n} from '../interfaces/iRowNode';\r\nimport { LocalEventService } from '../localEventService';\r\nimport { _error, _warn } from '../validation/logging';\r\nimport type { AgColumn } from './agColumn';\r\n\r\n/**\r\n * This is used only when using tree data.\r\n * Implementation in enterprise-modules/row-grouping/src/rowGrouping/groupStage/treeStrategy/treeNode.ts\r\n */\r\nexport interface ITreeNode {\r\n    /** The key of this node */\r\n    readonly key: string;\r\n\r\n    /** Updated during commit to be the same as row.sourceRowIndex */\r\n    readonly sourceIdx: number;\r\n\r\n    invalidate(): void;\r\n}\r\n\r\nexport const ROW_ID_PREFIX_ROW_GROUP = 'row-group-';\r\nexport const ROW_ID_PREFIX_TOP_PINNED = 't-';\r\nexport const ROW_ID_PREFIX_BOTTOM_PINNED = 'b-';\r\n\r\nlet OBJECT_ID_SEQUENCE = 0;\r\n\r\nexport type RowHighlightPosition = 'Above' | 'Below';\r\n\r\nexport class RowNode<TData = any> implements IEventEmitter<RowNodeEventType>, IRowNode<TData> {\r\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\r\n    public id: string | undefined;\r\n\r\n    /** If using row grouping, contains the group values for this group. */\r\n    public groupData: { [key: string]: any | null } | null;\r\n\r\n    /** If using row grouping and aggregation, contains the aggregation data. */\r\n    public aggData: any;\r\n\r\n    /**\r\n     * The data as provided by the application.\r\n     * Can be `undefined` when using row grouping or during grid initialisation.\r\n     */\r\n    public data: TData | undefined;\r\n\r\n    /** The parent node to this node, or empty if top level */\r\n    public parent: RowNode<TData> | null;\r\n\r\n    /** How many levels this node is from the top when grouping. */\r\n    public level: number;\r\n\r\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupHideParentOfSingleChild=true`)*/\r\n    public uiLevel: number;\r\n\r\n    /**\r\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\r\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupHideParentOfSingleChild=true`.\r\n     */\r\n    public rowGroupIndex: number | null;\r\n\r\n    /** `true` if this node is a group node (i.e. it has children) */\r\n    public group: boolean | undefined;\r\n\r\n    /** `true` if this row is getting dragged */\r\n    public dragging: boolean;\r\n\r\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\r\n    public master: boolean = false;\r\n\r\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\r\n    public detail: boolean | undefined = undefined;\r\n\r\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\r\n    public detailNode: RowNode;\r\n\r\n    /** If master detail, this contains details about the detail grid */\r\n    public detailGridInfo: DetailGridInfo | null;\r\n\r\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\r\n    public leafGroup: boolean | undefined;\r\n\r\n    public firstChild: boolean;\r\n    public lastChild: boolean;\r\n    public childIndex: number;\r\n\r\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\r\n    public rowIndex: number | null = null;\r\n\r\n    /**\r\n     * Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`.\r\n     * If re-naming this property, you must also update `IGNORED_SIBLING_PROPERTIES`\r\n     */\r\n    public rowPinned: RowPinnedType;\r\n\r\n    /** When true, this row will appear in the top */\r\n    public sticky: boolean;\r\n\r\n    /** If row is pinned, then pinnedRowTop is used rather than rowTop */\r\n    public stickyRowTop: number;\r\n\r\n    /** If using quick filter, stores a string representation of the row for searching against. */\r\n    public quickFilterAggregateText: string | null;\r\n\r\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\r\n    public footer: boolean | undefined;\r\n\r\n    /** The field we are grouping on eg 'country'. */\r\n    public field: string | null;\r\n\r\n    /** The row group column used for this group, e.g. the Country column instance. */\r\n    public rowGroupColumn: AgColumn | null;\r\n\r\n    /** The key for the group eg Ireland, UK, USA */\r\n    public key: string | null = null;\r\n\r\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\r\n    public stub: boolean | undefined;\r\n\r\n    /** Used by server side row model, true if this row node failed a load */\r\n    public failedLoad: boolean | undefined;\r\n\r\n    /** Used by server side row model, true if this node needs refreshed by the server when in viewport */\r\n    public __needsRefreshWhenVisible: boolean;\r\n\r\n    /**\r\n     * The index of the row in the source rowData array including any updates via transactions.\r\n     * It does not change when sorting, filtering, grouping, pivoting or any other UI related operations.\r\n     * If this is a filler node (a visual row created by AG Grid in tree data or grouping) the value will be `-1`.\r\n     *\r\n     * Generally readonly. It is modified only by:\r\n     * - ClientSideNodeManager, cast to ClientSideNodeManagerRowNode\r\n     * - ClientSideRowModel, cast to ClientSideRowModelRowNode\r\n     */\r\n    public readonly sourceRowIndex: number = -1;\r\n\r\n    /**\r\n     * All lowest level nodes beneath this node, no groups.\r\n     * In the root node, this array contains all rows, and is computed by the ClientSideRowModel.\r\n     * Do not modify this array directly. The grouping module relies on mutable references to the array.\r\n     * The array might also br frozen (immutable).\r\n     *\r\n     * Generally readonly. It is modified only by:\r\n     * - ClientSideNodeManager, cast to ClientSideNodeManagerRootNode\r\n     * - GroupStrategy, cast to GroupRow\r\n     * - TreeStrategy, cast to TreeRow\r\n     */\r\n    public readonly allLeafChildren: RowNode<TData>[] | null;\r\n\r\n    /**\r\n     * Children of this group. If multi levels of grouping, shows only immediate children.\r\n     * Do not modify this array directly. The grouping module relies on mutable references to the array.\r\n     *\r\n     * Generally readonly. It is modified only by:\r\n     * - ClientSideNodeManager, cast to ClientSideNodeManagerRootNode\r\n     * - GroupStrategy, cast to GroupRow\r\n     * - TreeStrategy, cast to TreeRow\r\n     */\r\n    public readonly childrenAfterGroup: RowNode<TData>[] | null;\r\n\r\n    /** Filtered children of this group. */\r\n    public childrenAfterFilter: RowNode<TData>[] | null;\r\n\r\n    /** Aggregated and re-filtered children of this group. */\r\n    public childrenAfterAggFilter: RowNode<TData>[] | null;\r\n\r\n    /** Sorted children of this group. */\r\n    public childrenAfterSort: RowNode<TData>[] | null;\r\n\r\n    /** Number of children and grand children. */\r\n    public allChildrenCount: number | null;\r\n\r\n    /**\r\n     * Children mapped by the pivot columns.\r\n     *\r\n     * TODO: this field is currently used only by the GroupStrategy and Pivot.\r\n     * TreeStrategy does not use it, and pivot cannot be enabled with tree data.\r\n     * Creating a new object for every row when not pivoting and not grouping\r\n     * consumes memory unnecessarily. Setting it to null however currently breaks\r\n     * transactional updates in groups so this requires a deeper investigation on GroupStrategy.\r\n     */\r\n    public childrenMapped: { [key: string]: any } | null = {};\r\n\r\n    /** The TreeNode associated to this row. Used only with tree data. */\r\n    public readonly treeNode: ITreeNode | null = null;\r\n\r\n    /** The flags associated to this node. Used only with tree data. */\r\n    public readonly treeNodeFlags: number = 0;\r\n\r\n    /** Server Side Row Model Only - the children are in an infinite cache. */\r\n    public childStore: IServerSideStore | null;\r\n\r\n    /** `true` if group is expanded, otherwise `false`. */\r\n    public expanded: boolean;\r\n\r\n    /** If using footers, reference to the footer node for this group. */\r\n    public sibling: RowNode;\r\n\r\n    /** The height, in pixels, of this row */\r\n    public rowHeight: number | null | undefined;\r\n\r\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\r\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\r\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\r\n     * the row height calculation and set rowHeightEstimated=false.*/\r\n    public rowHeightEstimated: boolean;\r\n\r\n    /**\r\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\r\n     */\r\n    public displayed: boolean = false;\r\n\r\n    /** The row top position in pixels. */\r\n    public rowTop: number | null = null;\r\n\r\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\r\n     * it is used so new rows can animate in from their old position. */\r\n    public oldRowTop: number | null = null;\r\n\r\n    /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\r\n    public selectable = true;\r\n\r\n    /** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\r\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\r\n     * representing a different entity, so the selection controller, if the node is selected, takes\r\n     * a copy where daemon=true. */\r\n    public __daemon: boolean;\r\n\r\n    /** Used by the value service, stores values for a particular change detection turn. */\r\n    public __cacheData: { [colId: string]: any };\r\n    public __cacheVersion: number;\r\n\r\n    /**\r\n     * Used by sorting service - to give deterministic sort to groups. Previously we\r\n     * just id for this, however id is a string and had slower sorting compared to numbers.\r\n     * If re-naming this property, you must also update `IGNORED_SIBLING_PROPERTIES`\r\n     */\r\n    public __objectId: number = OBJECT_ID_SEQUENCE++;\r\n\r\n    /** We cache the result of hasChildren() so that we can be aware of when it has changed, and hence\r\n     * fire the event. Really we should just have hasChildren as an attribute and do away with hasChildren()\r\n     * method, however that would be a breaking change. */\r\n    private __hasChildren: boolean;\r\n\r\n    /**\r\n     * When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\r\n     * indexed by the Column ID.\r\n     * If re-naming this property, you must also update `IGNORED_SIBLING_PROPERTIES`\r\n     */\r\n    public __autoHeights?: { [id: string]: number | undefined };\r\n\r\n    /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\r\n    public alreadyRendered = false;\r\n\r\n    public highlighted: RowHighlightPosition | null = null;\r\n\r\n    private hovered: boolean = false;\r\n\r\n    public __selected: boolean | undefined = false;\r\n    /** If re-naming this property, you must also update `IGNORED_SIBLING_PROPERTIES` */\r\n    public __localEventService: LocalEventService<RowNodeEventType> | null;\r\n    private frameworkEventListenerService?: IFrameworkEventListenerService<any, any>;\r\n\r\n    private beans: BeanCollection;\r\n\r\n    /** If re-naming this property, you must also update `IGNORED_SIBLING_PROPERTIES` */\r\n    public __checkAutoHeightsDebounced: () => void;\r\n\r\n    constructor(beans: BeanCollection) {\r\n        this.beans = beans;\r\n    }\r\n\r\n    /**\r\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\r\n     */\r\n    public setData(data: TData): void {\r\n        this.setDataCommon(data, false);\r\n    }\r\n\r\n    // similar to setRowData, however it is expected that the data is the same data item. this\r\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\r\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\r\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\r\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\r\n\r\n    /**\r\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\r\n     */\r\n    public updateData(data: TData): void {\r\n        this.setDataCommon(data, true);\r\n    }\r\n\r\n    private setDataCommon(data: TData, update: boolean): void {\r\n        const oldData = this.data;\r\n\r\n        this.data = data;\r\n        this.beans.valueCache?.onDataChanged();\r\n        this.updateDataOnDetailNode();\r\n        this.beans.selectionSvc?.updateRowSelectable(this);\r\n        this.resetQuickFilterAggregateText();\r\n\r\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, update);\r\n\r\n        this.__localEventService?.dispatchEvent(event);\r\n    }\r\n\r\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\r\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\r\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\r\n    private updateDataOnDetailNode(): void {\r\n        if (this.detailNode) {\r\n            this.detailNode.data = this.data;\r\n        }\r\n    }\r\n\r\n    private createDataChangedEvent(\r\n        newData: TData,\r\n        oldData: TData | undefined,\r\n        update: boolean\r\n    ): DataChangedEvent<TData> {\r\n        return {\r\n            type: 'dataChanged',\r\n            node: this,\r\n            oldData: oldData,\r\n            newData: newData,\r\n            update: update,\r\n        };\r\n    }\r\n\r\n    public getRowIndexString(): string | null {\r\n        if (this.rowIndex == null) {\r\n            // Row has been removed so no index\r\n            _error(13);\r\n            return null;\r\n        }\r\n\r\n        if (this.rowPinned === 'top') {\r\n            return ROW_ID_PREFIX_TOP_PINNED + this.rowIndex;\r\n        }\r\n\r\n        if (this.rowPinned === 'bottom') {\r\n            return ROW_ID_PREFIX_BOTTOM_PINNED + this.rowIndex;\r\n        }\r\n\r\n        return this.rowIndex.toString();\r\n    }\r\n\r\n    public setDataAndId(data: TData, id: string | undefined): void {\r\n        const { selectionSvc } = this.beans;\r\n        const oldNode = selectionSvc?.createDaemonNode?.(this);\r\n        const oldData = this.data;\r\n\r\n        this.data = data;\r\n        this.updateDataOnDetailNode();\r\n        this.setId(id);\r\n        if (selectionSvc) {\r\n            selectionSvc.updateRowSelectable(this);\r\n            selectionSvc.syncInRowNode(this, oldNode);\r\n        }\r\n\r\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, false);\r\n\r\n        this.__localEventService?.dispatchEvent(event);\r\n    }\r\n\r\n    private setId(id?: string): void {\r\n        // see if user is providing the id's\r\n        const getRowIdFunc = _getRowIdCallback(this.beans.gos);\r\n\r\n        if (getRowIdFunc) {\r\n            // if user is providing the id's, then we set the id only after the data has been set.\r\n            // this is important for virtual pagination and viewport, where empty rows exist.\r\n            if (this.data) {\r\n                // we pass 'true' as we skip this level when generating keys,\r\n                // as we don't always have the key for this level (eg when updating\r\n                // data via transaction on SSRM, we are getting key to look up the\r\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\r\n                const parentKeys = this.parent?.getRoute() ?? [];\r\n                this.id = getRowIdFunc({\r\n                    data: this.data,\r\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\r\n                    level: this.level,\r\n                    rowPinned: this.rowPinned,\r\n                });\r\n\r\n                // make sure id provided doesn't start with 'row-group-' as this is reserved.\r\n                if (this.id.startsWith(ROW_ID_PREFIX_ROW_GROUP)) {\r\n                    _error(14, {\r\n                        groupPrefix: ROW_ID_PREFIX_ROW_GROUP,\r\n                    });\r\n                }\r\n            } else {\r\n                // this can happen if user has set blank into the rowNode after the row previously\r\n                // having data. this happens in virtual page row model, when data is delete and\r\n                // the page is refreshed.\r\n                this.id = undefined;\r\n            }\r\n        } else {\r\n            this.id = id;\r\n        }\r\n    }\r\n\r\n    public setRowTop(rowTop: number | null): void {\r\n        this.oldRowTop = this.rowTop;\r\n\r\n        if (this.rowTop === rowTop) {\r\n            return;\r\n        }\r\n\r\n        this.rowTop = rowTop;\r\n\r\n        this.dispatchRowEvent('topChanged');\r\n\r\n        this.setDisplayed(rowTop !== null);\r\n    }\r\n\r\n    public clearRowTopAndRowIndex(): void {\r\n        this.oldRowTop = null;\r\n        this.setRowTop(null);\r\n        this.setRowIndex(null);\r\n    }\r\n\r\n    public setHovered(hovered: boolean): void {\r\n        this.hovered = hovered;\r\n    }\r\n\r\n    public isHovered(): boolean {\r\n        return this.hovered;\r\n    }\r\n\r\n    /**\r\n     * Sets the row height.\r\n     * Call if you want to change the height initially assigned to the row.\r\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\r\n    public setRowHeight(rowHeight: number | undefined | null, estimated: boolean = false): void {\r\n        this.rowHeight = rowHeight;\r\n        this.rowHeightEstimated = estimated;\r\n\r\n        this.dispatchRowEvent('heightChanged');\r\n    }\r\n\r\n    public setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent, forceSync?: boolean): void {\r\n        this.beans.expansionSvc?.setExpanded(this, expanded, e, forceSync);\r\n    }\r\n\r\n    /**\r\n     * Replaces the value on the `rowNode` for the specified column. When complete,\r\n     * the grid will refresh the rendered cell on the required row only.\r\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\r\n     *\r\n     * @param colKey The column where the value should be updated\r\n     * @param newValue The new value\r\n     * @param eventSource The source of the event\r\n     * @returns `true` if the value was changed, otherwise `false`.\r\n     */\r\n    public setDataValue(colKey: string | AgColumn, newValue: any, eventSource?: string): boolean {\r\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\r\n        // the cell knows about the change given it's in charge of the editing.\r\n        // this method is for the client to call, so the cell listens for the change\r\n        // event, and also flashes the cell when the change occurs.\r\n        const { colModel, valueSvc, gos, selectionSvc } = this.beans;\r\n\r\n        // if in pivot mode, grid columns wont include primary columns\r\n        const column = typeof colKey !== 'string' ? colKey : colModel.getCol(colKey) ?? colModel.getColDefCol(colKey);\r\n        if (!column) {\r\n            return false;\r\n        }\r\n        const oldValue = valueSvc.getValueForDisplay(column, this);\r\n\r\n        if (gos.get('readOnlyEdit')) {\r\n            const {\r\n                beans: { eventSvc },\r\n                data,\r\n                rowIndex,\r\n                rowPinned,\r\n            } = this;\r\n            eventSvc.dispatchEvent({\r\n                type: 'cellEditRequest',\r\n                event: null,\r\n                rowIndex,\r\n                rowPinned,\r\n                column,\r\n                colDef: column.colDef,\r\n                data,\r\n                node: this,\r\n                oldValue,\r\n                newValue,\r\n                value: newValue,\r\n                source: eventSource,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        const valueChanged = valueSvc.setValue(this, column, newValue, eventSource);\r\n\r\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\r\n        selectionSvc?.updateRowSelectable(this);\r\n\r\n        return valueChanged;\r\n    }\r\n\r\n    public updateHasChildren(): void {\r\n        // in CSRM, the group property will be set before the childrenAfterGroup property, check both to prevent flickering\r\n        let newValue: boolean | null =\r\n            (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\r\n\r\n        const { rowChildrenSvc } = this.beans;\r\n        if (rowChildrenSvc) {\r\n            newValue = rowChildrenSvc.getHasChildrenValue(this);\r\n        }\r\n\r\n        if (newValue !== this.__hasChildren) {\r\n            this.__hasChildren = !!newValue;\r\n            this.dispatchRowEvent('hasChildrenChanged');\r\n        }\r\n    }\r\n\r\n    public hasChildren(): boolean {\r\n        if (this.__hasChildren == null) {\r\n            this.updateHasChildren();\r\n        }\r\n        return this.__hasChildren;\r\n    }\r\n\r\n    public dispatchCellChangedEvent(column: AgColumn, newValue: TData, oldValue: TData): void {\r\n        const cellChangedEvent: CellChangedEvent<TData> = {\r\n            type: 'cellChanged',\r\n            node: this,\r\n            column: column,\r\n            newValue: newValue,\r\n            oldValue: oldValue,\r\n        };\r\n        this.__localEventService?.dispatchEvent(cellChangedEvent);\r\n    }\r\n\r\n    /**\r\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\r\n     * This string is then used for the quick filter instead of hitting each column separately.\r\n     * When you edit, using grid editing, this string gets cleared down.\r\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\r\n     * Otherwise new values will not work with the `quickFilter`. */\r\n    public resetQuickFilterAggregateText(): void {\r\n        this.quickFilterAggregateText = null;\r\n    }\r\n\r\n    /** Returns:\r\n     * - `true` if the node can be expanded, i.e it is a group or master row.\r\n     * - `false` if the node cannot be expanded\r\n     */\r\n    public isExpandable(): boolean {\r\n        return this.beans.expansionSvc?.isExpandable(this) ?? false;\r\n    }\r\n\r\n    /** Returns:\r\n     * - `true` if node is selected,\r\n     * - `false` if the node isn't selected\r\n     * - `undefined` if it's partially selected (group where not all children are selected). */\r\n    public isSelected(): boolean | undefined {\r\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\r\n        if (this.footer) {\r\n            return this.sibling.isSelected();\r\n        }\r\n\r\n        return this.__selected;\r\n    }\r\n\r\n    /** Perform a depth-first search of this node and its children. */\r\n    public depthFirstSearch(callback: (rowNode: RowNode<TData>) => void): void {\r\n        this.childrenAfterGroup?.forEach((child) => child.depthFirstSearch(callback));\r\n        callback(this);\r\n    }\r\n\r\n    public dispatchRowEvent<T extends RowNodeEventType>(type: T): void {\r\n        this.__localEventService?.dispatchEvent({\r\n            type: type,\r\n            node: this,\r\n        } as RowNodeEvent<T, TData>);\r\n    }\r\n\r\n    /**\r\n     * Select (or deselect) the node.\r\n     * @param newValue -`true` for selection, `false` for deselection.\r\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\r\n     * @param source - Source property that will appear in the `selectionChanged` event.\r\n     */\r\n    public setSelected(\r\n        newValue: boolean,\r\n        clearSelection: boolean = false,\r\n        source: SelectionEventSourceType = 'api'\r\n    ): void {\r\n        this.beans.selectionSvc?.setNodesSelected({\r\n            nodes: [this],\r\n            newValue,\r\n            clearSelection,\r\n            source,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns:\r\n     * - `true` if node is either pinned to the `top` or `bottom`\r\n     * - `false` if the node isn't pinned\r\n     */\r\n    public isRowPinned(): boolean {\r\n        return !!this.rowPinned;\r\n    }\r\n\r\n    /** Add an event listener. */\r\n    public addEventListener<T extends RowNodeEventType>(eventType: T, userListener: AgRowNodeEventListener<T>): void {\r\n        this.beans.validation?.checkRowEvents(eventType);\r\n        if (!this.__localEventService) {\r\n            this.__localEventService = new LocalEventService();\r\n        }\r\n        this.frameworkEventListenerService = this.beans.frameworkOverrides.createLocalEventListenerWrapper?.(\r\n            this.frameworkEventListenerService,\r\n            this.__localEventService\r\n        );\r\n\r\n        const listener = this.frameworkEventListenerService?.wrap(userListener) ?? userListener;\r\n        this.__localEventService.addEventListener(eventType, listener);\r\n    }\r\n\r\n    /** Remove event listener. */\r\n    public removeEventListener<T extends RowNodeEventType>(\r\n        eventType: T,\r\n        userListener: AgRowNodeEventListener<T>\r\n    ): void {\r\n        if (!this.__localEventService) {\r\n            return;\r\n        }\r\n\r\n        const listener = this.frameworkEventListenerService?.unwrap(userListener) ?? userListener;\r\n        this.__localEventService.removeEventListener(eventType, listener);\r\n        if (this.__localEventService.noRegisteredListenersExist()) {\r\n            this.__localEventService = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated v32.2.0 Check `node.detail` then user provided callback `isFullWidthRow` instead.\r\n     *\r\n     * Returns:\r\n     * - `true` if the node is a full width cell\r\n     * - `false` if the node is not a full width cell\r\n     */\r\n    public isFullWidthCell(): boolean {\r\n        // log deprecation\r\n        _warn(61);\r\n\r\n        if (this.detail) {\r\n            return true;\r\n        }\r\n\r\n        const isFullWidthCellFunc = this.beans.gos.getCallback('isFullWidthRow');\r\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\r\n    }\r\n\r\n    /**\r\n     * Returns the route of keys to the row node. Returns undefined if the node has no key.\r\n     */\r\n    public getRoute(): string[] | undefined {\r\n        // root node is still a valid route\r\n        if (this.level === -1) {\r\n            return [];\r\n        }\r\n\r\n        if (this.key == null) {\r\n            return undefined;\r\n        }\r\n\r\n        const res: string[] = [];\r\n        let pointer: RowNode | null = this;\r\n        while (pointer && pointer.key != null) {\r\n            res.push(pointer.key);\r\n            pointer = pointer.parent;\r\n        }\r\n\r\n        return res.reverse();\r\n    }\r\n\r\n    public setFirstChild(firstChild: boolean): void {\r\n        if (this.firstChild !== firstChild) {\r\n            this.firstChild = firstChild;\r\n            this.dispatchRowEvent('firstChildChanged');\r\n        }\r\n    }\r\n\r\n    private setDisplayed(displayed: boolean): void {\r\n        if (this.displayed !== displayed) {\r\n            this.displayed = displayed;\r\n            this.dispatchRowEvent('displayedChanged');\r\n        }\r\n    }\r\n\r\n    public setRowIndex(rowIndex: number | null): void {\r\n        if (this.rowIndex !== rowIndex) {\r\n            this.rowIndex = rowIndex;\r\n            this.dispatchRowEvent('rowIndexChanged');\r\n        }\r\n    }\r\n\r\n    public setAllChildrenCount(allChildrenCount: number | null): void {\r\n        if (this.allChildrenCount !== allChildrenCount) {\r\n            this.allChildrenCount = allChildrenCount;\r\n            this.dispatchRowEvent('allChildrenCountChanged');\r\n        }\r\n    }\r\n\r\n    public setUiLevel(uiLevel: number): void {\r\n        if (this.uiLevel !== uiLevel) {\r\n            this.uiLevel = uiLevel;\r\n            this.dispatchRowEvent('uiLevelChanged');\r\n        }\r\n    }\r\n}\r\n", "import type { AgEventType } from '../eventTypes';\r\nimport type { RowEvent } from '../events';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { RowNode } from './rowNode';\r\n\r\nexport function _createGlobalRowEvent<T extends AgEventType>(\r\n    rowNode: RowNode,\r\n    gos: GridOptionsService,\r\n    type: T\r\n): RowEvent<T> {\r\n    return gos.addGridCommonParams({\r\n        type,\r\n        node: rowNode,\r\n        data: rowNode.data,\r\n        rowIndex: rowNode.rowIndex,\r\n        rowPinned: rowNode.rowPinned,\r\n    });\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { FilterDestroyedEvent } from '../events';\r\nimport type { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\r\nimport type { IFilterComp } from '../interfaces/iFilter';\r\nimport { _clearElement } from '../utils/dom';\r\nimport { _exists } from '../utils/generic';\r\nimport { AgPromise } from '../utils/promise';\r\nimport { _warn } from '../validation/logging';\r\nimport { Component } from '../widgets/component';\r\nimport type { FilterWrapper } from './columnFilterService';\r\nimport type { FilterRequestSource } from './iColumnFilter';\r\n\r\nexport class FilterWrapperComp extends Component {\r\n    private filterWrapper: FilterWrapper | null = null;\r\n\r\n    constructor(\r\n        private readonly column: AgColumn,\r\n        private readonly source: FilterRequestSource\r\n    ) {\r\n        super(/* html */ `<div class=\"ag-filter\"></div>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.createFilter(true);\r\n\r\n        this.addManagedEventListeners({ filterDestroyed: this.onFilterDestroyed.bind(this) });\r\n    }\r\n\r\n    public hasFilter(): boolean {\r\n        return !!this.filterWrapper;\r\n    }\r\n\r\n    public getFilter(): AgPromise<IFilterComp> | null {\r\n        return this.filterWrapper?.filterPromise ?? null;\r\n    }\r\n\r\n    public afterInit(): AgPromise<void> {\r\n        return this.filterWrapper?.filterPromise?.then(() => {}) ?? AgPromise.resolve();\r\n    }\r\n\r\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n        this.filterWrapper?.filterPromise?.then((filter) => {\r\n            filter?.afterGuiAttached?.(params);\r\n        });\r\n    }\r\n\r\n    public afterGuiDetached(): void {\r\n        this.filterWrapper?.filterPromise?.then((filter) => {\r\n            filter?.afterGuiDetached?.();\r\n        });\r\n    }\r\n\r\n    private createFilter(init?: boolean): void {\r\n        const { column, source } = this;\r\n        this.filterWrapper = this.beans.filterManager?.getOrCreateFilterWrapper(column) ?? null;\r\n        if (!this.filterWrapper?.filterPromise) {\r\n            return;\r\n        }\r\n        this.filterWrapper.filterPromise.then((filter) => {\r\n            const guiFromFilter = filter!.getGui();\r\n\r\n            if (!_exists(guiFromFilter)) {\r\n                _warn(69, { guiFromFilter });\r\n            }\r\n\r\n            this.appendChild(guiFromFilter);\r\n            if (init) {\r\n                this.eventSvc.dispatchEvent({\r\n                    type: 'filterOpened',\r\n                    column,\r\n                    source,\r\n                    eGui: this.getGui(),\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private onFilterDestroyed(event: FilterDestroyedEvent): void {\r\n        if (\r\n            (event.source === 'api' || event.source === 'paramsUpdated') &&\r\n            event.column.getId() === this.column.getId() &&\r\n            this.beans.colModel.getColDefCol(this.column)\r\n        ) {\r\n            // filter has been destroyed by the API or params changing. If the column still exists, need to recreate UI component\r\n            _clearElement(this.getGui());\r\n            this.createFilter();\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.filterWrapper = null;\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { DragListenerParams, DragService } from '../../dragAndDrop/dragService';\r\nimport {\r\n    _getAbsoluteHeight,\r\n    _getAbsoluteWidth,\r\n    _isVisible,\r\n    _observeResize,\r\n    _setFixedHeight,\r\n    _setFixedWidth,\r\n} from '../../utils/dom';\r\nimport type { PopupService } from '../../widgets/popupService';\r\n\r\nconst RESIZE_CONTAINER_STYLE = 'ag-resizer-wrapper';\r\nconst makeDiv = (dataRefPrefix: string, classSuffix: string) =>\r\n    `<div data-ref=\"${dataRefPrefix}Resizer\" class=\"ag-resizer ag-resizer-${classSuffix}\"></div>`;\r\nconst RESIZE_TEMPLATE =\r\n    /* html */\r\n    `<div class=\"${RESIZE_CONTAINER_STYLE}\">\r\n        ${makeDiv('eTopLeft', 'topLeft')}\r\n        ${makeDiv('eTop', 'top')}\r\n        ${makeDiv('eTopRight', 'topRight')}\r\n        ${makeDiv('eRight', 'right')}\r\n        ${makeDiv('eBottomRight', 'bottomRight')}\r\n        ${makeDiv('eBottom', 'bottom')}\r\n        ${makeDiv('eBottomLeft', 'bottomLeft')}\r\n        ${makeDiv('eLeft', 'left')}\r\n    </div>`;\r\n\r\nexport interface PositionableOptions {\r\n    popup?: boolean;\r\n    minWidth?: number | null;\r\n    width?: number | string | null;\r\n    minHeight?: number | null;\r\n    height?: number | string | null;\r\n    centered?: boolean | null;\r\n    calculateTopBuffer?: () => number;\r\n    /**\r\n     * Used for when a popup needs to be resized by an element within itself\r\n     * In that case, the feature will configured as `popup=false` but the offsetParent\r\n     * needs to be the popupParent.\r\n     */\r\n    forcePopupParentAsOffsetParent?: boolean;\r\n    x?: number | null;\r\n    y?: number | null;\r\n}\r\n\r\nexport type ResizableSides =\r\n    | 'topLeft'\r\n    | 'top'\r\n    | 'topRight'\r\n    | 'right'\r\n    | 'bottomRight'\r\n    | 'bottom'\r\n    | 'bottomLeft'\r\n    | 'left';\r\n\r\nexport type ResizableStructure = {\r\n    [key in ResizableSides]?: boolean;\r\n};\r\n\r\ninterface MappedResizer {\r\n    element: HTMLElement;\r\n    dragSource?: DragListenerParams;\r\n}\r\n\r\nexport type PositionableFeatureEvent = 'resize';\r\nexport class PositionableFeature extends BeanStub<PositionableFeatureEvent> {\r\n    protected popupSvc?: PopupService;\r\n    private dragSvc?: DragService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.popupSvc = beans.popupSvc;\r\n        this.dragSvc = beans.dragSvc;\r\n    }\r\n\r\n    private dragStartPosition = {\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n\r\n    private position = {\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n\r\n    private lastSize = {\r\n        width: -1,\r\n        height: -1,\r\n    };\r\n\r\n    private resizerMap:\r\n        | {\r\n              [key in ResizableSides]: MappedResizer;\r\n          }\r\n        | undefined;\r\n\r\n    private minWidth: number;\r\n    private minHeight?: number;\r\n    private positioned = false;\r\n    private resizersAdded = false;\r\n    private config: PositionableOptions;\r\n\r\n    private resizeListeners: DragListenerParams[] = [];\r\n    private moveElementDragListener: DragListenerParams | undefined;\r\n\r\n    private offsetParent: HTMLElement;\r\n    private boundaryEl: HTMLElement | null = null;\r\n\r\n    private isResizing: boolean = false;\r\n    private isMoving = false;\r\n    private resizable: ResizableStructure = {};\r\n    private movable = false;\r\n    private currentResizer: { isTop: boolean; isRight: boolean; isBottom: boolean; isLeft: boolean } | null = null;\r\n    private resizeObserverSubscriber: (() => void) | undefined;\r\n\r\n    constructor(\r\n        private readonly element: HTMLElement,\r\n        config?: PositionableOptions\r\n    ) {\r\n        super();\r\n        this.config = Object.assign({}, { popup: false }, config);\r\n    }\r\n\r\n    public center() {\r\n        const { clientHeight, clientWidth } = this.offsetParent;\r\n\r\n        const x = clientWidth / 2 - this.getWidth()! / 2;\r\n        const y = clientHeight / 2 - this.getHeight()! / 2;\r\n\r\n        this.offsetElement(x, y);\r\n    }\r\n\r\n    public initialisePosition(): void {\r\n        if (this.positioned) {\r\n            return;\r\n        }\r\n\r\n        const { centered, forcePopupParentAsOffsetParent, minWidth, width, minHeight, height, x, y } = this.config;\r\n\r\n        if (!this.offsetParent) {\r\n            this.setOffsetParent();\r\n        }\r\n\r\n        let computedMinHeight = 0;\r\n        let computedMinWidth = 0;\r\n\r\n        // here we don't use the main offset parent but the element's offsetParent\r\n        // in order to calculated the minWidth and minHeight correctly\r\n        const isElementVisible = _isVisible(this.element);\r\n        if (isElementVisible) {\r\n            const boundaryEl = this.findBoundaryElement();\r\n            const offsetParentComputedStyles = window.getComputedStyle(boundaryEl);\r\n            if (offsetParentComputedStyles.minWidth != null) {\r\n                const paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;\r\n                computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;\r\n            }\r\n\r\n            if (offsetParentComputedStyles.minHeight != null) {\r\n                const paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;\r\n                computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;\r\n            }\r\n        }\r\n\r\n        this.minHeight = minHeight || computedMinHeight;\r\n        this.minWidth = minWidth || computedMinWidth;\r\n\r\n        if (width) {\r\n            this.setWidth(width);\r\n        }\r\n\r\n        if (height) {\r\n            this.setHeight(height);\r\n        }\r\n\r\n        if (!width || !height) {\r\n            this.refreshSize();\r\n        }\r\n\r\n        if (centered) {\r\n            this.center();\r\n        } else if (x || y) {\r\n            this.offsetElement(x!, y!);\r\n        } else if (isElementVisible && forcePopupParentAsOffsetParent) {\r\n            let boundaryEl: HTMLElement | null = this.boundaryEl;\r\n            let initialisedDuringPositioning = true;\r\n\r\n            if (!boundaryEl) {\r\n                boundaryEl = this.findBoundaryElement();\r\n                initialisedDuringPositioning = false;\r\n            }\r\n\r\n            if (boundaryEl) {\r\n                const top = parseFloat(boundaryEl.style.top);\r\n                const left = parseFloat(boundaryEl.style.left);\r\n\r\n                if (initialisedDuringPositioning) {\r\n                    this.offsetElement(isNaN(left) ? 0 : left, isNaN(top) ? 0 : top);\r\n                } else {\r\n                    this.setPosition(left, top);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.positioned = !!this.offsetParent;\r\n    }\r\n\r\n    public isPositioned(): boolean {\r\n        return this.positioned;\r\n    }\r\n\r\n    public getPosition(): { x: number; y: number } {\r\n        return this.position;\r\n    }\r\n\r\n    public setMovable(movable: boolean, moveElement: HTMLElement) {\r\n        if (!this.config.popup || movable === this.movable) {\r\n            return;\r\n        }\r\n\r\n        this.movable = movable;\r\n\r\n        const params: DragListenerParams = this.moveElementDragListener || {\r\n            eElement: moveElement,\r\n            onDragStart: this.onMoveStart.bind(this),\r\n            onDragging: this.onMove.bind(this),\r\n            onDragStop: this.onMoveEnd.bind(this),\r\n        };\r\n\r\n        if (movable) {\r\n            this.dragSvc?.addDragSource(params);\r\n            this.moveElementDragListener = params;\r\n        } else {\r\n            this.dragSvc?.removeDragSource(params);\r\n            this.moveElementDragListener = undefined;\r\n        }\r\n    }\r\n\r\n    public setResizable(resizable: boolean | ResizableStructure) {\r\n        this.clearResizeListeners();\r\n\r\n        if (resizable) {\r\n            this.addResizers();\r\n        } else {\r\n            this.removeResizers();\r\n        }\r\n\r\n        if (typeof resizable === 'boolean') {\r\n            if (resizable === false) {\r\n                return;\r\n            }\r\n\r\n            resizable = {\r\n                topLeft: resizable,\r\n                top: resizable,\r\n                topRight: resizable,\r\n                right: resizable,\r\n                bottomRight: resizable,\r\n                bottom: resizable,\r\n                bottomLeft: resizable,\r\n                left: resizable,\r\n            } as ResizableStructure;\r\n        }\r\n\r\n        Object.keys(resizable).forEach((side: ResizableSides) => {\r\n            const resizableStructure = resizable as ResizableStructure;\r\n            const isSideResizable = !!resizableStructure[side];\r\n            const resizerEl = this.getResizerElement(side);\r\n\r\n            const params: DragListenerParams = {\r\n                dragStartPixels: 0,\r\n                eElement: resizerEl!,\r\n                onDragStart: (e: MouseEvent) => this.onResizeStart(e, side),\r\n                onDragging: this.onResize.bind(this),\r\n                onDragStop: (e: MouseEvent) => this.onResizeEnd(e, side),\r\n            };\r\n\r\n            if (isSideResizable || (!this.isAlive() && !isSideResizable)) {\r\n                if (isSideResizable) {\r\n                    this.dragSvc?.addDragSource(params);\r\n                    this.resizeListeners.push(params);\r\n                    resizerEl!.style.pointerEvents = 'all';\r\n                } else {\r\n                    resizerEl!.style.pointerEvents = 'none';\r\n                }\r\n                this.resizable[side] = isSideResizable;\r\n            }\r\n        });\r\n    }\r\n\r\n    public removeSizeFromEl(): void {\r\n        this.element.style.removeProperty('height');\r\n        this.element.style.removeProperty('width');\r\n        this.element.style.removeProperty('flex');\r\n    }\r\n\r\n    public restoreLastSize(): void {\r\n        this.element.style.flex = '0 0 auto';\r\n\r\n        const { height, width } = this.lastSize;\r\n\r\n        if (width !== -1) {\r\n            this.element.style.width = `${width}px`;\r\n        }\r\n\r\n        if (height !== -1) {\r\n            this.element.style.height = `${height}px`;\r\n        }\r\n    }\r\n\r\n    public getHeight(): number | undefined {\r\n        return this.element.offsetHeight;\r\n    }\r\n\r\n    public setHeight(height: number | string) {\r\n        const { popup } = this.config;\r\n        const eGui = this.element;\r\n\r\n        let isPercent = false;\r\n\r\n        if (typeof height === 'string' && height.indexOf('%') !== -1) {\r\n            _setFixedHeight(eGui, height);\r\n            height = _getAbsoluteHeight(eGui);\r\n            isPercent = true;\r\n        } else {\r\n            height = Math.max(this.minHeight!, height as number);\r\n            if (this.positioned) {\r\n                const availableHeight = this.getAvailableHeight();\r\n\r\n                if (availableHeight && height > availableHeight) {\r\n                    height = availableHeight;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.getHeight() === height) {\r\n            return;\r\n        }\r\n\r\n        if (!isPercent) {\r\n            if (popup) {\r\n                _setFixedHeight(eGui, height);\r\n            } else {\r\n                eGui.style.height = `${height}px`;\r\n                eGui.style.flex = '0 0 auto';\r\n                this.lastSize.height = typeof height === 'number' ? height : parseFloat(height);\r\n            }\r\n        } else {\r\n            eGui.style.maxHeight = 'unset';\r\n            eGui.style.minHeight = 'unset';\r\n        }\r\n    }\r\n\r\n    private getAvailableHeight(): number | null {\r\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\r\n\r\n        if (!this.positioned) {\r\n            this.initialisePosition();\r\n        }\r\n\r\n        const { clientHeight } = this.offsetParent;\r\n\r\n        if (!clientHeight) {\r\n            return null;\r\n        }\r\n\r\n        const elRect = this.element.getBoundingClientRect();\r\n        const offsetParentRect = this.offsetParent.getBoundingClientRect();\r\n\r\n        const yPosition = popup ? this.position.y : elRect.top;\r\n        const parentTop = popup ? 0 : offsetParentRect.top;\r\n\r\n        // When `forcePopupParentAsOffsetParent`, there may be elements that appear after the resizable element, but aren't included in the height.\r\n        // Take these into account here\r\n        let additionalHeight = 0;\r\n        if (forcePopupParentAsOffsetParent) {\r\n            const parentEl = this.element.parentElement;\r\n            if (parentEl) {\r\n                const { bottom } = parentEl.getBoundingClientRect();\r\n                additionalHeight = bottom - elRect.bottom;\r\n            }\r\n        }\r\n\r\n        const availableHeight = clientHeight + parentTop - yPosition - additionalHeight;\r\n\r\n        return availableHeight;\r\n    }\r\n\r\n    public getWidth(): number | undefined {\r\n        return this.element.offsetWidth;\r\n    }\r\n\r\n    public setWidth(width: number | string) {\r\n        const eGui = this.element;\r\n        const { popup } = this.config;\r\n\r\n        let isPercent = false;\r\n\r\n        if (typeof width === 'string' && width.indexOf('%') !== -1) {\r\n            _setFixedWidth(eGui, width);\r\n            width = _getAbsoluteWidth(eGui);\r\n            isPercent = true;\r\n        } else if (this.positioned) {\r\n            width = Math.max(this.minWidth, width as number);\r\n            const { clientWidth } = this.offsetParent;\r\n            const xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;\r\n\r\n            if (clientWidth && width + xPosition > clientWidth) {\r\n                width = clientWidth - xPosition;\r\n            }\r\n        }\r\n\r\n        if (this.getWidth() === width) {\r\n            return;\r\n        }\r\n\r\n        if (!isPercent) {\r\n            if (this.config.popup) {\r\n                _setFixedWidth(eGui, width);\r\n            } else {\r\n                eGui.style.width = `${width}px`;\r\n                eGui.style.flex = ' unset';\r\n                this.lastSize.width = typeof width === 'number' ? width : parseFloat(width);\r\n            }\r\n        } else {\r\n            eGui.style.maxWidth = 'unset';\r\n            eGui.style.minWidth = 'unset';\r\n        }\r\n    }\r\n\r\n    public offsetElement(x = 0, y = 0) {\r\n        const { forcePopupParentAsOffsetParent } = this.config;\r\n        const ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;\r\n\r\n        if (!ePopup) {\r\n            return;\r\n        }\r\n\r\n        this.popupSvc?.positionPopup({\r\n            ePopup,\r\n            keepWithinBounds: true,\r\n            skipObserver: this.movable || this.isResizable(),\r\n            updatePosition: () => ({ x, y }),\r\n        });\r\n\r\n        this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));\r\n    }\r\n\r\n    public constrainSizeToAvailableHeight(constrain: boolean): void {\r\n        if (!this.config.forcePopupParentAsOffsetParent) {\r\n            return;\r\n        }\r\n\r\n        const applyMaxHeightToElement = () => {\r\n            const availableHeight = this.getAvailableHeight();\r\n            this.element.style.setProperty('max-height', `${availableHeight}px`);\r\n        };\r\n\r\n        if (constrain && this.popupSvc) {\r\n            this.resizeObserverSubscriber = _observeResize(\r\n                this.beans,\r\n                this.popupSvc?.getPopupParent(),\r\n                applyMaxHeightToElement\r\n            );\r\n        } else {\r\n            this.element.style.removeProperty('max-height');\r\n            if (this.resizeObserverSubscriber) {\r\n                this.resizeObserverSubscriber();\r\n                this.resizeObserverSubscriber = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setPosition(x: number, y: number): void {\r\n        this.position.x = x;\r\n        this.position.y = y;\r\n    }\r\n\r\n    private updateDragStartPosition(x: number, y: number) {\r\n        this.dragStartPosition = { x, y };\r\n    }\r\n\r\n    private calculateMouseMovement(params: {\r\n        e: MouseEvent;\r\n        topBuffer?: number;\r\n        anywhereWithin?: boolean;\r\n        isLeft?: boolean;\r\n        isTop?: boolean;\r\n    }): { movementX: number; movementY: number } {\r\n        const { e, isLeft, isTop, anywhereWithin, topBuffer } = params;\r\n\r\n        const xDiff = e.clientX - this.dragStartPosition.x;\r\n        const yDiff = e.clientY - this.dragStartPosition.y;\r\n\r\n        const movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;\r\n        const movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;\r\n\r\n        return { movementX, movementY };\r\n    }\r\n\r\n    private shouldSkipX(e: MouseEvent, isLeft: boolean, anywhereWithin: boolean, diff: number): boolean {\r\n        const elRect = this.element.getBoundingClientRect();\r\n        const parentRect = this.offsetParent.getBoundingClientRect();\r\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\r\n        const xPosition = this.config.popup ? this.position.x : elRect.left;\r\n        // skip if cursor is outside of popupParent horizontally\r\n        let skipX =\r\n            (xPosition <= 0 && parentRect.left >= e.clientX) ||\r\n            (parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right);\r\n\r\n        if (skipX) {\r\n            return true;\r\n        }\r\n\r\n        if (isLeft) {\r\n            skipX =\r\n                // skip if we are moving to the left and the cursor\r\n                // is positioned to the right of the left side anchor\r\n                (diff < 0 && e.clientX > xPosition + parentRect.left) ||\r\n                // skip if we are moving to the right and the cursor\r\n                // is positioned to the left of the dialog\r\n                (diff > 0 && e.clientX < xPosition + parentRect.left);\r\n        } else {\r\n            if (anywhereWithin) {\r\n                // if anywhereWithin is true, we allow to move\r\n                // as long as the cursor is within the dialog\r\n                skipX =\r\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\r\n                    (diff > 0 && e.clientX < xPosition + parentRect.left);\r\n            } else {\r\n                skipX =\r\n                    // if the movement is bound to the right side of the dialog\r\n                    // we skip if we are moving to the left and the cursor\r\n                    // is to the right of the dialog\r\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\r\n                    // or skip if we are moving to the right and the cursor\r\n                    // is to the left of the right side anchor\r\n                    (diff > 0 && e.clientX < boundaryElRect.right);\r\n            }\r\n        }\r\n\r\n        return skipX;\r\n    }\r\n\r\n    private shouldSkipY(e: MouseEvent, isTop: boolean, topBuffer: number = 0, diff: number): boolean {\r\n        const elRect = this.element.getBoundingClientRect();\r\n        const parentRect = this.offsetParent.getBoundingClientRect();\r\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\r\n        const yPosition = this.config.popup ? this.position.y : elRect.top;\r\n\r\n        // skip if cursor is outside of popupParent vertically\r\n        let skipY =\r\n            (yPosition <= 0 && parentRect.top >= e.clientY) ||\r\n            (parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom);\r\n\r\n        if (skipY) {\r\n            return true;\r\n        }\r\n\r\n        if (isTop) {\r\n            skipY =\r\n                // skip if we are moving to towards top and the cursor is\r\n                // below the top anchor + topBuffer\r\n                // note: topBuffer is used when moving the dialog using the title bar\r\n                (diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer) ||\r\n                // skip if we are moving to the bottom and the cursor is\r\n                // above the top anchor\r\n                (diff > 0 && e.clientY < yPosition + parentRect.top);\r\n        } else {\r\n            skipY =\r\n                // skip if we are moving towards the top and the cursor\r\n                // is below the bottom anchor\r\n                (diff < 0 && e.clientY > boundaryElRect.bottom) ||\r\n                // skip if we are moving towards the bottom and the cursor\r\n                // is above the bottom anchor\r\n                (diff > 0 && e.clientY < boundaryElRect.bottom);\r\n        }\r\n\r\n        return skipY;\r\n    }\r\n\r\n    private createResizeMap() {\r\n        const eGui = this.element;\r\n\r\n        this.resizerMap = {\r\n            topLeft: { element: eGui.querySelector('[data-ref=eTopLeftResizer]') as HTMLElement },\r\n            top: { element: eGui.querySelector('[data-ref=eTopResizer]') as HTMLElement },\r\n            topRight: { element: eGui.querySelector('[data-ref=eTopRightResizer]') as HTMLElement },\r\n            right: { element: eGui.querySelector('[data-ref=eRightResizer]') as HTMLElement },\r\n            bottomRight: { element: eGui.querySelector('[data-ref=eBottomRightResizer]') as HTMLElement },\r\n            bottom: { element: eGui.querySelector('[data-ref=eBottomResizer]') as HTMLElement },\r\n            bottomLeft: { element: eGui.querySelector('[data-ref=eBottomLeftResizer]') as HTMLElement },\r\n            left: { element: eGui.querySelector('[data-ref=eLeftResizer]') as HTMLElement },\r\n        };\r\n    }\r\n\r\n    private addResizers() {\r\n        if (this.resizersAdded) {\r\n            return;\r\n        }\r\n\r\n        const eGui = this.element;\r\n\r\n        if (!eGui) {\r\n            return;\r\n        }\r\n\r\n        const parser = new DOMParser();\r\n        const resizers = parser.parseFromString(RESIZE_TEMPLATE, 'text/html').body;\r\n\r\n        eGui.appendChild(resizers.firstChild!);\r\n        this.createResizeMap();\r\n        this.resizersAdded = true;\r\n    }\r\n\r\n    private removeResizers() {\r\n        this.resizerMap = undefined;\r\n        const resizerEl = this.element.querySelector(`.${RESIZE_CONTAINER_STYLE}`);\r\n\r\n        if (resizerEl) {\r\n            this.element.removeChild(resizerEl);\r\n        }\r\n        this.resizersAdded = false;\r\n    }\r\n\r\n    private getResizerElement(side: ResizableSides): HTMLElement | null {\r\n        return this.resizerMap![side].element;\r\n    }\r\n\r\n    private onResizeStart(e: MouseEvent, side: ResizableSides) {\r\n        this.boundaryEl = this.findBoundaryElement();\r\n\r\n        if (!this.positioned) {\r\n            this.initialisePosition();\r\n        }\r\n\r\n        this.currentResizer = {\r\n            isTop: !!side.match(/top/i),\r\n            isRight: !!side.match(/right/i),\r\n            isBottom: !!side.match(/bottom/i),\r\n            isLeft: !!side.match(/left/i),\r\n        };\r\n\r\n        this.element.classList.add('ag-resizing');\r\n        this.resizerMap![side].element.classList.add('ag-active');\r\n\r\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\r\n\r\n        if (!popup && !forcePopupParentAsOffsetParent) {\r\n            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);\r\n        }\r\n\r\n        this.isResizing = true;\r\n        this.updateDragStartPosition(e.clientX, e.clientY);\r\n    }\r\n\r\n    private getSiblings(): HTMLElement[] | null {\r\n        const element = this.element;\r\n        const parent = element.parentElement;\r\n        if (!parent) {\r\n            return null;\r\n        }\r\n\r\n        return Array.prototype.slice\r\n            .call(parent.children)\r\n            .filter((el: HTMLElement) => !el.classList.contains('ag-hidden'));\r\n    }\r\n\r\n    private getMinSizeOfSiblings(): { height: number; width: number } {\r\n        const siblings = this.getSiblings() || [];\r\n\r\n        let height = 0;\r\n        let width = 0;\r\n\r\n        for (let i = 0; i < siblings.length; i++) {\r\n            const currentEl = siblings[i];\r\n            const isFlex = !!currentEl.style.flex && currentEl.style.flex !== '0 0 auto';\r\n\r\n            if (currentEl === this.element) {\r\n                continue;\r\n            }\r\n\r\n            let nextHeight = this.minHeight || 0;\r\n            let nextWidth = this.minWidth || 0;\r\n\r\n            if (isFlex) {\r\n                const computedStyle = window.getComputedStyle(currentEl);\r\n                if (computedStyle.minHeight) {\r\n                    nextHeight = parseInt(computedStyle.minHeight, 10);\r\n                }\r\n                if (computedStyle.minWidth) {\r\n                    nextWidth = parseInt(computedStyle.minWidth, 10);\r\n                }\r\n            } else {\r\n                nextHeight = currentEl.offsetHeight;\r\n                nextWidth = currentEl.offsetWidth;\r\n            }\r\n\r\n            height += nextHeight;\r\n            width += nextWidth;\r\n        }\r\n\r\n        return { height, width };\r\n    }\r\n\r\n    private applySizeToSiblings(vertical: boolean) {\r\n        let containerToFlex: HTMLElement | null = null;\r\n        const siblings = this.getSiblings();\r\n\r\n        if (!siblings) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < siblings.length; i++) {\r\n            const el = siblings[i];\r\n\r\n            if (el === containerToFlex) {\r\n                continue;\r\n            }\r\n\r\n            if (vertical) {\r\n                el.style.height = `${el.offsetHeight}px`;\r\n            } else {\r\n                el.style.width = `${el.offsetWidth}px`;\r\n            }\r\n            el.style.flex = '0 0 auto';\r\n\r\n            if (el === this.element) {\r\n                containerToFlex = siblings[i + 1];\r\n            }\r\n        }\r\n\r\n        if (containerToFlex) {\r\n            containerToFlex.style.removeProperty('height');\r\n            containerToFlex.style.removeProperty('min-height');\r\n            containerToFlex.style.removeProperty('max-height');\r\n            containerToFlex.style.flex = '1 1 auto';\r\n        }\r\n    }\r\n\r\n    public isResizable(): boolean {\r\n        return Object.values(this.resizable).some((value) => value);\r\n    }\r\n\r\n    private onResize(e: MouseEvent) {\r\n        if (!this.isResizing || !this.currentResizer) {\r\n            return;\r\n        }\r\n\r\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\r\n        const { isTop, isRight, isBottom, isLeft } = this.currentResizer;\r\n        const isHorizontal = isRight || isLeft;\r\n        const isVertical = isBottom || isTop;\r\n        const { movementX, movementY } = this.calculateMouseMovement({ e, isLeft, isTop });\r\n\r\n        const xPosition = this.position.x;\r\n        const yPosition = this.position.y;\r\n\r\n        let offsetLeft = 0;\r\n        let offsetTop = 0;\r\n\r\n        if (isHorizontal && movementX) {\r\n            const direction = isLeft ? -1 : 1;\r\n            const oldWidth = this.getWidth();\r\n            const newWidth = oldWidth! + movementX * direction;\r\n            let skipWidth = false;\r\n\r\n            if (isLeft) {\r\n                offsetLeft = oldWidth! - newWidth;\r\n                if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {\r\n                    skipWidth = true;\r\n                    offsetLeft = 0;\r\n                }\r\n            }\r\n\r\n            if (!skipWidth) {\r\n                this.setWidth(newWidth);\r\n            }\r\n        }\r\n\r\n        if (isVertical && movementY) {\r\n            const direction = isTop ? -1 : 1;\r\n            const oldHeight = this.getHeight();\r\n            const newHeight = oldHeight! + movementY * direction;\r\n            let skipHeight = false;\r\n\r\n            if (isTop) {\r\n                offsetTop = oldHeight! - newHeight;\r\n                if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight!) {\r\n                    skipHeight = true;\r\n                    offsetTop = 0;\r\n                }\r\n            } else {\r\n                // do not let the size of all siblings be higher than the parent container\r\n                if (\r\n                    !this.config.popup &&\r\n                    !this.config.forcePopupParentAsOffsetParent &&\r\n                    oldHeight! < newHeight &&\r\n                    this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement!.offsetHeight\r\n                ) {\r\n                    skipHeight = true;\r\n                }\r\n            }\r\n\r\n            if (!skipHeight) {\r\n                this.setHeight(newHeight);\r\n            }\r\n        }\r\n\r\n        this.updateDragStartPosition(e.clientX, e.clientY);\r\n\r\n        if (((popup || forcePopupParentAsOffsetParent) && offsetLeft) || offsetTop) {\r\n            this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);\r\n        }\r\n    }\r\n\r\n    private onResizeEnd(e: MouseEvent, side: ResizableSides) {\r\n        this.isResizing = false;\r\n        this.currentResizer = null;\r\n        this.boundaryEl = null;\r\n\r\n        this.element.classList.remove('ag-resizing');\r\n        this.resizerMap![side].element.classList.remove('ag-active');\r\n\r\n        this.dispatchLocalEvent({ type: 'resize' });\r\n    }\r\n\r\n    private refreshSize() {\r\n        const eGui = this.element;\r\n\r\n        if (this.config.popup) {\r\n            if (!this.config.width) {\r\n                this.setWidth(eGui.offsetWidth);\r\n            }\r\n\r\n            if (!this.config.height) {\r\n                this.setHeight(eGui.offsetHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMoveStart(e: MouseEvent) {\r\n        this.boundaryEl = this.findBoundaryElement();\r\n\r\n        if (!this.positioned) {\r\n            this.initialisePosition();\r\n        }\r\n\r\n        this.isMoving = true;\r\n\r\n        this.element.classList.add('ag-moving');\r\n        this.updateDragStartPosition(e.clientX, e.clientY);\r\n    }\r\n\r\n    private onMove(e: MouseEvent) {\r\n        if (!this.isMoving) {\r\n            return;\r\n        }\r\n\r\n        const { x, y } = this.position;\r\n        let topBuffer;\r\n\r\n        if (this.config.calculateTopBuffer) {\r\n            topBuffer = this.config.calculateTopBuffer();\r\n        }\r\n\r\n        const { movementX, movementY } = this.calculateMouseMovement({\r\n            e,\r\n            isTop: true,\r\n            anywhereWithin: true,\r\n            topBuffer,\r\n        });\r\n\r\n        this.offsetElement(x + movementX, y + movementY);\r\n        this.updateDragStartPosition(e.clientX, e.clientY);\r\n    }\r\n\r\n    private onMoveEnd() {\r\n        this.isMoving = false;\r\n        this.boundaryEl = null;\r\n        this.element.classList.remove('ag-moving');\r\n    }\r\n\r\n    private setOffsetParent() {\r\n        if (this.config.forcePopupParentAsOffsetParent && this.popupSvc) {\r\n            this.offsetParent = this.popupSvc.getPopupParent();\r\n        } else {\r\n            this.offsetParent = this.element.offsetParent as HTMLElement;\r\n        }\r\n    }\r\n\r\n    private findBoundaryElement(): HTMLElement {\r\n        let el = this.element;\r\n        while (el) {\r\n            if (window.getComputedStyle(el).position !== 'static') {\r\n                return el;\r\n            }\r\n            el = el.parentElement as HTMLElement;\r\n        }\r\n\r\n        return this.element;\r\n    }\r\n\r\n    private clearResizeListeners(): void {\r\n        while (this.resizeListeners.length) {\r\n            const params = this.resizeListeners.pop()!;\r\n            this.dragSvc?.removeDragSource(params);\r\n        }\r\n    }\r\n\r\n    public override destroy() {\r\n        super.destroy();\r\n\r\n        if (this.moveElementDragListener) {\r\n            this.dragSvc?.removeDragSource(this.moveElementDragListener);\r\n        }\r\n\r\n        this.constrainSizeToAvailableHeight(false);\r\n        this.clearResizeListeners();\r\n        this.removeResizers();\r\n    }\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '../utils/event';\r\nimport { _findNextFocusableElement } from '../utils/focus';\r\n\r\nexport interface ManagedFocusCallbacks {\r\n    shouldStopEventPropagation?: (e: KeyboardEvent) => boolean;\r\n    onTabKeyDown?: (e: KeyboardEvent) => void;\r\n    handleKeyDown?: (e: KeyboardEvent) => void;\r\n    onFocusIn?: (e: FocusEvent) => void;\r\n    onFocusOut?: (e: FocusEvent) => void;\r\n}\r\n\r\nexport const FOCUS_MANAGED_CLASS = 'ag-focus-managed';\r\n\r\nexport class ManagedFocusFeature extends BeanStub {\r\n    constructor(\r\n        private readonly eFocusable: HTMLElement,\r\n        private callbacks: ManagedFocusCallbacks = {}\r\n    ) {\r\n        super();\r\n        this.callbacks = {\r\n            shouldStopEventPropagation: () => false,\r\n            onTabKeyDown: (e: KeyboardEvent) => {\r\n                if (e.defaultPrevented) {\r\n                    return;\r\n                }\r\n\r\n                const nextRoot = _findNextFocusableElement(this.beans, this.eFocusable, false, e.shiftKey);\r\n\r\n                if (!nextRoot) {\r\n                    return;\r\n                }\r\n\r\n                nextRoot.focus();\r\n                e.preventDefault();\r\n            },\r\n            ...callbacks,\r\n        };\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const {\r\n            eFocusable,\r\n            callbacks: { onFocusIn, onFocusOut },\r\n        } = this;\r\n        eFocusable.classList.add(FOCUS_MANAGED_CLASS);\r\n\r\n        this.addKeyDownListeners(eFocusable);\r\n\r\n        if (onFocusIn) {\r\n            this.addManagedElementListeners(eFocusable, { focusin: onFocusIn });\r\n        }\r\n\r\n        if (onFocusOut) {\r\n            this.addManagedElementListeners(eFocusable, { focusout: onFocusOut });\r\n        }\r\n    }\r\n\r\n    private addKeyDownListeners(eGui: HTMLElement): void {\r\n        this.addManagedElementListeners(eGui, {\r\n            keydown: (e: KeyboardEvent) => {\r\n                if (e.defaultPrevented || _isStopPropagationForAgGrid(e)) {\r\n                    return;\r\n                }\r\n\r\n                const { callbacks } = this;\r\n\r\n                if (callbacks.shouldStopEventPropagation!(e)) {\r\n                    _stopPropagationForAgGrid(e);\r\n                    return;\r\n                }\r\n\r\n                if (e.key === KeyCode.TAB) {\r\n                    callbacks.onTabKeyDown!(e);\r\n                } else if (callbacks.handleKeyDown) {\r\n                    callbacks.handleKeyDown(e);\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\n", "export const FILTER_LOCALE_TEXT = {\r\n    applyFilter: 'Apply',\r\n    clearFilter: 'Clear',\r\n    resetFilter: 'Reset',\r\n    cancelFilter: 'Cancel',\r\n    textFilter: 'Text Filter',\r\n    numberFilter: 'Number Filter',\r\n    dateFilter: 'Date Filter',\r\n    setFilter: 'Set Filter',\r\n    filterOoo: 'Filter...',\r\n    empty: 'Choose one',\r\n    equals: 'Equals',\r\n    notEqual: 'Does not equal',\r\n    lessThan: 'Less than',\r\n    greaterThan: 'Greater than',\r\n    inRange: 'Between',\r\n    inRangeStart: 'From',\r\n    inRangeEnd: 'To',\r\n    lessThanOrEqual: 'Less than or equal to',\r\n    greaterThanOrEqual: 'Greater than or equal to',\r\n    contains: 'Contains',\r\n    notContains: 'Does not contain',\r\n    startsWith: 'Begins with',\r\n    endsWith: 'Ends with',\r\n    blank: 'Blank',\r\n    notBlank: 'Not blank',\r\n    before: 'Before',\r\n    after: 'After',\r\n    andCondition: 'AND',\r\n    orCondition: 'OR',\r\n    dateFormatOoo: 'yyyy-mm-dd',\r\n};\r\n", "import { _warn } from '../../../validation/logging';\r\nimport type { ProvidedFilterParams } from '../../provided/iProvidedFilter';\r\n\r\nexport function getDebounceMs(params: ProvidedFilterParams, debounceDefault: number): number {\r\n    const { debounceMs } = params;\r\n    if (isUseApplyButton(params)) {\r\n        if (debounceMs != null) {\r\n            _warn(71);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    return debounceMs ?? debounceDefault;\r\n}\r\n\r\nexport function isUseApplyButton(params: ProvidedFilterParams): boolean {\r\n    return (params.buttons?.indexOf('apply') ?? -1) >= 0;\r\n}\r\n", "import type { FilterChangedEventSourceType } from '../../events';\r\nimport type { ContainerType, IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\r\nimport type { IDoesFilterPassParams, IFilterComp } from '../../interfaces/iFilter';\r\nimport type { PopupEventParams } from '../../interfaces/iPopup';\r\nimport type { IRowNode } from '../../interfaces/iRowNode';\r\nimport { PositionableFeature } from '../../rendering/features/positionableFeature';\r\nimport { _clearElement, _loadTemplate, _removeFromParent, _setDisabled } from '../../utils/dom';\r\nimport { _debounce } from '../../utils/function';\r\nimport { _jsonEquals } from '../../utils/generic';\r\nimport type { AgPromise } from '../../utils/promise';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { Component, RefPlaceholder } from '../../widgets/component';\r\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature';\r\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\r\nimport { getDebounceMs, isUseApplyButton } from '../floating/provided/providedFilterUtils';\r\nimport type { IProvidedFilter, ProvidedFilterParams } from './iProvidedFilter';\r\n\r\n/**\r\n * Contains common logic to all provided filters (apply button, clear button, etc).\r\n * All the filters that come with AG Grid extend this class. User filters do not\r\n * extend this class.\r\n *\r\n * @param M type of filter-model managed by the concrete sub-class that extends this type\r\n * @param V type of value managed by the concrete sub-class that extends this type\r\n */\r\nexport abstract class ProvidedFilter<M, V> extends Component implements IProvidedFilter, IFilterComp {\r\n    // each level in the hierarchy will save params with the appropriate type for that level.\r\n    private params: ProvidedFilterParams;\r\n\r\n    protected applyActive = false;\r\n    private hidePopup: ((params: PopupEventParams) => void) | null | undefined = null;\r\n    // a debounce of the onBtApply method\r\n    private onBtApplyDebounce: () => void;\r\n    private debouncePending = false;\r\n\r\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\r\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\r\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\r\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\r\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\r\n    // not active) then this appliedModel will be null/undefined.\r\n    private appliedModel: M | null = null;\r\n\r\n    private positionableFeature: PositionableFeature | undefined;\r\n\r\n    protected readonly eFilterBody: HTMLElement = RefPlaceholder;\r\n\r\n    private eButtonsPanel: HTMLElement;\r\n    private buttonListeners: (() => null)[] = [];\r\n\r\n    constructor(private readonly filterNameKey: keyof typeof FILTER_LOCALE_TEXT) {\r\n        super();\r\n    }\r\n\r\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\r\n\r\n    protected abstract updateUiVisibility(): void;\r\n\r\n    protected abstract createBodyTemplate(): string;\r\n    protected abstract getAgComponents(): ComponentSelector[];\r\n    protected abstract getCssIdentifier(): string;\r\n    protected abstract resetUiToDefaults(silent?: boolean): AgPromise<void>;\r\n\r\n    protected abstract setModelIntoUi(model: M): AgPromise<void>;\r\n    protected abstract areModelsEqual(a: M, b: M): boolean;\r\n\r\n    /** Used to get the filter type for filter models. */\r\n    protected abstract filterType: string;\r\n\r\n    public postConstruct(): void {\r\n        this.resetTemplate(); // do this first to create the DOM\r\n        this.createManagedBean(\r\n            new ManagedFocusFeature(this.getFocusableElement(), {\r\n                handleKeyDown: this.handleKeyDown.bind(this),\r\n            })\r\n        );\r\n\r\n        this.positionableFeature = new PositionableFeature(this.getPositionableElement(), {\r\n            forcePopupParentAsOffsetParent: true,\r\n        });\r\n\r\n        this.createBean(this.positionableFeature);\r\n    }\r\n\r\n    // override\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected handleKeyDown(e: KeyboardEvent): void {}\r\n\r\n    public abstract getModelFromUi(): M | null;\r\n\r\n    public getFilterTitle(): string {\r\n        return this.translate(this.filterNameKey);\r\n    }\r\n\r\n    public isFilterActive(): boolean {\r\n        // filter is active if we have a valid applied model\r\n        return !!this.appliedModel;\r\n    }\r\n\r\n    protected resetTemplate(paramsMap?: any) {\r\n        let eGui = this.getGui();\r\n\r\n        if (eGui) {\r\n            eGui.removeEventListener('submit', this.onFormSubmit);\r\n        }\r\n        const templateString = /* html */ `\r\n            <form class=\"ag-filter-wrapper\">\r\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\" data-ref=\"eFilterBody\">\r\n                    ${this.createBodyTemplate()}\r\n                </div>\r\n            </form>`;\r\n\r\n        this.setTemplate(templateString, this.getAgComponents(), paramsMap);\r\n\r\n        eGui = this.getGui();\r\n        eGui?.addEventListener('submit', this.onFormSubmit);\r\n    }\r\n\r\n    protected isReadOnly(): boolean {\r\n        return !!this.params.readOnly;\r\n    }\r\n\r\n    public init(params: ProvidedFilterParams): void {\r\n        this.setParams(params);\r\n\r\n        this.resetUiToDefaults(true).then(() => {\r\n            this.updateUiVisibility();\r\n            this.setupOnBtApplyDebounce();\r\n        });\r\n    }\r\n\r\n    protected setParams(params: ProvidedFilterParams): void {\r\n        this.params = params;\r\n        this.applyActive = isUseApplyButton(params);\r\n\r\n        this.resetButtonsPanel(params);\r\n    }\r\n\r\n    protected updateParams(params: ProvidedFilterParams): void {\r\n        this.params = params;\r\n        this.applyActive = isUseApplyButton(params);\r\n\r\n        this.resetUiToActiveModel(this.getModel(), () => {\r\n            this.updateUiVisibility();\r\n            this.setupOnBtApplyDebounce();\r\n        });\r\n    }\r\n\r\n    private resetButtonsPanel(newParams: ProvidedFilterParams, oldParams?: ProvidedFilterParams): void {\r\n        const { buttons: oldButtons, readOnly: oldReadOnly } = oldParams ?? {};\r\n        const { buttons, readOnly } = newParams;\r\n        if (oldReadOnly === readOnly && _jsonEquals(oldButtons, buttons)) {\r\n            return;\r\n        }\r\n\r\n        const hasButtons = buttons && buttons.length > 0 && !this.isReadOnly();\r\n\r\n        if (!this.eButtonsPanel) {\r\n            // Only create the buttons panel if we need to\r\n            if (hasButtons) {\r\n                this.eButtonsPanel = document.createElement('div');\r\n                this.eButtonsPanel.classList.add('ag-filter-apply-panel');\r\n            }\r\n        } else {\r\n            // Always empty the buttons panel before adding new buttons\r\n            _clearElement(this.eButtonsPanel);\r\n            this.buttonListeners.forEach((destroyFunc) => destroyFunc());\r\n            this.buttonListeners = [];\r\n        }\r\n\r\n        if (!hasButtons) {\r\n            // The case when we need to hide the buttons panel because there are no buttons\r\n            if (this.eButtonsPanel) {\r\n                _removeFromParent(this.eButtonsPanel);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // At this point we know we have a buttons and a buttons panel has been created.\r\n\r\n        // Instead of appending each button to the DOM individually, we create a fragment and append that\r\n        // to the DOM once. This is much faster than appending each button individually.\r\n        const fragment = document.createDocumentFragment();\r\n\r\n        const addButton = (type: 'apply' | 'clear' | 'reset' | 'cancel'): void => {\r\n            let clickListener: (e?: Event) => void;\r\n            const text = type ? this.translate(`${type}Filter`) : undefined;\r\n            switch (type) {\r\n                case 'apply':\r\n                    clickListener = (e) => this.onBtApply(false, false, e);\r\n                    break;\r\n                case 'clear':\r\n                    clickListener = () => this.onBtClear();\r\n                    break;\r\n                case 'reset':\r\n                    clickListener = () => this.onBtReset();\r\n                    break;\r\n                case 'cancel':\r\n                    clickListener = (e) => {\r\n                        this.onBtCancel(e!);\r\n                    };\r\n                    break;\r\n                default:\r\n                    _warn(75);\r\n                    return;\r\n            }\r\n\r\n            const buttonType = type === 'apply' ? 'submit' : 'button';\r\n            const button = _loadTemplate(\r\n                /* html */\r\n                `<button\r\n                    type=\"${buttonType}\"\r\n                    data-ref=\"${type}FilterButton\"\r\n                    class=\"ag-button ag-standard-button ag-filter-apply-panel-button\"\r\n                >${text}\r\n                </button>`\r\n            );\r\n\r\n            this.buttonListeners.push(...this.addManagedElementListeners(button, { click: clickListener }));\r\n            fragment.append(button);\r\n        };\r\n\r\n        buttons.forEach((type) => addButton(type));\r\n\r\n        this.eButtonsPanel.append(fragment);\r\n        this.getGui().appendChild(this.eButtonsPanel);\r\n    }\r\n\r\n    // subclasses can override this to provide alternative debounce defaults\r\n    protected defaultDebounceMs: number = 0;\r\n\r\n    private setupOnBtApplyDebounce(): void {\r\n        const debounceMs = getDebounceMs(this.params, this.defaultDebounceMs);\r\n        const debounceFunc = _debounce(this, this.checkApplyDebounce.bind(this), debounceMs);\r\n        this.onBtApplyDebounce = () => {\r\n            this.debouncePending = true;\r\n            debounceFunc();\r\n        };\r\n    }\r\n\r\n    private checkApplyDebounce(): void {\r\n        if (this.debouncePending) {\r\n            // May already have been applied, so don't apply again (e.g. closing filter before debounce timeout)\r\n            this.debouncePending = false;\r\n            this.onBtApply();\r\n        }\r\n    }\r\n\r\n    public getModel(): M | null {\r\n        return this.appliedModel ?? null;\r\n    }\r\n\r\n    public setModel(model: M | null): AgPromise<void> {\r\n        const promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();\r\n\r\n        return promise.then(() => {\r\n            this.updateUiVisibility();\r\n\r\n            // we set the model from the GUI, rather than the provided model,\r\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\r\n            // or if model is case-insensitive, then casing is removed.\r\n            this.applyModel('api');\r\n        });\r\n    }\r\n\r\n    private onBtCancel(e: Event): void {\r\n        this.resetUiToActiveModel(this.getModel(), () => {\r\n            this.handleCancelEnd(e);\r\n        });\r\n    }\r\n\r\n    protected handleCancelEnd(e: Event): void {\r\n        if (this.params.closeOnApply) {\r\n            this.close(e);\r\n        }\r\n    }\r\n\r\n    protected resetUiToActiveModel(currentModel: M | null, afterUiUpdatedFunc?: () => void): void {\r\n        const afterAppliedFunc = () => {\r\n            this.onUiChanged(false, 'prevent');\r\n\r\n            afterUiUpdatedFunc?.();\r\n        };\r\n\r\n        if (currentModel != null) {\r\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\r\n        } else {\r\n            this.resetUiToDefaults().then(afterAppliedFunc);\r\n        }\r\n    }\r\n\r\n    private onBtClear(): void {\r\n        this.resetUiToDefaults().then(() => this.onUiChanged());\r\n    }\r\n\r\n    private onBtReset(): void {\r\n        this.onBtClear();\r\n        this.onBtApply();\r\n    }\r\n\r\n    /**\r\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\r\n        const newModel = this.getModelFromUi();\r\n\r\n        if (!this.isModelValid(newModel!)) {\r\n            return false;\r\n        }\r\n\r\n        const previousModel = this.appliedModel;\r\n\r\n        this.appliedModel = newModel;\r\n\r\n        // models can be same if user pasted same content into text field, or maybe just changed the case\r\n        // and it's a case insensitive filter\r\n        return !this.areModelsEqual(previousModel!, newModel!);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected isModelValid(model: M): boolean {\r\n        return true;\r\n    }\r\n\r\n    private onFormSubmit(e: Event): void {\r\n        e.preventDefault();\r\n    }\r\n\r\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false, e?: Event): void {\r\n        // Prevent form submission\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        if (this.applyModel(afterDataChange ? 'rowDataUpdated' : 'ui')) {\r\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\r\n            // came from floating filter\r\n            const source: FilterChangedEventSourceType = 'columnFilter';\r\n            this.params.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });\r\n        }\r\n\r\n        const { closeOnApply } = this.params;\r\n\r\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\r\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\r\n            this.close(e);\r\n        }\r\n    }\r\n\r\n    public onNewRowsLoaded(): void {}\r\n\r\n    public close(e?: Event): void {\r\n        if (!this.hidePopup) {\r\n            return;\r\n        }\r\n\r\n        const keyboardEvent = e as KeyboardEvent;\r\n        const key = keyboardEvent && keyboardEvent.key;\r\n        let params: PopupEventParams;\r\n\r\n        if (key === 'Enter' || key === 'Space') {\r\n            params = { keyboardEvent };\r\n        }\r\n\r\n        this.hidePopup(params!);\r\n        this.hidePopup = null;\r\n    }\r\n\r\n    /**\r\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\r\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\r\n     * be adjusted by using the apply parameter.\r\n     */\r\n    protected onUiChanged(fromFloatingFilter = false, apply?: 'immediately' | 'debounce' | 'prevent'): void {\r\n        this.updateUiVisibility();\r\n        this.params.filterModifiedCallback();\r\n\r\n        if (this.applyActive && !this.isReadOnly()) {\r\n            const isValid = this.isModelValid(this.getModelFromUi()!);\r\n            const applyFilterButton = this.queryForHtmlElement(`[data-ref=\"applyFilterButton\"]`);\r\n            if (applyFilterButton) {\r\n                _setDisabled(applyFilterButton, !isValid);\r\n            }\r\n        }\r\n\r\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\r\n            this.onBtApply(fromFloatingFilter);\r\n        } else if ((!this.applyActive && !apply) || apply === 'debounce') {\r\n            this.onBtApplyDebounce();\r\n        }\r\n    }\r\n\r\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n        if (params) {\r\n            this.hidePopup = params.hidePopup;\r\n        }\r\n\r\n        this.refreshFilterResizer(params?.container);\r\n    }\r\n\r\n    private refreshFilterResizer(containerType?: ContainerType): void {\r\n        // tool panel is scrollable, so don't need to size\r\n        const { positionableFeature, gos } = this;\r\n        if (!positionableFeature || containerType === 'toolPanel') {\r\n            return;\r\n        }\r\n\r\n        const isResizable = containerType === 'floatingFilter' || containerType === 'columnFilter';\r\n\r\n        if (isResizable) {\r\n            positionableFeature.restoreLastSize();\r\n            positionableFeature.setResizable(\r\n                gos.get('enableRtl')\r\n                    ? { bottom: true, bottomLeft: true, left: true }\r\n                    : { bottom: true, bottomRight: true, right: true }\r\n            );\r\n        } else {\r\n            positionableFeature.removeSizeFromEl();\r\n            positionableFeature.setResizable(false);\r\n        }\r\n        positionableFeature.constrainSizeToAvailableHeight(true);\r\n    }\r\n\r\n    public afterGuiDetached(): void {\r\n        this.checkApplyDebounce();\r\n\r\n        this.positionableFeature?.constrainSizeToAvailableHeight(false);\r\n    }\r\n\r\n    public refresh(newParams: ProvidedFilterParams): boolean {\r\n        const oldParams = this.params;\r\n        this.params = newParams;\r\n\r\n        this.resetButtonsPanel(newParams, oldParams);\r\n\r\n        return true;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        const eGui = this.getGui();\r\n\r\n        if (eGui) {\r\n            eGui.removeEventListener('submit', this.onFormSubmit);\r\n        }\r\n        this.hidePopup = null;\r\n\r\n        if (this.positionableFeature) {\r\n            this.positionableFeature = this.destroyBean(this.positionableFeature);\r\n        }\r\n\r\n        this.appliedModel = null;\r\n\r\n        super.destroy();\r\n    }\r\n\r\n    protected translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\r\n        return this.getLocaleTextFunc()(key, FILTER_LOCALE_TEXT[key]);\r\n    }\r\n\r\n    protected getCellValue(rowNode: IRowNode): V | null | undefined {\r\n        return this.params.getValue(rowNode);\r\n    }\r\n\r\n    // override to control positionable feature\r\n    protected getPositionableElement(): HTMLElement {\r\n        return this.eFilterBody;\r\n    }\r\n}\r\n", "import { _getFilterCompKeys } from '../../components/framework/userCompUtils';\r\nimport type { IFilterDef } from '../../interfaces/iFilter';\r\nimport type { IFrameworkOverrides } from '../../interfaces/iFrameworkOverrides';\r\n\r\nexport function _getDefaultFloatingFilterType(\r\n    frameworkOverrides: IFrameworkOverrides,\r\n    def: IFilterDef,\r\n    getFromDefault: () => string\r\n): string | null {\r\n    if (def == null) {\r\n        return null;\r\n    }\r\n\r\n    let defaultFloatingFilterType: string | null = null;\r\n\r\n    const { compName, jsComp, fwComp } = _getFilterCompKeys(frameworkOverrides, def);\r\n\r\n    if (compName) {\r\n        const floatingFilterTypeMap: { [p: string]: string } = {\r\n            agSetColumnFilter: 'agSetColumnFloatingFilter',\r\n            agMultiColumnFilter: 'agMultiColumnFloatingFilter',\r\n            agGroupColumnFilter: 'agGroupColumnFloatingFilter',\r\n            agNumberColumnFilter: 'agNumberColumnFloatingFilter',\r\n            agDateColumnFilter: 'agDateColumnFloatingFilter',\r\n            agTextColumnFilter: 'agTextColumnFloatingFilter',\r\n        };\r\n        // will be undefined if not in the map\r\n        defaultFloatingFilterType = floatingFilterTypeMap[compName];\r\n    } else {\r\n        const usingDefaultFilter = jsComp == null && fwComp == null && def.filter === true;\r\n        if (usingDefaultFilter) {\r\n            defaultFloatingFilterType = getFromDefault();\r\n        }\r\n    }\r\n\r\n    return defaultFloatingFilterType;\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\n\r\nexport interface LayoutView {\r\n    updateLayoutClasses(layoutClass: string, params: UpdateLayoutClassesParams): void;\r\n}\r\n\r\nexport const LayoutCssClasses = {\r\n    AUTO_HEIGHT: 'ag-layout-auto-height',\r\n    NORMAL: 'ag-layout-normal',\r\n    PRINT: 'ag-layout-print',\r\n} as const;\r\n\r\nexport interface UpdateLayoutClassesParams {\r\n    autoHeight: boolean;\r\n    normal: boolean;\r\n    print: boolean;\r\n}\r\n\r\nexport class LayoutFeature extends BeanStub {\r\n    constructor(private view: LayoutView) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedPropertyListener('domLayout', this.updateLayoutClasses.bind(this));\r\n        this.updateLayoutClasses();\r\n    }\r\n\r\n    private updateLayoutClasses(): void {\r\n        const domLayout = this.gos.get('domLayout');\r\n        const params = {\r\n            autoHeight: domLayout === 'autoHeight',\r\n            normal: domLayout === 'normal',\r\n            print: domLayout === 'print',\r\n        };\r\n        const cssClass = params.autoHeight\r\n            ? LayoutCssClasses.AUTO_HEIGHT\r\n            : params.print\r\n              ? LayoutCssClasses.PRINT\r\n              : LayoutCssClasses.NORMAL;\r\n        this.view.updateLayoutClasses(cssClass, params);\r\n    }\r\n}\r\n", "import type { VisibleColsService } from '../columns/visibleColsService';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { BodyScrollEvent } from '../events';\r\nimport { _isDomLayout } from '../gridOptionsUtils';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { IRowNode, VerticalScrollPosition } from '../interfaces/iRowNode';\r\nimport type { AnimationFrameService } from '../misc/animationFrameService';\r\nimport { _isIOSUserAgent } from '../utils/browser';\r\nimport { _getInnerHeight, _getScrollLeft, _isRtlNegativeScroll, _setScrollLeft } from '../utils/dom';\r\nimport { _debounce } from '../utils/function';\r\nimport { _warn } from '../validation/logging';\r\nimport type { RowContainerCtrl } from './rowContainer/rowContainerCtrl';\r\n\r\nenum ScrollDirection {\r\n    Vertical,\r\n    Horizontal,\r\n}\r\n\r\nconst VIEWPORT = 'Viewport';\r\n\r\nconst FAKE_V_SCROLLBAR = 'fakeVScrollComp';\r\n\r\nconst HORIZONTAL_SOURCES = [\r\n    'fakeHScrollComp',\r\n    'centerHeader',\r\n    'topCenter',\r\n    'bottomCenter',\r\n    'stickyTopCenter',\r\n    'stickyBottomCenter',\r\n] as const;\r\n\r\ntype VerticalScrollSource = typeof VIEWPORT | typeof FAKE_V_SCROLLBAR;\r\ntype HorizontalScrollSource = typeof VIEWPORT | (typeof HORIZONTAL_SOURCES)[number];\r\n\r\nexport interface ScrollPartner {\r\n    eViewport: HTMLElement;\r\n    onScrollCallback(fn: () => void): void;\r\n}\r\n\r\nexport class GridBodyScrollFeature extends BeanStub {\r\n    private ctrlsSvc: CtrlsService;\r\n    private animationFrameSvc?: AnimationFrameService;\r\n    private visibleCols: VisibleColsService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.ctrlsSvc = beans.ctrlsSvc;\r\n        this.animationFrameSvc = beans.animationFrameSvc;\r\n        this.visibleCols = beans.visibleCols;\r\n    }\r\n\r\n    private enableRtl: boolean;\r\n\r\n    private lastScrollSource: [VerticalScrollSource | null, HorizontalScrollSource | null] = [null, null];\r\n\r\n    private eBodyViewport: HTMLElement;\r\n\r\n    private scrollLeft = -1;\r\n    private nextScrollTop = -1;\r\n    private scrollTop = -1;\r\n\r\n    // Used to provide approximate values of scrollTop and offsetHeight\r\n    // without forcing the browser to recalculate styles.\r\n    private lastOffsetHeight = -1;\r\n    private lastScrollTop = -1;\r\n\r\n    private scrollTimer: number = 0;\r\n    private needsRefreshedScrollPosition: boolean = true;\r\n\r\n    private readonly resetLastHScrollDebounced: () => void;\r\n    private readonly resetLastVScrollDebounced: () => void;\r\n\r\n    private centerRowsCtrl: RowContainerCtrl;\r\n\r\n    constructor(eBodyViewport: HTMLElement) {\r\n        super();\r\n        this.eBodyViewport = eBodyViewport;\r\n        this.resetLastHScrollDebounced = _debounce(\r\n            this,\r\n            () => (this.lastScrollSource[ScrollDirection.Horizontal] = null),\r\n            500\r\n        );\r\n        this.resetLastVScrollDebounced = _debounce(\r\n            this,\r\n            () => (this.lastScrollSource[ScrollDirection.Vertical] = null),\r\n            500\r\n        );\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        window.clearTimeout(this.scrollTimer);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.enableRtl = this.gos.get('enableRtl');\r\n        const requireUpdatedScrollPosition = this.requireUpdatedScrollPosition.bind(this);\r\n\r\n        this.addManagedEventListeners({\r\n            displayedColumnsWidthChanged: this.onDisplayedColumnsWidthChanged.bind(this),\r\n            gridSizeChanged: requireUpdatedScrollPosition,\r\n        });\r\n\r\n        this.addManagedElementListeners(this.eBodyViewport, {\r\n            scroll: requireUpdatedScrollPosition,\r\n        });\r\n\r\n        this.ctrlsSvc.whenReady(this, (p) => {\r\n            this.centerRowsCtrl = p.center;\r\n            this.onDisplayedColumnsWidthChanged();\r\n            this.addScrollListener();\r\n        });\r\n    }\r\n\r\n    private requireUpdatedScrollPosition(): void {\r\n        this.needsRefreshedScrollPosition = true;\r\n    }\r\n\r\n    private addScrollListener() {\r\n        this.addHorizontalScrollListeners();\r\n        this.addVerticalScrollListeners();\r\n    }\r\n\r\n    private addHorizontalScrollListeners(): void {\r\n        this.addManagedElementListeners(this.centerRowsCtrl.eViewport, {\r\n            scroll: this.onHScroll.bind(this, VIEWPORT),\r\n        });\r\n\r\n        for (const source of HORIZONTAL_SOURCES) {\r\n            const scrollPartner: ScrollPartner = this.ctrlsSvc.get(source);\r\n            this.registerScrollPartner(scrollPartner, this.onHScroll.bind(this, source));\r\n        }\r\n    }\r\n\r\n    private addVerticalScrollListeners(): void {\r\n        const fakeVScrollComp = this.ctrlsSvc.get('fakeVScrollComp');\r\n        const isDebounce = this.gos.get('debounceVerticalScrollbar');\r\n\r\n        const onVScroll = isDebounce\r\n            ? _debounce(this, this.onVScroll.bind(this, VIEWPORT), 100)\r\n            : this.onVScroll.bind(this, VIEWPORT);\r\n        const onFakeVScroll = isDebounce\r\n            ? _debounce(this, this.onVScroll.bind(this, FAKE_V_SCROLLBAR), 100)\r\n            : this.onVScroll.bind(this, FAKE_V_SCROLLBAR);\r\n\r\n        this.addManagedElementListeners(this.eBodyViewport, { scroll: onVScroll });\r\n        this.registerScrollPartner(fakeVScrollComp, onFakeVScroll);\r\n    }\r\n\r\n    private registerScrollPartner(comp: ScrollPartner, callback: () => void) {\r\n        comp.onScrollCallback(callback);\r\n    }\r\n\r\n    private onDisplayedColumnsWidthChanged(): void {\r\n        if (this.enableRtl) {\r\n            // because RTL is all backwards, a change in the width of the row\r\n            // can cause a change in the scroll position, without a scroll event,\r\n            // because the scroll position in RTL is a function that depends on\r\n            // the width. to be convinced of this, take out this line, enable RTL,\r\n            // scroll all the way to the left and then resize a column\r\n            this.horizontallyScrollHeaderCenterAndFloatingCenter();\r\n        }\r\n    }\r\n\r\n    private horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft?: number): void {\r\n        // when doing RTL, this method gets called once prematurely\r\n        const notYetInitialised = this.centerRowsCtrl == null;\r\n        if (notYetInitialised) {\r\n            return;\r\n        }\r\n\r\n        if (scrollLeft === undefined) {\r\n            scrollLeft = this.centerRowsCtrl.getCenterViewportScrollLeft();\r\n        }\r\n\r\n        this.setScrollLeftForAllContainersExceptCurrent(Math.abs(scrollLeft));\r\n    }\r\n\r\n    private setScrollLeftForAllContainersExceptCurrent(scrollLeft: number): void {\r\n        for (const container of [...HORIZONTAL_SOURCES, VIEWPORT] as const) {\r\n            if (this.lastScrollSource[ScrollDirection.Horizontal] === container) {\r\n                continue;\r\n            }\r\n\r\n            const viewport = this.getViewportForSource(container);\r\n            _setScrollLeft(viewport, scrollLeft, this.enableRtl);\r\n        }\r\n    }\r\n\r\n    private getViewportForSource(source: VerticalScrollSource | HorizontalScrollSource): HTMLElement {\r\n        if (source === VIEWPORT) {\r\n            return this.centerRowsCtrl.eViewport;\r\n        }\r\n\r\n        return this.ctrlsSvc.get(source).eViewport;\r\n    }\r\n\r\n    private isControllingScroll(\r\n        source: HorizontalScrollSource | VerticalScrollSource,\r\n        direction: ScrollDirection\r\n    ): boolean {\r\n        if (this.lastScrollSource[direction] == null) {\r\n            if (direction === ScrollDirection.Vertical) {\r\n                this.lastScrollSource[0] = source as VerticalScrollSource;\r\n            } else {\r\n                this.lastScrollSource[1] = source as HorizontalScrollSource;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return this.lastScrollSource[direction] === source;\r\n    }\r\n\r\n    private onHScroll(source: HorizontalScrollSource): void {\r\n        if (!this.isControllingScroll(source, ScrollDirection.Horizontal)) {\r\n            return;\r\n        }\r\n\r\n        const centerContainerViewport = this.centerRowsCtrl.eViewport;\r\n        const { scrollLeft } = centerContainerViewport;\r\n\r\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {\r\n            return;\r\n        }\r\n        const newScrollLeft = _getScrollLeft(this.getViewportForSource(source), this.enableRtl);\r\n\r\n        this.doHorizontalScroll(newScrollLeft);\r\n        this.resetLastHScrollDebounced();\r\n    }\r\n\r\n    private onVScroll(source: VerticalScrollSource): void {\r\n        if (!this.isControllingScroll(source, ScrollDirection.Vertical)) {\r\n            return;\r\n        }\r\n\r\n        let scrollTop: number;\r\n\r\n        if (source === VIEWPORT) {\r\n            scrollTop = this.eBodyViewport.scrollTop;\r\n        } else {\r\n            scrollTop = this.ctrlsSvc.get('fakeVScrollComp').getScrollPosition();\r\n        }\r\n\r\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) {\r\n            return;\r\n        }\r\n        const { animationFrameSvc } = this;\r\n        animationFrameSvc?.setScrollTop(scrollTop);\r\n        this.nextScrollTop = scrollTop;\r\n\r\n        if (source === VIEWPORT) {\r\n            this.ctrlsSvc.get('fakeVScrollComp').setScrollPosition(scrollTop);\r\n        } else {\r\n            this.eBodyViewport.scrollTop = scrollTop;\r\n        }\r\n\r\n        // the `scrollGridIfNeeded` will recalculate the rows to be rendered by the grid\r\n        // so it should only be called after `eBodyViewport` has been scrolled to the correct\r\n        // position, otherwise the `first` and `last` row could be miscalculated.\r\n        if (!animationFrameSvc || this.gos.get('suppressAnimationFrame')) {\r\n            this.scrollGridIfNeeded();\r\n        } else {\r\n            animationFrameSvc.schedule();\r\n        }\r\n\r\n        this.resetLastVScrollDebounced();\r\n    }\r\n\r\n    private doHorizontalScroll(scrollLeft: number): void {\r\n        const fakeScrollLeft = this.ctrlsSvc.get('fakeHScrollComp').getScrollPosition();\r\n\r\n        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {\r\n            return;\r\n        }\r\n\r\n        this.scrollLeft = scrollLeft;\r\n\r\n        this.fireScrollEvent(ScrollDirection.Horizontal);\r\n        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);\r\n        this.centerRowsCtrl.onHorizontalViewportChanged(true);\r\n    }\r\n\r\n    private fireScrollEvent(direction: ScrollDirection): void {\r\n        const bodyScrollEvent: WithoutGridCommon<BodyScrollEvent> = {\r\n            type: 'bodyScroll',\r\n            direction: direction === ScrollDirection.Horizontal ? 'horizontal' : 'vertical',\r\n            left: this.scrollLeft,\r\n            top: this.scrollTop,\r\n        };\r\n        this.eventSvc.dispatchEvent(bodyScrollEvent);\r\n\r\n        window.clearTimeout(this.scrollTimer);\r\n\r\n        this.scrollTimer = window.setTimeout(() => {\r\n            this.scrollTimer = 0;\r\n            this.eventSvc.dispatchEvent({\r\n                ...bodyScrollEvent,\r\n                type: 'bodyScrollEnd',\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n    private shouldBlockScrollUpdate(direction: ScrollDirection, scrollTo: number, touchOnly: boolean = false): boolean {\r\n        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport\r\n        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually\r\n        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,\r\n        // as otherwise it was causing the rows and header to flicker.\r\n\r\n        // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to\r\n        // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event\r\n        // could be 10px before the max position, and then current scroll event could be 20px after the max position).\r\n        // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in\r\n        // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.\r\n\r\n        if (touchOnly && !_isIOSUserAgent()) {\r\n            return false;\r\n        }\r\n\r\n        if (direction === ScrollDirection.Vertical) {\r\n            return this.shouldBlockVerticalScroll(scrollTo);\r\n        }\r\n\r\n        return this.shouldBlockHorizontalScroll(scrollTo);\r\n    }\r\n\r\n    private shouldBlockVerticalScroll(scrollTo: number): boolean {\r\n        const clientHeight = _getInnerHeight(this.eBodyViewport);\r\n        const { scrollHeight } = this.eBodyViewport;\r\n\r\n        if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private shouldBlockHorizontalScroll(scrollTo: number): boolean {\r\n        const clientWidth = this.centerRowsCtrl.getCenterWidth();\r\n        const { scrollWidth } = this.centerRowsCtrl.eViewport;\r\n\r\n        if (this.enableRtl && _isRtlNegativeScroll()) {\r\n            if (scrollTo > 0) {\r\n                return true;\r\n            }\r\n        } else if (scrollTo < 0) {\r\n            return true;\r\n        }\r\n\r\n        if (Math.abs(scrollTo) + clientWidth > scrollWidth) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private redrawRowsAfterScroll(): void {\r\n        this.fireScrollEvent(ScrollDirection.Vertical);\r\n    }\r\n\r\n    // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.\r\n    // (which happens with some implementations of tabbing). this can result in horizontal scroll getting\r\n    // reset back to the left, however no scroll event is fired. so we need to get header to also scroll\r\n    // back to the left to be kept in sync.\r\n    // adding and removing the grid from the DOM both resets the scroll position and\r\n    // triggers a resize event, so notify listeners if the scroll position has changed\r\n    public checkScrollLeft(): void {\r\n        if (this.scrollLeft !== this.centerRowsCtrl.getCenterViewportScrollLeft()) {\r\n            this.onHScroll(VIEWPORT);\r\n        }\r\n    }\r\n\r\n    public scrollGridIfNeeded(): boolean {\r\n        const frameNeeded = this.scrollTop != this.nextScrollTop;\r\n\r\n        if (frameNeeded) {\r\n            this.scrollTop = this.nextScrollTop;\r\n            this.redrawRowsAfterScroll();\r\n        }\r\n\r\n        return frameNeeded;\r\n    }\r\n\r\n    // called by scrollHorizontally method and alignedGridsService\r\n    public setHorizontalScrollPosition(hScrollPosition: number, fromAlignedGridsService = false): void {\r\n        const minScrollLeft = 0;\r\n        const maxScrollLeft = this.centerRowsCtrl.eViewport.scrollWidth - this.centerRowsCtrl.getCenterWidth();\r\n\r\n        // if this is call is coming from the alignedGridsSvc, we don't need to validate the\r\n        // scroll, because it has already been validated by the grid firing the scroll event.\r\n        if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {\r\n            if (this.enableRtl && _isRtlNegativeScroll()) {\r\n                hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;\r\n            } else {\r\n                hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);\r\n            }\r\n        }\r\n\r\n        _setScrollLeft(this.centerRowsCtrl.eViewport, Math.abs(hScrollPosition), this.enableRtl);\r\n        // we need to manually do the event handling (rather than wait for the event)\r\n        // for the alignedGridsSvc, as if we don't, the aligned grid service gets\r\n        // notified async, and then it's 'consuming' flag doesn't get used right, and\r\n        // we can end up with an infinite loop\r\n        this.doHorizontalScroll(hScrollPosition);\r\n    }\r\n\r\n    public setVerticalScrollPosition(vScrollPosition: number): void {\r\n        this.eBodyViewport.scrollTop = vScrollPosition;\r\n    }\r\n\r\n    public getVScrollPosition(): VerticalScrollPosition {\r\n        if (!this.needsRefreshedScrollPosition) {\r\n            const { lastOffsetHeight, lastScrollTop } = this;\r\n\r\n            return {\r\n                top: lastScrollTop,\r\n                bottom: lastScrollTop + lastOffsetHeight,\r\n            };\r\n        }\r\n\r\n        this.needsRefreshedScrollPosition = false;\r\n\r\n        const { scrollTop, offsetHeight } = this.eBodyViewport;\r\n        this.lastScrollTop = scrollTop;\r\n        this.lastOffsetHeight = offsetHeight;\r\n\r\n        return {\r\n            top: scrollTop,\r\n            bottom: scrollTop + offsetHeight,\r\n        };\r\n    }\r\n\r\n    /** Get an approximate scroll position that returns the last real value read.\r\n     * This is useful for avoiding repeated DOM reads that force the browser to recalculate styles.\r\n     * This can have big performance improvements but may not be 100% accurate so only use if this is acceptable.\r\n     */\r\n    public getApproximateVScollPosition(): VerticalScrollPosition {\r\n        if (this.lastScrollTop >= 0 && this.lastOffsetHeight >= 0) {\r\n            return {\r\n                top: this.scrollTop,\r\n                bottom: this.scrollTop + this.lastOffsetHeight,\r\n            };\r\n        }\r\n        return this.getVScrollPosition();\r\n    }\r\n\r\n    public getHScrollPosition(): { left: number; right: number } {\r\n        return this.centerRowsCtrl.getHScrollPosition();\r\n    }\r\n\r\n    public isHorizontalScrollShowing(): boolean {\r\n        return this.centerRowsCtrl.isHorizontalScrollShowing();\r\n    }\r\n\r\n    // called by the headerRootComp and moveColumnController\r\n    public scrollHorizontally(pixels: number): number {\r\n        const oldScrollPosition = this.centerRowsCtrl.eViewport.scrollLeft;\r\n\r\n        this.setHorizontalScrollPosition(oldScrollPosition + pixels);\r\n        return this.centerRowsCtrl.eViewport.scrollLeft - oldScrollPosition;\r\n    }\r\n\r\n    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top\r\n    public scrollToTop(): void {\r\n        this.eBodyViewport.scrollTop = 0;\r\n    }\r\n\r\n    // Valid values for position are bottom, middle and top\r\n    public ensureNodeVisible<TData = any>(\r\n        comparator: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\r\n        position: 'top' | 'bottom' | 'middle' | null = null\r\n    ) {\r\n        const { rowModel } = this.beans;\r\n        // look for the node index we want to display\r\n        const rowCount = rowModel.getRowCount();\r\n        let indexToSelect = -1;\r\n        // go through all the nodes, find the one we want to show\r\n        for (let i = 0; i < rowCount; i++) {\r\n            const node = rowModel.getRow(i);\r\n            if (typeof comparator === 'function') {\r\n                // Have to assert type here, as type could be TData & Function\r\n                const predicate = comparator as (row: IRowNode<TData>) => boolean;\r\n                if (node && predicate(node)) {\r\n                    indexToSelect = i;\r\n                    break;\r\n                }\r\n            } else {\r\n                // check object equality against node and data\r\n                if (comparator === node || comparator === node!.data) {\r\n                    indexToSelect = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (indexToSelect >= 0) {\r\n            this.ensureIndexVisible(indexToSelect, position);\r\n        }\r\n    }\r\n\r\n    // Valid values for position are bottom, middle and top\r\n    // position should be {'top','middle','bottom', or undefined/null}.\r\n    // if undefined/null, then the grid will to the minimal amount of scrolling,\r\n    // eg if grid needs to scroll up, it scrolls until row is on top,\r\n    //    if grid needs to scroll down, it scrolls until row is on bottom,\r\n    //    if row is already in view, grid does not scroll\r\n    public ensureIndexVisible(index: number, position?: 'top' | 'bottom' | 'middle' | null) {\r\n        // if for print or auto height, everything is always visible\r\n        if (_isDomLayout(this.gos, 'print')) {\r\n            return;\r\n        }\r\n\r\n        const { rowModel } = this.beans;\r\n        const rowCount = rowModel.getRowCount();\r\n\r\n        if (typeof index !== 'number' || index < 0 || index >= rowCount) {\r\n            _warn(88, { index });\r\n            return;\r\n        }\r\n\r\n        const isPaging = this.gos.get('pagination');\r\n        const paginationPanelEnabled = isPaging && !this.gos.get('suppressPaginationPanel');\r\n\r\n        const {\r\n            frameworkOverrides,\r\n            pagination,\r\n            pageBounds,\r\n            rowContainerHeight: heightScaler,\r\n            rowRenderer,\r\n        } = this.beans;\r\n        frameworkOverrides.wrapIncoming(() => {\r\n            if (!paginationPanelEnabled) {\r\n                pagination?.goToPageWithIndex(index);\r\n            }\r\n\r\n            const gridBodyCtrl = this.ctrlsSvc.getGridBodyCtrl();\r\n            const stickyTopHeight = gridBodyCtrl.stickyTopHeight;\r\n            const stickyBottomHeight = gridBodyCtrl.stickyBottomHeight;\r\n\r\n            const rowNode = rowModel.getRow(index);\r\n            let rowGotShiftedDuringOperation: boolean;\r\n\r\n            do {\r\n                const startingRowTop = rowNode!.rowTop;\r\n                const startingRowHeight = rowNode!.rowHeight;\r\n\r\n                const paginationOffset = pageBounds.getPixelOffset();\r\n                const rowTopPixel = rowNode!.rowTop! - paginationOffset;\r\n                const rowBottomPixel = rowTopPixel + rowNode!.rowHeight!;\r\n\r\n                const scrollPosition = this.getVScrollPosition();\r\n                const heightOffset = heightScaler.divStretchOffset;\r\n\r\n                const vScrollTop = scrollPosition.top + heightOffset;\r\n                const vScrollBottom = scrollPosition.bottom + heightOffset;\r\n\r\n                const viewportHeight = vScrollBottom - vScrollTop;\r\n\r\n                // work out the pixels for top, middle and bottom up front,\r\n                // make the if/else below easier to read\r\n                const pxTop = heightScaler.getScrollPositionForPixel(rowTopPixel);\r\n                const pxBottom = heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);\r\n                // make sure if middle, the row is not outside the top of the grid\r\n                const pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);\r\n\r\n                const rowAboveViewport = vScrollTop + stickyTopHeight > rowTopPixel;\r\n                const rowBelowViewport = vScrollBottom - stickyBottomHeight < rowBottomPixel;\r\n\r\n                let newScrollPosition: number | null = null;\r\n\r\n                if (position === 'top') {\r\n                    newScrollPosition = pxTop;\r\n                } else if (position === 'bottom') {\r\n                    newScrollPosition = pxBottom;\r\n                } else if (position === 'middle') {\r\n                    newScrollPosition = pxMiddle;\r\n                } else if (rowAboveViewport) {\r\n                    // if row is before, scroll up with row at top\r\n                    newScrollPosition = pxTop - stickyTopHeight;\r\n                } else if (rowBelowViewport) {\r\n                    // if row is after, scroll down with row at bottom\r\n                    newScrollPosition = pxBottom + stickyBottomHeight;\r\n                }\r\n\r\n                if (newScrollPosition !== null) {\r\n                    this.setVerticalScrollPosition(newScrollPosition);\r\n                    rowRenderer.redraw({ afterScroll: true });\r\n                }\r\n\r\n                // the row can get shifted if during the rendering (during rowRenderer.redraw()),\r\n                // the height of a row changes due to lazy calculation of row heights when using\r\n                // colDef.autoHeight or gridOptions.getRowHeight.\r\n                // if row was shifted, then the position we scrolled to is incorrect.\r\n                rowGotShiftedDuringOperation =\r\n                    startingRowTop !== rowNode!.rowTop || startingRowHeight !== rowNode!.rowHeight;\r\n            } while (rowGotShiftedDuringOperation);\r\n\r\n            // so when we return back to user, the cells have rendered\r\n            this.animationFrameSvc?.flushAllFrames();\r\n        });\r\n    }\r\n\r\n    public ensureColumnVisible(key: any, position: 'auto' | 'start' | 'middle' | 'end' = 'auto'): void {\r\n        const { colModel, frameworkOverrides } = this.beans;\r\n        const column = colModel.getCol(key);\r\n\r\n        if (!column) {\r\n            return;\r\n        }\r\n\r\n        // calling ensureColumnVisible on a pinned column doesn't make sense\r\n        if (column.isPinned()) {\r\n            return;\r\n        }\r\n\r\n        // defensive\r\n        if (!this.visibleCols.isColDisplayed(column)) {\r\n            return;\r\n        }\r\n\r\n        const newHorizontalScroll: number | null = this.getPositionedHorizontalScroll(column, position);\r\n\r\n        frameworkOverrides.wrapIncoming(() => {\r\n            if (newHorizontalScroll !== null) {\r\n                this.centerRowsCtrl.setCenterViewportScrollLeft(newHorizontalScroll);\r\n            }\r\n\r\n            // this will happen anyway, as the move will cause a 'scroll' event on the body, however\r\n            // it is possible that the ensureColumnVisible method is called from within AG Grid and\r\n            // the caller will need to have the columns rendered to continue, which will be before\r\n            // the event has been worked on (which is the case for cell navigation).\r\n            this.centerRowsCtrl.onHorizontalViewportChanged();\r\n\r\n            // so when we return back to user, the cells have rendered\r\n            this.animationFrameSvc?.flushAllFrames();\r\n        });\r\n    }\r\n\r\n    private getPositionedHorizontalScroll(\r\n        column: AgColumn,\r\n        position: 'auto' | 'start' | 'middle' | 'end'\r\n    ): number | null {\r\n        const { columnBeforeStart, columnAfterEnd } = this.isColumnOutsideViewport(column);\r\n\r\n        const viewportTooSmallForColumn = this.centerRowsCtrl.getCenterWidth() < column.getActualWidth();\r\n        const viewportWidth = this.centerRowsCtrl.getCenterWidth();\r\n\r\n        const isRtl = this.enableRtl;\r\n\r\n        let alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;\r\n        let alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;\r\n\r\n        if (position !== 'auto') {\r\n            alignColToStart = position === 'start';\r\n            alignColToEnd = position === 'end';\r\n        }\r\n\r\n        const isMiddle = position === 'middle';\r\n\r\n        if (alignColToStart || alignColToEnd || isMiddle) {\r\n            const { colLeft, colMiddle, colRight } = this.getColumnBounds(column);\r\n\r\n            if (isMiddle) {\r\n                return colMiddle - viewportWidth / 2;\r\n            }\r\n\r\n            if (alignColToStart) {\r\n                return isRtl ? colRight : colLeft;\r\n            }\r\n\r\n            return isRtl ? colLeft - viewportWidth : colRight - viewportWidth;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private isColumnOutsideViewport(column: AgColumn): { columnBeforeStart: boolean; columnAfterEnd: boolean } {\r\n        const { start: viewportStart, end: viewportEnd } = this.getViewportBounds();\r\n        const { colLeft, colRight } = this.getColumnBounds(column);\r\n\r\n        const isRtl = this.enableRtl;\r\n\r\n        const columnBeforeStart = isRtl ? viewportStart > colRight : viewportEnd < colRight;\r\n        const columnAfterEnd = isRtl ? viewportEnd < colLeft : viewportStart > colLeft;\r\n\r\n        return { columnBeforeStart, columnAfterEnd };\r\n    }\r\n\r\n    private getColumnBounds(column: AgColumn): { colLeft: number; colMiddle: number; colRight: number } {\r\n        const isRtl = this.enableRtl;\r\n        const bodyWidth = this.visibleCols.bodyWidth;\r\n        const colWidth = column.getActualWidth();\r\n        const colLeft = column.getLeft()!;\r\n        const multiplier = isRtl ? -1 : 1;\r\n\r\n        const colLeftPixel = isRtl ? bodyWidth - colLeft : colLeft;\r\n        const colRightPixel = colLeftPixel + colWidth * multiplier;\r\n        const colMidPixel = colLeftPixel + (colWidth / 2) * multiplier;\r\n\r\n        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };\r\n    }\r\n\r\n    private getViewportBounds(): { start: number; end: number; width: number } {\r\n        const viewportWidth = this.centerRowsCtrl.getCenterWidth();\r\n        const scrollPosition = this.centerRowsCtrl.getCenterViewportScrollLeft();\r\n\r\n        const viewportStartPixel = scrollPosition;\r\n        const viewportEndPixel = viewportWidth + scrollPosition;\r\n\r\n        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport { _isDomLayout } from '../gridOptionsUtils';\r\n\r\nexport class CenterWidthFeature extends BeanStub {\r\n    constructor(\r\n        private readonly callback: (width: number) => void,\r\n        private readonly addSpacer: boolean = false\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const listener = this.setWidth.bind(this);\r\n        this.addManagedPropertyListener('domLayout', listener);\r\n\r\n        this.addManagedEventListeners({\r\n            columnContainerWidthChanged: listener,\r\n            displayedColumnsChanged: listener,\r\n            leftPinnedWidthChanged: listener,\r\n        });\r\n\r\n        if (this.addSpacer) {\r\n            this.addManagedEventListeners({\r\n                rightPinnedWidthChanged: listener,\r\n                scrollVisibilityChanged: listener,\r\n                scrollbarWidthChanged: listener,\r\n            });\r\n        }\r\n\r\n        this.setWidth();\r\n    }\r\n\r\n    private setWidth(): void {\r\n        const printLayout = _isDomLayout(this.gos, 'print');\r\n        const { visibleCols, scrollVisibleSvc } = this.beans;\r\n\r\n        const centerWidth = visibleCols.bodyWidth;\r\n        const leftWidth = visibleCols.getColsLeftWidth();\r\n        const rightWidth = visibleCols.getDisplayedColumnsRightWidth();\r\n\r\n        let totalWidth: number;\r\n\r\n        if (printLayout) {\r\n            totalWidth = centerWidth + leftWidth + rightWidth;\r\n        } else {\r\n            totalWidth = centerWidth;\r\n\r\n            if (this.addSpacer) {\r\n                const relevantWidth = this.gos.get('enableRtl') ? leftWidth : rightWidth;\r\n                if (relevantWidth === 0 && scrollVisibleSvc.verticalScrollShowing) {\r\n                    totalWidth += scrollVisibleSvc.getScrollbarWidth();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.callback(totalWidth);\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { ScrollVisibleService, SetScrollsVisibleParams } from '../gridBodyComp/scrollVisibleService';\r\nimport { _requestAnimationFrame } from '../misc/animationFrameService';\r\nimport { _getInnerHeight } from '../utils/dom';\r\nimport type { GridBodyCtrl } from './gridBodyCtrl';\r\nimport type { RowContainerCtrl } from './rowContainer/rowContainerCtrl';\r\n\r\n// listens to changes in the center viewport size, for column and row virtualisation,\r\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\r\n// vertical scrolling.\r\nexport class ViewportSizeFeature extends BeanStub {\r\n    private scrollVisibleSvc: ScrollVisibleService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.scrollVisibleSvc = beans.scrollVisibleSvc;\r\n    }\r\n\r\n    private gridBodyCtrl: GridBodyCtrl;\r\n\r\n    private centerWidth: number;\r\n    private bodyHeight: number;\r\n\r\n    constructor(private readonly centerContainerCtrl: RowContainerCtrl) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCtrl = p.gridBodyCtrl;\r\n            this.listenForResize();\r\n        });\r\n        this.addManagedEventListeners({ scrollbarWidthChanged: this.onScrollbarWidthChanged.bind(this) });\r\n        this.addManagedPropertyListeners(['alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll'], () => {\r\n            this.checkViewportAndScrolls();\r\n        });\r\n    }\r\n\r\n    private listenForResize(): void {\r\n        const { beans, centerContainerCtrl, gridBodyCtrl } = this;\r\n\r\n        const listener = () => {\r\n            // onCenterViewportResize causes resize events to be fired (flex-columns).\r\n            // when any resize event happens, style and layout are re-evaluated \u2014 which in turn may\r\n            // trigger more resize events. Infinite loops from cyclic dependencies are addressed by\r\n            // only processing elements deeper in the DOM during each iteration.\r\n            // so the solution here is to use the animation frame service to avoid infinite loops.\r\n            // For more info, see: https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver#observation_errors\r\n            _requestAnimationFrame(beans, () => {\r\n                this.onCenterViewportResized();\r\n            });\r\n        };\r\n\r\n        // centerContainer gets horizontal resizes\r\n        centerContainerCtrl.registerViewportResizeListener(listener);\r\n\r\n        // eBodyViewport gets vertical resizes\r\n        gridBodyCtrl.registerBodyViewportResizeListener(listener);\r\n    }\r\n\r\n    private onScrollbarWidthChanged() {\r\n        this.checkViewportAndScrolls();\r\n    }\r\n\r\n    private onCenterViewportResized(): void {\r\n        this.scrollVisibleSvc.updateScrollGap();\r\n        if (this.centerContainerCtrl.isViewportInTheDOMTree()) {\r\n            const { pinnedCols, colFlex } = this.beans;\r\n            pinnedCols?.keepPinnedColumnsNarrowerThanViewport();\r\n            this.checkViewportAndScrolls();\r\n\r\n            const newWidth = this.centerContainerCtrl.getCenterWidth();\r\n\r\n            if (newWidth !== this.centerWidth) {\r\n                this.centerWidth = newWidth;\r\n                colFlex?.refreshFlexedColumns({\r\n                    viewportWidth: this.centerWidth,\r\n                    updateBodyWidths: true,\r\n                    fireResizedEvent: true,\r\n                });\r\n            }\r\n        } else {\r\n            this.bodyHeight = 0;\r\n        }\r\n    }\r\n\r\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\r\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\r\n    private checkViewportAndScrolls(): void {\r\n        // results in updating anything that depends on scroll showing\r\n        this.updateScrollVisibleService();\r\n\r\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\r\n        this.checkBodyHeight();\r\n\r\n        // check for virtual columns for ColumnController\r\n        this.onHorizontalViewportChanged();\r\n\r\n        this.gridBodyCtrl.scrollFeature.checkScrollLeft();\r\n    }\r\n\r\n    public getBodyHeight(): number {\r\n        return this.bodyHeight;\r\n    }\r\n\r\n    private checkBodyHeight(): void {\r\n        const eBodyViewport = this.gridBodyCtrl.eBodyViewport;\r\n        const bodyHeight = _getInnerHeight(eBodyViewport);\r\n\r\n        if (this.bodyHeight !== bodyHeight) {\r\n            this.bodyHeight = bodyHeight;\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'bodyHeightChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateScrollVisibleService(): void {\r\n        // because of column animation (which takes 200ms), we have to do this twice.\r\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\r\n        // will animate to the left to fill the gap. this animation means just after\r\n        // the cols are removed, the remaining cols are still in the original location\r\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\r\n        // but post animation it is not.\r\n        this.updateScrollVisibleServiceImpl();\r\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\r\n    }\r\n\r\n    private updateScrollVisibleServiceImpl(): void {\r\n        const params: SetScrollsVisibleParams = {\r\n            horizontalScrollShowing: this.centerContainerCtrl.isHorizontalScrollShowing(),\r\n            verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing(),\r\n        };\r\n\r\n        this.scrollVisibleSvc.setScrollsVisible(params);\r\n    }\r\n\r\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\r\n    // out the virtual columns again. gets called from following locations:\r\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\r\n    private onHorizontalViewportChanged(): void {\r\n        const scrollWidth = this.centerContainerCtrl.getCenterWidth();\r\n        const scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();\r\n\r\n        this.beans.colViewport.setScrollPosition(scrollWidth, scrollPosition);\r\n    }\r\n}\r\n", "import type { CellClassParams } from '../entities/colDef';\r\nimport type { RowClassParams } from '../entities/gridOptions';\r\nimport type { ExpressionService } from '../valueService/expressionService';\r\n\r\nexport function processClassRules(\r\n    expressionSvc: ExpressionService | undefined,\r\n    previousClassRules: { [cssClassName: string]: ((...args: any[]) => any) | string } | undefined,\r\n    classRules: { [cssClassName: string]: ((...args: any[]) => any) | string } | undefined,\r\n    params: RowClassParams | CellClassParams,\r\n    onApplicableClass: (className: string) => void,\r\n    onNotApplicableClass?: (className: string) => void\r\n) {\r\n    if (classRules == null && previousClassRules == null) {\r\n        return;\r\n    }\r\n\r\n    const classesToApply: { [name: string]: boolean } = {};\r\n    const classesToRemove: { [name: string]: boolean } = {};\r\n\r\n    const forEachSingleClass = (className: string, callback: (singleClass: string) => void) => {\r\n        // in case className = 'my-class1 my-class2', we need to split into individual class names\r\n        className.split(' ').forEach((singleClass) => {\r\n            if (singleClass.trim() == '') return;\r\n            callback(singleClass);\r\n        });\r\n    };\r\n\r\n    if (classRules) {\r\n        const classNames = Object.keys(classRules);\r\n        for (let i = 0; i < classNames.length; i++) {\r\n            const className = classNames[i];\r\n            const rule = classRules![className];\r\n\r\n            let resultOfRule: any;\r\n\r\n            if (typeof rule === 'string') {\r\n                resultOfRule = expressionSvc ? expressionSvc.evaluate(rule, params) : true;\r\n            } else if (typeof rule === 'function') {\r\n                resultOfRule = rule(params);\r\n            }\r\n\r\n            forEachSingleClass(className, (singleClass) => {\r\n                resultOfRule ? (classesToApply[singleClass] = true) : (classesToRemove[singleClass] = true);\r\n            });\r\n        }\r\n    }\r\n    if (previousClassRules && onNotApplicableClass) {\r\n        Object.keys(previousClassRules).forEach((className) =>\r\n            forEachSingleClass(className, (singleClass) => {\r\n                if (!classesToApply[singleClass]) {\r\n                    // if we're not applying a previous class now, make sure we remove it\r\n                    classesToRemove[singleClass] = true;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // we remove all classes first, then add all classes second,\r\n    // in case a class appears in more than one rule, this means it will be added\r\n    // if appears in at least one truthy rule\r\n    if (onNotApplicableClass) {\r\n        Object.keys(classesToRemove).forEach(onNotApplicableClass);\r\n    }\r\n    Object.keys(classesToApply).forEach(onApplicableClass);\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowClassParams, RowStyle } from '../entities/gridOptions';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport { processClassRules } from './stylingUtils';\r\n\r\nexport function calculateRowLevel(rowNode: RowNode): number {\r\n    if (rowNode.group) {\r\n        return rowNode.level;\r\n    }\r\n\r\n    const parent = rowNode.parent;\r\n    // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item\r\n    return parent ? parent.level + 1 : 0;\r\n}\r\n\r\nexport class RowStyleService extends BeanStub implements NamedBean {\r\n    beanName = 'rowStyleSvc' as const;\r\n\r\n    public processClassesFromGridOptions(classes: string[], rowNode: RowNode): void {\r\n        const gos = this.gos;\r\n        const process = (rowCls: string | string[] | undefined) => {\r\n            if (typeof rowCls === 'string') {\r\n                classes.push(rowCls);\r\n            } else if (Array.isArray(rowCls)) {\r\n                rowCls.forEach((e) => classes.push(e));\r\n            }\r\n        };\r\n\r\n        // part 1 - rowClass\r\n        const rowClass = gos.get('rowClass');\r\n        if (rowClass) {\r\n            process(rowClass);\r\n        }\r\n\r\n        // part 2 - rowClassFunc\r\n        const rowClassFunc = gos.getCallback('getRowClass');\r\n\r\n        if (rowClassFunc) {\r\n            const params: WithoutGridCommon<RowClassParams> = {\r\n                data: rowNode.data,\r\n                node: rowNode,\r\n                rowIndex: rowNode.rowIndex!,\r\n            };\r\n            const rowClassFuncResult = rowClassFunc(params);\r\n            process(rowClassFuncResult);\r\n        }\r\n    }\r\n\r\n    public preProcessRowClassRules(classes: string[], rowNode: RowNode): void {\r\n        this.processRowClassRules(\r\n            rowNode,\r\n            (className: string) => {\r\n                classes.push(className);\r\n            },\r\n            () => {\r\n                // not catered for, if creating, no need\r\n                // to remove class as it was never there\r\n            }\r\n        );\r\n    }\r\n\r\n    public processRowClassRules(\r\n        rowNode: RowNode,\r\n        onApplicableClass: (className: string) => void,\r\n        onNotApplicableClass?: (className: string) => void\r\n    ): void {\r\n        const { gos, expressionSvc } = this.beans;\r\n        const rowClassParams: RowClassParams = gos.addGridCommonParams({\r\n            data: rowNode.data,\r\n            node: rowNode,\r\n            rowIndex: rowNode.rowIndex!,\r\n        });\r\n\r\n        processClassRules(\r\n            expressionSvc,\r\n            undefined,\r\n            gos.get('rowClassRules'),\r\n            rowClassParams,\r\n            onApplicableClass,\r\n            onNotApplicableClass\r\n        );\r\n    }\r\n\r\n    public processStylesFromGridOptions(rowNode: RowNode): RowStyle | undefined {\r\n        const gos = this.gos;\r\n        // part 1 - rowStyle\r\n        const rowStyle = gos.get('rowStyle');\r\n\r\n        // part 1 - rowStyleFunc\r\n        const rowStyleFunc = gos.getCallback('getRowStyle');\r\n        let rowStyleFuncResult: any;\r\n\r\n        if (rowStyleFunc) {\r\n            const params: WithoutGridCommon<RowClassParams> = {\r\n                data: rowNode.data,\r\n                node: rowNode,\r\n                rowIndex: rowNode.rowIndex!,\r\n            };\r\n            rowStyleFuncResult = rowStyleFunc(params);\r\n        }\r\n        if (rowStyleFuncResult || rowStyle) {\r\n            return Object.assign({}, rowStyle, rowStyleFuncResult);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n", "import { setupCompBean } from '../../components/emptyBean';\r\nimport {\r\n    _getFullWidthCellRendererDetails,\r\n    _getFullWidthDetailCellRendererDetails,\r\n    _getFullWidthGroupCellRendererDetails,\r\n    _getFullWidthLoadingCellRendererDetails,\r\n} from '../../components/framework/userCompUtils';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { RowStyle } from '../../entities/gridOptions';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport type { AgEventType } from '../../eventTypes';\r\nimport type { CellFocusedEvent, RowEvent, VirtualRowRemovedEvent } from '../../events';\r\nimport type { RowContainerType } from '../../gridBodyComp/rowContainer/rowContainerCtrl';\r\nimport {\r\n    _getActiveDomElement,\r\n    _getRowHeightForNode,\r\n    _isAnimateRows,\r\n    _isDomLayout,\r\n    _isGetRowHeightFunction,\r\n    _isGroupUseEntireRow,\r\n    _isRowSelection,\r\n    _setDomData,\r\n} from '../../gridOptionsUtils';\r\nimport type { BrandedType } from '../../interfaces/brandedType';\r\nimport type { ProcessRowParams, RenderedRowEvent } from '../../interfaces/iCallbackParams';\r\nimport type { CellPosition } from '../../interfaces/iCellPosition';\r\nimport type { ColumnInstanceId, ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\r\nimport type { DataChangedEvent, IRowNode } from '../../interfaces/iRowNode';\r\nimport type { RowPosition } from '../../interfaces/iRowPosition';\r\nimport type { UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { calculateRowLevel } from '../../styling/rowStyleService';\r\nimport type { TooltipFeature } from '../../tooltip/tooltipFeature';\r\nimport { _setAriaExpanded, _setAriaRowIndex } from '../../utils/aria';\r\nimport { _addOrRemoveAttribute, _isElementChildOfClass, _isFocusableFormField, _isVisible } from '../../utils/dom';\r\nimport { _isStopPropagationForAgGrid } from '../../utils/event';\r\nimport { _findNextFocusableElement } from '../../utils/focus';\r\nimport { _executeNextVMTurn } from '../../utils/function';\r\nimport { _exists, _makeNull } from '../../utils/generic';\r\nimport { _escapeString } from '../../utils/string';\r\nimport type { Component } from '../../widgets/component';\r\nimport { CellCtrl } from '../cell/cellCtrl';\r\nimport type { ICellRenderer, ICellRendererParams } from '../cellRenderers/iCellRenderer';\r\n\r\ntype RowType = 'Normal' | 'FullWidth' | 'FullWidthLoading' | 'FullWidthGroup' | 'FullWidthDetail';\r\n\r\nlet instanceIdSequence = 0;\r\nexport type RowCtrlInstanceId = BrandedType<string, 'RowCtrlInstanceId'>;\r\n\r\nexport interface IRowComp {\r\n    setDomOrder(domOrder: boolean): void;\r\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\r\n    setCellCtrls(cellCtrls: CellCtrl[], useFlushSync: boolean): void;\r\n    showFullWidth(compDetails: UserCompDetails): void;\r\n    getFullWidthCellRenderer(): ICellRenderer | null | undefined;\r\n    setTop(top: string): void;\r\n    setTransform(transform: string): void;\r\n    setRowIndex(rowIndex: string): void;\r\n    setRowId(rowId: string): void;\r\n    setRowBusinessKey(businessKey: string): void;\r\n    setUserStyles(styles: RowStyle | undefined): void;\r\n    refreshFullWidth(getUpdatedParams: () => ICellRendererParams): boolean;\r\n}\r\n\r\nexport interface RowGui {\r\n    rowComp: IRowComp;\r\n    element: HTMLElement;\r\n    containerType: RowContainerType;\r\n    compBean: BeanStub;\r\n}\r\n\r\ninterface CellCtrlListAndMap {\r\n    list: CellCtrl[];\r\n    map: { [key: ColumnInstanceId]: CellCtrl };\r\n}\r\n\r\nexport const DOM_DATA_KEY_ROW_CTRL = 'renderedRow';\r\n\r\nexport type RowCtrlEvent = RenderedRowEvent;\r\nexport class RowCtrl extends BeanStub<RowCtrlEvent> {\r\n    public readonly instanceId: RowCtrlInstanceId;\r\n\r\n    private tooltipFeature: TooltipFeature | undefined;\r\n\r\n    private rowType: RowType;\r\n\r\n    private leftGui: RowGui | undefined;\r\n    private centerGui: RowGui | undefined;\r\n    private rightGui: RowGui | undefined;\r\n    private fullWidthGui: RowGui | undefined;\r\n\r\n    private allRowGuis: RowGui[] = [];\r\n\r\n    private firstRowOnPage: boolean;\r\n    private lastRowOnPage: boolean;\r\n\r\n    private active = true;\r\n\r\n    public stoppingRowEdit: boolean;\r\n    /** full row editing */\r\n    public editing: boolean;\r\n    private rowFocused: boolean;\r\n\r\n    private centerCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\r\n    private leftCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\r\n    private rightCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\r\n\r\n    private slideInAnimation: { [key in RowContainerType]: boolean } = {\r\n        left: false,\r\n        center: false,\r\n        right: false,\r\n        fullWidth: false,\r\n    };\r\n\r\n    private fadeInAnimation: { [key in RowContainerType]: boolean } = {\r\n        left: false,\r\n        center: false,\r\n        right: false,\r\n        fullWidth: false,\r\n    };\r\n\r\n    private rowDragComps: Component[] = [];\r\n\r\n    private paginationPage: number;\r\n\r\n    private lastMouseDownOnDragger = false;\r\n\r\n    private rowLevel: number;\r\n    public rowStyles: RowStyle;\r\n    private readonly emptyStyle: RowStyle = {};\r\n    private readonly suppressRowTransform: boolean;\r\n\r\n    private updateColumnListsPending = false;\r\n\r\n    public rowId: string | null = null;\r\n    /** sanitised */\r\n    public businessKey: string | null = null;\r\n    private businessKeyForNodeFunc: ((node: IRowNode<any>) => string) | undefined;\r\n\r\n    constructor(\r\n        public readonly rowNode: RowNode,\r\n        beans: BeanCollection,\r\n        animateIn: boolean,\r\n        private readonly useAnimationFrameForCreate: boolean,\r\n        public readonly printLayout: boolean\r\n    ) {\r\n        super();\r\n        this.beans = beans;\r\n        this.gos = beans.gos;\r\n        this.paginationPage = beans.pagination?.getCurrentPage() ?? 0;\r\n        this.suppressRowTransform = this.gos.get('suppressRowTransform');\r\n\r\n        this.instanceId = (rowNode.id + '-' + instanceIdSequence++) as RowCtrlInstanceId;\r\n        this.rowId = _escapeString(rowNode.id);\r\n\r\n        this.initRowBusinessKey();\r\n\r\n        this.rowFocused = beans.focusSvc.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\r\n        this.rowLevel = calculateRowLevel(this.rowNode);\r\n\r\n        this.setRowType();\r\n        this.setAnimateFlags(animateIn);\r\n        this.rowStyles = this.processStylesFromGridOptions();\r\n\r\n        this.addListeners();\r\n    }\r\n\r\n    private initRowBusinessKey(): void {\r\n        this.businessKeyForNodeFunc = this.gos.get('getBusinessKeyForNode');\r\n        this.updateRowBusinessKey();\r\n    }\r\n\r\n    private updateRowBusinessKey(): void {\r\n        if (typeof this.businessKeyForNodeFunc !== 'function') {\r\n            return;\r\n        }\r\n        const businessKey = this.businessKeyForNodeFunc(this.rowNode);\r\n        this.businessKey = _escapeString(businessKey!);\r\n    }\r\n\r\n    private updateGui(containerType: RowContainerType, gui: RowGui | undefined) {\r\n        if (containerType === 'left') {\r\n            this.leftGui = gui;\r\n        } else if (containerType === 'right') {\r\n            this.rightGui = gui;\r\n        } else if (containerType === 'fullWidth') {\r\n            this.fullWidthGui = gui;\r\n        } else {\r\n            this.centerGui = gui;\r\n        }\r\n    }\r\n\r\n    public setComp(\r\n        rowComp: IRowComp,\r\n        element: HTMLElement,\r\n        containerType: RowContainerType,\r\n        compBean: BeanStub<any> | undefined\r\n    ): void {\r\n        compBean = setupCompBean(this, this.beans.context, compBean);\r\n\r\n        const gui: RowGui = { rowComp, element, containerType, compBean };\r\n        this.allRowGuis.push(gui);\r\n        this.updateGui(containerType, gui);\r\n\r\n        this.initialiseRowComp(gui);\r\n\r\n        // pinned rows render before the main grid body in the SSRM, only fire the event after the main body has rendered.\r\n        if (this.rowType !== 'FullWidthLoading' && !this.rowNode.rowPinned) {\r\n            // this is fired within setComp as we know that the component renderer is now trying to render.\r\n            // linked with the fact the function implementation queues behind requestAnimationFrame should allow\r\n            // us to be certain that all rendering is done by the time the event fires.\r\n            this.beans.rowRenderer.dispatchFirstDataRenderedEvent();\r\n        }\r\n    }\r\n\r\n    public unsetComp(containerType: RowContainerType): void {\r\n        this.allRowGuis = this.allRowGuis.filter((rowGui) => rowGui.containerType !== containerType);\r\n        this.updateGui(containerType, undefined);\r\n    }\r\n\r\n    public isCacheable(): boolean {\r\n        return this.rowType === 'FullWidthDetail' && this.gos.get('keepDetailRows');\r\n    }\r\n\r\n    public setCached(cached: boolean): void {\r\n        const displayValue = cached ? 'none' : '';\r\n        this.allRowGuis.forEach((rg) => (rg.element.style.display = displayValue));\r\n    }\r\n\r\n    private initialiseRowComp(gui: RowGui): void {\r\n        const gos = this.gos;\r\n\r\n        this.onSuppressCellFocusChanged(this.beans.gos.get('suppressCellFocus'));\r\n\r\n        this.listenOnDomOrder(gui);\r\n        this.beans.rowAutoHeight?.checkAutoHeights(this.rowNode);\r\n        this.onRowHeightChanged(gui);\r\n        this.updateRowIndexes(gui);\r\n        this.setFocusedClasses(gui);\r\n        this.setStylesFromGridOptions(false, gui); // no need to calculate styles already set in constructor\r\n\r\n        if (_isRowSelection(gos) && this.rowNode.selectable) {\r\n            this.onRowSelected(gui);\r\n        }\r\n\r\n        this.updateColumnLists(!this.useAnimationFrameForCreate);\r\n\r\n        const comp = gui.rowComp;\r\n\r\n        const initialRowClasses = this.getInitialRowClasses(gui.containerType);\r\n        initialRowClasses.forEach((name) => comp.addOrRemoveCssClass(name, true));\r\n\r\n        this.executeSlideAndFadeAnimations(gui);\r\n\r\n        if (this.rowNode.group) {\r\n            _setAriaExpanded(gui.element, this.rowNode.expanded == true);\r\n        }\r\n\r\n        this.setRowCompRowId(comp);\r\n        this.setRowCompRowBusinessKey(comp);\r\n\r\n        // DOM DATA\r\n        _setDomData(gos, gui.element, DOM_DATA_KEY_ROW_CTRL, this);\r\n        gui.compBean.addDestroyFunc(() => _setDomData(gos, gui.element, DOM_DATA_KEY_ROW_CTRL, null));\r\n\r\n        // adding hover functionality adds listener to this row, so we\r\n        // do it lazily in an animation frame\r\n        if (this.useAnimationFrameForCreate) {\r\n            this.beans.animationFrameSvc!.createTask(\r\n                this.addHoverFunctionality.bind(this, gui),\r\n                this.rowNode.rowIndex!,\r\n                'createTasksP2'\r\n            );\r\n        } else {\r\n            this.addHoverFunctionality(gui);\r\n        }\r\n\r\n        if (this.isFullWidth()) {\r\n            this.setupFullWidth(gui);\r\n        }\r\n\r\n        if (gos.get('rowDragEntireRow')) {\r\n            this.addRowDraggerToRow(gui);\r\n        }\r\n\r\n        if (this.useAnimationFrameForCreate) {\r\n            // the height animation we only want active after the row is alive for 1 second.\r\n            // this stops the row animation working when rows are initially created. otherwise\r\n            // auto-height rows get inserted into the dom and resized immediately, which gives\r\n            // very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad\r\n            // when scrolling). so this makes sure when rows are shown for the first time, they\r\n            // are resized immediately without animation.\r\n            this.beans.animationFrameSvc!.addDestroyTask(() => {\r\n                if (!this.isAlive()) {\r\n                    return;\r\n                }\r\n                gui.rowComp.addOrRemoveCssClass('ag-after-created', true);\r\n            });\r\n        }\r\n\r\n        this.executeProcessRowPostCreateFunc();\r\n    }\r\n\r\n    private setRowCompRowBusinessKey(comp: IRowComp): void {\r\n        if (this.businessKey == null) {\r\n            return;\r\n        }\r\n        comp.setRowBusinessKey(this.businessKey);\r\n    }\r\n\r\n    private setRowCompRowId(comp: IRowComp) {\r\n        const rowId = _escapeString(this.rowNode.id);\r\n        this.rowId = rowId;\r\n        if (rowId == null) {\r\n            return;\r\n        }\r\n\r\n        comp.setRowId(rowId);\r\n    }\r\n\r\n    private executeSlideAndFadeAnimations(gui: RowGui): void {\r\n        const { containerType } = gui;\r\n\r\n        const shouldSlide = this.slideInAnimation[containerType];\r\n        if (shouldSlide) {\r\n            _executeNextVMTurn(() => {\r\n                this.onTopChanged();\r\n            });\r\n            this.slideInAnimation[containerType] = false;\r\n        }\r\n\r\n        const shouldFade = this.fadeInAnimation[containerType];\r\n        if (shouldFade) {\r\n            _executeNextVMTurn(() => {\r\n                gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', false);\r\n            });\r\n            this.fadeInAnimation[containerType] = false;\r\n        }\r\n    }\r\n\r\n    private addRowDraggerToRow(gui: RowGui) {\r\n        const rowDragComp = this.beans.rowDragSvc?.createRowDragCompForRow(this.rowNode, gui.element);\r\n        if (!rowDragComp) {\r\n            return;\r\n        }\r\n        const rowDragBean = this.createBean(rowDragComp, this.beans.context);\r\n        this.rowDragComps.push(rowDragBean);\r\n        gui.compBean.addDestroyFunc(() => {\r\n            this.rowDragComps = this.rowDragComps.filter((r) => r !== rowDragBean);\r\n            this.destroyBean(rowDragBean, this.beans.context);\r\n        });\r\n    }\r\n\r\n    private setupFullWidth(gui: RowGui): void {\r\n        const pinned = this.getPinnedForContainer(gui.containerType);\r\n        const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\r\n        gui.rowComp.showFullWidth(compDetails);\r\n    }\r\n\r\n    public getFullWidthCellRenderers(): (ICellRenderer<any> | null | undefined)[] {\r\n        if (this.gos.get('embedFullWidthRows')) {\r\n            return this.allRowGuis.map((gui) => gui?.rowComp?.getFullWidthCellRenderer());\r\n        }\r\n        return [this.fullWidthGui?.rowComp?.getFullWidthCellRenderer()];\r\n    }\r\n\r\n    private executeProcessRowPostCreateFunc(): void {\r\n        const func = this.gos.getCallback('processRowPostCreate');\r\n        if (!func || !this.areAllContainersReady()) {\r\n            return;\r\n        }\r\n\r\n        const params: WithoutGridCommon<ProcessRowParams> = {\r\n            // areAllContainersReady asserts that centerGui is not null\r\n            eRow: this.centerGui!.element,\r\n            ePinnedLeftRow: this.leftGui ? this.leftGui.element : undefined,\r\n            ePinnedRightRow: this.rightGui ? this.rightGui.element : undefined,\r\n            node: this.rowNode,\r\n            rowIndex: this.rowNode.rowIndex!,\r\n            addRenderedRowListener: this.addEventListener.bind(this),\r\n        };\r\n        func(params);\r\n    }\r\n\r\n    private areAllContainersReady(): boolean {\r\n        const {\r\n            leftGui,\r\n            centerGui,\r\n            rightGui,\r\n            beans: { visibleCols },\r\n        } = this;\r\n        const isLeftReady = !!leftGui || !visibleCols.isPinningLeft();\r\n        const isCenterReady = !!centerGui;\r\n        const isRightReady = !!rightGui || !visibleCols.isPinningRight();\r\n\r\n        return isLeftReady && isCenterReady && isRightReady;\r\n    }\r\n\r\n    private isNodeFullWidthCell(): boolean {\r\n        if (this.rowNode.detail) {\r\n            return true;\r\n        }\r\n\r\n        const isFullWidthCellFunc = this.beans.gos.getCallback('isFullWidthRow');\r\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this.rowNode }) : false;\r\n    }\r\n\r\n    private setRowType(): void {\r\n        // groupHideOpenParents implicitly disables full width loading\r\n        const isStub =\r\n            this.rowNode.stub &&\r\n            !this.gos.get('suppressServerSideFullWidthLoadingRow') &&\r\n            !this.gos.get('groupHideOpenParents');\r\n        const isFullWidthCell = this.isNodeFullWidthCell();\r\n        const isDetailCell = this.gos.get('masterDetail') && this.rowNode.detail;\r\n        const pivotMode = this.beans.colModel.isPivotMode();\r\n        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking\r\n        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'\r\n        // so each can be set independently (as a customer complained about footers getting full width, hence\r\n        // introducing this logic)\r\n        const isGroupRow = !!this.rowNode.group && !this.rowNode.footer;\r\n        const isFullWidthGroup = isGroupRow && _isGroupUseEntireRow(this.gos, pivotMode);\r\n\r\n        if (isStub) {\r\n            this.rowType = 'FullWidthLoading';\r\n        } else if (isDetailCell) {\r\n            this.rowType = 'FullWidthDetail';\r\n        } else if (isFullWidthCell) {\r\n            this.rowType = 'FullWidth';\r\n        } else if (isFullWidthGroup) {\r\n            this.rowType = 'FullWidthGroup';\r\n        } else {\r\n            this.rowType = 'Normal';\r\n        }\r\n    }\r\n\r\n    private updateColumnLists(suppressAnimationFrame = false, useFlushSync = false): void {\r\n        if (this.isFullWidth()) {\r\n            return;\r\n        }\r\n\r\n        const { animationFrameSvc } = this.beans;\r\n        const noAnimation =\r\n            !animationFrameSvc || suppressAnimationFrame || this.gos.get('suppressAnimationFrame') || this.printLayout;\r\n\r\n        if (noAnimation) {\r\n            this.updateColumnListsImpl(useFlushSync);\r\n            return;\r\n        }\r\n\r\n        if (this.updateColumnListsPending) {\r\n            return;\r\n        }\r\n        animationFrameSvc.createTask(\r\n            () => {\r\n                if (!this.active) {\r\n                    return;\r\n                }\r\n                this.updateColumnListsImpl(true);\r\n            },\r\n            this.rowNode.rowIndex!,\r\n            'createTasksP1'\r\n        );\r\n        this.updateColumnListsPending = true;\r\n    }\r\n\r\n    private createCellCtrls(\r\n        prev: CellCtrlListAndMap,\r\n        cols: AgColumn[],\r\n        pinned: ColumnPinnedType = null\r\n    ): CellCtrlListAndMap {\r\n        const res: CellCtrlListAndMap = {\r\n            list: [],\r\n            map: {},\r\n        };\r\n\r\n        const addCell = (colInstanceId: ColumnInstanceId, cellCtrl: CellCtrl) => {\r\n            res.list.push(cellCtrl);\r\n            res.map[colInstanceId] = cellCtrl;\r\n        };\r\n\r\n        cols.forEach((col) => {\r\n            // we use instanceId's rather than colId as it's possible there is a Column with same Id,\r\n            // but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are\r\n            // reused eg pivot_0, pivot_1 etc\r\n            const colInstanceId = col.getInstanceId();\r\n            let cellCtrl = prev.map[colInstanceId];\r\n            if (!cellCtrl) {\r\n                cellCtrl = new CellCtrl(col, this.rowNode, this.beans, this);\r\n            }\r\n            addCell(colInstanceId, cellCtrl);\r\n        });\r\n\r\n        prev.list.forEach((prevCellCtrl) => {\r\n            const colInstanceId = prevCellCtrl.column.getInstanceId();\r\n            const cellInResult = res.map[colInstanceId] != null;\r\n            if (cellInResult) {\r\n                return;\r\n            }\r\n\r\n            const keepCell = !this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);\r\n            if (keepCell) {\r\n                addCell(colInstanceId, prevCellCtrl);\r\n                return;\r\n            }\r\n\r\n            prevCellCtrl.destroy();\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    private updateColumnListsImpl(useFlushSync: boolean): void {\r\n        this.updateColumnListsPending = false;\r\n        this.createAllCellCtrls();\r\n\r\n        this.setCellCtrls(useFlushSync);\r\n    }\r\n\r\n    private setCellCtrls(useFlushSync: boolean) {\r\n        this.allRowGuis.forEach((item) => {\r\n            const cellControls = this.getCellCtrlsForContainer(item.containerType);\r\n            item.rowComp.setCellCtrls(cellControls, useFlushSync);\r\n        });\r\n    }\r\n\r\n    private getCellCtrlsForContainer(containerType: RowContainerType) {\r\n        switch (containerType) {\r\n            case 'left':\r\n                return this.leftCellCtrls.list;\r\n            case 'right':\r\n                return this.rightCellCtrls.list;\r\n            case 'fullWidth':\r\n                return [];\r\n            case 'center':\r\n                return this.centerCellCtrls.list;\r\n        }\r\n    }\r\n\r\n    private createAllCellCtrls() {\r\n        const colViewport = this.beans.colViewport;\r\n        const presentedColsService = this.beans.visibleCols;\r\n        if (this.printLayout) {\r\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, presentedColsService.allCols);\r\n            this.leftCellCtrls = { list: [], map: {} };\r\n            this.rightCellCtrls = { list: [], map: {} };\r\n        } else {\r\n            const centerCols = colViewport.getColsWithinViewport(this.rowNode);\r\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);\r\n\r\n            const leftCols = presentedColsService.getLeftColsForRow(this.rowNode);\r\n            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, 'left');\r\n\r\n            const rightCols = presentedColsService.getRightColsForRow(this.rowNode);\r\n            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, 'right');\r\n        }\r\n    }\r\n\r\n    private isCellEligibleToBeRemoved(cellCtrl: CellCtrl, nextContainerPinned: ColumnPinnedType): boolean {\r\n        const REMOVE_CELL = true;\r\n        const KEEP_CELL = false;\r\n\r\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\r\n        const { column } = cellCtrl;\r\n        if (column.getPinned() != nextContainerPinned) {\r\n            return REMOVE_CELL;\r\n        }\r\n\r\n        // we want to try and keep editing and focused cells\r\n        const { editing, cellPosition } = cellCtrl;\r\n        const { focusSvc, visibleCols } = this.beans;\r\n        const focused = focusSvc.isCellFocused(cellPosition);\r\n\r\n        const mightWantToKeepCell = editing || focused;\r\n\r\n        if (mightWantToKeepCell) {\r\n            const displayedColumns = visibleCols.allCols;\r\n            const cellStillDisplayed = displayedColumns.indexOf(column as AgColumn) >= 0;\r\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\r\n        }\r\n\r\n        return REMOVE_CELL;\r\n    }\r\n\r\n    public getDomOrder(): boolean {\r\n        const isEnsureDomOrder = this.gos.get('ensureDomOrder');\r\n        return isEnsureDomOrder || _isDomLayout(this.gos, 'print');\r\n    }\r\n\r\n    private listenOnDomOrder(gui: RowGui): void {\r\n        const listener = () => {\r\n            gui.rowComp.setDomOrder(this.getDomOrder());\r\n        };\r\n\r\n        gui.compBean.addManagedPropertyListeners(['domLayout', 'ensureDomOrder'], listener);\r\n    }\r\n\r\n    private setAnimateFlags(animateIn: boolean): void {\r\n        if (this.rowNode.sticky || !animateIn) {\r\n            return;\r\n        }\r\n\r\n        const oldRowTopExists = _exists(this.rowNode.oldRowTop);\r\n        const { visibleCols } = this.beans;\r\n        const pinningLeft = visibleCols.isPinningLeft();\r\n        const pinningRight = visibleCols.isPinningRight();\r\n\r\n        if (oldRowTopExists) {\r\n            const { slideInAnimation } = this;\r\n            if (this.isFullWidth() && !this.gos.get('embedFullWidthRows')) {\r\n                slideInAnimation.fullWidth = true;\r\n                return;\r\n            }\r\n\r\n            // if the row had a previous position, we slide it in\r\n            slideInAnimation.center = true;\r\n            slideInAnimation.left = pinningLeft;\r\n            slideInAnimation.right = pinningRight;\r\n        } else {\r\n            const { fadeInAnimation } = this;\r\n            if (this.isFullWidth() && !this.gos.get('embedFullWidthRows')) {\r\n                fadeInAnimation.fullWidth = true;\r\n                return;\r\n            }\r\n\r\n            // if the row had no previous position, we fade it in\r\n            fadeInAnimation.center = true;\r\n            fadeInAnimation.left = pinningLeft;\r\n            fadeInAnimation.right = pinningRight;\r\n        }\r\n    }\r\n\r\n    public isFullWidth(): boolean {\r\n        return this.rowType !== 'Normal';\r\n    }\r\n\r\n    public refreshFullWidth(): boolean {\r\n        // returns 'true' if refresh succeeded\r\n        const tryRefresh = (gui: RowGui | undefined, pinned: ColumnPinnedType): boolean => {\r\n            if (!gui) {\r\n                return true;\r\n            } // no refresh needed\r\n\r\n            return gui.rowComp.refreshFullWidth(() => {\r\n                const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\r\n                return compDetails.params;\r\n            });\r\n        };\r\n\r\n        const fullWidthSuccess = tryRefresh(this.fullWidthGui, null);\r\n        const centerSuccess = tryRefresh(this.centerGui, null);\r\n        const leftSuccess = tryRefresh(this.leftGui, 'left');\r\n        const rightSuccess = tryRefresh(this.rightGui, 'right');\r\n\r\n        const allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;\r\n\r\n        return allFullWidthRowsRefreshed;\r\n    }\r\n\r\n    private addListeners(): void {\r\n        this.addManagedListeners(this.rowNode, {\r\n            heightChanged: () => this.onRowHeightChanged(),\r\n            rowSelected: () => this.onRowSelected(),\r\n            rowIndexChanged: this.onRowIndexChanged.bind(this),\r\n            topChanged: this.onTopChanged.bind(this),\r\n            ...(this.beans.expansionSvc?.getRowExpandedListeners(this) ?? {}),\r\n        });\r\n\r\n        if (this.rowNode.detail) {\r\n            // if the master row node has updated data, we also want to try to refresh the detail row\r\n            this.addManagedListeners(this.rowNode.parent!, { dataChanged: this.onRowNodeDataChanged.bind(this) });\r\n        }\r\n\r\n        this.addManagedListeners(this.rowNode, {\r\n            dataChanged: this.onRowNodeDataChanged.bind(this),\r\n            cellChanged: this.postProcessCss.bind(this),\r\n            rowHighlightChanged: this.onRowNodeHighlightChanged.bind(this),\r\n            draggingChanged: this.postProcessRowDragging.bind(this),\r\n            uiLevelChanged: this.onUiLevelChanged.bind(this),\r\n        });\r\n\r\n        this.addManagedListeners(this.beans.eventSvc, {\r\n            paginationPixelOffsetChanged: this.onPaginationPixelOffsetChanged.bind(this),\r\n            heightScaleChanged: this.onTopChanged.bind(this),\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            virtualColumnsChanged: this.onVirtualColumnsChanged.bind(this),\r\n            cellFocused: this.onCellFocusChanged.bind(this),\r\n            cellFocusCleared: this.onCellFocusChanged.bind(this),\r\n            paginationChanged: this.onPaginationChanged.bind(this),\r\n            modelUpdated: this.refreshFirstAndLastRowStyles.bind(this),\r\n            columnMoved: () => this.updateColumnLists(),\r\n        });\r\n\r\n        this.addDestroyFunc(() => {\r\n            this.rowDragComps = this.destroyBeans(this.rowDragComps, this.beans.context);\r\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature, this.beans.context);\r\n        });\r\n\r\n        this.addManagedPropertyListeners(\r\n            ['rowStyle', 'getRowStyle', 'rowClass', 'getRowClass', 'rowClassRules'],\r\n            this.postProcessCss.bind(this)\r\n        );\r\n\r\n        this.addManagedPropertyListener('rowDragEntireRow', () => {\r\n            const useRowDragEntireRow = this.gos.get('rowDragEntireRow');\r\n            if (useRowDragEntireRow) {\r\n                this.allRowGuis.forEach((gui) => {\r\n                    this.addRowDraggerToRow(gui);\r\n                });\r\n                return;\r\n            }\r\n            this.rowDragComps = this.destroyBeans(this.rowDragComps, this.beans.context);\r\n        });\r\n\r\n        this.addListenersForCellComps();\r\n    }\r\n\r\n    private addListenersForCellComps(): void {\r\n        this.addManagedListeners(this.rowNode, {\r\n            rowIndexChanged: () => {\r\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onRowIndexChanged());\r\n            },\r\n            cellChanged: (event) => {\r\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onCellChanged(event));\r\n            },\r\n        });\r\n    }\r\n\r\n    private onRowNodeDataChanged(event: DataChangedEvent): void {\r\n        // if the row is rendered incorrectly, as the requirements for whether this is a FW row have changed, we force re-render this row.\r\n        const fullWidthChanged = this.isFullWidth() !== !!this.isNodeFullWidthCell();\r\n        if (fullWidthChanged) {\r\n            this.beans.rowRenderer.redrawRow(this.rowNode);\r\n            return;\r\n        }\r\n\r\n        // this bit of logic handles trying to refresh the FW row ctrl, or delegating to removing/recreating it if unsupported.\r\n        if (this.isFullWidth()) {\r\n            const refresh = this.refreshFullWidth();\r\n            if (!refresh) {\r\n                this.beans.rowRenderer.redrawRow(this.rowNode);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // if this is an update, we want to refresh, as this will allow the user to put in a transition\r\n        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case\r\n        // we will want to completely replace the cells\r\n        this.getAllCellCtrls().forEach((cellCtrl) =>\r\n            cellCtrl.refreshCell({\r\n                suppressFlash: !event.update,\r\n                newData: !event.update,\r\n            })\r\n        );\r\n\r\n        // as data has changed update the dom row id attributes\r\n        this.allRowGuis.forEach((gui) => {\r\n            this.setRowCompRowId(gui.rowComp);\r\n            this.updateRowBusinessKey();\r\n            this.setRowCompRowBusinessKey(gui.rowComp);\r\n        });\r\n\r\n        // check for selected also, as this could be after lazy loading of the row data, in which case\r\n        // the id might of just gotten set inside the row and the row selected state may of changed\r\n        // as a result. this is what happens when selected rows are loaded in virtual pagination.\r\n        // - niall note - since moving to the stub component, this may no longer be true, as replacing\r\n        // the stub component now replaces the entire row\r\n        this.onRowSelected();\r\n\r\n        // as data has changed, then the style and class needs to be recomputed\r\n        this.postProcessCss();\r\n    }\r\n\r\n    private postProcessCss(): void {\r\n        this.setStylesFromGridOptions(true);\r\n        this.postProcessClassesFromGridOptions();\r\n        this.postProcessRowClassRules();\r\n        this.postProcessRowDragging();\r\n    }\r\n\r\n    private onRowNodeHighlightChanged(): void {\r\n        const highlighted = this.rowNode.highlighted;\r\n\r\n        this.allRowGuis.forEach((gui) => {\r\n            const aboveOn = highlighted === 'Above';\r\n            const belowOn = highlighted === 'Below';\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-above', aboveOn);\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-below', belowOn);\r\n        });\r\n    }\r\n\r\n    private postProcessRowDragging(): void {\r\n        const dragging = this.rowNode.dragging;\r\n        this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-dragging', dragging));\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(): void {\r\n        // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and\r\n        // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.\r\n        this.updateColumnLists(true);\r\n\r\n        this.beans.rowAutoHeight?.checkAutoHeights(this.rowNode);\r\n    }\r\n\r\n    private onVirtualColumnsChanged(): void {\r\n        this.updateColumnLists(false, true);\r\n    }\r\n\r\n    public getRowPosition(): RowPosition {\r\n        return {\r\n            rowPinned: _makeNull(this.rowNode.rowPinned),\r\n            rowIndex: this.rowNode.rowIndex as number,\r\n        };\r\n    }\r\n\r\n    private findFullWidthRowGui(target: HTMLElement): RowGui | undefined {\r\n        return this.allRowGuis.find((c) => c.element.contains(target));\r\n    }\r\n\r\n    public onKeyboardNavigate(keyboardEvent: KeyboardEvent) {\r\n        const currentFullWidthComp = this.findFullWidthRowGui(keyboardEvent.target as HTMLElement);\r\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\r\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\r\n\r\n        if (!isFullWidthContainerFocused) {\r\n            return;\r\n        }\r\n\r\n        const node = this.rowNode;\r\n        const { focusSvc, navigation } = this.beans;\r\n        const lastFocusedCell = focusSvc.getFocusedCell();\r\n        const cellPosition: CellPosition = {\r\n            rowIndex: node.rowIndex!,\r\n            rowPinned: node.rowPinned,\r\n            column: (lastFocusedCell?.column as AgColumn) ?? this.getColumnForFullWidth(currentFullWidthComp),\r\n        };\r\n\r\n        navigation?.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);\r\n        keyboardEvent.preventDefault();\r\n    }\r\n\r\n    public onTabKeyDown(keyboardEvent: KeyboardEvent) {\r\n        if (keyboardEvent.defaultPrevented || _isStopPropagationForAgGrid(keyboardEvent)) {\r\n            return;\r\n        }\r\n        const currentFullWidthComp = this.allRowGuis.find((c) =>\r\n            c.element.contains(keyboardEvent.target as HTMLElement)\r\n        );\r\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\r\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n        let isDetailGridCellFocused = false;\r\n\r\n        if (currentFullWidthContainer && activeEl) {\r\n            isDetailGridCellFocused =\r\n                currentFullWidthContainer.contains(activeEl) && activeEl.classList.contains('ag-cell');\r\n        }\r\n\r\n        let nextEl: HTMLElement | null = null;\r\n\r\n        if (!isFullWidthContainerFocused && !isDetailGridCellFocused) {\r\n            nextEl = _findNextFocusableElement(this.beans, currentFullWidthContainer!, false, keyboardEvent.shiftKey);\r\n        }\r\n\r\n        if ((this.isFullWidth() && isFullWidthContainerFocused) || !nextEl) {\r\n            this.beans.navigation?.onTabKeyDown(this, keyboardEvent);\r\n        }\r\n    }\r\n\r\n    public getFullWidthElement(): HTMLElement | null {\r\n        if (this.fullWidthGui) {\r\n            return this.fullWidthGui.element;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getRowYPosition(): number {\r\n        const displayedEl = this.allRowGuis.find((el) => _isVisible(el.element))?.element;\r\n\r\n        if (displayedEl) {\r\n            return displayedEl.getBoundingClientRect().top;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public onSuppressCellFocusChanged(suppressCellFocus: boolean): void {\r\n        const tabIndex = this.isFullWidth() && suppressCellFocus ? undefined : -1;\r\n        this.allRowGuis.forEach((gui) => {\r\n            _addOrRemoveAttribute(gui.element, 'tabindex', tabIndex);\r\n        });\r\n    }\r\n\r\n    public onFullWidthRowFocused(event?: CellFocusedEvent) {\r\n        const node = this.rowNode;\r\n        const isFocused = !event\r\n            ? false\r\n            : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;\r\n\r\n        const element = this.fullWidthGui ? this.fullWidthGui.element : this.centerGui?.element;\r\n        if (!element) {\r\n            return;\r\n        } // can happen with react ui, comp not yet ready\r\n\r\n        element.classList.toggle('ag-full-width-focus', isFocused);\r\n\r\n        if (isFocused && event?.forceBrowserFocus) {\r\n            // we don't scroll normal rows into view when we focus them, so we don't want\r\n            // to scroll Full Width rows either.\r\n            element.focus({ preventScroll: true });\r\n        }\r\n    }\r\n\r\n    public recreateCell(cellCtrl: CellCtrl) {\r\n        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);\r\n        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);\r\n        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);\r\n        cellCtrl.destroy();\r\n        this.updateColumnLists();\r\n    }\r\n\r\n    private removeCellCtrl(prev: CellCtrlListAndMap, cellCtrlToRemove: CellCtrl): CellCtrlListAndMap {\r\n        const res: CellCtrlListAndMap = {\r\n            list: [],\r\n            map: {},\r\n        };\r\n        prev.list.forEach((cellCtrl) => {\r\n            if (cellCtrl === cellCtrlToRemove) {\r\n                return;\r\n            }\r\n            res.list.push(cellCtrl);\r\n            res.map[cellCtrl.column.getInstanceId()] = cellCtrl;\r\n        });\r\n        return res;\r\n    }\r\n\r\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\r\n        switch (eventName) {\r\n            case 'dblclick':\r\n                this.onRowDblClick(mouseEvent);\r\n                break;\r\n            case 'click':\r\n                this.onRowClick(mouseEvent);\r\n                break;\r\n            case 'touchstart':\r\n            case 'mousedown':\r\n                this.onRowMouseDown(mouseEvent);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public createRowEvent<T extends AgEventType>(type: T, domEvent?: Event): RowEvent<T> {\r\n        const { rowNode } = this;\r\n        return this.gos.addGridCommonParams({\r\n            type: type,\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            rowIndex: rowNode.rowIndex!,\r\n            rowPinned: rowNode.rowPinned,\r\n            event: domEvent,\r\n        });\r\n    }\r\n\r\n    private createRowEventWithSource<T extends AgEventType>(type: T, domEvent: Event): RowEvent<T> {\r\n        const event = this.createRowEvent(type, domEvent);\r\n        // when first developing this, we included the rowComp in the event.\r\n        // this seems very weird. so when introducing the event types, i left the 'source'\r\n        // out of the type, and just include the source in the two places where this event\r\n        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any\r\n        // users to be using this, as the rowComp isn't an object we expose, so would be\r\n        // very surprising if a user was using it.\r\n        (event as any).source = this;\r\n        return event;\r\n    }\r\n\r\n    private onRowDblClick(mouseEvent: MouseEvent): void {\r\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        this.beans.eventSvc.dispatchEvent(this.createRowEventWithSource('rowDoubleClicked', mouseEvent));\r\n    }\r\n\r\n    private getColumnForFullWidth(fullWidthRowGui?: RowGui): AgColumn {\r\n        const { visibleCols } = this.beans;\r\n        switch (fullWidthRowGui?.containerType) {\r\n            case 'center':\r\n                return visibleCols.centerCols[0];\r\n            case 'left':\r\n                return visibleCols.leftCols[0];\r\n            case 'right':\r\n                return visibleCols.rightCols[0];\r\n            default:\r\n                return visibleCols.allCols[0];\r\n        }\r\n    }\r\n\r\n    private onRowMouseDown(mouseEvent: MouseEvent) {\r\n        this.lastMouseDownOnDragger = _isElementChildOfClass(mouseEvent.target as HTMLElement, 'ag-row-drag', 3);\r\n\r\n        if (!this.isFullWidth()) {\r\n            return;\r\n        }\r\n\r\n        const node = this.rowNode;\r\n\r\n        const { rangeSvc, focusSvc } = this.beans;\r\n        rangeSvc?.removeAllCellRanges();\r\n\r\n        const fullWidthRowGui = this.findFullWidthRowGui(mouseEvent.target as HTMLElement);\r\n        const element = fullWidthRowGui?.element;\r\n        const target = mouseEvent.target as HTMLElement;\r\n\r\n        let forceBrowserFocus = true;\r\n\r\n        if (element && element.contains(target as HTMLElement) && _isFocusableFormField(target)) {\r\n            forceBrowserFocus = false;\r\n        }\r\n\r\n        focusSvc.setFocusedCell({\r\n            rowIndex: node.rowIndex!,\r\n            column: this.getColumnForFullWidth(fullWidthRowGui),\r\n            rowPinned: node.rowPinned,\r\n            forceBrowserFocus,\r\n        });\r\n    }\r\n\r\n    public onRowClick(mouseEvent: MouseEvent) {\r\n        const stop = _isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;\r\n\r\n        if (stop) {\r\n            return;\r\n        }\r\n\r\n        const { eventSvc, selectionSvc } = this.beans;\r\n        eventSvc.dispatchEvent(this.createRowEventWithSource('rowClicked', mouseEvent));\r\n\r\n        selectionSvc?.handleSelectionEvent(mouseEvent, this.rowNode, 'rowClicked');\r\n    }\r\n\r\n    public setupDetailRowAutoHeight(eDetailGui: HTMLElement): void {\r\n        if (this.rowType !== 'FullWidthDetail') {\r\n            return;\r\n        }\r\n\r\n        this.beans.masterDetailSvc?.setupDetailRowAutoHeight(this, eDetailGui);\r\n    }\r\n\r\n    private createFullWidthCompDetails(eRow: HTMLElement, pinned: ColumnPinnedType): UserCompDetails {\r\n        const { gos, rowNode } = this;\r\n        const params = gos.addGridCommonParams({\r\n            fullWidth: true,\r\n            data: rowNode.data,\r\n            node: rowNode,\r\n            value: rowNode.key,\r\n            valueFormatted: rowNode.key,\r\n            // these need to be taken out, as part of 'afterAttached' now\r\n            eGridCell: eRow,\r\n            eParentOfValue: eRow,\r\n            pinned: pinned,\r\n            addRenderedRowListener: this.addEventListener.bind(this),\r\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) =>\r\n                this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange),\r\n            setTooltip: (value, shouldDisplayTooltip) => {\r\n                gos.assertModuleRegistered('Tooltip', 3);\r\n                this.refreshRowTooltip(value, shouldDisplayTooltip);\r\n            },\r\n        } as WithoutGridCommon<ICellRendererParams>);\r\n\r\n        const compFactory = this.beans.userCompFactory;\r\n        switch (this.rowType) {\r\n            case 'FullWidthDetail':\r\n                return _getFullWidthDetailCellRendererDetails(compFactory, params)!;\r\n            case 'FullWidthGroup':\r\n                return _getFullWidthGroupCellRendererDetails(compFactory, params)!;\r\n            case 'FullWidthLoading':\r\n                return _getFullWidthLoadingCellRendererDetails(compFactory, params)!;\r\n            default:\r\n                return _getFullWidthCellRendererDetails(compFactory, params)!;\r\n        }\r\n    }\r\n\r\n    private refreshRowTooltip(value: string, shouldDisplayTooltip?: () => boolean) {\r\n        if (!this.fullWidthGui) {\r\n            return;\r\n        }\r\n\r\n        this.tooltipFeature = this.beans.tooltipSvc?.refreshRowTooltip(\r\n            this.tooltipFeature,\r\n            this,\r\n            value,\r\n            shouldDisplayTooltip\r\n        );\r\n    }\r\n\r\n    private addFullWidthRowDragging(\r\n        rowDraggerElement?: HTMLElement,\r\n        dragStartPixels?: number,\r\n        value: string = '',\r\n        suppressVisibilityChange?: boolean\r\n    ): void {\r\n        const { rowDragSvc, context } = this.beans;\r\n        if (!rowDragSvc || !this.isFullWidth()) {\r\n            return;\r\n        }\r\n\r\n        const rowDragComp = rowDragSvc.createRowDragComp(\r\n            () => value,\r\n            this.rowNode,\r\n            undefined,\r\n            rowDraggerElement,\r\n            dragStartPixels,\r\n            suppressVisibilityChange\r\n        );\r\n        this.createBean(rowDragComp, context);\r\n\r\n        this.addDestroyFunc(() => {\r\n            this.destroyBean(rowDragComp, context);\r\n        });\r\n    }\r\n\r\n    private onUiLevelChanged(): void {\r\n        const newLevel = calculateRowLevel(this.rowNode);\r\n        if (this.rowLevel != newLevel) {\r\n            const classToAdd = 'ag-row-level-' + newLevel;\r\n            const classToRemove = 'ag-row-level-' + this.rowLevel;\r\n            this.allRowGuis.forEach((gui) => {\r\n                gui.rowComp.addOrRemoveCssClass(classToAdd, true);\r\n                gui.rowComp.addOrRemoveCssClass(classToRemove, false);\r\n            });\r\n        }\r\n        this.rowLevel = newLevel;\r\n    }\r\n\r\n    private isFirstRowOnPage(): boolean {\r\n        return this.rowNode.rowIndex === this.beans.pageBounds.getFirstRow();\r\n    }\r\n\r\n    private isLastRowOnPage(): boolean {\r\n        return this.rowNode.rowIndex === this.beans.pageBounds.getLastRow();\r\n    }\r\n\r\n    private refreshFirstAndLastRowStyles(): void {\r\n        const newFirst = this.isFirstRowOnPage();\r\n        const newLast = this.isLastRowOnPage();\r\n\r\n        if (this.firstRowOnPage !== newFirst) {\r\n            this.firstRowOnPage = newFirst;\r\n            this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-first', newFirst));\r\n        }\r\n        if (this.lastRowOnPage !== newLast) {\r\n            this.lastRowOnPage = newLast;\r\n            this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-row-last', newLast));\r\n        }\r\n    }\r\n\r\n    public getAllCellCtrls(): CellCtrl[] {\r\n        if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {\r\n            return this.centerCellCtrls.list;\r\n        }\r\n        const res = [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];\r\n        return res;\r\n    }\r\n\r\n    private postProcessClassesFromGridOptions(): void {\r\n        const cssClasses: string[] = [];\r\n        this.beans.rowStyleSvc?.processClassesFromGridOptions(cssClasses, this.rowNode);\r\n        if (!cssClasses.length) {\r\n            return;\r\n        }\r\n\r\n        cssClasses.forEach((classStr) => {\r\n            this.allRowGuis.forEach((c) => c.rowComp.addOrRemoveCssClass(classStr, true));\r\n        });\r\n    }\r\n\r\n    private postProcessRowClassRules(): void {\r\n        this.beans.rowStyleSvc?.processRowClassRules(\r\n            this.rowNode,\r\n            (className: string) => {\r\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass(className, true));\r\n            },\r\n            (className: string) => {\r\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass(className, false));\r\n            }\r\n        );\r\n    }\r\n\r\n    private setStylesFromGridOptions(updateStyles: boolean, gui?: RowGui): void {\r\n        if (updateStyles) {\r\n            this.rowStyles = this.processStylesFromGridOptions();\r\n        }\r\n        this.forEachGui(gui, (gui) => gui.rowComp.setUserStyles(this.rowStyles));\r\n    }\r\n\r\n    private getPinnedForContainer(rowContainerType: RowContainerType): ColumnPinnedType {\r\n        if (rowContainerType === 'left' || rowContainerType === 'right') {\r\n            return rowContainerType;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getInitialRowClasses(rowContainerType: RowContainerType): string[] {\r\n        const pinned = this.getPinnedForContainer(rowContainerType);\r\n        const fullWidthRow = this.isFullWidth();\r\n        const { rowNode, beans } = this;\r\n\r\n        const classes: string[] = [];\r\n\r\n        classes.push('ag-row');\r\n        classes.push(this.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');\r\n\r\n        if (this.fadeInAnimation[rowContainerType]) {\r\n            classes.push('ag-opacity-zero');\r\n        }\r\n\r\n        classes.push(rowNode.rowIndex! % 2 === 0 ? 'ag-row-even' : 'ag-row-odd');\r\n\r\n        if (rowNode.isRowPinned()) {\r\n            classes.push('ag-row-pinned');\r\n        }\r\n\r\n        if (rowNode.isSelected()) {\r\n            classes.push('ag-row-selected');\r\n        }\r\n\r\n        if (rowNode.footer) {\r\n            classes.push('ag-row-footer');\r\n        }\r\n\r\n        classes.push('ag-row-level-' + this.rowLevel);\r\n\r\n        if (rowNode.stub) {\r\n            classes.push('ag-row-loading');\r\n        }\r\n\r\n        if (fullWidthRow) {\r\n            classes.push('ag-full-width-row');\r\n        }\r\n\r\n        beans.expansionSvc?.addExpandedCss(classes, rowNode);\r\n\r\n        if (rowNode.dragging) {\r\n            classes.push('ag-row-dragging');\r\n        }\r\n\r\n        const { rowStyleSvc } = beans;\r\n        if (rowStyleSvc) {\r\n            rowStyleSvc.processClassesFromGridOptions(classes, rowNode);\r\n            rowStyleSvc.preProcessRowClassRules(classes, rowNode);\r\n        }\r\n\r\n        // we use absolute position unless we are doing print layout\r\n        classes.push(this.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');\r\n\r\n        if (this.isFirstRowOnPage()) {\r\n            classes.push('ag-row-first');\r\n        }\r\n\r\n        if (this.isLastRowOnPage()) {\r\n            classes.push('ag-row-last');\r\n        }\r\n\r\n        if (fullWidthRow) {\r\n            if (pinned === 'left') {\r\n                classes.push('ag-cell-last-left-pinned');\r\n            }\r\n            if (pinned === 'right') {\r\n                classes.push('ag-cell-first-right-pinned');\r\n            }\r\n        }\r\n\r\n        return classes;\r\n    }\r\n\r\n    private processStylesFromGridOptions(): RowStyle {\r\n        // Return constant reference for React\r\n        return this.beans.rowStyleSvc?.processStylesFromGridOptions(this.rowNode) ?? this.emptyStyle;\r\n    }\r\n\r\n    private onRowSelected(gui?: RowGui): void {\r\n        this.beans.selectionSvc?.onRowCtrlSelected(\r\n            this,\r\n            (gui) => {\r\n                if (gui === this.centerGui || gui === this.fullWidthGui) {\r\n                    this.announceDescription();\r\n                }\r\n            },\r\n            gui\r\n        );\r\n    }\r\n\r\n    public announceDescription(): void {\r\n        this.beans.selectionSvc?.announceAriaRowSelection(this.rowNode);\r\n    }\r\n\r\n    public addHoverFunctionality(eGui: RowGui): void {\r\n        // because we use animation frames to do this, it's possible the row no longer exists\r\n        // by the time we get to add it\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n\r\n        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel\r\n        // like we do for all the other mouse events.\r\n\r\n        // because of the pinning, we cannot simply add / remove the class based on the eRow. we\r\n        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a\r\n        // mouse hover, it sets such in the rowNode, and then all three reflect the change as\r\n        // all are listening for event on the row node.\r\n\r\n        const { element, compBean } = eGui;\r\n        const { rowNode, beans, gos } = this;\r\n        // step 1 - add listener, to set flag on row node\r\n        compBean.addManagedListeners(element, {\r\n            mouseenter: () => rowNode.dispatchRowEvent('mouseEnter'),\r\n            mouseleave: () => rowNode.dispatchRowEvent('mouseLeave'),\r\n        });\r\n\r\n        // step 2 - listen for changes on row node (which any element can trigger)\r\n        compBean.addManagedListeners(rowNode, {\r\n            mouseEnter: () => {\r\n                // if hover turned off, we don't add the class. we do this here so that if the application\r\n                // toggles this property mid way, we remove the hover form the last row, but we stop\r\n                // adding hovers from that point onwards. Also, do not highlight while dragging elements around.\r\n                if (!beans.dragSvc?.dragging && !gos.get('suppressRowHoverHighlight')) {\r\n                    element.classList.add('ag-row-hover');\r\n                    rowNode.setHovered(true);\r\n                }\r\n            },\r\n            mouseLeave: () => {\r\n                element.classList.remove('ag-row-hover');\r\n                rowNode.setHovered(false);\r\n            },\r\n        });\r\n    }\r\n\r\n    // for animation, we don't want to animate entry or exit to a very far away pixel,\r\n    // otherwise the row would move so fast, it would appear to disappear. so this method\r\n    // moves the row closer to the viewport if it is far away, so the row slide in / out\r\n    // at a speed the user can see.\r\n    private roundRowTopToBounds(rowTop: number): number {\r\n        const range = this.beans.ctrlsSvc.getScrollFeature().getApproximateVScollPosition();\r\n        const minPixel = this.applyPaginationOffset(range.top, true) - 100;\r\n        const maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;\r\n\r\n        return Math.min(Math.max(minPixel, rowTop), maxPixel);\r\n    }\r\n\r\n    public forEachGui(gui: RowGui | undefined, callback: (gui: RowGui) => void): void {\r\n        if (gui) {\r\n            callback(gui);\r\n        } else {\r\n            this.allRowGuis.forEach(callback);\r\n        }\r\n    }\r\n\r\n    private onRowHeightChanged(gui?: RowGui): void {\r\n        // check for exists first - if the user is resetting the row height, then\r\n        // it will be null (or undefined) momentarily until the next time the flatten\r\n        // stage is called where the row will then update again with a new height\r\n        if (this.rowNode.rowHeight == null) {\r\n            return;\r\n        }\r\n\r\n        const rowHeight = this.rowNode.rowHeight;\r\n\r\n        const defaultRowHeight = this.beans.environment.getDefaultRowHeight();\r\n        const isHeightFromFunc = _isGetRowHeightFunction(this.gos);\r\n        const heightFromFunc = isHeightFromFunc ? _getRowHeightForNode(this.beans, this.rowNode).height : undefined;\r\n        const lineHeight = heightFromFunc ? `${Math.min(defaultRowHeight, heightFromFunc) - 2}px` : undefined;\r\n\r\n        this.forEachGui(gui, (gui) => {\r\n            gui.element.style.height = `${rowHeight}px`;\r\n\r\n            // If the row height is coming from a function, this means some rows can\r\n            // be smaller than the theme had intended. so we set --ag-line-height on\r\n            // the row, which is picked up by the theme CSS and is used in a calc\r\n            // for the CSS line-height property, which makes sure the line-height is\r\n            // not bigger than the row height, otherwise the row text would not fit.\r\n            // We do not use rowNode.rowHeight here, as this could be the result of autoHeight,\r\n            // and we found using the autoHeight result causes a loop, where changing the\r\n            // line-height them impacts the cell height, resulting in a new autoHeight,\r\n            // resulting in a new line-height and so on loop.\r\n            // const heightFromFunc = getRowHeightForNode(this.gos, this.rowNode).height;\r\n            if (lineHeight) {\r\n                gui.element.style.setProperty('--ag-line-height', lineHeight);\r\n            }\r\n        });\r\n    }\r\n\r\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\r\n    public destroyFirstPass(suppressAnimation: boolean = false): void {\r\n        this.active = false;\r\n\r\n        // why do we have this method? shouldn't everything below be added as a destroy func beside\r\n        // the corresponding create logic?\r\n\r\n        const { rowNode } = this;\r\n\r\n        if (!suppressAnimation && _isAnimateRows(this.gos) && !rowNode.sticky) {\r\n            const rowStillVisibleJustNotInViewport = rowNode.rowTop != null;\r\n            if (rowStillVisibleJustNotInViewport) {\r\n                // if the row is not rendered, but in viewport, it means it has moved,\r\n                // so we animate the row out. if the new location is very far away,\r\n                // the animation will be so fast the row will look like it's just disappeared,\r\n                // so instead we animate to a position just outside the viewport.\r\n                const rowTop = this.roundRowTopToBounds(rowNode.rowTop!);\r\n                this.setRowTop(rowTop);\r\n            } else {\r\n                this.allRowGuis.forEach((gui) => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', true));\r\n            }\r\n        }\r\n\r\n        rowNode.setHovered(false);\r\n\r\n        const event: VirtualRowRemovedEvent = this.createRowEvent('virtualRowRemoved');\r\n\r\n        this.dispatchLocalEvent(event);\r\n        this.beans.eventSvc.dispatchEvent(event);\r\n        super.destroy();\r\n    }\r\n\r\n    public destroySecondPass(): void {\r\n        this.allRowGuis.length = 0;\r\n\r\n        // if we are editing, destroying the row will stop editing\r\n        this.beans.editSvc?.stopRowEditing(this);\r\n\r\n        const destroyCellCtrls = (ctrls: CellCtrlListAndMap): CellCtrlListAndMap => {\r\n            ctrls.list.forEach((c) => c.destroy());\r\n            return { list: [], map: {} };\r\n        };\r\n\r\n        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);\r\n        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);\r\n        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);\r\n    }\r\n\r\n    private setFocusedClasses(gui?: RowGui): void {\r\n        this.forEachGui(gui, (gui) => {\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-focus', this.rowFocused);\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-no-focus', !this.rowFocused);\r\n        });\r\n    }\r\n\r\n    private onCellFocusChanged(): void {\r\n        const { focusSvc, editSvc } = this.beans;\r\n        const rowFocused = focusSvc.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\r\n\r\n        if (rowFocused !== this.rowFocused) {\r\n            this.rowFocused = rowFocused;\r\n            this.setFocusedClasses();\r\n        }\r\n\r\n        // if we are editing, then moving the focus out of a row will stop editing\r\n        if (!rowFocused && this.editing) {\r\n            editSvc?.stopRowEditing(this, false);\r\n        }\r\n    }\r\n\r\n    private onPaginationChanged(): void {\r\n        const currentPage = this.beans.pagination?.getCurrentPage() ?? 0;\r\n        // it is possible this row is in the new page, but the page number has changed, which means\r\n        // it needs to reposition itself relative to the new page\r\n        if (this.paginationPage !== currentPage) {\r\n            this.paginationPage = currentPage;\r\n            this.onTopChanged();\r\n        }\r\n\r\n        this.refreshFirstAndLastRowStyles();\r\n    }\r\n\r\n    private onTopChanged(): void {\r\n        this.setRowTop(this.rowNode.rowTop!);\r\n    }\r\n\r\n    private onPaginationPixelOffsetChanged(): void {\r\n        // the pixel offset is used when calculating rowTop to set on the row DIV\r\n        this.onTopChanged();\r\n    }\r\n\r\n    // applies pagination offset, eg if on second page, and page height is 500px, then removes\r\n    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.\r\n    // reverse will take the offset away rather than add.\r\n    private applyPaginationOffset(topPx: number, reverse = false): number {\r\n        if (this.rowNode.isRowPinned() || this.rowNode.sticky) {\r\n            return topPx;\r\n        }\r\n\r\n        const pixelOffset = this.beans.pageBounds.getPixelOffset();\r\n        const multiplier = reverse ? 1 : -1;\r\n\r\n        return topPx + pixelOffset * multiplier;\r\n    }\r\n\r\n    public setRowTop(pixels: number): void {\r\n        // print layout uses normal flow layout for row positioning\r\n        if (this.printLayout) {\r\n            return;\r\n        }\r\n\r\n        // need to make sure rowTop is not null, as this can happen if the node was once\r\n        // visible (ie parent group was expanded) but is now not visible\r\n        if (_exists(pixels)) {\r\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\r\n            const skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;\r\n            const afterScalingPixels = skipScaling\r\n                ? afterPaginationPixels\r\n                : this.beans.rowContainerHeight.getRealPixelPosition(afterPaginationPixels);\r\n            const topPx = `${afterScalingPixels}px`;\r\n            this.setRowTopStyle(topPx);\r\n        }\r\n    }\r\n\r\n    // the top needs to be set into the DOM element when the element is created, not updated afterwards.\r\n    // otherwise the transition would not work, as it would be transitioning from zero (the unset value).\r\n    // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows\r\n    // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,\r\n    // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised\r\n    // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation\r\n    // time, the row would animate down (ie from position zero).\r\n    public getInitialRowTop(rowContainerType: RowContainerType): string | undefined {\r\n        return this.suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : undefined;\r\n    }\r\n    public getInitialTransform(rowContainerType: RowContainerType): string | undefined {\r\n        return this.suppressRowTransform ? undefined : `translateY(${this.getInitialRowTopShared(rowContainerType)})`;\r\n    }\r\n    private getInitialRowTopShared(rowContainerType: RowContainerType): string {\r\n        // print layout uses normal flow layout for row positioning\r\n        if (this.printLayout) {\r\n            return '';\r\n        }\r\n\r\n        const rowNode = this.rowNode;\r\n        let rowTop: number;\r\n        if (rowNode.sticky) {\r\n            rowTop = rowNode.stickyRowTop;\r\n        } else {\r\n            // if sliding in, we take the old row top. otherwise we just set the current row top.\r\n            const pixels = this.slideInAnimation[rowContainerType]\r\n                ? this.roundRowTopToBounds(rowNode.oldRowTop!)\r\n                : rowNode.rowTop;\r\n            const afterPaginationPixels = this.applyPaginationOffset(pixels!);\r\n            // we don't apply scaling if row is pinned\r\n            rowTop = rowNode.isRowPinned()\r\n                ? afterPaginationPixels\r\n                : this.beans.rowContainerHeight.getRealPixelPosition(afterPaginationPixels);\r\n        }\r\n\r\n        return rowTop + 'px';\r\n    }\r\n\r\n    private setRowTopStyle(topPx: string): void {\r\n        this.allRowGuis.forEach((gui) =>\r\n            this.suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform(`translateY(${topPx})`)\r\n        );\r\n    }\r\n\r\n    public getCellCtrl(column: AgColumn, skipColSpanSearch = false): CellCtrl | null {\r\n        // first up, check for cell directly linked to this column\r\n        let res: CellCtrl | null = null;\r\n        this.getAllCellCtrls().forEach((cellCtrl) => {\r\n            if (cellCtrl.column == column) {\r\n                res = cellCtrl;\r\n            }\r\n        });\r\n\r\n        if (res != null || skipColSpanSearch) {\r\n            return res;\r\n        }\r\n\r\n        // second up, if not found, then check for spanned cols.\r\n        // we do this second (and not at the same time) as this is\r\n        // more expensive, as spanning cols is a\r\n        // infrequently used feature so we don't need to do this most\r\n        // of the time\r\n        this.getAllCellCtrls().forEach((cellCtrl) => {\r\n            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {\r\n                res = cellCtrl;\r\n            }\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    private onRowIndexChanged(): void {\r\n        // we only bother updating if the rowIndex is present. if it is not present, it means this row\r\n        // is child of a group node, and the group node was closed, it's the only way to have no row index.\r\n        // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!\r\n        if (this.rowNode.rowIndex != null) {\r\n            this.onCellFocusChanged();\r\n            this.updateRowIndexes();\r\n            this.postProcessCss();\r\n        }\r\n    }\r\n\r\n    private updateRowIndexes(gui?: RowGui): void {\r\n        const rowIndexStr = this.rowNode.getRowIndexString();\r\n\r\n        if (rowIndexStr === null) {\r\n            return;\r\n        }\r\n\r\n        const headerRowCount =\r\n            (this.beans.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0) +\r\n            (this.beans.filterManager?.getHeaderRowCount() ?? 0);\r\n        const rowIsEven = this.rowNode.rowIndex! % 2 === 0;\r\n        const ariaRowIndex = headerRowCount + this.rowNode.rowIndex! + 1;\r\n\r\n        this.forEachGui(gui, (c) => {\r\n            c.rowComp.setRowIndex(rowIndexStr);\r\n            c.rowComp.addOrRemoveCssClass('ag-row-even', rowIsEven);\r\n            c.rowComp.addOrRemoveCssClass('ag-row-odd', !rowIsEven);\r\n            _setAriaRowIndex(c.element, ariaRowIndex);\r\n        });\r\n    }\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { SuppressKeyboardEventParams } from '../entities/colDef';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport function _isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\r\n    // no allowed printable chars have alt or ctrl key combinations\r\n    if (event.altKey || event.ctrlKey || event.metaKey) {\r\n        return false;\r\n    }\r\n\r\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\r\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\r\n    const printableCharacter = event.key?.length === 1;\r\n\r\n    return printableCharacter;\r\n}\r\n\r\n/**\r\n * Allows user to tell the grid to skip specific keyboard events\r\n * @param {GridOptionsService} gos\r\n * @param {KeyboardEvent} keyboardEvent\r\n * @param {IRowNode} rowNode\r\n * @param {Column} column\r\n * @param {boolean} editing\r\n * @returns {boolean}\r\n */\r\nexport function _isUserSuppressingKeyboardEvent(\r\n    gos: GridOptionsService,\r\n    keyboardEvent: KeyboardEvent,\r\n    rowNode: IRowNode,\r\n    column: AgColumn,\r\n    editing: boolean\r\n): boolean {\r\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\r\n\r\n    // if no callbacks provided by user, then do nothing\r\n    if (!colDefFunc) {\r\n        return false;\r\n    }\r\n\r\n    const params: SuppressKeyboardEventParams = gos.addGridCommonParams({\r\n        event: keyboardEvent,\r\n        editing,\r\n        column,\r\n        node: rowNode,\r\n        data: rowNode.data,\r\n        colDef: column.getColDef(),\r\n    });\r\n\r\n    // colDef get first preference on suppressing events\r\n    if (colDefFunc) {\r\n        const colDefFuncResult = colDefFunc(params);\r\n        // if colDef func suppressed, then return now, no need to call gridOption func\r\n        if (colDefFuncResult) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\r\n    return false;\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { _getSelectAll, _isCellSelectionEnabled } from '../../gridOptionsUtils';\r\nimport type { IClipboardService } from '../../interfaces/iClipboardService';\r\nimport type { RowPinnedType } from '../../interfaces/iRowNode';\r\nimport type { CellCtrl } from '../../rendering/cell/cellCtrl';\r\nimport { _getCellCtrlForEventTarget } from '../../rendering/cell/cellCtrl';\r\nimport type { RowCtrl } from '../../rendering/row/rowCtrl';\r\nimport { DOM_DATA_KEY_ROW_CTRL } from '../../rendering/row/rowCtrl';\r\nimport type { UndoRedoService } from '../../undoRedo/undoRedoService';\r\nimport { _last } from '../../utils/array';\r\nimport { _getCtrlForEventTarget, _isEventSupported, _isStopPropagationForAgGrid } from '../../utils/event';\r\nimport { _isEventFromPrintableCharacter, _isUserSuppressingKeyboardEvent } from '../../utils/keyboard';\r\nimport { _isEventFromThisGrid } from '../mouseEventUtils';\r\n\r\nconst A_KEYCODE = 65;\r\nconst C_KEYCODE = 67;\r\nconst V_KEYCODE = 86;\r\nconst D_KEYCODE = 68;\r\nconst Z_KEYCODE = 90;\r\nconst Y_KEYCODE = 89;\r\n\r\nfunction _normaliseQwertyAzerty(keyboardEvent: KeyboardEvent): string {\r\n    const { keyCode } = keyboardEvent;\r\n    let code: string;\r\n\r\n    switch (keyCode) {\r\n        case A_KEYCODE:\r\n            code = KeyCode.A;\r\n            break;\r\n        case C_KEYCODE:\r\n            code = KeyCode.C;\r\n            break;\r\n        case V_KEYCODE:\r\n            code = KeyCode.V;\r\n            break;\r\n        case D_KEYCODE:\r\n            code = KeyCode.D;\r\n            break;\r\n        case Z_KEYCODE:\r\n            code = KeyCode.Z;\r\n            break;\r\n        case Y_KEYCODE:\r\n            code = KeyCode.Y;\r\n            break;\r\n        default:\r\n            code = keyboardEvent.code;\r\n    }\r\n\r\n    return code;\r\n}\r\n\r\nexport class RowContainerEventsFeature extends BeanStub {\r\n    constructor(public readonly element: HTMLElement) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.addKeyboardListeners();\r\n        this.addMouseListeners();\r\n        this.beans.touchSvc?.mockRowContextMenu(this);\r\n    }\r\n\r\n    private addKeyboardListeners(): void {\r\n        const eventName = 'keydown';\r\n        const listener = this.processKeyboardEvent.bind(this, eventName);\r\n        this.addManagedElementListeners(this.element, { [eventName]: listener });\r\n    }\r\n\r\n    private addMouseListeners(): void {\r\n        const mouseDownEvent = _isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\r\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\r\n\r\n        eventNames.forEach((eventName) => {\r\n            const listener = this.processMouseEvent.bind(this, eventName);\r\n            this.addManagedElementListeners(this.element, { [eventName]: listener });\r\n        });\r\n    }\r\n\r\n    private processMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\r\n        if (!_isEventFromThisGrid(this.gos, mouseEvent) || _isStopPropagationForAgGrid(mouseEvent)) {\r\n            return;\r\n        }\r\n\r\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(mouseEvent.target);\r\n\r\n        if (eventName === 'contextmenu') {\r\n            this.beans.contextMenuSvc?.handleContextMenuMouseEvent(mouseEvent, undefined, rowCtrl, cellCtrl!);\r\n        } else {\r\n            if (cellCtrl) {\r\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\r\n            }\r\n            if (rowCtrl) {\r\n                rowCtrl.onMouseEvent(eventName, mouseEvent);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getControlsForEventTarget(target: EventTarget | null): {\r\n        cellCtrl: CellCtrl | null;\r\n        rowCtrl: RowCtrl | null;\r\n    } {\r\n        const { gos } = this;\r\n        return {\r\n            cellCtrl: _getCellCtrlForEventTarget(gos, target),\r\n            rowCtrl: _getCtrlForEventTarget(gos, target, DOM_DATA_KEY_ROW_CTRL),\r\n        };\r\n    }\r\n\r\n    private processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void {\r\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(keyboardEvent.target);\r\n\r\n        if (keyboardEvent.defaultPrevented) {\r\n            return;\r\n        }\r\n        if (cellCtrl) {\r\n            this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);\r\n        } else if (rowCtrl && rowCtrl.isFullWidth()) {\r\n            this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);\r\n        }\r\n    }\r\n\r\n    private processCellKeyboardEvent(cellCtrl: CellCtrl, eventName: string, keyboardEvent: KeyboardEvent): void {\r\n        const { rowNode, column, editing } = cellCtrl;\r\n\r\n        const gridProcessingAllowed = !_isUserSuppressingKeyboardEvent(\r\n            this.gos,\r\n            keyboardEvent,\r\n            rowNode,\r\n            column,\r\n            editing\r\n        );\r\n\r\n        if (gridProcessingAllowed) {\r\n            if (eventName === 'keydown') {\r\n                // first see if it's a scroll key, page up / down, home / end etc\r\n                const wasScrollKey = !editing && this.beans.navigation?.handlePageScrollingKey(keyboardEvent);\r\n\r\n                // if not a scroll key, then we pass onto cell\r\n                if (!wasScrollKey) {\r\n                    cellCtrl.onKeyDown(keyboardEvent);\r\n                }\r\n\r\n                // perform clipboard and undo / redo operations\r\n                this.doGridOperations(keyboardEvent, cellCtrl.editing);\r\n\r\n                if (_isEventFromPrintableCharacter(keyboardEvent)) {\r\n                    cellCtrl.processCharacter(keyboardEvent);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (eventName === 'keydown') {\r\n            this.eventSvc.dispatchEvent(cellCtrl.createEvent(keyboardEvent, 'cellKeyDown'));\r\n        }\r\n    }\r\n\r\n    private processFullWidthRowKeyboardEvent(rowComp: RowCtrl, eventName: string, keyboardEvent: KeyboardEvent) {\r\n        const { rowNode } = rowComp;\r\n        const { focusSvc, navigation } = this.beans;\r\n        const focusedCell = focusSvc.getFocusedCell();\r\n        const column = (focusedCell && focusedCell.column) as AgColumn;\r\n        const gridProcessingAllowed = !_isUserSuppressingKeyboardEvent(this.gos, keyboardEvent, rowNode, column, false);\r\n\r\n        if (gridProcessingAllowed) {\r\n            const key = keyboardEvent.key;\r\n            if (eventName === 'keydown') {\r\n                switch (key) {\r\n                    case KeyCode.PAGE_HOME:\r\n                    case KeyCode.PAGE_END:\r\n                    case KeyCode.PAGE_UP:\r\n                    case KeyCode.PAGE_DOWN:\r\n                        navigation?.handlePageScrollingKey(keyboardEvent, true);\r\n                        break;\r\n\r\n                    case KeyCode.UP:\r\n                    case KeyCode.DOWN:\r\n                        rowComp.onKeyboardNavigate(keyboardEvent);\r\n                        break;\r\n                    case KeyCode.TAB:\r\n                        rowComp.onTabKeyDown(keyboardEvent);\r\n                        break;\r\n                    default:\r\n                }\r\n            }\r\n        }\r\n\r\n        if (eventName === 'keydown') {\r\n            this.eventSvc.dispatchEvent(rowComp.createRowEvent('cellKeyDown', keyboardEvent));\r\n        }\r\n    }\r\n\r\n    private doGridOperations(keyboardEvent: KeyboardEvent, editing: boolean): void {\r\n        // check if ctrl or meta key pressed\r\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {\r\n            return;\r\n        }\r\n\r\n        // if the cell the event came from is editing, then we do not\r\n        // want to do the default shortcut keys, otherwise the editor\r\n        // (eg a text field) would not be able to do the normal cut/copy/paste\r\n        if (editing) {\r\n            return;\r\n        }\r\n\r\n        // for copy / paste, we don't want to execute when the event\r\n        // was from a child grid (happens in master detail)\r\n        if (!_isEventFromThisGrid(this.gos, keyboardEvent)) {\r\n            return;\r\n        }\r\n\r\n        const keyCode = _normaliseQwertyAzerty(keyboardEvent);\r\n\r\n        const { clipboardSvc, undoRedo } = this.beans;\r\n\r\n        if (keyCode === KeyCode.A) {\r\n            return this.onCtrlAndA(keyboardEvent);\r\n        }\r\n        if (keyCode === KeyCode.C) {\r\n            return this.onCtrlAndC(clipboardSvc, keyboardEvent);\r\n        }\r\n        if (keyCode === KeyCode.D) {\r\n            return this.onCtrlAndD(clipboardSvc, keyboardEvent);\r\n        }\r\n        if (keyCode === KeyCode.V) {\r\n            return this.onCtrlAndV(clipboardSvc, keyboardEvent);\r\n        }\r\n        if (keyCode === KeyCode.X) {\r\n            return this.onCtrlAndX(clipboardSvc, keyboardEvent);\r\n        }\r\n        if (keyCode === KeyCode.Y) {\r\n            return this.onCtrlAndY(undoRedo);\r\n        }\r\n        if (keyCode === KeyCode.Z) {\r\n            return this.onCtrlAndZ(undoRedo, keyboardEvent);\r\n        }\r\n    }\r\n\r\n    private onCtrlAndA(event: KeyboardEvent): void {\r\n        const {\r\n            beans: { pinnedRowModel, rowModel, visibleCols, rangeSvc, selectionSvc },\r\n            gos,\r\n        } = this;\r\n\r\n        if (rangeSvc && _isCellSelectionEnabled(gos) && rowModel.isRowsToRender()) {\r\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\r\n                pinnedRowModel?.isEmpty('top') ?? true,\r\n                pinnedRowModel?.isEmpty('bottom') ?? true,\r\n            ];\r\n\r\n            const floatingStart: RowPinnedType = isEmptyPinnedTop ? null : 'top';\r\n            let floatingEnd: RowPinnedType;\r\n            let rowEnd: number;\r\n\r\n            if (isEmptyPinnedBottom) {\r\n                floatingEnd = null;\r\n                rowEnd = rowModel.getRowCount() - 1;\r\n            } else {\r\n                floatingEnd = 'bottom';\r\n                rowEnd = pinnedRowModel?.getPinnedBottomRowCount() ?? 0 - 1;\r\n            }\r\n\r\n            const allDisplayedColumns = visibleCols.allCols;\r\n            if (!allDisplayedColumns?.length) {\r\n                return;\r\n            }\r\n\r\n            rangeSvc.setCellRange({\r\n                rowStartIndex: 0,\r\n                rowStartPinned: floatingStart,\r\n                rowEndIndex: rowEnd,\r\n                rowEndPinned: floatingEnd,\r\n                columnStart: allDisplayedColumns[0],\r\n                columnEnd: _last(allDisplayedColumns),\r\n            });\r\n        } else if (selectionSvc) {\r\n            selectionSvc?.selectAllRowNodes({ source: 'keyboardSelectAll', selectAll: _getSelectAll(gos) });\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    private onCtrlAndC(clipboardSvc: IClipboardService | undefined, event: KeyboardEvent): void {\r\n        if (!clipboardSvc || this.gos.get('enableCellTextSelection')) {\r\n            return;\r\n        }\r\n\r\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\r\n\r\n        if (cellCtrl?.editing || rowCtrl?.editing) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        clipboardSvc.copyToClipboard();\r\n    }\r\n\r\n    private onCtrlAndX(clipboardSvc: IClipboardService | undefined, event: KeyboardEvent): void {\r\n        if (!clipboardSvc || this.gos.get('enableCellTextSelection') || this.gos.get('suppressCutToClipboard')) {\r\n            return;\r\n        }\r\n\r\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\r\n\r\n        if (cellCtrl?.editing || rowCtrl?.editing) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        clipboardSvc.cutToClipboard(undefined, 'ui');\r\n    }\r\n\r\n    private onCtrlAndV(clipboardSvc: IClipboardService | undefined, event: KeyboardEvent): void {\r\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\r\n\r\n        if (cellCtrl?.editing || rowCtrl?.editing) {\r\n            return;\r\n        }\r\n        if (clipboardSvc && !this.gos.get('suppressClipboardPaste')) {\r\n            clipboardSvc.pasteFromClipboard();\r\n        }\r\n    }\r\n\r\n    private onCtrlAndD(clipboardSvc: IClipboardService | undefined, event: KeyboardEvent): void {\r\n        if (clipboardSvc && !this.gos.get('suppressClipboardPaste')) {\r\n            clipboardSvc.copyRangeDown();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    private onCtrlAndZ(undoRedo: UndoRedoService | undefined, event: KeyboardEvent): void {\r\n        if (!this.gos.get('undoRedoCellEditing') || !undoRedo) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n\r\n        if (event.shiftKey) {\r\n            undoRedo.redo('ui');\r\n        } else {\r\n            undoRedo.undo('ui');\r\n        }\r\n    }\r\n\r\n    private onCtrlAndY(undoRedo: UndoRedoService | undefined): void {\r\n        undoRedo?.redo('ui');\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { RowContainerHeightService } from '../../rendering/rowContainerHeightService';\r\n\r\nexport class SetHeightFeature extends BeanStub {\r\n    constructor(\r\n        private readonly eContainer: HTMLElement,\r\n        private readonly eViewport?: HTMLElement\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({\r\n            rowContainerHeightChanged: this.onHeightChanged.bind(this, this.beans.rowContainerHeight),\r\n        });\r\n    }\r\n\r\n    private onHeightChanged(maxDivHeightScaler: RowContainerHeightService): void {\r\n        const height = maxDivHeightScaler.uiContainerHeight;\r\n        const heightString = height != null ? `${height}px` : ``;\r\n\r\n        this.eContainer.style.height = heightString;\r\n        if (this.eViewport) {\r\n            this.eViewport.style.height = heightString;\r\n        }\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { StickyTopOffsetChangedEvent } from '../../events';\r\nimport { _isDomLayout } from '../../gridOptionsUtils';\r\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport type { RowCtrl } from '../../rendering/row/rowCtrl';\r\nimport type { RowRenderer } from '../../rendering/rowRenderer';\r\nimport {\r\n    _getInnerWidth,\r\n    _getScrollLeft,\r\n    _isHorizontalScrollShowing,\r\n    _isInDOM,\r\n    _observeResize,\r\n    _setScrollLeft,\r\n} from '../../utils/dom';\r\nimport { CenterWidthFeature } from '../centerWidthFeature';\r\nimport type { ScrollPartner } from '../gridBodyScrollFeature';\r\nimport { ViewportSizeFeature } from '../viewportSizeFeature';\r\nimport { RowContainerEventsFeature } from './rowContainerEventsFeature';\r\nimport { SetHeightFeature } from './setHeightFeature';\r\nimport type { SetPinnedWidthFeature } from './setPinnedWidthFeature';\r\n\r\nexport type RowContainerName =\r\n    | 'left'\r\n    | 'right'\r\n    | 'center'\r\n    | 'fullWidth'\r\n    | 'topLeft'\r\n    | 'topRight'\r\n    | 'topCenter'\r\n    | 'topFullWidth'\r\n    | 'stickyTopLeft'\r\n    | 'stickyTopRight'\r\n    | 'stickyTopCenter'\r\n    | 'stickyTopFullWidth'\r\n    | 'stickyBottomLeft'\r\n    | 'stickyBottomRight'\r\n    | 'stickyBottomCenter'\r\n    | 'stickyBottomFullWidth'\r\n    | 'bottomLeft'\r\n    | 'bottomRight'\r\n    | 'bottomCenter'\r\n    | 'bottomFullWidth';\r\n\r\nexport type RowContainerType = 'left' | 'right' | 'center' | 'fullWidth';\r\n\r\ntype GetRowCtrls = (renderer: RowRenderer) => RowCtrl[];\r\nexport type RowContainerOptions = {\r\n    type: RowContainerType;\r\n    container: string;\r\n    viewport?: string;\r\n    pinnedType?: ColumnPinnedType;\r\n    fullWidth?: boolean;\r\n    getRowCtrls: GetRowCtrls;\r\n};\r\nconst getTopRowCtrls: GetRowCtrls = (r) => r.topRowCtrls;\r\nconst getStickyTopRowCtrls: GetRowCtrls = (r) => r.getStickyTopRowCtrls();\r\nconst getStickyBottomRowCtrls: GetRowCtrls = (r) => r.getStickyBottomRowCtrls();\r\nconst getBottomRowCtrls: GetRowCtrls = (r) => r.bottomRowCtrls;\r\nconst getCentreRowCtrls: GetRowCtrls = (r) => r.allRowCtrls;\r\n\r\nconst ContainerCssClasses: Record<RowContainerName, RowContainerOptions> = {\r\n    center: {\r\n        type: 'center',\r\n        container: 'ag-center-cols-container',\r\n        viewport: 'ag-center-cols-viewport',\r\n        getRowCtrls: getCentreRowCtrls,\r\n    },\r\n    left: {\r\n        type: 'left',\r\n        container: 'ag-pinned-left-cols-container',\r\n        pinnedType: 'left',\r\n        getRowCtrls: getCentreRowCtrls,\r\n    },\r\n    right: {\r\n        type: 'right',\r\n        container: 'ag-pinned-right-cols-container',\r\n        pinnedType: 'right',\r\n        getRowCtrls: getCentreRowCtrls,\r\n    },\r\n    fullWidth: {\r\n        type: 'fullWidth',\r\n        container: 'ag-full-width-container',\r\n        fullWidth: true,\r\n        getRowCtrls: getCentreRowCtrls,\r\n    },\r\n\r\n    topCenter: {\r\n        type: 'center',\r\n        container: 'ag-floating-top-container',\r\n        viewport: 'ag-floating-top-viewport',\r\n        getRowCtrls: getTopRowCtrls,\r\n    },\r\n    topLeft: {\r\n        type: 'left',\r\n        container: 'ag-pinned-left-floating-top',\r\n        pinnedType: 'left',\r\n        getRowCtrls: getTopRowCtrls,\r\n    },\r\n    topRight: {\r\n        type: 'right',\r\n        container: 'ag-pinned-right-floating-top',\r\n        pinnedType: 'right',\r\n        getRowCtrls: getTopRowCtrls,\r\n    },\r\n    topFullWidth: {\r\n        type: 'fullWidth',\r\n        container: 'ag-floating-top-full-width-container',\r\n        fullWidth: true,\r\n        getRowCtrls: getTopRowCtrls,\r\n    },\r\n\r\n    stickyTopCenter: {\r\n        type: 'center',\r\n        container: 'ag-sticky-top-container',\r\n        viewport: 'ag-sticky-top-viewport',\r\n        getRowCtrls: getStickyTopRowCtrls,\r\n    },\r\n    stickyTopLeft: {\r\n        type: 'left',\r\n        container: 'ag-pinned-left-sticky-top',\r\n        pinnedType: 'left',\r\n        getRowCtrls: getStickyTopRowCtrls,\r\n    },\r\n    stickyTopRight: {\r\n        type: 'right',\r\n        container: 'ag-pinned-right-sticky-top',\r\n        pinnedType: 'right',\r\n        getRowCtrls: getStickyTopRowCtrls,\r\n    },\r\n    stickyTopFullWidth: {\r\n        type: 'fullWidth',\r\n        container: 'ag-sticky-top-full-width-container',\r\n        fullWidth: true,\r\n        getRowCtrls: getStickyTopRowCtrls,\r\n    },\r\n\r\n    stickyBottomCenter: {\r\n        type: 'center',\r\n        container: 'ag-sticky-bottom-container',\r\n        viewport: 'ag-sticky-bottom-viewport',\r\n        getRowCtrls: getStickyBottomRowCtrls,\r\n    },\r\n    stickyBottomLeft: {\r\n        type: 'left',\r\n        container: 'ag-pinned-left-sticky-bottom',\r\n        pinnedType: 'left',\r\n        getRowCtrls: getStickyBottomRowCtrls,\r\n    },\r\n    stickyBottomRight: {\r\n        type: 'right',\r\n        container: 'ag-pinned-right-sticky-bottom',\r\n        pinnedType: 'right',\r\n        getRowCtrls: getStickyBottomRowCtrls,\r\n    },\r\n    stickyBottomFullWidth: {\r\n        type: 'fullWidth',\r\n        container: 'ag-sticky-bottom-full-width-container',\r\n        fullWidth: true,\r\n        getRowCtrls: getStickyBottomRowCtrls,\r\n    },\r\n\r\n    bottomCenter: {\r\n        type: 'center',\r\n        container: 'ag-floating-bottom-container',\r\n        viewport: 'ag-floating-bottom-viewport',\r\n        getRowCtrls: getBottomRowCtrls,\r\n    },\r\n    bottomLeft: {\r\n        type: 'left',\r\n        container: 'ag-pinned-left-floating-bottom',\r\n        pinnedType: 'left',\r\n        getRowCtrls: getBottomRowCtrls,\r\n    },\r\n    bottomRight: {\r\n        type: 'right',\r\n        container: 'ag-pinned-right-floating-bottom',\r\n        pinnedType: 'right',\r\n        getRowCtrls: getBottomRowCtrls,\r\n    },\r\n    bottomFullWidth: {\r\n        type: 'fullWidth',\r\n        container: 'ag-floating-bottom-full-width-container',\r\n        fullWidth: true,\r\n        getRowCtrls: getBottomRowCtrls,\r\n    },\r\n};\r\nexport function _getRowContainerOptions(name: RowContainerName): RowContainerOptions {\r\n    return ContainerCssClasses[name];\r\n}\r\n\r\nconst allTopNoFW: RowContainerName[] = ['topCenter', 'topLeft', 'topRight'];\r\nconst allBottomNoFW: RowContainerName[] = ['bottomCenter', 'bottomLeft', 'bottomRight'];\r\nconst allMiddleNoFW: RowContainerName[] = ['center', 'left', 'right'];\r\n\r\nconst allMiddle: RowContainerName[] = ['center', 'left', 'right', 'fullWidth'];\r\nconst allCenter: RowContainerName[] = ['stickyTopCenter', 'stickyBottomCenter', 'center', 'topCenter', 'bottomCenter'];\r\nconst allLeft: RowContainerName[] = ['left', 'bottomLeft', 'topLeft', 'stickyTopLeft', 'stickyBottomLeft'];\r\nconst allRight: RowContainerName[] = ['right', 'bottomRight', 'topRight', 'stickyTopRight', 'stickyBottomRight'];\r\n\r\n// sticky section must show rows in set order\r\nconst allStickyTopNoFW: RowContainerName[] = ['stickyTopCenter', 'stickyTopLeft', 'stickyTopRight'];\r\nconst allStickyBottomNoFW: RowContainerName[] = ['stickyBottomCenter', 'stickyBottomLeft', 'stickyBottomRight'];\r\nconst allStickyContainers: RowContainerName[] = [\r\n    ...allStickyTopNoFW,\r\n    'stickyTopFullWidth',\r\n    ...allStickyBottomNoFW,\r\n    'stickyBottomFullWidth',\r\n];\r\nconst allNoFW: RowContainerName[] = [\r\n    ...allTopNoFW,\r\n    ...allBottomNoFW,\r\n    ...allMiddleNoFW,\r\n    ...allStickyTopNoFW,\r\n    ...allStickyBottomNoFW,\r\n];\r\n\r\nexport interface IRowContainerComp {\r\n    setViewportHeight(height: string): void;\r\n    setHorizontalScroll(offset: number): void;\r\n    setRowCtrls(params: { rowCtrls: RowCtrl[]; useFlushSync?: boolean }): void;\r\n    setDomOrder(domOrder: boolean): void;\r\n    setContainerWidth(width: string): void;\r\n    setOffsetTop(offset: string): void;\r\n}\r\n\r\nexport class RowContainerCtrl extends BeanStub implements ScrollPartner {\r\n    private readonly options: RowContainerOptions;\r\n\r\n    private comp: IRowContainerComp;\r\n    public eContainer: HTMLElement;\r\n    public eViewport: HTMLElement;\r\n    private enableRtl: boolean;\r\n\r\n    public viewportSizeFeature: ViewportSizeFeature | undefined; // only center has this\r\n    private pinnedWidthFeature: SetPinnedWidthFeature | undefined;\r\n    private visible: boolean = true;\r\n    // Maintaining a constant reference enables optimization in React.\r\n    private EMPTY_CTRLS = [];\r\n\r\n    constructor(private readonly name: RowContainerName) {\r\n        super();\r\n        this.options = _getRowContainerOptions(name);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.enableRtl = this.gos.get('enableRtl');\r\n\r\n        this.forContainers(['center'], () => {\r\n            this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this));\r\n            this.addManagedEventListeners({\r\n                stickyTopOffsetChanged: this.onStickyTopOffsetChanged.bind(this),\r\n            });\r\n        });\r\n    }\r\n\r\n    private onStickyTopOffsetChanged(event: StickyTopOffsetChangedEvent): void {\r\n        this.comp.setOffsetTop(`${event.offset}px`);\r\n    }\r\n\r\n    private registerWithCtrlsService(): void {\r\n        // we don't register full width containers\r\n        if (this.options.fullWidth) return;\r\n        this.beans.ctrlsSvc.register(this.name as any, this);\r\n    }\r\n\r\n    private forContainers(names: RowContainerName[], callback: () => void): void {\r\n        if (names.indexOf(this.name) >= 0) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public setComp(view: IRowContainerComp, eContainer: HTMLElement, eViewport: HTMLElement): void {\r\n        this.comp = view;\r\n        this.eContainer = eContainer;\r\n        this.eViewport = eViewport;\r\n\r\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\r\n        this.addPreventScrollWhileDragging();\r\n        this.listenOnDomOrder();\r\n\r\n        const { pinnedCols, rangeSvc } = this.beans;\r\n\r\n        const pinnedWidthChanged = () => this.onPinnedWidthChanged();\r\n        this.forContainers(allLeft, () => {\r\n            this.pinnedWidthFeature = this.createOptionalManagedBean(\r\n                pinnedCols?.createPinnedWidthFeature(this.eContainer, true)\r\n            );\r\n            this.addManagedEventListeners({ leftPinnedWidthChanged: pinnedWidthChanged });\r\n        });\r\n        this.forContainers(allRight, () => {\r\n            this.pinnedWidthFeature = this.createOptionalManagedBean(\r\n                pinnedCols?.createPinnedWidthFeature(this.eContainer, false)\r\n            );\r\n            this.addManagedEventListeners({ rightPinnedWidthChanged: pinnedWidthChanged });\r\n        });\r\n        this.forContainers(allMiddle, () =>\r\n            this.createManagedBean(\r\n                new SetHeightFeature(this.eContainer, this.name === 'center' ? eViewport : undefined)\r\n            )\r\n        );\r\n        if (rangeSvc) {\r\n            this.forContainers(allNoFW, () =>\r\n                this.createManagedBean(rangeSvc.createDragListenerFeature(this.eContainer))\r\n            );\r\n        }\r\n\r\n        this.forContainers(allCenter, () =>\r\n            this.createManagedBean(new CenterWidthFeature((width) => this.comp.setContainerWidth(`${width}px`)))\r\n        );\r\n\r\n        // Set the initial visibility of the container to avoid extra rendering\r\n        this.visible = this.isContainerVisible();\r\n        this.addListeners();\r\n        this.registerWithCtrlsService();\r\n    }\r\n\r\n    public onScrollCallback(fn: () => void): void {\r\n        this.addManagedElementListeners(this.eViewport, { scroll: fn });\r\n    }\r\n\r\n    private addListeners(): void {\r\n        this.addManagedEventListeners({\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            displayedColumnsWidthChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            displayedRowsChanged: (params) => this.onDisplayedRowsChanged(params.afterScroll),\r\n        });\r\n\r\n        this.onDisplayedColumnsChanged();\r\n        this.onDisplayedRowsChanged();\r\n    }\r\n\r\n    private listenOnDomOrder(): void {\r\n        const isStickContainer = allStickyContainers.indexOf(this.name) >= 0;\r\n        if (isStickContainer) {\r\n            this.comp.setDomOrder(true);\r\n            return;\r\n        }\r\n\r\n        const listener = () => {\r\n            const isEnsureDomOrder = this.gos.get('ensureDomOrder');\r\n            const isPrintLayout = _isDomLayout(this.gos, 'print');\r\n            this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);\r\n        };\r\n\r\n        this.addManagedPropertyListener('domLayout', listener);\r\n        listener();\r\n    }\r\n\r\n    public onDisplayedColumnsChanged(): void {\r\n        this.forContainers(['center'], () => this.onHorizontalViewportChanged());\r\n    }\r\n\r\n    // this methods prevents the grid views from being scrolled while the dragService is being used\r\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\r\n    private addPreventScrollWhileDragging(): void {\r\n        const { dragSvc } = this.beans;\r\n        if (!dragSvc) {\r\n            return;\r\n        }\r\n        const preventScroll = (e: TouchEvent) => {\r\n            if (dragSvc!.dragging) {\r\n                if (e.cancelable) {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\r\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\r\n    }\r\n\r\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\r\n    // out the virtual columns again. gets called from following locations:\r\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\r\n    public onHorizontalViewportChanged(afterScroll: boolean = false): void {\r\n        const scrollWidth = this.getCenterWidth();\r\n        const scrollPosition = this.getCenterViewportScrollLeft();\r\n\r\n        this.beans.colViewport.setScrollPosition(scrollWidth, scrollPosition, afterScroll);\r\n    }\r\n\r\n    public hasHorizontalScrollGap(): boolean {\r\n        return this.eContainer.clientWidth - this.eViewport.clientWidth < 0;\r\n    }\r\n\r\n    public hasVerticalScrollGap(): boolean {\r\n        return this.eContainer.clientHeight - this.eViewport.clientHeight < 0;\r\n    }\r\n\r\n    public getCenterWidth(): number {\r\n        return _getInnerWidth(this.eViewport);\r\n    }\r\n\r\n    public getCenterViewportScrollLeft(): number {\r\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\r\n        return _getScrollLeft(this.eViewport, this.enableRtl);\r\n    }\r\n\r\n    public registerViewportResizeListener(listener: () => void) {\r\n        const unsubscribeFromResize = _observeResize(this.beans, this.eViewport, listener);\r\n        this.addDestroyFunc(() => unsubscribeFromResize());\r\n    }\r\n\r\n    public isViewportInTheDOMTree(): boolean {\r\n        return _isInDOM(this.eViewport);\r\n    }\r\n\r\n    public getViewportScrollLeft(): number {\r\n        return _getScrollLeft(this.eViewport, this.enableRtl);\r\n    }\r\n\r\n    public isHorizontalScrollShowing(): boolean {\r\n        const isAlwaysShowHorizontalScroll = this.gos.get('alwaysShowHorizontalScroll');\r\n        return isAlwaysShowHorizontalScroll || _isHorizontalScrollShowing(this.eViewport);\r\n    }\r\n\r\n    public setHorizontalScroll(offset: number): void {\r\n        this.comp.setHorizontalScroll(offset);\r\n    }\r\n\r\n    public getHScrollPosition(): { left: number; right: number } {\r\n        const res = {\r\n            left: this.eViewport.scrollLeft,\r\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth,\r\n        };\r\n        return res;\r\n    }\r\n\r\n    public setCenterViewportScrollLeft(value: number): void {\r\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\r\n        _setScrollLeft(this.eViewport, value, this.enableRtl);\r\n    }\r\n\r\n    private isContainerVisible(): boolean {\r\n        const pinned = this.options.pinnedType != null;\r\n        return !pinned || (!!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0);\r\n    }\r\n\r\n    private onPinnedWidthChanged(): void {\r\n        const visible = this.isContainerVisible();\r\n        if (this.visible != visible) {\r\n            this.visible = visible;\r\n            this.onDisplayedRowsChanged();\r\n        }\r\n    }\r\n\r\n    private onDisplayedRowsChanged(afterScroll: boolean = false): void {\r\n        const rows = this.options.getRowCtrls(this.beans.rowRenderer);\r\n        if (!this.visible || rows.length === 0) {\r\n            this.comp.setRowCtrls({ rowCtrls: this.EMPTY_CTRLS });\r\n            return;\r\n        }\r\n\r\n        const printLayout = _isDomLayout(this.gos, 'print');\r\n        const embedFullWidthRows = this.gos.get('embedFullWidthRows');\r\n        const embedFW = embedFullWidthRows || printLayout;\r\n\r\n        // this list contains either all pinned top, center or pinned bottom rows\r\n        // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\r\n        const rowsThisContainer = rows.filter((rowCtrl) => {\r\n            // this just justifies if the ctrl is in the correct place, this will be fed with zombie rows by the\r\n            // row renderer, so should not block them as they still need to animate -  the row renderer\r\n            // will clean these up when they finish animating\r\n            const fullWidthRow = rowCtrl.isFullWidth();\r\n\r\n            const match = this.options.fullWidth ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;\r\n\r\n            return match;\r\n        });\r\n\r\n        this.comp.setRowCtrls({ rowCtrls: rowsThisContainer, useFlushSync: afterScroll });\r\n    }\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { FilterManager } from '../filter/filterManager';\r\nimport { _isAnimateRows, _isDomLayout } from '../gridOptionsUtils';\r\nimport type { IColsService } from '../interfaces/iColsService';\r\nimport { _requestAnimationFrame } from '../misc/animationFrameService';\r\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\r\nimport type { LayoutView } from '../styling/layoutFeature';\r\nimport { LayoutFeature } from '../styling/layoutFeature';\r\nimport { _isInvisibleScrollbar } from '../utils/browser';\r\nimport { _isElementChildOfClass, _isVerticalScrollShowing } from '../utils/dom';\r\nimport type { PopupService } from '../widgets/popupService';\r\nimport { GridBodyScrollFeature } from './gridBodyScrollFeature';\r\nimport { _isEventFromThisGrid } from './mouseEventUtils';\r\nimport { _getRowContainerOptions } from './rowContainer/rowContainerCtrl';\r\nimport type { ScrollVisibleService } from './scrollVisibleService';\r\n\r\nexport type RowAnimationCssClasses = 'ag-row-animation' | 'ag-row-no-animation';\r\n\r\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\r\n\r\nconst CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\r\nconst CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\r\n\r\nexport interface IGridBodyComp extends LayoutView {\r\n    setColumnMovingCss(cssClass: string, on: boolean): void;\r\n    setCellSelectableCss(cssClass: string | null, on: boolean): void;\r\n    setTopHeight(height: number): void;\r\n    setTopDisplay(display: string): void;\r\n    setBottomHeight(height: number): void;\r\n    setBottomDisplay(display: string): void;\r\n    setStickyTopHeight(height: string): void;\r\n    setStickyTopTop(offsetTop: string): void;\r\n    setStickyTopWidth(width: string): void;\r\n    setStickyBottomHeight(height: string): void;\r\n    setStickyBottomBottom(offsetBottom: string): void;\r\n    setStickyBottomWidth(width: string): void;\r\n    setColumnCount(count: number): void;\r\n    setRowCount(count: number): void;\r\n    setRowAnimationCssOnBodyViewport(cssClass: RowAnimationCssClasses, animate: boolean): void;\r\n    setAlwaysVerticalScrollClass(cssClass: string | null, on: boolean): void;\r\n    setPinnedTopBottomOverflowY(overflow: 'scroll' | 'hidden'): void;\r\n    registerBodyViewportResizeListener(listener: () => void): void;\r\n    setBodyViewportWidth(width: string): void;\r\n    setGridRootRole(role: 'grid' | 'treegrid'): void;\r\n}\r\n\r\nexport class GridBodyCtrl extends BeanStub {\r\n    private ctrlsSvc: CtrlsService;\r\n    private colModel: ColumnModel;\r\n    private scrollVisibleSvc: ScrollVisibleService;\r\n    private rowGroupColsSvc?: IColsService;\r\n    private pinnedRowModel?: PinnedRowModel;\r\n    private filterManager?: FilterManager;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.ctrlsSvc = beans.ctrlsSvc;\r\n        this.colModel = beans.colModel;\r\n        this.scrollVisibleSvc = beans.scrollVisibleSvc;\r\n        this.pinnedRowModel = beans.pinnedRowModel;\r\n        this.filterManager = beans.filterManager;\r\n        this.rowGroupColsSvc = beans.rowGroupColsSvc;\r\n    }\r\n\r\n    private comp: IGridBodyComp;\r\n    public eGridBody: HTMLElement;\r\n    public eBodyViewport: HTMLElement;\r\n    private eTop: HTMLElement;\r\n    private eBottom: HTMLElement;\r\n    private eStickyTop: HTMLElement;\r\n\r\n    private eCenterColsViewport: HTMLElement;\r\n    private eFullWidthContainer: HTMLElement;\r\n    private eStickyTopFullWidthContainer: HTMLElement;\r\n    private eStickyBottomFullWidthContainer: HTMLElement;\r\n\r\n    public stickyTopHeight: number = 0;\r\n    private eStickyBottom: HTMLElement;\r\n    public stickyBottomHeight: number = 0;\r\n\r\n    public scrollFeature: GridBodyScrollFeature;\r\n\r\n    public setComp(\r\n        comp: IGridBodyComp,\r\n        eGridBody: HTMLElement,\r\n        eBodyViewport: HTMLElement,\r\n        eTop: HTMLElement,\r\n        eBottom: HTMLElement,\r\n        eStickyTop: HTMLElement,\r\n        eStickyBottom: HTMLElement\r\n    ): void {\r\n        this.comp = comp;\r\n        this.eGridBody = eGridBody;\r\n        this.eBodyViewport = eBodyViewport;\r\n        this.eTop = eTop;\r\n        this.eBottom = eBottom;\r\n        this.eStickyTop = eStickyTop;\r\n        this.eStickyBottom = eStickyBottom;\r\n\r\n        this.eCenterColsViewport = eBodyViewport.querySelector(\r\n            `.${_getRowContainerOptions('center').viewport}`\r\n        ) as HTMLElement;\r\n        this.eFullWidthContainer = eBodyViewport.querySelector(\r\n            `.${_getRowContainerOptions('fullWidth').container}`\r\n        ) as HTMLElement;\r\n        this.eStickyTopFullWidthContainer = eStickyTop.querySelector(\r\n            `.${_getRowContainerOptions('stickyTopFullWidth').container}`\r\n        ) as HTMLElement;\r\n        this.eStickyBottomFullWidthContainer = eStickyBottom.querySelector(\r\n            `.${_getRowContainerOptions('stickyBottomFullWidth').container}`\r\n        ) as HTMLElement;\r\n\r\n        this.setCellTextSelection(this.gos.get('enableCellTextSelection'));\r\n        this.addManagedPropertyListener('enableCellTextSelection', (props) =>\r\n            this.setCellTextSelection(props.currentValue)\r\n        );\r\n\r\n        this.createManagedBean(new LayoutFeature(this.comp));\r\n        this.scrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\r\n        this.beans.rowDragSvc?.setupRowDrag(this.eBodyViewport, this);\r\n\r\n        this.setupRowAnimationCssClass();\r\n\r\n        this.addEventListeners();\r\n        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop, eStickyBottom]);\r\n        this.setGridRootRole();\r\n        this.onGridColumnsChanged();\r\n        this.addBodyViewportListener();\r\n        this.setFloatingHeights();\r\n        this.disableBrowserDragging();\r\n        this.addStopEditingWhenGridLosesFocus();\r\n        this.updateScrollingClasses();\r\n\r\n        this.filterManager?.setupAdvFilterHeaderComp(eTop);\r\n\r\n        this.ctrlsSvc.register('gridBodyCtrl', this);\r\n    }\r\n\r\n    private addEventListeners(): void {\r\n        const setFloatingHeights = this.setFloatingHeights.bind(this);\r\n        const setGridRootRole = this.setGridRootRole.bind(this);\r\n\r\n        this.addManagedEventListeners({\r\n            gridColumnsChanged: this.onGridColumnsChanged.bind(this),\r\n            scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this),\r\n            scrollGapChanged: this.updateScrollingClasses.bind(this),\r\n            pinnedRowDataChanged: setFloatingHeights,\r\n            pinnedHeightChanged: setFloatingHeights,\r\n            headerHeightChanged: this.setStickyTopOffsetTop.bind(this),\r\n            columnRowGroupChanged: setGridRootRole,\r\n            columnPivotChanged: setGridRootRole,\r\n        });\r\n\r\n        this.addManagedPropertyListener('treeData', setGridRootRole);\r\n    }\r\n\r\n    private onGridColumnsChanged(): void {\r\n        const columns = this.beans.colModel.getCols();\r\n        this.comp.setColumnCount(columns.length);\r\n    }\r\n\r\n    private onScrollVisibilityChanged(): void {\r\n        const { scrollVisibleSvc } = this;\r\n        const visible = scrollVisibleSvc.verticalScrollShowing;\r\n        this.setVerticalScrollPaddingVisible(visible);\r\n        this.setStickyWidth(visible);\r\n        this.setStickyBottomOffsetBottom();\r\n\r\n        const scrollbarWidth = visible ? scrollVisibleSvc.getScrollbarWidth() || 0 : 0;\r\n        const pad = _isInvisibleScrollbar() ? 16 : 0;\r\n        const width = `calc(100% + ${scrollbarWidth + pad}px)`;\r\n\r\n        _requestAnimationFrame(this.beans, () => this.comp.setBodyViewportWidth(width));\r\n\r\n        this.updateScrollingClasses();\r\n    }\r\n\r\n    private setGridRootRole(): void {\r\n        const { rowGroupColsSvc, colModel } = this;\r\n\r\n        let isTreeGrid = this.gos.get('treeData');\r\n\r\n        if (!isTreeGrid) {\r\n            const isPivotActive = colModel.isPivotMode();\r\n            const rowGroupColumnLen = !rowGroupColsSvc ? 0 : rowGroupColsSvc.columns.length;\r\n            const columnsNeededForGrouping = isPivotActive ? 2 : 1;\r\n            isTreeGrid = rowGroupColumnLen >= columnsNeededForGrouping;\r\n        }\r\n\r\n        this.comp.setGridRootRole(isTreeGrid ? 'treegrid' : 'grid');\r\n    }\r\n\r\n    private addFocusListeners(elements: HTMLElement[]): void {\r\n        elements.forEach((element) => {\r\n            this.addManagedElementListeners(element, {\r\n                focusin: (e: FocusEvent) => {\r\n                    const { target } = e;\r\n                    // element being focused is nested?\r\n                    const isFocusedElementNested = _isElementChildOfClass(target as HTMLElement, 'ag-root', element);\r\n\r\n                    element.classList.toggle('ag-has-focus', !isFocusedElementNested);\r\n                },\r\n                focusout: (e: FocusEvent) => {\r\n                    const { target, relatedTarget } = e;\r\n                    const gridContainRelatedTarget = element.contains(relatedTarget as HTMLElement);\r\n                    const isNestedRelatedTarget = _isElementChildOfClass(\r\n                        relatedTarget as HTMLElement,\r\n                        'ag-root',\r\n                        element\r\n                    );\r\n                    const isNestedTarget = _isElementChildOfClass(target as HTMLElement, 'ag-root', element);\r\n\r\n                    // element losing focus belongs to a nested grid,\r\n                    // it should not be handled here.\r\n                    if (isNestedTarget) {\r\n                        return;\r\n                    }\r\n\r\n                    // the grid does not contain, or the focus element is within\r\n                    // a nested grid\r\n                    if (!gridContainRelatedTarget || isNestedRelatedTarget) {\r\n                        element.classList.remove('ag-has-focus');\r\n                    }\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    // used by ColumnAnimationService\r\n    public setColumnMovingCss(moving: boolean): void {\r\n        this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);\r\n    }\r\n\r\n    public setCellTextSelection(selectable: boolean = false): void {\r\n        this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);\r\n    }\r\n\r\n    private updateScrollingClasses(): void {\r\n        const {\r\n            eGridBody: { classList },\r\n            scrollVisibleSvc,\r\n        } = this;\r\n        classList.toggle('ag-body-vertical-content-no-gap', !scrollVisibleSvc.verticalScrollGap);\r\n        classList.toggle('ag-body-horizontal-content-no-gap', !scrollVisibleSvc.horizontalScrollGap);\r\n    }\r\n\r\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\r\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\r\n    private disableBrowserDragging(): void {\r\n        this.addManagedElementListeners(this.eGridBody, {\r\n            dragstart: (event: DragEvent) => {\r\n                if (event.target instanceof HTMLImageElement) {\r\n                    event.preventDefault();\r\n                    return false;\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    private addStopEditingWhenGridLosesFocus(): void {\r\n        this.beans.editSvc?.addStopEditingWhenGridLosesFocus([\r\n            this.eBodyViewport,\r\n            this.eBottom,\r\n            this.eTop,\r\n            this.eStickyTop,\r\n            this.eStickyBottom,\r\n        ]);\r\n    }\r\n\r\n    public updateRowCount(): void {\r\n        const headerCount =\r\n            (this.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0) +\r\n            (this.filterManager?.getHeaderRowCount() ?? 0);\r\n\r\n        const { rowModel } = this.beans;\r\n        const rowCount = rowModel.isLastRowIndexKnown() ? rowModel.getRowCount() : -1;\r\n        const total = rowCount === -1 ? -1 : headerCount + rowCount;\r\n\r\n        this.comp.setRowCount(total);\r\n    }\r\n\r\n    public registerBodyViewportResizeListener(listener: () => void): void {\r\n        this.comp.registerBodyViewportResizeListener(listener);\r\n    }\r\n\r\n    public setVerticalScrollPaddingVisible(visible: boolean): void {\r\n        const overflowY = visible ? 'scroll' : 'hidden';\r\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\r\n    }\r\n\r\n    public isVerticalScrollShowing(): boolean {\r\n        const show = this.gos.get('alwaysShowVerticalScroll');\r\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\r\n        const allowVerticalScroll = _isDomLayout(this.gos, 'normal');\r\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\r\n        return show || (allowVerticalScroll && _isVerticalScrollShowing(this.eBodyViewport));\r\n    }\r\n\r\n    private setupRowAnimationCssClass(): void {\r\n        const { rowContainerHeight, environment } = this.beans;\r\n        let initialSizeMeasurementComplete = environment.sizesMeasured;\r\n\r\n        const updateAnimationClass = () => {\r\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\r\n            // when scaling and doing row animation.\r\n            const animateRows =\r\n                initialSizeMeasurementComplete && _isAnimateRows(this.gos) && !rowContainerHeight.stretching;\r\n            const animateRowsCssClass: RowAnimationCssClasses = animateRows\r\n                ? 'ag-row-animation'\r\n                : 'ag-row-no-animation';\r\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\r\n        };\r\n\r\n        updateAnimationClass();\r\n\r\n        this.addManagedEventListeners({ heightScaleChanged: updateAnimationClass });\r\n        this.addManagedPropertyListener('animateRows', updateAnimationClass);\r\n\r\n        this.addManagedEventListeners({\r\n            gridStylesChanged: () => {\r\n                if (!initialSizeMeasurementComplete && environment.sizesMeasured) {\r\n                    initialSizeMeasurementComplete = true;\r\n                    updateAnimationClass();\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    private addBodyViewportListener(): void {\r\n        const { popupSvc, touchSvc } = this.beans;\r\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\r\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\r\n        const listener = this.onBodyViewportContextMenu.bind(this);\r\n        this.addManagedElementListeners(this.eBodyViewport, { contextmenu: listener });\r\n        touchSvc?.mockBodyContextMenu(this, listener);\r\n\r\n        this.addManagedElementListeners(this.eBodyViewport, {\r\n            wheel: this.onBodyViewportWheel.bind(this, popupSvc),\r\n        });\r\n        this.addManagedElementListeners(this.eStickyTop, { wheel: this.onStickyWheel.bind(this) });\r\n        this.addManagedElementListeners(this.eStickyBottom, { wheel: this.onStickyWheel.bind(this) });\r\n\r\n        // allow mouseWheel on the Full Width Container to Scroll the Viewport\r\n        this.addFullWidthContainerWheelListener();\r\n    }\r\n\r\n    private addFullWidthContainerWheelListener(): void {\r\n        this.addManagedElementListeners(this.eFullWidthContainer, {\r\n            wheel: (e: WheelEvent) => this.onFullWidthContainerWheel(e),\r\n        });\r\n    }\r\n\r\n    private onFullWidthContainerWheel(e: WheelEvent): void {\r\n        const { deltaX, deltaY, shiftKey } = e;\r\n        const isHorizontalScroll = shiftKey || Math.abs(deltaX) > Math.abs(deltaY);\r\n\r\n        if (isHorizontalScroll && _isEventFromThisGrid(this.gos, e)) {\r\n            this.scrollGridBodyToMatchEvent(e);\r\n        }\r\n    }\r\n\r\n    private onStickyWheel(e: WheelEvent): void {\r\n        const { deltaX, deltaY, shiftKey } = e;\r\n\r\n        const isHorizontalScroll = shiftKey || Math.abs(deltaX) > Math.abs(deltaY);\r\n\r\n        // we test for shift key because some devices will\r\n        // only change deltaY even when scrolling horizontally\r\n        const target = e.target as HTMLElement;\r\n        if (!isHorizontalScroll) {\r\n            e.preventDefault();\r\n            this.scrollVertically(deltaY);\r\n        } else if (\r\n            this.eStickyTopFullWidthContainer.contains(target) ||\r\n            this.eStickyBottomFullWidthContainer.contains(target)\r\n        ) {\r\n            this.scrollGridBodyToMatchEvent(e);\r\n        }\r\n    }\r\n\r\n    private scrollGridBodyToMatchEvent(e: WheelEvent): void {\r\n        const { deltaX, deltaY } = e;\r\n        e.preventDefault();\r\n        // if it is a horizontal scroll and deltaX is zero,\r\n        // it means the OS has flipped the axis and it's using deltaY\r\n        this.eCenterColsViewport.scrollBy({ left: deltaX || deltaY });\r\n    }\r\n\r\n    private onBodyViewportContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\r\n        if (!mouseEvent && !touchEvent) {\r\n            return;\r\n        }\r\n\r\n        if (this.gos.get('preventDefaultOnContextMenu')) {\r\n            const event = (mouseEvent || touchEvent)!;\r\n            event.preventDefault();\r\n        }\r\n\r\n        const { target } = (mouseEvent || touch)!;\r\n\r\n        if (target === this.eBodyViewport || target === this.ctrlsSvc.get('center').eViewport) {\r\n            // show it\r\n            this.beans.contextMenuSvc?.showContextMenu({\r\n                mouseEvent,\r\n                touchEvent: touchEvent!,\r\n                value: null,\r\n                anchorToElement: this.eGridBody,\r\n            });\r\n        }\r\n    }\r\n\r\n    private onBodyViewportWheel(popupSvc: PopupService, e: WheelEvent): void {\r\n        if (!this.gos.get('suppressScrollWhenPopupsAreOpen')) {\r\n            return;\r\n        }\r\n\r\n        if (popupSvc?.hasAnchoredPopup()) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    // called by rowDragFeature\r\n    public scrollVertically(pixels: number): number {\r\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\r\n\r\n        this.scrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\r\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\r\n    }\r\n\r\n    private setFloatingHeights(): void {\r\n        const { pinnedRowModel } = this;\r\n\r\n        const floatingTopHeight = pinnedRowModel?.getPinnedTopTotalHeight() ?? 0;\r\n        const floatingBottomHeight = pinnedRowModel?.getPinnedBottomTotalHeight() ?? 0;\r\n        this.comp.setTopHeight(floatingTopHeight);\r\n        this.comp.setBottomHeight(floatingBottomHeight);\r\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\r\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\r\n        this.setStickyTopOffsetTop();\r\n        this.setStickyBottomOffsetBottom();\r\n    }\r\n\r\n    public setStickyTopHeight(height: number = 0): void {\r\n        // console.log('setting sticky top height ' + height);\r\n        this.comp.setStickyTopHeight(`${height}px`);\r\n        this.stickyTopHeight = height;\r\n    }\r\n\r\n    public setStickyBottomHeight(height: number = 0): void {\r\n        this.comp.setStickyBottomHeight(`${height}px`);\r\n        this.stickyBottomHeight = height;\r\n    }\r\n\r\n    private setStickyWidth(vScrollVisible: boolean) {\r\n        if (!vScrollVisible) {\r\n            this.comp.setStickyTopWidth('100%');\r\n            this.comp.setStickyBottomWidth('100%');\r\n        } else {\r\n            const scrollbarWidth = this.scrollVisibleSvc.getScrollbarWidth();\r\n            this.comp.setStickyTopWidth(`calc(100% - ${scrollbarWidth}px)`);\r\n            this.comp.setStickyBottomWidth(`calc(100% - ${scrollbarWidth}px)`);\r\n        }\r\n    }\r\n\r\n    private setStickyTopOffsetTop(): void {\r\n        const headerCtrl = this.ctrlsSvc.get('gridHeaderCtrl');\r\n        const headerHeight = headerCtrl.headerHeight + (this.filterManager?.getHeaderHeight() ?? 0);\r\n        const pinnedTopHeight = this.pinnedRowModel?.getPinnedTopTotalHeight() ?? 0;\r\n\r\n        let height = 0;\r\n\r\n        if (headerHeight > 0) {\r\n            height += headerHeight;\r\n        }\r\n        if (pinnedTopHeight > 0) {\r\n            height += pinnedTopHeight;\r\n        }\r\n        if (height > 0) {\r\n            height += 1;\r\n        }\r\n\r\n        this.comp.setStickyTopTop(`${height}px`);\r\n    }\r\n\r\n    private setStickyBottomOffsetBottom(): void {\r\n        const { pinnedRowModel, scrollVisibleSvc, comp } = this;\r\n        const pinnedBottomHeight = pinnedRowModel?.getPinnedBottomTotalHeight() ?? 0;\r\n        const hScrollShowing = scrollVisibleSvc.horizontalScrollShowing;\r\n        const scrollbarWidth = hScrollShowing ? scrollVisibleSvc.getScrollbarWidth() || 0 : 0;\r\n        const height = pinnedBottomHeight + scrollbarWidth;\r\n\r\n        comp.setStickyBottomBottom(`${height}px`);\r\n    }\r\n}\r\n", "import { _requestAnimationFrame } from '../misc/animationFrameService';\r\nimport { _isIOSUserAgent, _isInvisibleScrollbar, _isMacOsUserAgent } from '../utils/browser';\r\nimport { _isVisible } from '../utils/dom';\r\nimport { _waitUntil } from '../utils/function';\r\nimport { Component, RefPlaceholder } from '../widgets/component';\r\nimport type { ScrollPartner } from './gridBodyScrollFeature';\r\n\r\nexport abstract class AbstractFakeScrollComp extends Component implements ScrollPartner {\r\n    public readonly eViewport: HTMLElement = RefPlaceholder;\r\n    protected readonly eContainer: HTMLElement = RefPlaceholder;\r\n\r\n    protected invisibleScrollbar: boolean;\r\n    protected hideTimeout: number = 0;\r\n\r\n    protected abstract setScrollVisible(): void;\r\n    public abstract getScrollPosition(): number;\r\n    public abstract setScrollPosition(value: number): void;\r\n\r\n    constructor(\r\n        template: string,\r\n        private readonly direction: 'horizontal' | 'vertical'\r\n    ) {\r\n        super();\r\n        this.setTemplate(template);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({\r\n            scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this),\r\n        });\r\n        this.onScrollVisibilityChanged();\r\n        this.addOrRemoveCssClass('ag-apple-scrollbar', _isMacOsUserAgent() || _isIOSUserAgent());\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        window.clearTimeout(this.hideTimeout);\r\n    }\r\n\r\n    protected initialiseInvisibleScrollbar(): void {\r\n        if (this.invisibleScrollbar !== undefined) {\r\n            return;\r\n        }\r\n\r\n        this.invisibleScrollbar = _isInvisibleScrollbar();\r\n\r\n        if (this.invisibleScrollbar) {\r\n            this.hideAndShowInvisibleScrollAsNeeded();\r\n            this.addActiveListenerToggles();\r\n        }\r\n    }\r\n\r\n    protected addActiveListenerToggles(): void {\r\n        const eGui = this.getGui();\r\n        const onActivate = () => this.addOrRemoveCssClass('ag-scrollbar-active', true);\r\n        const onDeactivate = () => this.addOrRemoveCssClass('ag-scrollbar-active', false);\r\n        this.addManagedListeners(eGui, {\r\n            mouseenter: onActivate,\r\n            mousedown: onActivate,\r\n            touchstart: onActivate,\r\n            mouseleave: onDeactivate,\r\n            touchend: onDeactivate,\r\n        });\r\n    }\r\n\r\n    protected onScrollVisibilityChanged(): void {\r\n        // initialiseInvisibleScrollbar should only be called once, but the reason\r\n        // this can't be inside `setComp` or `postConstruct` is the DOM might not\r\n        // be ready, so we call it until eventually, it gets calculated.\r\n        if (this.invisibleScrollbar === undefined) {\r\n            this.initialiseInvisibleScrollbar();\r\n        }\r\n\r\n        _requestAnimationFrame(this.beans, () => this.setScrollVisible());\r\n    }\r\n\r\n    protected hideAndShowInvisibleScrollAsNeeded(): void {\r\n        this.addManagedEventListeners({\r\n            bodyScroll: (params) => {\r\n                if (params.direction === this.direction) {\r\n                    if (this.hideTimeout) {\r\n                        window.clearTimeout(this.hideTimeout);\r\n                        this.hideTimeout = 0;\r\n                    }\r\n                    this.addOrRemoveCssClass('ag-scrollbar-scrolling', true);\r\n                }\r\n            },\r\n            bodyScrollEnd: () => {\r\n                this.hideTimeout = window.setTimeout(() => {\r\n                    this.addOrRemoveCssClass('ag-scrollbar-scrolling', false);\r\n                    this.hideTimeout = 0;\r\n                }, 400);\r\n            },\r\n        });\r\n    }\r\n\r\n    protected attemptSettingScrollPosition(value: number) {\r\n        const viewport = this.eViewport;\r\n        _waitUntil(\r\n            () => _isVisible(viewport),\r\n            () => this.setScrollPosition(value),\r\n            100\r\n        );\r\n    }\r\n\r\n    public onScrollCallback(fn: () => void): void {\r\n        this.addManagedElementListeners(this.eViewport, { scroll: fn });\r\n    }\r\n}\r\n", "import type { VisibleColsService } from '../columns/visibleColsService';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _getScrollLeft, _isVisible, _setFixedHeight, _setFixedWidth, _setScrollLeft } from '../utils/dom';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { RefPlaceholder } from '../widgets/component';\r\nimport { AbstractFakeScrollComp } from './abstractFakeScrollComp';\r\nimport { CenterWidthFeature } from './centerWidthFeature';\r\nimport type { ScrollVisibleService } from './scrollVisibleService';\r\n\r\nexport class FakeHScrollComp extends AbstractFakeScrollComp {\r\n    private visibleCols: VisibleColsService;\r\n    private scrollVisibleSvc: ScrollVisibleService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.visibleCols = beans.visibleCols;\r\n        this.scrollVisibleSvc = beans.scrollVisibleSvc;\r\n    }\r\n\r\n    private readonly eLeftSpacer: HTMLElement = RefPlaceholder;\r\n    private readonly eRightSpacer: HTMLElement = RefPlaceholder;\r\n\r\n    private enableRtl: boolean;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */ `<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\r\n            <div class=\"ag-horizontal-left-spacer\" data-ref=\"eLeftSpacer\"></div>\r\n            <div class=\"ag-body-horizontal-scroll-viewport\" data-ref=\"eViewport\">\r\n                <div class=\"ag-body-horizontal-scroll-container\" data-ref=\"eContainer\"></div>\r\n            </div>\r\n            <div class=\"ag-horizontal-right-spacer\" data-ref=\"eRightSpacer\"></div>\r\n        </div>`,\r\n            'horizontal'\r\n        );\r\n    }\r\n\r\n    public override postConstruct(): void {\r\n        super.postConstruct();\r\n\r\n        // When doing printing, this changes whether cols are pinned or not\r\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\r\n\r\n        this.addManagedEventListeners({\r\n            displayedColumnsChanged: spacerWidthsListener,\r\n            displayedColumnsWidthChanged: spacerWidthsListener,\r\n            pinnedRowDataChanged: this.refreshCompBottom.bind(this),\r\n        });\r\n\r\n        this.addManagedPropertyListener('domLayout', spacerWidthsListener);\r\n\r\n        this.beans.ctrlsSvc.register('fakeHScrollComp', this);\r\n        this.createManagedBean(new CenterWidthFeature((width) => (this.eContainer.style.width = `${width}px`)));\r\n\r\n        this.addManagedPropertyListeners(['suppressHorizontalScroll'], this.onScrollVisibilityChanged.bind(this));\r\n    }\r\n\r\n    override destroy(): void {\r\n        window.clearTimeout(this.setScrollVisibleDebounce);\r\n        super.destroy();\r\n    }\r\n\r\n    protected override initialiseInvisibleScrollbar(): void {\r\n        if (this.invisibleScrollbar !== undefined) {\r\n            return;\r\n        }\r\n\r\n        this.enableRtl = this.gos.get('enableRtl');\r\n        super.initialiseInvisibleScrollbar();\r\n\r\n        if (this.invisibleScrollbar) {\r\n            this.refreshCompBottom();\r\n        }\r\n    }\r\n\r\n    private refreshCompBottom(): void {\r\n        if (!this.invisibleScrollbar) {\r\n            return;\r\n        }\r\n        const bottomPinnedHeight = this.beans.pinnedRowModel?.getPinnedBottomTotalHeight() ?? 0;\r\n\r\n        this.getGui().style.bottom = `${bottomPinnedHeight}px`;\r\n    }\r\n\r\n    protected override onScrollVisibilityChanged(): void {\r\n        super.onScrollVisibilityChanged();\r\n        this.setFakeHScrollSpacerWidths();\r\n    }\r\n\r\n    private setFakeHScrollSpacerWidths(): void {\r\n        const vScrollShowing = this.scrollVisibleSvc.verticalScrollShowing;\r\n\r\n        // we pad the right based on a) if cols are pinned to the right and\r\n        // b) if v scroll is showing on the right (normal position of scroll)\r\n        let rightSpacing = this.visibleCols.getDisplayedColumnsRightWidth();\r\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\r\n        const scrollbarWidth = this.scrollVisibleSvc.getScrollbarWidth();\r\n\r\n        if (scrollOnRight) {\r\n            rightSpacing += scrollbarWidth;\r\n        }\r\n        _setFixedWidth(this.eRightSpacer, rightSpacing);\r\n        this.eRightSpacer.classList.toggle('ag-scroller-corner', rightSpacing <= scrollbarWidth);\r\n\r\n        // we pad the left based on a) if cols are pinned to the left and\r\n        // b) if v scroll is showing on the left (happens in LTR layout only)\r\n        let leftSpacing = this.visibleCols.getColsLeftWidth();\r\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\r\n\r\n        if (scrollOnLeft) {\r\n            leftSpacing += scrollbarWidth;\r\n        }\r\n\r\n        _setFixedWidth(this.eLeftSpacer, leftSpacing);\r\n        this.eLeftSpacer.classList.toggle('ag-scroller-corner', leftSpacing <= scrollbarWidth);\r\n    }\r\n\r\n    private setScrollVisibleDebounce = 0;\r\n\r\n    protected setScrollVisible(): void {\r\n        const hScrollShowing = this.scrollVisibleSvc.horizontalScrollShowing;\r\n        const invisibleScrollbar = this.invisibleScrollbar;\r\n        const isSuppressHorizontalScroll = this.gos.get('suppressHorizontalScroll');\r\n        const scrollbarWidth = hScrollShowing ? this.scrollVisibleSvc.getScrollbarWidth() || 0 : 0;\r\n        const adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar ? 16 : scrollbarWidth;\r\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\r\n\r\n        // Avoid scrollbars flickering on as we resize the grid. Before showing\r\n        // a scrollbar, give a little time for the grid to resize, after which a\r\n        // scrollbar may no longer be required\r\n        const apply = () => {\r\n            this.setScrollVisibleDebounce = 0;\r\n            this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\r\n            _setFixedHeight(this.getGui(), scrollContainerSize);\r\n            _setFixedHeight(this.eViewport, scrollContainerSize);\r\n            _setFixedHeight(this.eContainer, scrollContainerSize);\r\n            this.setDisplayed(hScrollShowing, { skipAriaHidden: true });\r\n        };\r\n        window.clearTimeout(this.setScrollVisibleDebounce);\r\n        if (!hScrollShowing) {\r\n            apply();\r\n        } else {\r\n            this.setScrollVisibleDebounce = window.setTimeout(apply, 100);\r\n        }\r\n    }\r\n\r\n    public getScrollPosition(): number {\r\n        return _getScrollLeft(this.eViewport, this.enableRtl);\r\n    }\r\n\r\n    public setScrollPosition(value: number): void {\r\n        if (!_isVisible(this.eViewport)) {\r\n            this.attemptSettingScrollPosition(value);\r\n        }\r\n        _setScrollLeft(this.eViewport, value, this.enableRtl);\r\n    }\r\n}\r\n\r\nexport const FakeHScrollSelector: ComponentSelector = {\r\n    selector: 'AG-FAKE-HORIZONTAL-SCROLL',\r\n    component: FakeHScrollComp,\r\n};\r\n", "import type { CtrlsService } from '../ctrlsService';\r\nimport { _isVisible, _setFixedWidth } from '../utils/dom';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { AbstractFakeScrollComp } from './abstractFakeScrollComp';\r\nimport { SetHeightFeature } from './rowContainer/setHeightFeature';\r\n\r\nexport class FakeVScrollComp extends AbstractFakeScrollComp {\r\n    constructor() {\r\n        super(\r\n            /* html */ `<div class=\"ag-body-vertical-scroll\" aria-hidden=\"true\">\r\n            <div class=\"ag-body-vertical-scroll-viewport\" data-ref=\"eViewport\">\r\n                <div class=\"ag-body-vertical-scroll-container\" data-ref=\"eContainer\"></div>\r\n            </div>\r\n        </div>`,\r\n            'vertical'\r\n        );\r\n    }\r\n\r\n    public override postConstruct(): void {\r\n        super.postConstruct();\r\n\r\n        this.createManagedBean(new SetHeightFeature(this.eContainer));\r\n        const { ctrlsSvc } = this.beans;\r\n        ctrlsSvc.register('fakeVScrollComp', this);\r\n\r\n        this.addManagedEventListeners({\r\n            rowContainerHeightChanged: this.onRowContainerHeightChanged.bind(this, ctrlsSvc),\r\n        });\r\n    }\r\n\r\n    protected setScrollVisible(): void {\r\n        const { scrollVisibleSvc } = this.beans;\r\n        const vScrollShowing = scrollVisibleSvc.verticalScrollShowing;\r\n        const invisibleScrollbar = this.invisibleScrollbar;\r\n\r\n        const scrollbarWidth = vScrollShowing ? scrollVisibleSvc.getScrollbarWidth() || 0 : 0;\r\n        const adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar ? 16 : scrollbarWidth;\r\n\r\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\r\n        _setFixedWidth(this.getGui(), adjustedScrollbarWidth);\r\n        _setFixedWidth(this.eViewport, adjustedScrollbarWidth);\r\n        _setFixedWidth(this.eContainer, adjustedScrollbarWidth);\r\n        this.setDisplayed(vScrollShowing, { skipAriaHidden: true });\r\n    }\r\n\r\n    private onRowContainerHeightChanged(ctrlsSvc: CtrlsService): void {\r\n        const gridBodyCtrl = ctrlsSvc.getGridBodyCtrl();\r\n        const gridBodyViewportEl = gridBodyCtrl.eBodyViewport;\r\n\r\n        const eViewportScrollTop = this.getScrollPosition();\r\n        const gridBodyViewportScrollTop = gridBodyViewportEl.scrollTop;\r\n\r\n        if (eViewportScrollTop != gridBodyViewportScrollTop) {\r\n            this.setScrollPosition(gridBodyViewportScrollTop, true);\r\n        }\r\n    }\r\n\r\n    public getScrollPosition(): number {\r\n        return this.eViewport.scrollTop;\r\n    }\r\n\r\n    public setScrollPosition(value: number, force?: boolean): void {\r\n        if (!force && !_isVisible(this.eViewport)) {\r\n            this.attemptSettingScrollPosition(value);\r\n        }\r\n        this.eViewport.scrollTop = value;\r\n    }\r\n}\r\n\r\nexport const FakeVScrollSelector: ComponentSelector = {\r\n    selector: 'AG-FAKE-VERTICAL-SCROLL',\r\n    component: FakeVScrollComp,\r\n};\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { HeaderGroupCellCtrl } from './cells/columnGroup/headerGroupCellCtrl';\r\nimport type { HeaderRowCtrl } from './row/headerRowCtrl';\r\n\r\n// + gridPanel -> for resizing the body and setting top margin\r\nexport function getHeaderRowCount(colModel: ColumnModel): number {\r\n    return colModel.cols ? colModel.cols.treeDepth + 1 : -1;\r\n}\r\n\r\nexport function getFocusHeaderRowCount(beans: BeanCollection): number {\r\n    return beans.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0;\r\n}\r\n\r\nexport function getGroupRowsHeight(beans: BeanCollection): number[] {\r\n    const heights: number[] = [];\r\n    const headerRowContainerCtrls = beans.ctrlsSvc.getHeaderRowContainerCtrls();\r\n\r\n    for (const headerRowContainerCtrl of headerRowContainerCtrls) {\r\n        if (!headerRowContainerCtrl) {\r\n            continue;\r\n        }\r\n\r\n        const groupRowCount = headerRowContainerCtrl.getGroupRowCount() || 0;\r\n\r\n        for (let i = 0; i < groupRowCount; i++) {\r\n            const headerRowCtrl = headerRowContainerCtrl.getGroupRowCtrlAtIndex(i);\r\n\r\n            const currentHeightAtPos = heights[i];\r\n            if (headerRowCtrl) {\r\n                const newHeight = getColumnGroupHeaderRowHeight(beans, headerRowCtrl);\r\n                if (currentHeightAtPos == null || newHeight > currentHeightAtPos) {\r\n                    heights[i] = newHeight;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return heights;\r\n}\r\n\r\nfunction getColumnGroupHeaderRowHeight(beans: BeanCollection, headerRowCtrl: HeaderRowCtrl): number {\r\n    const defaultHeight: number = (\r\n        beans.colModel.isPivotMode() ? getPivotGroupHeaderHeight(beans) : getGroupHeaderHeight(beans)\r\n    ) as number;\r\n\r\n    let displayedHeights = 0;\r\n    const headerRowCellCtrls = headerRowCtrl.getHeaderCtrls() as HeaderGroupCellCtrl[];\r\n    for (const headerCellCtrl of headerRowCellCtrls) {\r\n        const { column } = headerCellCtrl;\r\n        if (column.isAutoHeaderHeight()) {\r\n            const height = column.getAutoHeaderHeight();\r\n            if (height != null && height > displayedHeights) {\r\n                displayedHeights = height;\r\n            }\r\n        }\r\n    }\r\n\r\n    return Math.max(defaultHeight, displayedHeights);\r\n}\r\n\r\nexport function getColumnHeaderRowHeight(beans: BeanCollection): number {\r\n    const defaultHeight: number = (\r\n        beans.colModel.isPivotMode() ? getPivotHeaderHeight(beans) : getHeaderHeight(beans)\r\n    ) as number;\r\n\r\n    const allDisplayedCols = beans.visibleCols.allCols;\r\n\r\n    const displayedHeights = allDisplayedCols\r\n        .filter((col) => col.isAutoHeaderHeight())\r\n        .map((col) => col.getAutoHeaderHeight() || 0);\r\n\r\n    return Math.max(defaultHeight, ...displayedHeights);\r\n}\r\n\r\nexport function getHeaderHeight(beans: BeanCollection): number {\r\n    return beans.gos.get('headerHeight') ?? beans.environment.getDefaultHeaderHeight();\r\n}\r\n\r\nexport function getFloatingFiltersHeight(beans: BeanCollection): number {\r\n    return beans.gos.get('floatingFiltersHeight') ?? getHeaderHeight(beans);\r\n}\r\n\r\nfunction getGroupHeaderHeight(beans: BeanCollection): number {\r\n    return beans.gos.get('groupHeaderHeight') ?? getHeaderHeight(beans);\r\n}\r\n\r\nfunction getPivotHeaderHeight(beans: BeanCollection): number {\r\n    return beans.gos.get('pivotHeaderHeight') ?? getHeaderHeight(beans);\r\n}\r\n\r\nfunction getPivotGroupHeaderHeight(beans: BeanCollection): number {\r\n    return beans.gos.get('pivotGroupHeaderHeight') ?? getGroupHeaderHeight(beans);\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _getActiveDomElement } from '../gridOptionsUtils';\r\nimport { _requestAnimationFrame } from '../misc/animationFrameService';\r\nimport type { HeaderNavigationDirection } from '../navigation/headerNavigationService';\r\nimport { _focusNextGridCoreContainer } from '../utils/focus';\r\nimport { _exists } from '../utils/generic';\r\nimport { ManagedFocusFeature } from '../widgets/managedFocusFeature';\r\nimport { getColumnHeaderRowHeight, getFloatingFiltersHeight, getGroupRowsHeight } from './headerUtils';\r\n\r\nexport interface IGridHeaderComp {\r\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\r\n    setHeightAndMinHeight(height: string): void;\r\n}\r\n\r\nexport class GridHeaderCtrl extends BeanStub {\r\n    private comp: IGridHeaderComp;\r\n    public eGui: HTMLElement;\r\n    public headerHeight: number;\r\n\r\n    public setComp(comp: IGridHeaderComp, eGui: HTMLElement, eFocusableElement: HTMLElement): void {\r\n        this.comp = comp;\r\n        this.eGui = eGui;\r\n\r\n        const { beans } = this;\r\n        const { headerNavigation, touchSvc, ctrlsSvc } = beans;\r\n\r\n        if (headerNavigation) {\r\n            this.createManagedBean(\r\n                new ManagedFocusFeature(eFocusableElement, {\r\n                    onTabKeyDown: this.onTabKeyDown.bind(this),\r\n                    handleKeyDown: this.handleKeyDown.bind(this),\r\n                    onFocusOut: this.onFocusOut.bind(this),\r\n                })\r\n            );\r\n        }\r\n\r\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\r\n        this.addManagedEventListeners({\r\n            columnPivotModeChanged: this.onPivotModeChanged.bind(this, beans),\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this, beans),\r\n        });\r\n\r\n        this.onPivotModeChanged(beans);\r\n        this.setupHeaderHeight();\r\n\r\n        const listener = this.onHeaderContextMenu.bind(this);\r\n        this.addManagedElementListeners(this.eGui, { contextmenu: listener });\r\n        touchSvc?.mockHeaderContextMenu(this, listener);\r\n\r\n        ctrlsSvc.register('gridHeaderCtrl', this);\r\n    }\r\n\r\n    private setupHeaderHeight(): void {\r\n        const listener = this.setHeaderHeight.bind(this);\r\n        listener();\r\n\r\n        this.addManagedPropertyListeners(\r\n            [\r\n                'headerHeight',\r\n                'pivotHeaderHeight',\r\n                'groupHeaderHeight',\r\n                'pivotGroupHeaderHeight',\r\n                'floatingFiltersHeight',\r\n            ],\r\n            listener\r\n        );\r\n\r\n        this.addManagedEventListeners({\r\n            displayedColumnsChanged: listener,\r\n            columnHeaderHeightChanged: listener,\r\n            // add this to the animation frame to avoid a feedback loop\r\n            columnGroupHeaderHeightChanged: () => _requestAnimationFrame(this.beans, () => listener()),\r\n            gridStylesChanged: listener,\r\n            advancedFilterEnabledChanged: listener,\r\n        });\r\n    }\r\n\r\n    private setHeaderHeight(): void {\r\n        const { beans } = this;\r\n\r\n        let totalHeaderHeight: number = 0;\r\n\r\n        const groupHeight = getGroupRowsHeight(beans).reduce((prev, curr) => prev + curr, 0);\r\n        const headerHeight = getColumnHeaderRowHeight(beans);\r\n\r\n        if (beans.filterManager?.hasFloatingFilters()) {\r\n            totalHeaderHeight += getFloatingFiltersHeight(beans)!;\r\n        }\r\n\r\n        totalHeaderHeight += groupHeight;\r\n        totalHeaderHeight += headerHeight!;\r\n\r\n        if (this.headerHeight === totalHeaderHeight) {\r\n            return;\r\n        }\r\n\r\n        this.headerHeight = totalHeaderHeight;\r\n\r\n        // one extra pixel is needed here to account for the\r\n        // height of the border\r\n        const px = `${totalHeaderHeight + 1}px`;\r\n        this.comp.setHeightAndMinHeight(px);\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'headerHeightChanged',\r\n        });\r\n    }\r\n\r\n    private onPivotModeChanged(beans: BeanCollection): void {\r\n        const pivotMode = beans.colModel.isPivotMode();\r\n\r\n        this.comp.addOrRemoveCssClass('ag-pivot-on', pivotMode);\r\n        this.comp.addOrRemoveCssClass('ag-pivot-off', !pivotMode);\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(beans: BeanCollection): void {\r\n        const columns = beans.visibleCols.allCols;\r\n        const shouldAllowOverflow = columns.some((col) => col.isSpanHeaderHeight());\r\n\r\n        this.comp.addOrRemoveCssClass('ag-header-allow-overflow', shouldAllowOverflow);\r\n    }\r\n\r\n    protected onTabKeyDown(e: KeyboardEvent): void {\r\n        const isRtl = this.gos.get('enableRtl');\r\n        const backwards = e.shiftKey;\r\n        const direction = backwards !== isRtl ? 'LEFT' : 'RIGHT';\r\n        const { beans } = this;\r\n        const { headerNavigation, focusSvc } = beans;\r\n\r\n        if (\r\n            headerNavigation!.navigateHorizontally(direction, true, e) ||\r\n            (!backwards && focusSvc.focusOverlay(false)) ||\r\n            _focusNextGridCoreContainer(beans, backwards, true)\r\n        ) {\r\n            // preventDefault so that the tab key doesn't cause focus to get lost\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    protected handleKeyDown(e: KeyboardEvent): void {\r\n        let direction: HeaderNavigationDirection | null = null;\r\n        const { headerNavigation } = this.beans;\r\n\r\n        switch (e.key) {\r\n            case KeyCode.LEFT:\r\n                direction = 'LEFT';\r\n            // eslint-disable-next-line no-fallthrough\r\n            case KeyCode.RIGHT: {\r\n                if (!_exists(direction)) {\r\n                    direction = 'RIGHT';\r\n                }\r\n                if (headerNavigation!.navigateHorizontally(direction, false, e)) {\r\n                    // preventDefault so that the arrow keys don't cause an extra scroll\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case KeyCode.UP:\r\n                direction = 'UP';\r\n            // eslint-disable-next-line no-fallthrough\r\n            case KeyCode.DOWN: {\r\n                if (!_exists(direction)) {\r\n                    direction = 'DOWN';\r\n                }\r\n                if (headerNavigation!.navigateVertically(direction, null, e)) {\r\n                    // preventDefault so that the arrow keys don't cause an extra scroll\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    protected onFocusOut(e: FocusEvent): void {\r\n        const { relatedTarget } = e;\r\n\r\n        const { eGui, beans } = this;\r\n        if (!relatedTarget && eGui.contains(_getActiveDomElement(beans))) {\r\n            return;\r\n        }\r\n\r\n        if (!eGui.contains(relatedTarget as HTMLElement)) {\r\n            beans.focusSvc.focusedHeader = null;\r\n        }\r\n    }\r\n\r\n    private onHeaderContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\r\n        const { menuSvc, ctrlsSvc } = this.beans;\r\n        if ((!mouseEvent && !touchEvent) || !menuSvc?.isHeaderContextMenuEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const { target } = (mouseEvent ?? touch)!;\r\n\r\n        if (target === this.eGui || target === ctrlsSvc.getHeaderRowContainerCtrl()?.eViewport) {\r\n            menuSvc.showHeaderContextMenu(undefined, mouseEvent, touchEvent);\r\n        }\r\n    }\r\n}\r\n", "import { Component } from '../../../widgets/component';\r\nimport type { AbstractHeaderCellCtrl } from './abstractHeaderCellCtrl';\r\n\r\nexport abstract class AbstractHeaderCellComp<T extends AbstractHeaderCellCtrl> extends Component {\r\n    protected ctrl: T;\r\n\r\n    constructor(template: string, ctrl: T) {\r\n        super(template);\r\n        this.ctrl = ctrl;\r\n    }\r\n\r\n    public getCtrl(): T {\r\n        return this.ctrl;\r\n    }\r\n}\r\n", "import type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { _removeAriaSort, _setAriaSort } from '../../../utils/aria';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\r\nimport type { HeaderCellCtrl, IHeaderCellComp } from './headerCellCtrl';\r\nimport type { IHeaderComp } from './headerComp';\r\n\r\nexport class HeaderCellComp extends AbstractHeaderCellComp<HeaderCellCtrl> {\r\n    private readonly eResize: HTMLElement = RefPlaceholder;\r\n    private readonly eHeaderCompWrapper: HTMLElement = RefPlaceholder;\r\n\r\n    private headerComp: IHeaderComp | undefined;\r\n    private headerCompGui: HTMLElement | undefined;\r\n    private headerCompVersion = 0;\r\n\r\n    constructor(ctrl: HeaderCellCtrl) {\r\n        super(\r\n            /* html */ `<div class=\"ag-header-cell\" role=\"columnheader\">\r\n            <div data-ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\r\n            <div data-ref=\"eHeaderCompWrapper\" class=\"ag-header-cell-comp-wrapper\" role=\"presentation\"></div>\r\n        </div>`,\r\n            ctrl\r\n        );\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const eGui = this.getGui();\r\n\r\n        const setAttribute = (name: string, value: string | null | undefined) => {\r\n            if (value != null && value != '') {\r\n                eGui.setAttribute(name, value);\r\n            } else {\r\n                eGui.removeAttribute(name);\r\n            }\r\n        };\r\n\r\n        setAttribute('col-id', this.ctrl.column.getColId());\r\n\r\n        const compProxy: IHeaderCellComp = {\r\n            setWidth: (width) => (eGui.style.width = width),\r\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\r\n            setAriaSort: (sort) => (sort ? _setAriaSort(eGui, sort) : _removeAriaSort(eGui)),\r\n            setUserCompDetails: (compDetails) => this.setUserCompDetails(compDetails),\r\n            getUserCompInstance: () => this.headerComp,\r\n        };\r\n\r\n        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper, undefined);\r\n\r\n        const selectAllGui = this.ctrl.getSelectAllGui();\r\n        if (selectAllGui) {\r\n            this.eResize.insertAdjacentElement('afterend', selectAllGui);\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.destroyHeaderComp();\r\n        super.destroy();\r\n    }\r\n\r\n    private destroyHeaderComp(): void {\r\n        if (this.headerComp) {\r\n            this.eHeaderCompWrapper.removeChild(this.headerCompGui!);\r\n            this.headerComp = this.destroyBean(this.headerComp);\r\n            this.headerCompGui = undefined;\r\n        }\r\n    }\r\n\r\n    private setUserCompDetails(compDetails: UserCompDetails): void {\r\n        this.headerCompVersion++;\r\n\r\n        const versionCopy = this.headerCompVersion;\r\n\r\n        compDetails.newAgStackInstance()!.then((comp) => this.afterCompCreated(versionCopy, comp));\r\n    }\r\n\r\n    private afterCompCreated(version: number, headerComp: IHeaderComp): void {\r\n        if (version != this.headerCompVersion || !this.isAlive()) {\r\n            this.destroyBean(headerComp);\r\n            return;\r\n        }\r\n\r\n        this.destroyHeaderComp();\r\n\r\n        this.headerComp = headerComp;\r\n        this.headerCompGui = headerComp.getGui();\r\n        this.eHeaderCompWrapper.appendChild(this.headerCompGui);\r\n        this.ctrl.setDragSource(this.getGui()!);\r\n    }\r\n}\r\n", "import type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\r\nimport type { HeaderGroupCellCtrl, IHeaderGroupCellComp } from './headerGroupCellCtrl';\r\nimport type { IHeaderGroupComp } from './headerGroupComp';\r\n\r\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp<HeaderGroupCellCtrl> {\r\n    private eResize: HTMLElement = RefPlaceholder;\r\n    private readonly eHeaderCompWrapper: HTMLElement = RefPlaceholder;\r\n\r\n    private headerGroupComp: IHeaderGroupComp | undefined;\r\n\r\n    constructor(ctrl: HeaderGroupCellCtrl) {\r\n        super(\r\n            /* html */ `<div class=\"ag-header-group-cell\" role=\"columnheader\">\r\n            <div data-ref=\"eHeaderCompWrapper\" class=\"ag-header-cell-comp-wrapper\" role=\"presentation\"></div>\r\n            <div data-ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\r\n        </div>`,\r\n            ctrl\r\n        );\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const eGui = this.getGui();\r\n\r\n        const setAttribute = (key: string, value: string | undefined) =>\r\n            value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\r\n\r\n        eGui.setAttribute('col-id', this.ctrl.column.getUniqueId());\r\n\r\n        const compProxy: IHeaderGroupCellComp = {\r\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\r\n            setHeaderWrapperHidden: (hidden) => {\r\n                if (hidden) {\r\n                    this.eHeaderCompWrapper.style.setProperty('display', 'none');\r\n                } else {\r\n                    this.eHeaderCompWrapper.style.removeProperty('display');\r\n                }\r\n            },\r\n            setHeaderWrapperMaxHeight: (value) => {\r\n                if (value != null) {\r\n                    this.eHeaderCompWrapper.style.setProperty('max-height', `${value}px`);\r\n                } else {\r\n                    this.eHeaderCompWrapper.style.removeProperty('max-height');\r\n                }\r\n                this.eHeaderCompWrapper.classList.toggle('ag-header-cell-comp-wrapper-limited-height', value != null);\r\n            },\r\n            setResizableDisplayed: (displayed) => _setDisplayed(this.eResize, displayed),\r\n            setWidth: (width) => (eGui.style.width = width),\r\n            setAriaExpanded: (expanded: 'true' | 'false' | undefined) => setAttribute('aria-expanded', expanded),\r\n            setUserCompDetails: (details) => this.setUserCompDetails(details),\r\n            getUserCompInstance: () => this.headerGroupComp,\r\n        };\r\n\r\n        this.ctrl.setComp(compProxy, eGui, this.eResize, this.eHeaderCompWrapper, undefined);\r\n    }\r\n\r\n    private setUserCompDetails(details: UserCompDetails): void {\r\n        details.newAgStackInstance().then((comp) => this.afterHeaderCompCreated(comp));\r\n    }\r\n\r\n    private afterHeaderCompCreated(headerGroupComp: IHeaderGroupComp): void {\r\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\r\n\r\n        if (!this.isAlive()) {\r\n            destroyFunc();\r\n            return;\r\n        }\r\n\r\n        const eGui = this.getGui();\r\n        const eHeaderGroupGui = headerGroupComp.getGui();\r\n\r\n        this.eHeaderCompWrapper.appendChild(eHeaderGroupGui);\r\n        this.addDestroyFunc(destroyFunc);\r\n\r\n        this.headerGroupComp = headerGroupComp;\r\n        this.ctrl.setDragSource(eGui);\r\n    }\r\n\r\n    private addOrRemoveHeaderWrapperStyle(style: string, value: string | null): void {\r\n        const { eHeaderCompWrapper } = this;\r\n\r\n        if (value) {\r\n            eHeaderCompWrapper.style.setProperty(style, value);\r\n        } else {\r\n            eHeaderCompWrapper.style.removeProperty(style);\r\n        }\r\n    }\r\n}\r\n", "import type { IFloatingFilterComp } from '../../../filter/floating/floatingFilter';\r\nimport type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\nimport type { AgPromise } from '../../../utils/promise';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\r\nimport type { HeaderFilterCellCtrl } from './headerFilterCellCtrl';\r\nimport type { IHeaderFilterCellComp } from './iHeaderFilterCellComp';\r\n\r\nexport class HeaderFilterCellComp extends AbstractHeaderCellComp<HeaderFilterCellCtrl> {\r\n    private readonly eFloatingFilterBody: HTMLElement = RefPlaceholder;\r\n    private readonly eButtonWrapper: HTMLElement = RefPlaceholder;\r\n    private readonly eButtonShowMainFilter: HTMLElement = RefPlaceholder;\r\n\r\n    private floatingFilterComp: IFloatingFilterComp | undefined;\r\n    private compPromise: AgPromise<IFloatingFilterComp> | null;\r\n\r\n    constructor(ctrl: HeaderFilterCellCtrl) {\r\n        super(\r\n            /* html */ `<div class=\"ag-header-cell ag-floating-filter\" role=\"gridcell\">\r\n            <div data-ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\r\n            <div class=\"ag-floating-filter-button ag-hidden\" data-ref=\"eButtonWrapper\" role=\"presentation\">\r\n                <button type=\"button\" class=\"ag-button ag-floating-filter-button-button\" data-ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\r\n            </div>\r\n        </div>`,\r\n            ctrl\r\n        );\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const eGui = this.getGui();\r\n\r\n        const compProxy: IHeaderFilterCellComp = {\r\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\r\n            addOrRemoveBodyCssClass: (cssClassName, on) => this.eFloatingFilterBody.classList.toggle(cssClassName, on),\r\n            setButtonWrapperDisplayed: (displayed) => _setDisplayed(this.eButtonWrapper, displayed),\r\n            setCompDetails: (compDetails) => this.setCompDetails(compDetails),\r\n            getFloatingFilterComp: () => this.compPromise,\r\n            setWidth: (width) => (eGui.style.width = width),\r\n            setMenuIcon: (eIcon) => this.eButtonShowMainFilter.appendChild(eIcon),\r\n        };\r\n\r\n        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody, undefined);\r\n    }\r\n\r\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\r\n        if (!compDetails) {\r\n            this.destroyFloatingFilterComp();\r\n            this.compPromise = null;\r\n            return;\r\n        }\r\n        // because we are providing defaultFloatingFilterType, we know it will never be undefined;\r\n        this.compPromise = compDetails.newAgStackInstance();\r\n        this.compPromise.then((comp) => this.afterCompCreated(comp));\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.destroyFloatingFilterComp();\r\n        super.destroy();\r\n    }\r\n\r\n    private destroyFloatingFilterComp(): void {\r\n        if (this.floatingFilterComp) {\r\n            this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());\r\n            this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);\r\n        }\r\n    }\r\n\r\n    private afterCompCreated(comp: IFloatingFilterComp | null): void {\r\n        if (!comp) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isAlive()) {\r\n            this.destroyBean(comp);\r\n            return;\r\n        }\r\n\r\n        this.destroyFloatingFilterComp();\r\n\r\n        this.floatingFilterComp = comp;\r\n        this.eFloatingFilterBody.appendChild(comp.getGui());\r\n\r\n        if (comp.afterGuiAttached) {\r\n            comp.afterGuiAttached();\r\n        }\r\n    }\r\n}\r\n", "import { _setAriaRowIndex } from '../../utils/aria';\r\nimport { _setDomChildOrder } from '../../utils/dom';\r\nimport { Component } from '../../widgets/component';\r\nimport type { AbstractHeaderCellComp } from '../cells/abstractCell/abstractHeaderCellComp';\r\nimport type { AbstractHeaderCellCtrl, HeaderCellCtrlInstanceId } from '../cells/abstractCell/abstractHeaderCellCtrl';\r\nimport { HeaderCellComp } from '../cells/column/headerCellComp';\r\nimport type { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\r\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp';\r\nimport type { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\r\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp';\r\nimport type { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\r\nimport type { HeaderRowCtrl, IHeaderRowComp } from './headerRowCtrl';\r\n\r\nexport type HeaderRowType = 'group' | 'column' | 'filter';\r\n\r\nexport class HeaderRowComp extends Component {\r\n    private ctrl: HeaderRowCtrl;\r\n\r\n    private headerComps: { [key: HeaderCellCtrlInstanceId]: AbstractHeaderCellComp<AbstractHeaderCellCtrl> } = {};\r\n\r\n    constructor(ctrl: HeaderRowCtrl) {\r\n        super();\r\n\r\n        this.ctrl = ctrl;\r\n        this.setTemplate(/* html */ `<div class=\"${this.ctrl.headerRowClass}\" role=\"row\"></div>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        _setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());\r\n\r\n        const compProxy: IHeaderRowComp = {\r\n            setHeight: (height) => (this.getGui().style.height = height),\r\n            setTop: (top) => (this.getGui().style.top = top),\r\n            setHeaderCtrls: (ctrls, forceOrder) => this.setHeaderCtrls(ctrls, forceOrder),\r\n            setWidth: (width) => (this.getGui().style.width = width),\r\n        };\r\n\r\n        this.ctrl.setComp(compProxy, undefined);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.setHeaderCtrls([], false);\r\n        super.destroy();\r\n    }\r\n\r\n    private setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean): void {\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n\r\n        const oldComps = this.headerComps;\r\n        this.headerComps = {};\r\n\r\n        ctrls.forEach((ctrl) => {\r\n            const id = ctrl.instanceId;\r\n            let comp = oldComps[id];\r\n            delete oldComps[id];\r\n\r\n            if (comp == null) {\r\n                comp = this.createHeaderComp(ctrl);\r\n                this.getGui().appendChild(comp.getGui());\r\n            }\r\n\r\n            this.headerComps[id] = comp;\r\n        });\r\n\r\n        Object.values(oldComps).forEach((comp: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\r\n            this.getGui().removeChild(comp.getGui());\r\n            this.destroyBean(comp);\r\n        });\r\n\r\n        if (forceOrder) {\r\n            const comps = Object.values(this.headerComps);\r\n            // ordering the columns by left position orders them in the order they appear on the screen\r\n            comps.sort(\r\n                (\r\n                    a: AbstractHeaderCellComp<AbstractHeaderCellCtrl>,\r\n                    b: AbstractHeaderCellComp<AbstractHeaderCellCtrl>\r\n                ) => {\r\n                    const leftA = a.getCtrl().column.getLeft()!;\r\n                    const leftB = b.getCtrl().column.getLeft()!;\r\n                    return leftA - leftB;\r\n                }\r\n            );\r\n            const elementsInOrder = comps.map((c) => c.getGui());\r\n            _setDomChildOrder(this.getGui(), elementsInOrder);\r\n        }\r\n    }\r\n\r\n    private createHeaderComp(headerCtrl: AbstractHeaderCellCtrl): AbstractHeaderCellComp<AbstractHeaderCellCtrl> {\r\n        let result: AbstractHeaderCellComp<AbstractHeaderCellCtrl>;\r\n\r\n        switch (this.ctrl.type) {\r\n            case 'group':\r\n                result = new HeaderGroupCellComp(headerCtrl as HeaderGroupCellCtrl);\r\n                break;\r\n            case 'filter':\r\n                result = new HeaderFilterCellComp(headerCtrl as HeaderFilterCellCtrl);\r\n                break;\r\n            default:\r\n                result = new HeaderCellComp(headerCtrl as HeaderCellCtrl);\r\n                break;\r\n        }\r\n\r\n        this.createBean(result);\r\n        result.setParentComponent(this);\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport { isColumnGroup } from '../../entities/agColumnGroup';\r\nimport { _isDomLayout } from '../../gridOptionsUtils';\r\nimport { _setAriaColSpan } from '../../utils/aria';\r\nimport { _last } from '../../utils/array';\r\nimport { _exists } from '../../utils/generic';\r\n\r\nexport class SetLeftFeature extends BeanStub {\r\n    private ariaEl: HTMLElement;\r\n\r\n    private actualLeft: number;\r\n\r\n    constructor(\r\n        private readonly columnOrGroup: AgColumn | AgColumnGroup,\r\n        private eCell: HTMLElement,\r\n        beans: BeanCollection,\r\n        private colsSpanning?: AgColumn[]\r\n    ) {\r\n        super();\r\n        this.columnOrGroup = columnOrGroup;\r\n        this.ariaEl = eCell.querySelector('[role=columnheader]') || eCell;\r\n        this.beans = beans;\r\n    }\r\n\r\n    public setColsSpanning(colsSpanning: AgColumn[]): void {\r\n        this.colsSpanning = colsSpanning;\r\n        this.onLeftChanged();\r\n    }\r\n\r\n    public getColumnOrGroup(): AgColumn | AgColumnGroup {\r\n        const { beans, colsSpanning } = this;\r\n        if (beans.gos.get('enableRtl') && colsSpanning) {\r\n            return _last(colsSpanning);\r\n        }\r\n        return this.columnOrGroup;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const onLeftChanged = this.onLeftChanged.bind(this);\r\n        this.addManagedListeners(this.columnOrGroup, { leftChanged: onLeftChanged });\r\n        this.setLeftFirstTime();\r\n\r\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\r\n        // so additionally update left if any column width changes.\r\n        this.addManagedEventListeners({ displayedColumnsWidthChanged: onLeftChanged });\r\n\r\n        // setting left has a dependency on print layout\r\n        this.addManagedPropertyListener('domLayout', onLeftChanged);\r\n    }\r\n\r\n    private setLeftFirstTime(): void {\r\n        const { gos, colAnimation } = this.beans;\r\n        const suppressMoveAnimation = gos.get('suppressColumnMoveAnimation');\r\n        const oldLeftExists = _exists(this.columnOrGroup.getOldLeft());\r\n        const animateColumnMove = colAnimation?.isActive() && oldLeftExists && !suppressMoveAnimation;\r\n        if (animateColumnMove) {\r\n            this.animateInLeft();\r\n        } else {\r\n            this.onLeftChanged();\r\n        }\r\n    }\r\n\r\n    private animateInLeft(): void {\r\n        const colOrGroup = this.getColumnOrGroup();\r\n\r\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, colOrGroup.getOldLeft()!);\r\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, colOrGroup.getLeft()!);\r\n\r\n        this.setLeft(oldActualLeft!);\r\n\r\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\r\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\r\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\r\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\r\n        // VM turn, but only one (the correct one) should get applied.\r\n        this.actualLeft = actualLeft;\r\n\r\n        this.beans.colAnimation!.executeNextVMTurn(() => {\r\n            // test this left value is the latest one to be applied, and if not, do nothing\r\n            if (this.actualLeft === actualLeft) {\r\n                this.setLeft(actualLeft);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onLeftChanged(): void {\r\n        const colOrGroup = this.getColumnOrGroup();\r\n        const left = colOrGroup.getLeft();\r\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\r\n        this.setLeft(this.actualLeft);\r\n    }\r\n\r\n    private modifyLeftForPrintLayout(colOrGroup: AgColumn | AgColumnGroup, leftPosition: number): number {\r\n        const { gos, visibleCols } = this.beans;\r\n        const printLayout = _isDomLayout(gos, 'print');\r\n\r\n        if (!printLayout) {\r\n            return leftPosition;\r\n        }\r\n\r\n        if (colOrGroup.getPinned() === 'left') {\r\n            return leftPosition;\r\n        }\r\n\r\n        const leftWidth = visibleCols.getColsLeftWidth();\r\n\r\n        if (colOrGroup.getPinned() === 'right') {\r\n            const bodyWidth = visibleCols.bodyWidth;\r\n            return leftWidth + bodyWidth + leftPosition;\r\n        }\r\n\r\n        // is in body\r\n        return leftWidth + leftPosition;\r\n    }\r\n\r\n    private setLeft(value: number): void {\r\n        // if the value is null, then that means the column is no longer\r\n        // displayed. there is logic in the rendering to fade these columns\r\n        // out, so we don't try and change their left positions.\r\n        if (_exists(value)) {\r\n            this.eCell.style.left = `${value}px`;\r\n        }\r\n\r\n        if (isColumnGroup(this.columnOrGroup)) {\r\n            const children = this.columnOrGroup.getLeafColumns();\r\n\r\n            if (!children.length) {\r\n                return;\r\n            }\r\n\r\n            if (children.length > 1) {\r\n                _setAriaColSpan(this.ariaEl, children.length);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { HorizontalDirection } from '../../../constants/direction';\r\nimport { BeanStub } from '../../../context/beanStub';\r\nimport type { DragSource } from '../../../dragAndDrop/dragAndDropService';\r\nimport type { AgColumn } from '../../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from '../../../entities/agProvidedColumnGroup';\r\nimport type { SuppressHeaderKeyboardEventParams } from '../../../entities/colDef';\r\nimport { _getActiveDomElement, _getDocument, _setDomData } from '../../../gridOptionsUtils';\r\nimport type { BrandedType } from '../../../interfaces/brandedType';\r\nimport { _requestAnimationFrame } from '../../../misc/animationFrameService';\r\nimport { _setAriaColIndex } from '../../../utils/aria';\r\nimport { _addOrRemoveAttribute, _getElementSize, _observeResize } from '../../../utils/dom';\r\nimport { _isHeaderFocusSuppressed } from '../../../utils/focus';\r\nimport { _exists } from '../../../utils/generic';\r\nimport { KeyCode } from '../.././../constants/keyCode';\r\nimport type { HeaderRowCtrl } from '../../row/headerRowCtrl';\r\nimport { refreshFirstAndLastStyles } from '../cssClassApplier';\r\n\r\nlet instanceIdSequence = 0;\r\n\r\nexport interface IAbstractHeaderCellComp {\r\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\r\n}\r\n\r\nexport interface IHeaderResizeFeature {\r\n    toggleColumnResizing(resizing: boolean): void;\r\n}\r\n\r\nexport type HeaderCellCtrlInstanceId = BrandedType<string, 'HeaderCellCtrlInstanceId'>;\r\n\r\nexport const DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\r\n\r\nexport abstract class AbstractHeaderCellCtrl<\r\n    TComp extends IAbstractHeaderCellComp = any,\r\n    TColumn extends AgColumn | AgColumnGroup = any,\r\n    TFeature extends IHeaderResizeFeature = any,\r\n> extends BeanStub {\r\n    public readonly instanceId: HeaderCellCtrlInstanceId;\r\n\r\n    private isResizing: boolean;\r\n    private resizeToggleTimeout = 0;\r\n    protected resizeMultiplier = 1;\r\n\r\n    public eGui: HTMLElement;\r\n    protected resizeFeature: TFeature | null = null;\r\n    protected comp: TComp;\r\n\r\n    public lastFocusEvent: KeyboardEvent | null = null;\r\n\r\n    protected dragSource: DragSource | null = null;\r\n\r\n    protected abstract resizeHeader(delta: number, shiftKey: boolean): void;\r\n\r\n    constructor(\r\n        public readonly column: TColumn,\r\n        public readonly rowCtrl: HeaderRowCtrl\r\n    ) {\r\n        super();\r\n\r\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\r\n        this.instanceId = (column.getUniqueId() + '-' + instanceIdSequence++) as HeaderCellCtrlInstanceId;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const refreshTabIndex = this.refreshTabIndex.bind(this);\r\n        this.addManagedPropertyListeners(['suppressHeaderFocus'], refreshTabIndex);\r\n        this.addManagedEventListeners({\r\n            overlayExclusiveChanged: refreshTabIndex,\r\n        });\r\n    }\r\n\r\n    protected shouldStopEventPropagation(event: KeyboardEvent): boolean {\r\n        const { headerRowIndex, column } = this.beans.focusSvc.focusedHeader!;\r\n\r\n        const colDef = column.getDefinition();\r\n        const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\r\n\r\n        if (!_exists(colDefFunc)) {\r\n            return false;\r\n        }\r\n\r\n        const params: SuppressHeaderKeyboardEventParams = this.gos.addGridCommonParams({\r\n            colDef: colDef,\r\n            column,\r\n            headerRowIndex,\r\n            event,\r\n        });\r\n\r\n        return !!colDefFunc(params);\r\n    }\r\n\r\n    protected getWrapperHasFocus(): boolean {\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n\r\n        return activeEl === this.eGui;\r\n    }\r\n\r\n    protected setGui(eGui: HTMLElement, compBean: BeanStub): void {\r\n        this.eGui = eGui;\r\n        this.addDomData(compBean);\r\n        compBean.addManagedListeners(this.beans.eventSvc, {\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n        });\r\n\r\n        compBean.addManagedElementListeners(this.eGui, {\r\n            focus: this.onGuiFocus.bind(this),\r\n        });\r\n\r\n        this.onDisplayedColumnsChanged();\r\n        this.refreshTabIndex();\r\n    }\r\n\r\n    private onGuiFocus(): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'headerFocused',\r\n            column: this.column,\r\n        });\r\n    }\r\n\r\n    protected setupAutoHeight(params: {\r\n        wrapperElement: HTMLElement;\r\n        checkMeasuringCallback?: (callback: () => void) => void;\r\n        compBean: BeanStub;\r\n    }) {\r\n        const { wrapperElement, checkMeasuringCallback, compBean } = params;\r\n        const { beans } = this;\r\n        const measureHeight = (timesCalled: number) => {\r\n            if (!this.isAlive() || !compBean.isAlive()) {\r\n                return;\r\n            }\r\n\r\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = _getElementSize(this.eGui);\r\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\r\n\r\n            const wrapperHeight = wrapperElement.offsetHeight;\r\n            const autoHeight = wrapperHeight + extraHeight;\r\n\r\n            if (timesCalled < 5) {\r\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\r\n                // maybe it will be ready next VM turn\r\n                const doc = _getDocument(beans);\r\n                const notYetInDom = !doc || !doc.contains(wrapperElement);\r\n\r\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\r\n                // as a) may not be React and b) the cell could be empty anyway\r\n                const possiblyNoContentYet = autoHeight == 0;\r\n\r\n                if (notYetInDom || possiblyNoContentYet) {\r\n                    _requestAnimationFrame(beans, () => measureHeight(timesCalled + 1));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.setColHeaderHeight(this.column, autoHeight);\r\n        };\r\n\r\n        let isMeasuring = false;\r\n        let stopResizeObserver: (() => void) | undefined;\r\n\r\n        const checkMeasuring = () => {\r\n            const newValue = this.column.isAutoHeaderHeight();\r\n\r\n            if (newValue && !isMeasuring) {\r\n                startMeasuring();\r\n            }\r\n            if (!newValue && isMeasuring) {\r\n                stopMeasuring();\r\n            }\r\n        };\r\n\r\n        const startMeasuring = () => {\r\n            isMeasuring = true;\r\n            measureHeight(0);\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', true);\r\n            stopResizeObserver = _observeResize(this.beans, wrapperElement, () => measureHeight(0));\r\n        };\r\n\r\n        const stopMeasuring = () => {\r\n            isMeasuring = false;\r\n            if (stopResizeObserver) {\r\n                stopResizeObserver();\r\n            }\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', false);\r\n            stopResizeObserver = undefined;\r\n        };\r\n\r\n        checkMeasuring();\r\n\r\n        compBean.addDestroyFunc(() => stopMeasuring());\r\n\r\n        // In theory we could rely on the resize observer for everything - but since it's debounced\r\n        // it can be a little janky for smooth movement. in this case its better to react to our own events\r\n        // And unfortunately we cant _just_ rely on our own events, since custom components can change whenever\r\n        compBean.addManagedListeners(this.column, { widthChanged: () => isMeasuring && measureHeight(0) });\r\n        // Displaying the sort icon changes the available area for text, so sort changes can affect height\r\n        compBean.addManagedEventListeners({\r\n            sortChanged: () => {\r\n                // Rendering changes for sort, happen after the event... not ideal\r\n                if (isMeasuring) {\r\n                    window.setTimeout(() => measureHeight(0));\r\n                }\r\n            },\r\n        });\r\n\r\n        if (checkMeasuringCallback) {\r\n            checkMeasuringCallback(checkMeasuring);\r\n        }\r\n    }\r\n\r\n    protected onDisplayedColumnsChanged(): void {\r\n        const { comp, column, beans, eGui } = this;\r\n        if (!comp || !column || !eGui) {\r\n            return;\r\n        }\r\n        refreshFirstAndLastStyles(comp, column, beans.visibleCols);\r\n        _setAriaColIndex(eGui, beans.visibleCols.getAriaColIndex(column)); // for react, we don't use JSX, as it slowed down column moving\r\n    }\r\n\r\n    protected addResizeAndMoveKeyboardListeners(compBean: BeanStub): void {\r\n        compBean.addManagedListeners(this.eGui, {\r\n            keydown: this.onGuiKeyDown.bind(this),\r\n            keyup: this.onGuiKeyUp.bind(this),\r\n        });\r\n    }\r\n\r\n    private refreshTabIndex(): void {\r\n        const suppressHeaderFocus = _isHeaderFocusSuppressed(this.beans);\r\n        if (this.eGui) {\r\n            _addOrRemoveAttribute(this.eGui, 'tabindex', suppressHeaderFocus ? null : '-1');\r\n        }\r\n    }\r\n\r\n    private onGuiKeyDown(e: KeyboardEvent): void {\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n\r\n        const isLeftOrRight = e.key === KeyCode.LEFT || e.key === KeyCode.RIGHT;\r\n\r\n        if (this.isResizing) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n        }\r\n\r\n        if (\r\n            // if elements within the header are focused, we don't process the event\r\n            activeEl !== this.eGui ||\r\n            // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event\r\n            (!e.shiftKey && !e.altKey)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (this.isResizing || isLeftOrRight) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n        }\r\n\r\n        if (!isLeftOrRight) {\r\n            return;\r\n        }\r\n\r\n        const isLeft = (e.key === KeyCode.LEFT) !== this.gos.get('enableRtl');\r\n        const direction = isLeft ? 'left' : 'right';\r\n\r\n        if (e.altKey) {\r\n            this.isResizing = true;\r\n            this.resizeMultiplier += 1;\r\n            const diff = this.getViewportAdjustedResizeDiff(e);\r\n            this.resizeHeader(diff, e.shiftKey);\r\n            this.resizeFeature?.toggleColumnResizing(true);\r\n        } else {\r\n            this.moveHeader(direction);\r\n        }\r\n    }\r\n\r\n    protected moveHeader(hDirection: HorizontalDirection): void {\r\n        this.beans.colMoves?.moveHeader(hDirection, this.eGui, this.column, this.rowCtrl.pinned, this);\r\n    }\r\n\r\n    private getViewportAdjustedResizeDiff(e: KeyboardEvent): number {\r\n        const diff = this.getResizeDiff(e);\r\n        const { pinnedCols } = this.beans;\r\n        return pinnedCols ? pinnedCols.getHeaderResizeDiff(diff, this.column) : diff;\r\n    }\r\n\r\n    private getResizeDiff(e: KeyboardEvent): number {\r\n        const { gos, column } = this;\r\n        let isLeft = (e.key === KeyCode.LEFT) !== gos.get('enableRtl');\r\n\r\n        const pinned = column.getPinned();\r\n        const isRtl = gos.get('enableRtl');\r\n        if (pinned) {\r\n            if (isRtl !== (pinned === 'right')) {\r\n                isLeft = !isLeft;\r\n            }\r\n        }\r\n\r\n        return (isLeft ? -1 : 1) * this.resizeMultiplier;\r\n    }\r\n\r\n    private onGuiKeyUp(): void {\r\n        if (!this.isResizing) {\r\n            return;\r\n        }\r\n        if (this.resizeToggleTimeout) {\r\n            window.clearTimeout(this.resizeToggleTimeout);\r\n            this.resizeToggleTimeout = 0;\r\n        }\r\n\r\n        this.isResizing = false;\r\n        this.resizeMultiplier = 1;\r\n\r\n        this.resizeToggleTimeout = window.setTimeout(() => {\r\n            this.resizeFeature?.toggleColumnResizing(false);\r\n        }, 150);\r\n    }\r\n\r\n    protected handleKeyDown(e: KeyboardEvent): void {\r\n        const wrapperHasFocus = this.getWrapperHasFocus();\r\n\r\n        switch (e.key) {\r\n            case KeyCode.PAGE_DOWN:\r\n            case KeyCode.PAGE_UP:\r\n            case KeyCode.PAGE_HOME:\r\n            case KeyCode.PAGE_END:\r\n                if (wrapperHasFocus) {\r\n                    e.preventDefault();\r\n                }\r\n        }\r\n    }\r\n\r\n    private addDomData(compBean: BeanStub): void {\r\n        const key = DOM_DATA_KEY_HEADER_CTRL;\r\n        const { eGui, gos } = this;\r\n        _setDomData(gos, eGui, key, this);\r\n        compBean.addDestroyFunc(() => _setDomData(gos, eGui, key, null));\r\n    }\r\n\r\n    public focus(event?: KeyboardEvent): boolean {\r\n        const { eGui } = this;\r\n        if (!eGui) {\r\n            return false;\r\n        }\r\n\r\n        this.lastFocusEvent = event || null;\r\n        eGui.focus();\r\n        return true;\r\n    }\r\n\r\n    protected focusThis(): void {\r\n        this.beans.focusSvc.focusedHeader = { headerRowIndex: this.rowCtrl.rowIndex, column: this.column };\r\n    }\r\n\r\n    protected removeDragSource(): void {\r\n        if (this.dragSource) {\r\n            this.beans.dragAndDrop?.removeDragSource(this.dragSource);\r\n            this.dragSource = null;\r\n        }\r\n    }\r\n\r\n    protected handleContextMenuMouseEvent(\r\n        mouseEvent: MouseEvent | undefined,\r\n        touchEvent: TouchEvent | undefined,\r\n        column: AgColumn | AgProvidedColumnGroup\r\n    ): void {\r\n        const event = mouseEvent ?? touchEvent!;\r\n        const { menuSvc, gos } = this.beans;\r\n        if (gos.get('preventDefaultOnContextMenu')) {\r\n            event.preventDefault();\r\n        }\r\n        if (menuSvc?.isHeaderContextMenuEnabled(column)) {\r\n            menuSvc.showHeaderContextMenu(column, mouseEvent, touchEvent);\r\n        }\r\n\r\n        this.dispatchColumnMouseEvent('columnHeaderContextMenu', column);\r\n    }\r\n\r\n    protected dispatchColumnMouseEvent(\r\n        eventType: 'columnHeaderContextMenu' | 'columnHeaderClicked',\r\n        column: AgColumn | AgProvidedColumnGroup\r\n    ): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: eventType,\r\n            column,\r\n        });\r\n    }\r\n\r\n    private setColHeaderHeight(col: AgColumn | AgColumnGroup, height: number): void {\r\n        if (!col.setAutoHeaderHeight(height)) {\r\n            return;\r\n        }\r\n        const { eventSvc } = this;\r\n        if (col.isColumn) {\r\n            eventSvc.dispatchEvent({\r\n                type: 'columnHeaderHeightChanged',\r\n                column: col,\r\n                columns: [col],\r\n                source: 'autosizeColumnHeaderHeight',\r\n            });\r\n        } else {\r\n            eventSvc.dispatchEvent({\r\n                type: 'columnGroupHeaderHeightChanged',\r\n                columnGroup: col,\r\n                source: 'autosizeColumnGroupHeaderHeight',\r\n            });\r\n        }\r\n    }\r\n\r\n    protected clearComponent(): void {\r\n        this.removeDragSource();\r\n        (this.resizeFeature as any) = null;\r\n        (this.comp as any) = null;\r\n        (this.eGui as any) = null;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        (this.column as any) = null;\r\n        (this.lastFocusEvent as any) = null;\r\n        (this.rowCtrl as any) = null;\r\n    }\r\n}\r\n", "import type { ResizeFeature } from '../../../columnResize/resizeFeature';\r\nimport { setupCompBean } from '../../../components/emptyBean';\r\nimport { _getHeaderCompDetails } from '../../../components/framework/userCompUtils';\r\nimport { KeyCode } from '../../../constants/keyCode';\r\nimport type { BeanStub } from '../../../context/beanStub';\r\nimport type { AgColumn } from '../../../entities/agColumn';\r\nimport type { SortDirection } from '../../../entities/colDef';\r\nimport { _getActiveDomElement, _isLegacyMenuEnabled } from '../../../gridOptionsUtils';\r\nimport { ColumnHighlightPosition } from '../../../interfaces/iColumn';\r\nimport type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\r\nimport type { SelectAllFeature } from '../../../selection/selectAllFeature';\r\nimport type { TooltipFeature } from '../../../tooltip/tooltipFeature';\r\nimport type { ColumnSortState } from '../../../utils/aria';\r\nimport { _getAriaSortState } from '../../../utils/aria';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\nimport { _isKeyboardMode } from '../../../utils/focus';\r\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\r\nimport { getColumnHeaderRowHeight, getGroupRowsHeight } from '../../headerUtils';\r\nimport type { IAbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellCtrl';\r\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\r\nimport { _getHeaderClassesFromColDef } from '../cssClassApplier';\r\nimport type { IHeader, IHeaderParams } from './headerComp';\r\nimport type { HeaderComp } from './headerComp';\r\n\r\nexport interface IHeaderCellComp extends IAbstractHeaderCellComp {\r\n    setWidth(width: string): void;\r\n    setAriaSort(sort?: ColumnSortState): void;\r\n    setUserCompDetails(compDetails: UserCompDetails): void;\r\n    getUserCompInstance(): IHeader | undefined;\r\n}\r\n\r\ntype HeaderAriaDescriptionKey = 'filter' | 'menu' | 'sort' | 'selectAll' | 'filterButton';\r\ntype RefreshFunction = 'updateSortable' | 'tooltip' | 'headerClasses' | 'wrapText' | 'measuring' | 'resize';\r\n\r\nexport class HeaderCellCtrl extends AbstractHeaderCellCtrl<IHeaderCellComp, AgColumn, ResizeFeature> {\r\n    private refreshFunctions: { [key in RefreshFunction]?: () => void } = {};\r\n    private selectAllFeature?: SelectAllFeature;\r\n\r\n    private sortable: boolean | null | undefined;\r\n    private displayName: string | null;\r\n    private draggable: boolean;\r\n    private menuEnabled: boolean;\r\n    private openFilterEnabled: boolean;\r\n    private dragSourceElement: HTMLElement | undefined;\r\n\r\n    private userCompDetails: UserCompDetails;\r\n\r\n    private userHeaderClasses: Set<string> = new Set();\r\n    private ariaDescriptionProperties = new Map<HeaderAriaDescriptionKey, string>();\r\n    private tooltipFeature: TooltipFeature | undefined;\r\n\r\n    public setComp(\r\n        comp: IHeaderCellComp,\r\n        eGui: HTMLElement,\r\n        eResize: HTMLElement,\r\n        eHeaderCompWrapper: HTMLElement,\r\n        compBeanInput: BeanStub | undefined\r\n    ): void {\r\n        this.comp = comp;\r\n\r\n        const { colResize, context, colHover } = this.beans;\r\n        const compBean = setupCompBean(this, context, compBeanInput);\r\n\r\n        this.setGui(eGui, compBean);\r\n        this.updateState();\r\n        this.setupWidth(compBean);\r\n        this.setupMovingCss(compBean);\r\n        this.setupMenuClass(compBean);\r\n        this.setupSortableClass(compBean);\r\n        this.setupWrapTextClass();\r\n        this.refreshSpanHeaderHeight();\r\n\r\n        this.setupAutoHeight({\r\n            wrapperElement: eHeaderCompWrapper,\r\n            checkMeasuringCallback: (checkMeasuring) => this.setRefreshFunction('measuring', checkMeasuring),\r\n            compBean,\r\n        });\r\n\r\n        this.addColumnHoverListener(compBean);\r\n        this.setupFilterClass(compBean);\r\n        this.setupClassesFromColDef();\r\n        this.setupTooltip();\r\n        this.addActiveHeaderMouseListeners(compBean);\r\n        this.setupSelectAll(compBean);\r\n        this.setupUserComp();\r\n        this.refreshAria();\r\n\r\n        if (colResize) {\r\n            this.resizeFeature = compBean.createManagedBean(\r\n                colResize.createResizeFeature(this.rowCtrl.pinned, this.column, eResize, comp, this)\r\n            );\r\n        } else {\r\n            _setDisplayed(eResize, false);\r\n        }\r\n        colHover?.createHoverFeature(compBean, [this.column], eGui);\r\n        compBean.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\r\n        compBean.createManagedBean(\r\n            new ManagedFocusFeature(eGui, {\r\n                shouldStopEventPropagation: (e) => this.shouldStopEventPropagation(e),\r\n                onTabKeyDown: () => null,\r\n                handleKeyDown: this.handleKeyDown.bind(this),\r\n                onFocusIn: this.onFocusIn.bind(this),\r\n                onFocusOut: this.onFocusOut.bind(this),\r\n            })\r\n        );\r\n\r\n        this.addResizeAndMoveKeyboardListeners(compBean);\r\n\r\n        compBean.addManagedPropertyListeners(\r\n            ['suppressMovableColumns', 'suppressMenuHide', 'suppressAggFuncInHeader'],\r\n            () => this.refresh()\r\n        );\r\n        compBean.addManagedListeners(this.column, { colDefChanged: () => this.refresh() });\r\n        compBean.addManagedListeners(this.column, { headerHighlightChanged: this.onHeaderHighlightChanged.bind(this) });\r\n\r\n        const listener = () => this.checkDisplayName();\r\n        compBean.addManagedEventListeners({\r\n            columnValueChanged: listener,\r\n            columnRowGroupChanged: listener,\r\n            columnPivotChanged: listener,\r\n            headerHeightChanged: this.onHeaderHeightChanged.bind(this),\r\n        });\r\n\r\n        compBean.addDestroyFunc(() => {\r\n            this.refreshFunctions = {};\r\n            (this.selectAllFeature as any) = null;\r\n            this.dragSourceElement = undefined;\r\n            (this.userCompDetails as any) = null;\r\n            this.userHeaderClasses.clear();\r\n            this.ariaDescriptionProperties.clear();\r\n            // Make sure this is the last destroy func as it clears the gui and comp\r\n            this.clearComponent();\r\n        });\r\n    }\r\n\r\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\r\n        this.beans.colResize?.resizeHeader(this.column, delta, shiftKey);\r\n    }\r\n\r\n    private setupUserComp(): void {\r\n        const compDetails = this.lookupUserCompDetails();\r\n        if (compDetails) {\r\n            this.setCompDetails(compDetails);\r\n        }\r\n    }\r\n\r\n    private setCompDetails(compDetails: UserCompDetails): void {\r\n        this.userCompDetails = compDetails;\r\n        this.comp.setUserCompDetails(compDetails);\r\n    }\r\n\r\n    private lookupUserCompDetails(): UserCompDetails | undefined {\r\n        const params = this.createParams();\r\n        const colDef = this.column.getColDef();\r\n        return _getHeaderCompDetails(this.beans.userCompFactory, colDef, params)!;\r\n    }\r\n\r\n    private createParams(): IHeaderParams {\r\n        const { menuSvc, sortSvc, colFilter, gos } = this.beans;\r\n        const params: IHeaderParams = gos.addGridCommonParams({\r\n            column: this.column,\r\n            displayName: this.displayName!,\r\n            enableSorting: this.column.isSortable(),\r\n            enableMenu: this.menuEnabled,\r\n            enableFilterButton: this.openFilterEnabled && !!menuSvc?.isHeaderFilterButtonEnabled(this.column),\r\n            enableFilterIcon: !!colFilter && (!this.openFilterEnabled || _isLegacyMenuEnabled(this.gos)),\r\n            showColumnMenu: (buttonElement: HTMLElement) => {\r\n                menuSvc?.showColumnMenu({\r\n                    column: this.column,\r\n                    buttonElement,\r\n                    positionBy: 'button',\r\n                });\r\n            },\r\n            showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => {\r\n                menuSvc?.showColumnMenu({\r\n                    column: this.column,\r\n                    mouseEvent,\r\n                    positionBy: 'mouse',\r\n                });\r\n            },\r\n            showFilter: (buttonElement: HTMLElement) => {\r\n                menuSvc?.showFilterMenu({\r\n                    column: this.column,\r\n                    buttonElement: buttonElement,\r\n                    containerType: 'columnFilter',\r\n                    positionBy: 'button',\r\n                });\r\n            },\r\n            progressSort: (multiSort?: boolean) => {\r\n                sortSvc?.progressSort(this.column, !!multiSort, 'uiColumnSorted');\r\n            },\r\n            setSort: (sort: SortDirection, multiSort?: boolean) => {\r\n                sortSvc?.setSortForColumn(this.column, sort, !!multiSort, 'uiColumnSorted');\r\n            },\r\n            eGridHeader: this.eGui,\r\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\r\n                gos.assertModuleRegistered('Tooltip', 3);\r\n                this.setupTooltip(value, shouldDisplayTooltip);\r\n            },\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    private setupSelectAll(compBean: BeanStub): void {\r\n        const { selectionSvc } = this.beans;\r\n        if (!selectionSvc) {\r\n            return;\r\n        }\r\n        this.selectAllFeature = compBean.createManagedBean(selectionSvc.createSelectAllFeature(this.column));\r\n        this.selectAllFeature.setComp(this);\r\n    }\r\n\r\n    public getSelectAllGui(): HTMLElement | undefined {\r\n        return this.selectAllFeature?.getCheckboxGui();\r\n    }\r\n\r\n    protected override handleKeyDown(e: KeyboardEvent): void {\r\n        super.handleKeyDown(e);\r\n\r\n        if (e.key === KeyCode.SPACE) {\r\n            this.selectAllFeature?.onSpaceKeyDown(e);\r\n        }\r\n        if (e.key === KeyCode.ENTER) {\r\n            this.onEnterKeyDown(e);\r\n        }\r\n        if (e.key === KeyCode.DOWN && e.altKey) {\r\n            this.showMenuOnKeyPress(e, false);\r\n        }\r\n    }\r\n\r\n    private onEnterKeyDown(e: KeyboardEvent): void {\r\n        if (e.ctrlKey || e.metaKey) {\r\n            this.showMenuOnKeyPress(e, true);\r\n        } else if (this.sortable) {\r\n            this.beans.sortSvc?.progressSort(this.column, e.shiftKey, 'uiColumnSorted');\r\n        }\r\n    }\r\n\r\n    private showMenuOnKeyPress(e: KeyboardEvent, isFilterShortcut: boolean): void {\r\n        const headerComp = this.comp.getUserCompInstance();\r\n        if (!isHeaderComp(headerComp)) {\r\n            return;\r\n        }\r\n\r\n        // the header comp knows what features are enabled, so let it handle the shortcut\r\n        if (headerComp.onMenuKeyboardShortcut(isFilterShortcut)) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    private onFocusIn(e: FocusEvent) {\r\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\r\n            this.focusThis();\r\n            this.announceAriaDescription();\r\n        }\r\n\r\n        if (_isKeyboardMode()) {\r\n            this.setActiveHeader(true);\r\n        }\r\n    }\r\n\r\n    private onFocusOut(e: FocusEvent) {\r\n        if (this.eGui.contains(e.relatedTarget as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        this.setActiveHeader(false);\r\n    }\r\n\r\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\r\n        this.tooltipFeature = this.beans.tooltipSvc?.setupHeaderTooltip(\r\n            this.tooltipFeature,\r\n            this,\r\n            value,\r\n            shouldDisplayTooltip\r\n        );\r\n    }\r\n\r\n    private setupClassesFromColDef(): void {\r\n        const refreshHeaderClasses = () => {\r\n            const colDef = this.column.getColDef();\r\n            const classes = _getHeaderClassesFromColDef(colDef, this.gos, this.column, null);\r\n\r\n            const oldClasses = this.userHeaderClasses;\r\n            this.userHeaderClasses = new Set(classes);\r\n\r\n            classes.forEach((c) => {\r\n                if (oldClasses.has(c)) {\r\n                    // class already added, no need to apply it, but remove from old set\r\n                    oldClasses.delete(c);\r\n                } else {\r\n                    // class new since last time, so apply it\r\n                    this.comp.addOrRemoveCssClass(c, true);\r\n                }\r\n            });\r\n\r\n            // now old set only has classes that were applied last time, but not this time, so remove them\r\n            oldClasses.forEach((c) => this.comp.addOrRemoveCssClass(c, false));\r\n        };\r\n\r\n        this.setRefreshFunction('headerClasses', refreshHeaderClasses);\r\n        refreshHeaderClasses();\r\n    }\r\n\r\n    public setDragSource(eSource: HTMLElement | undefined): void {\r\n        this.dragSourceElement = eSource;\r\n        this.removeDragSource();\r\n\r\n        if (!eSource || !this.draggable) {\r\n            return;\r\n        }\r\n\r\n        this.dragSource = this.beans.colMoves?.setDragSourceForHeader(eSource, this.column, this.displayName) ?? null;\r\n    }\r\n\r\n    private updateState(): void {\r\n        const { menuSvc } = this.beans;\r\n        this.menuEnabled = !!menuSvc?.isColumnMenuInHeaderEnabled(this.column);\r\n        this.openFilterEnabled = !!menuSvc?.isFilterMenuInHeaderEnabled(this.column);\r\n        this.sortable = this.column.isSortable();\r\n        this.displayName = this.calculateDisplayName();\r\n        this.draggable = this.workOutDraggable();\r\n    }\r\n\r\n    public setRefreshFunction(name: RefreshFunction, func: () => void): void {\r\n        this.refreshFunctions[name] = func;\r\n    }\r\n\r\n    private refresh(): void {\r\n        this.updateState();\r\n        this.refreshHeaderComp();\r\n        this.refreshAria();\r\n        Object.values(this.refreshFunctions).forEach((f) => f());\r\n    }\r\n\r\n    private refreshHeaderComp(): void {\r\n        const newCompDetails = this.lookupUserCompDetails();\r\n        if (!newCompDetails) {\r\n            return;\r\n        }\r\n\r\n        const compInstance = this.comp.getUserCompInstance();\r\n\r\n        // only try refresh if old comp exists adn it is the correct type\r\n        const attemptRefresh =\r\n            compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;\r\n\r\n        const headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;\r\n\r\n        if (headerCompRefreshed) {\r\n            // we do this as a refresh happens after colDefs change, and it's possible the column has had it's\r\n            // draggable property toggled. no need to call this if not refreshing, as setDragSource is done\r\n            // as part of appendHeaderComp\r\n            this.setDragSource(this.dragSourceElement);\r\n        } else {\r\n            this.setCompDetails(newCompDetails);\r\n        }\r\n    }\r\n\r\n    private attemptHeaderCompRefresh(params: IHeaderParams): boolean {\r\n        const headerComp = this.comp.getUserCompInstance();\r\n        if (!headerComp) {\r\n            return false;\r\n        }\r\n\r\n        // if no refresh method, then we want to replace the headerComp\r\n        if (!headerComp.refresh) {\r\n            return false;\r\n        }\r\n\r\n        const res = headerComp.refresh(params);\r\n\r\n        return res;\r\n    }\r\n\r\n    private calculateDisplayName(): string | null {\r\n        return this.beans.colNames.getDisplayNameForColumn(this.column, 'header', true);\r\n    }\r\n\r\n    private checkDisplayName(): void {\r\n        // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)\r\n        if (this.displayName !== this.calculateDisplayName()) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    private workOutDraggable(): boolean {\r\n        const colDef = this.column.getColDef();\r\n        const isSuppressMovableColumns = this.gos.get('suppressMovableColumns');\r\n\r\n        const colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;\r\n\r\n        // we should still be allowed drag the column, even if it can't be moved, if the column\r\n        // can be dragged to a rowGroup or pivot drop zone\r\n        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;\r\n    }\r\n\r\n    private setupWidth(compBean: BeanStub): void {\r\n        const listener = () => {\r\n            const columnWidth = this.column.getActualWidth();\r\n            this.comp.setWidth(`${columnWidth}px`);\r\n        };\r\n\r\n        compBean.addManagedListeners(this.column, { widthChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    private setupMovingCss(compBean: BeanStub): void {\r\n        const listener = () => {\r\n            // this is what makes the header go dark when it is been moved (gives impression to\r\n            // user that the column was picked up).\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\r\n        };\r\n\r\n        compBean.addManagedListeners(this.column, { movingChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    private setupMenuClass(compBean: BeanStub): void {\r\n        const listener = () => {\r\n            this.comp.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());\r\n        };\r\n\r\n        compBean.addManagedListeners(this.column, { menuVisibleChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    private setupSortableClass(compBean: BeanStub): void {\r\n        const updateSortableCssClass = () => {\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-sortable', !!this.sortable);\r\n        };\r\n\r\n        updateSortableCssClass();\r\n\r\n        this.setRefreshFunction('updateSortable', updateSortableCssClass);\r\n        compBean.addManagedEventListeners({ sortChanged: this.refreshAriaSort.bind(this) });\r\n    }\r\n\r\n    private setupFilterClass(compBean: BeanStub): void {\r\n        const listener = () => {\r\n            const isFilterActive = this.column.isFilterActive();\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-filtered', isFilterActive);\r\n            this.refreshAria();\r\n        };\r\n\r\n        compBean.addManagedListeners(this.column, { filterActiveChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    private setupWrapTextClass() {\r\n        const listener = () => {\r\n            const wrapText = !!this.column.getColDef().wrapHeaderText;\r\n            this.comp.addOrRemoveCssClass('ag-header-cell-wrap-text', wrapText);\r\n        };\r\n        listener();\r\n        this.setRefreshFunction('wrapText', listener);\r\n    }\r\n\r\n    private onHeaderHighlightChanged(): void {\r\n        const highlighted = this.column.getHighlighted();\r\n        const beforeOn = highlighted === ColumnHighlightPosition.Before;\r\n        const afterOn = highlighted === ColumnHighlightPosition.After;\r\n\r\n        this.comp.addOrRemoveCssClass('ag-header-highlight-before', beforeOn);\r\n        this.comp.addOrRemoveCssClass('ag-header-highlight-after', afterOn);\r\n    }\r\n\r\n    protected override onDisplayedColumnsChanged(): void {\r\n        super.onDisplayedColumnsChanged();\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n        this.onHeaderHeightChanged();\r\n    }\r\n\r\n    private onHeaderHeightChanged() {\r\n        this.refreshSpanHeaderHeight();\r\n    }\r\n\r\n    private refreshSpanHeaderHeight() {\r\n        const { eGui, column, comp, beans } = this;\r\n        const groupHeaderHeight = getGroupRowsHeight(this.beans);\r\n        const isZeroGroupHeight = groupHeaderHeight.reduce((total, next) => (total += next), 0) === 0;\r\n\r\n        comp.addOrRemoveCssClass('ag-header-parent-hidden', isZeroGroupHeight);\r\n\r\n        if (!column.isSpanHeaderHeight()) {\r\n            eGui.style.removeProperty('top');\r\n            eGui.style.removeProperty('height');\r\n            comp.addOrRemoveCssClass('ag-header-span-height', false);\r\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\r\n            return;\r\n        }\r\n\r\n        const { numberOfParents, isSpanningTotal } = this.column.getColumnGroupPaddingInfo();\r\n\r\n        comp.addOrRemoveCssClass('ag-header-span-height', numberOfParents > 0);\r\n\r\n        const headerHeight = getColumnHeaderRowHeight(beans);\r\n\r\n        if (numberOfParents === 0) {\r\n            // if spanning has stopped then need to reset these values.\r\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\r\n            eGui.style.setProperty('top', `0px`);\r\n            eGui.style.setProperty('height', `${headerHeight}px`);\r\n            return;\r\n        }\r\n\r\n        comp.addOrRemoveCssClass('ag-header-span-total', isSpanningTotal);\r\n\r\n        let extraHeight = 0;\r\n        for (let i = 0; i < numberOfParents; i++) {\r\n            extraHeight += groupHeaderHeight[groupHeaderHeight.length - 1 - i];\r\n        }\r\n\r\n        eGui.style.setProperty('top', `${-extraHeight}px`);\r\n        eGui.style.setProperty('height', `${headerHeight + extraHeight}px`);\r\n    }\r\n\r\n    private refreshAriaSort(): void {\r\n        if (this.sortable) {\r\n            const translate = this.getLocaleTextFunc();\r\n            const sort = this.beans.sortSvc?.getDisplaySortForColumn(this.column) || null;\r\n            this.comp.setAriaSort(_getAriaSortState(sort));\r\n            this.setAriaDescriptionProperty('sort', translate('ariaSortableColumn', 'Press ENTER to sort'));\r\n        } else {\r\n            this.comp.setAriaSort();\r\n            this.setAriaDescriptionProperty('sort', null);\r\n        }\r\n    }\r\n\r\n    private refreshAriaMenu(): void {\r\n        if (this.menuEnabled) {\r\n            const translate = this.getLocaleTextFunc();\r\n            this.setAriaDescriptionProperty('menu', translate('ariaMenuColumn', 'Press ALT DOWN to open column menu'));\r\n        } else {\r\n            this.setAriaDescriptionProperty('menu', null);\r\n        }\r\n    }\r\n\r\n    private refreshAriaFilterButton(): void {\r\n        if (this.openFilterEnabled && !_isLegacyMenuEnabled(this.gos)) {\r\n            const translate = this.getLocaleTextFunc();\r\n            this.setAriaDescriptionProperty(\r\n                'filterButton',\r\n                translate('ariaFilterColumn', 'Press CTRL ENTER to open filter')\r\n            );\r\n        } else {\r\n            this.setAriaDescriptionProperty('filterButton', null);\r\n        }\r\n    }\r\n\r\n    private refreshAriaFiltered(): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const isFilterActive = this.column.isFilterActive();\r\n        if (isFilterActive) {\r\n            this.setAriaDescriptionProperty('filter', translate('ariaColumnFiltered', 'Column Filtered'));\r\n        } else {\r\n            this.setAriaDescriptionProperty('filter', null);\r\n        }\r\n    }\r\n\r\n    public setAriaDescriptionProperty(property: HeaderAriaDescriptionKey, value: string | null): void {\r\n        if (value != null) {\r\n            this.ariaDescriptionProperties.set(property, value);\r\n        } else {\r\n            this.ariaDescriptionProperties.delete(property);\r\n        }\r\n    }\r\n\r\n    public announceAriaDescription(): void {\r\n        if (!this.eGui.contains(_getActiveDomElement(this.beans))) {\r\n            return;\r\n        }\r\n        const ariaDescription = Array.from(this.ariaDescriptionProperties.keys())\r\n            // always announce the filter description first\r\n            .sort((a: string, b: string) => (a === 'filter' ? -1 : b.charCodeAt(0) - a.charCodeAt(0)))\r\n            .map((key: HeaderAriaDescriptionKey) => this.ariaDescriptionProperties.get(key))\r\n            .join('. ');\r\n\r\n        this.beans.ariaAnnounce?.announceValue(ariaDescription, 'columnHeader');\r\n    }\r\n\r\n    private refreshAria(): void {\r\n        this.refreshAriaSort();\r\n        this.refreshAriaMenu();\r\n        this.refreshAriaFilterButton();\r\n        this.refreshAriaFiltered();\r\n    }\r\n\r\n    private addColumnHoverListener(compBean: BeanStub): void {\r\n        this.beans.colHover?.addHeaderColumnHoverListener(compBean, this.comp, this.column);\r\n    }\r\n\r\n    private addActiveHeaderMouseListeners(compBean: BeanStub): void {\r\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\r\n        const clickListener = () => this.dispatchColumnMouseEvent('columnHeaderClicked', this.column);\r\n        const contextMenuListener = (event: MouseEvent) =>\r\n            this.handleContextMenuMouseEvent(event, undefined, this.column);\r\n\r\n        compBean.addManagedListeners(this.eGui, {\r\n            mouseenter: listener,\r\n            mouseleave: listener,\r\n            click: clickListener,\r\n            contextmenu: contextMenuListener,\r\n        });\r\n    }\r\n\r\n    private handleMouseOverChange(isMouseOver: boolean): void {\r\n        this.setActiveHeader(isMouseOver);\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: isMouseOver ? 'columnHeaderMouseOver' : 'columnHeaderMouseLeave',\r\n            column: this.column,\r\n        });\r\n    }\r\n\r\n    private setActiveHeader(active: boolean): void {\r\n        this.comp.addOrRemoveCssClass('ag-header-active', active);\r\n    }\r\n\r\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\r\n        const headerComp = this.comp.getUserCompInstance();\r\n        if (isHeaderComp(headerComp)) {\r\n            return headerComp.getAnchorElementForMenu(isFilter);\r\n        }\r\n        return this.eGui;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.tooltipFeature = this.destroyBean(this.tooltipFeature);\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nfunction isHeaderComp(headerComp: IHeader | undefined): headerComp is HeaderComp {\r\n    // can't use `instanceof` here as it prevents tree shaking of `HeaderComp`\r\n    return (\r\n        typeof (headerComp as HeaderComp).getAnchorElementForMenu === 'function' &&\r\n        typeof (headerComp as HeaderComp).onMenuKeyboardShortcut === 'function'\r\n    );\r\n}\r\n", "import { setupCompBean } from '../../components/emptyBean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport { _isDomLayout } from '../../gridOptionsUtils';\r\nimport type { BrandedType } from '../../interfaces/brandedType';\r\nimport type { ColumnPinnedType, HeaderColumnId } from '../../interfaces/iColumn';\r\nimport type { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\r\nimport { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\r\nimport type { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\r\nimport type { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\r\nimport { getColumnHeaderRowHeight, getFloatingFiltersHeight, getGroupRowsHeight } from '../headerUtils';\r\nimport type { HeaderRowType } from './headerRowComp';\r\n\r\nexport interface IHeaderRowComp {\r\n    setTop(top: string): void;\r\n    setHeight(height: string): void;\r\n    setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean, afterScroll: boolean): void;\r\n    setWidth(width: string): void;\r\n}\r\n\r\nlet instanceIdSequence = 0;\r\nexport type HeaderRowCtrlInstanceId = BrandedType<number, 'HeaderRowCtrlInstanceId'>;\r\n\r\nexport class HeaderRowCtrl extends BeanStub {\r\n    public readonly instanceId: HeaderRowCtrlInstanceId = instanceIdSequence++ as HeaderRowCtrlInstanceId;\r\n\r\n    private comp: IHeaderRowComp;\r\n    public headerRowClass: string;\r\n\r\n    private headerCellCtrls: Map<HeaderColumnId, AbstractHeaderCellCtrl> | undefined;\r\n\r\n    private isPrintLayout: boolean;\r\n    private isEnsureDomOrder: boolean;\r\n\r\n    constructor(\r\n        public readonly rowIndex: number,\r\n        public readonly pinned: ColumnPinnedType,\r\n        public readonly type: HeaderRowType\r\n    ) {\r\n        super();\r\n\r\n        const typeClass =\r\n            type == 'group'\r\n                ? `ag-header-row-column-group`\r\n                : type == 'filter'\r\n                  ? `ag-header-row-column-filter`\r\n                  : `ag-header-row-column`;\r\n        this.headerRowClass = `ag-header-row ${typeClass}`;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.isPrintLayout = _isDomLayout(this.gos, 'print');\r\n        this.isEnsureDomOrder = this.gos.get('ensureDomOrder');\r\n    }\r\n\r\n    /** Checks that every header cell that is currently visible has been rendered.\r\n     * Can only be false under some circumstances when using React\r\n     */\r\n    public areCellsRendered(): boolean {\r\n        if (!this.comp) {\r\n            return false;\r\n        }\r\n        return this.getHeaderCellCtrls().every((ctrl) => ctrl.eGui != null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param comp Proxy to the actual component\r\n     * @param initCompState Should the component be initialised with the current state of the controller. Default: true\r\n     */\r\n    public setComp(comp: IHeaderRowComp, compBean: BeanStub | undefined, initCompState: boolean = true): void {\r\n        this.comp = comp;\r\n        compBean = setupCompBean(this, this.beans.context, compBean);\r\n\r\n        if (initCompState) {\r\n            this.onRowHeightChanged();\r\n            this.onVirtualColumnsChanged();\r\n        }\r\n        // width is managed directly regardless of framework and so is not included in initCompState\r\n        this.setWidth();\r\n\r\n        this.addEventListeners(compBean);\r\n    }\r\n\r\n    public getAriaRowIndex(): number {\r\n        return this.rowIndex + 1;\r\n    }\r\n\r\n    private addEventListeners(compBean: BeanStub): void {\r\n        const onHeightChanged = this.onRowHeightChanged.bind(this);\r\n        compBean.addManagedEventListeners({\r\n            columnResized: this.setWidth.bind(this),\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            virtualColumnsChanged: (params) => this.onVirtualColumnsChanged(params.afterScroll),\r\n            columnGroupHeaderHeightChanged: onHeightChanged,\r\n            columnHeaderHeightChanged: onHeightChanged,\r\n            gridStylesChanged: onHeightChanged,\r\n            advancedFilterEnabledChanged: onHeightChanged,\r\n        });\r\n\r\n        // when print layout changes, it changes what columns are in what section\r\n        compBean.addManagedPropertyListener('domLayout', this.onDisplayedColumnsChanged.bind(this));\r\n        compBean.addManagedPropertyListener('ensureDomOrder', (e) => (this.isEnsureDomOrder = e.currentValue));\r\n\r\n        compBean.addManagedPropertyListeners(\r\n            [\r\n                'headerHeight',\r\n                'pivotHeaderHeight',\r\n                'groupHeaderHeight',\r\n                'pivotGroupHeaderHeight',\r\n                'floatingFiltersHeight',\r\n            ],\r\n            onHeightChanged\r\n        );\r\n    }\r\n\r\n    public getHeaderCellCtrl(column: AgColumn | AgColumnGroup): AbstractHeaderCellCtrl | undefined {\r\n        if (!this.headerCellCtrls) {\r\n            return;\r\n        }\r\n        for (const cellCtrl of this.headerCellCtrls.values()) {\r\n            if (cellCtrl.column === column) {\r\n                return cellCtrl;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(): void {\r\n        this.isPrintLayout = _isDomLayout(this.gos, 'print');\r\n        this.onVirtualColumnsChanged();\r\n        this.setWidth();\r\n        this.onRowHeightChanged();\r\n    }\r\n\r\n    private setWidth(): void {\r\n        const width = this.getWidthForRow();\r\n        this.comp.setWidth(`${width}px`);\r\n    }\r\n\r\n    private getWidthForRow(): number {\r\n        const { visibleCols: presentedColsService } = this.beans;\r\n        if (this.isPrintLayout) {\r\n            const pinned = this.pinned != null;\r\n            if (pinned) {\r\n                return 0;\r\n            }\r\n\r\n            return (\r\n                presentedColsService.getContainerWidth('right') +\r\n                presentedColsService.getContainerWidth('left') +\r\n                presentedColsService.getContainerWidth(null)\r\n            );\r\n        }\r\n\r\n        // if not printing, just return the width as normal\r\n        return presentedColsService.getContainerWidth(this.pinned);\r\n    }\r\n\r\n    private onRowHeightChanged(): void {\r\n        const { topOffset, rowHeight } = this.getTopAndHeight();\r\n\r\n        this.comp.setTop(topOffset + 'px');\r\n        this.comp.setHeight(rowHeight + 'px');\r\n    }\r\n\r\n    public getTopAndHeight() {\r\n        const { filterManager } = this.beans;\r\n        const sizes: number[] = [];\r\n\r\n        const groupHeadersHeight = getGroupRowsHeight(this.beans);\r\n        const headerHeight = getColumnHeaderRowHeight(this.beans);\r\n\r\n        sizes.push(...groupHeadersHeight);\r\n        sizes.push(headerHeight);\r\n\r\n        if (filterManager?.hasFloatingFilters()) {\r\n            sizes.push(getFloatingFiltersHeight(this.beans) as number);\r\n        }\r\n\r\n        let topOffset = 0;\r\n\r\n        for (let i = 0; i < this.rowIndex; i++) {\r\n            topOffset += sizes[i];\r\n        }\r\n\r\n        const rowHeight = sizes[this.rowIndex];\r\n\r\n        return { topOffset, rowHeight };\r\n    }\r\n\r\n    private onVirtualColumnsChanged(afterScroll: boolean = false): void {\r\n        const ctrlsToDisplay = this.getHeaderCtrls();\r\n        const forceOrder = this.isEnsureDomOrder || this.isPrintLayout;\r\n        this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);\r\n    }\r\n\r\n    public getHeaderCtrls() {\r\n        const oldCtrls = this.headerCellCtrls;\r\n        this.headerCellCtrls = new Map();\r\n        const columns = this.getColumnsInViewport();\r\n\r\n        for (const child of columns) {\r\n            this.recycleAndCreateHeaderCtrls(child, oldCtrls);\r\n        }\r\n\r\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\r\n        const isFocusedAndDisplayed = (ctrl: HeaderCellCtrl) => {\r\n            const { focusSvc, visibleCols } = this.beans;\r\n\r\n            const isFocused = focusSvc.isHeaderWrapperFocused(ctrl);\r\n            if (!isFocused) {\r\n                return false;\r\n            }\r\n            const isDisplayed = visibleCols.isVisible(ctrl.column);\r\n            return isDisplayed;\r\n        };\r\n\r\n        if (oldCtrls) {\r\n            for (const [id, oldCtrl] of oldCtrls) {\r\n                const keepCtrl = isFocusedAndDisplayed(oldCtrl as HeaderCellCtrl);\r\n                if (keepCtrl) {\r\n                    this.headerCellCtrls.set(id, oldCtrl);\r\n                } else {\r\n                    this.destroyBean(oldCtrl);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.getHeaderCellCtrls();\r\n    }\r\n\r\n    private getHeaderCellCtrls(): AbstractHeaderCellCtrl[] {\r\n        return Array.from(this.headerCellCtrls?.values() ?? []);\r\n    }\r\n\r\n    private recycleAndCreateHeaderCtrls(\r\n        headerColumn: AgColumn | AgColumnGroup,\r\n        oldCtrls?: Map<HeaderColumnId, AbstractHeaderCellCtrl>\r\n    ): void {\r\n        if (!this.headerCellCtrls) {\r\n            return;\r\n        }\r\n        // skip groups that have no displayed children. this can happen when the group is broken,\r\n        // and this section happens to have nothing to display for the open / closed state.\r\n        // (a broken group is one that is split, ie columns in the group have a non-group column\r\n        // in between them)\r\n        if (headerColumn.isEmptyGroup()) {\r\n            return;\r\n        }\r\n\r\n        const idOfChild = headerColumn.getUniqueId();\r\n\r\n        // if we already have this cell rendered, do nothing\r\n        let headerCtrl: AbstractHeaderCellCtrl | undefined;\r\n        if (oldCtrls) {\r\n            headerCtrl = oldCtrls.get(idOfChild);\r\n            oldCtrls.delete(idOfChild);\r\n        }\r\n\r\n        // it's possible there is a new Column with the same ID, but it's for a different Column.\r\n        // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\r\n        // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\r\n        // about to replace it in the this.headerComps map.\r\n        const forOldColumn = headerCtrl && headerCtrl.column != headerColumn;\r\n        if (forOldColumn) {\r\n            this.destroyBean(headerCtrl);\r\n            headerCtrl = undefined;\r\n        }\r\n\r\n        if (headerCtrl == null) {\r\n            switch (this.type) {\r\n                case 'filter': {\r\n                    headerCtrl = this.createBean(\r\n                        this.beans.registry.createDynamicBean<HeaderFilterCellCtrl>(\r\n                            'headerFilterCellCtrl',\r\n                            true,\r\n                            headerColumn as AgColumn,\r\n                            this\r\n                        )!\r\n                    );\r\n                    break;\r\n                }\r\n                case 'group':\r\n                    headerCtrl = this.createBean(\r\n                        this.beans.registry.createDynamicBean<HeaderGroupCellCtrl>(\r\n                            'headerGroupCellCtrl',\r\n                            true,\r\n                            headerColumn as AgColumnGroup,\r\n                            this\r\n                        )!\r\n                    );\r\n                    break;\r\n                default:\r\n                    headerCtrl = this.createBean(new HeaderCellCtrl(headerColumn as AgColumn, this));\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.headerCellCtrls.set(idOfChild, headerCtrl);\r\n    }\r\n\r\n    private getColumnsInViewport(): (AgColumn | AgColumnGroup)[] {\r\n        return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\r\n    }\r\n\r\n    private getColumnsInViewportPrintLayout(): (AgColumn | AgColumnGroup)[] {\r\n        // for print layout, we add all columns into the center\r\n        if (this.pinned != null) {\r\n            return [];\r\n        }\r\n\r\n        let viewportColumns: (AgColumn | AgColumnGroup)[] = [];\r\n        const actualDepth = this.getActualDepth();\r\n        const { colViewport } = this.beans;\r\n\r\n        (['left', null, 'right'] as ColumnPinnedType[]).forEach((pinned) => {\r\n            const items = colViewport.getHeadersToRender(pinned, actualDepth);\r\n            viewportColumns = viewportColumns.concat(items);\r\n        });\r\n\r\n        return viewportColumns;\r\n    }\r\n\r\n    private getActualDepth(): number {\r\n        return this.type == 'filter' ? this.rowIndex - 1 : this.rowIndex;\r\n    }\r\n\r\n    private getColumnsInViewportNormalLayout(): (AgColumn | AgColumnGroup)[] {\r\n        // when in normal layout, we add the columns for that container only\r\n        return this.beans.colViewport.getHeadersToRender(this.pinned, this.getActualDepth());\r\n    }\r\n\r\n    public findHeaderCellCtrl(\r\n        column: AgColumn | AgColumnGroup | ((cellCtrl: AbstractHeaderCellCtrl) => boolean)\r\n    ): AbstractHeaderCellCtrl | undefined {\r\n        if (!this.headerCellCtrls) {\r\n            return;\r\n        }\r\n\r\n        const allCtrls = this.getHeaderCellCtrls();\r\n        let ctrl: AbstractHeaderCellCtrl | undefined;\r\n\r\n        if (typeof column === 'function') {\r\n            ctrl = allCtrls.find(column);\r\n        } else {\r\n            ctrl = allCtrls.find((ctrl) => ctrl.column == column);\r\n        }\r\n\r\n        return ctrl;\r\n    }\r\n\r\n    public focusHeader(column: AgColumn | AgColumnGroup, event?: KeyboardEvent): boolean {\r\n        const ctrl = this.findHeaderCellCtrl(column);\r\n\r\n        if (!ctrl) {\r\n            return false;\r\n        }\r\n\r\n        const focused = ctrl.focus(event);\r\n\r\n        return focused;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.headerCellCtrls?.forEach((ctrl) => {\r\n            this.destroyBean(ctrl);\r\n        });\r\n        this.headerCellCtrls = undefined;\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { ColumnMoveService } from '../../columnMove/columnMoveService';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { isColumn } from '../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport type { FilterManager } from '../../filter/filterManager';\r\nimport type { FocusService } from '../../focusService';\r\nimport { CenterWidthFeature } from '../../gridBodyComp/centerWidthFeature';\r\nimport type { ScrollPartner } from '../../gridBodyComp/gridBodyScrollFeature';\r\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport type { HeaderPosition } from '../../interfaces/iHeaderPosition';\r\nimport type { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\r\nimport { getHeaderRowCount } from '../headerUtils';\r\nimport type { HeaderRowType } from '../row/headerRowComp';\r\nimport { HeaderRowCtrl } from '../row/headerRowCtrl';\r\n\r\nexport interface IHeaderRowContainerComp {\r\n    setCenterWidth(width: string): void;\r\n    setViewportScrollLeft(left: number): void;\r\n    setPinnedContainerWidth(width: string): void;\r\n    setDisplayed(displayed: boolean): void;\r\n    setCtrls(ctrls: HeaderRowCtrl[]): void;\r\n}\r\n\r\nexport class HeaderRowContainerCtrl extends BeanStub implements ScrollPartner {\r\n    public comp: IHeaderRowContainerComp;\r\n    public hidden: boolean = false;\r\n    private includeFloatingFilter: boolean = false;\r\n\r\n    private filtersRowCtrl: HeaderRowCtrl | undefined;\r\n    private columnsRowCtrl: HeaderRowCtrl | undefined;\r\n    private groupsRowCtrls: HeaderRowCtrl[] = [];\r\n    public eViewport: HTMLElement;\r\n\r\n    constructor(public readonly pinned: ColumnPinnedType) {\r\n        super();\r\n    }\r\n\r\n    public setComp(comp: IHeaderRowContainerComp, eGui: HTMLElement): void {\r\n        this.comp = comp;\r\n        this.eViewport = eGui;\r\n\r\n        const { pinnedCols, ctrlsSvc, colModel, colMoves, filterManager } = this.beans;\r\n\r\n        this.setupCenterWidth();\r\n        pinnedCols?.setupHeaderPinnedWidth(this);\r\n\r\n        this.setupDragAndDrop(colMoves, this.eViewport);\r\n\r\n        const onDisplayedColsChanged = this.onDisplayedColumnsChanged.bind(this, filterManager);\r\n        this.addManagedEventListeners({\r\n            gridColumnsChanged: this.onGridColumnsChanged.bind(this),\r\n            displayedColumnsChanged: onDisplayedColsChanged,\r\n            advancedFilterEnabledChanged: onDisplayedColsChanged,\r\n        });\r\n\r\n        const headerType = `${typeof this.pinned === 'string' ? this.pinned : 'center'}Header` as const;\r\n        ctrlsSvc.register(headerType, this);\r\n\r\n        if (colModel.ready) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    public getAllCtrls(): HeaderRowCtrl[] {\r\n        const res: HeaderRowCtrl[] = [...this.groupsRowCtrls];\r\n\r\n        if (this.columnsRowCtrl) {\r\n            res.push(this.columnsRowCtrl);\r\n        }\r\n\r\n        if (this.filtersRowCtrl) {\r\n            res.push(this.filtersRowCtrl);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public refresh(keepColumns = false): void {\r\n        const { focusSvc, colModel, filterManager } = this.beans;\r\n        let sequence = 0;\r\n        const focusedHeaderPosition = focusSvc.getFocusHeaderToUseAfterRefresh();\r\n\r\n        const refreshColumnGroups = () => {\r\n            const groupRowCount = getHeaderRowCount(colModel) - 1;\r\n\r\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\r\n\r\n            for (let i = 0; i < groupRowCount; i++) {\r\n                const ctrl = this.createBean(new HeaderRowCtrl(sequence++, this.pinned, 'group'));\r\n                this.groupsRowCtrls.push(ctrl);\r\n            }\r\n        };\r\n\r\n        const refreshColumns = () => {\r\n            const rowIndex = sequence++;\r\n\r\n            const needNewInstance =\r\n                !this.hidden &&\r\n                (this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.rowIndex !== rowIndex);\r\n            const shouldDestroyInstance = needNewInstance || this.hidden;\r\n\r\n            if (shouldDestroyInstance) {\r\n                this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\r\n            }\r\n\r\n            if (needNewInstance) {\r\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, 'column'));\r\n            }\r\n        };\r\n\r\n        const refreshFilters = () => {\r\n            this.includeFloatingFilter = !!filterManager?.hasFloatingFilters() && !this.hidden;\r\n\r\n            const destroyPreviousComp = () => {\r\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\r\n            };\r\n\r\n            if (!this.includeFloatingFilter) {\r\n                destroyPreviousComp();\r\n                return;\r\n            }\r\n\r\n            const rowIndex = sequence++;\r\n\r\n            if (this.filtersRowCtrl) {\r\n                const rowIndexMismatch = this.filtersRowCtrl.rowIndex !== rowIndex;\r\n                if (!keepColumns || rowIndexMismatch) {\r\n                    destroyPreviousComp();\r\n                }\r\n            }\r\n\r\n            if (!this.filtersRowCtrl) {\r\n                this.filtersRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, 'filter'));\r\n            }\r\n        };\r\n\r\n        refreshColumnGroups();\r\n        refreshColumns();\r\n        refreshFilters();\r\n\r\n        const allCtrls = this.getAllCtrls();\r\n        this.comp.setCtrls(allCtrls);\r\n\r\n        this.restoreFocusOnHeader(focusSvc, focusedHeaderPosition);\r\n    }\r\n\r\n    public getHeaderCtrlForColumn(column: AgColumn | AgColumnGroup): AbstractHeaderCellCtrl | undefined {\r\n        if (isColumn(column)) {\r\n            return this.columnsRowCtrl?.getHeaderCellCtrl(column);\r\n        }\r\n\r\n        if (this.groupsRowCtrls.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\r\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\r\n\r\n            if (ctrl) {\r\n                return ctrl;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getHtmlElementForColumnHeader(column: AgColumn | AgColumnGroup): HTMLElement | null {\r\n        return this.getHeaderCtrlForColumn(column)?.eGui ?? null;\r\n    }\r\n\r\n    public getRowType(rowIndex: number): HeaderRowType | undefined {\r\n        return this.getAllCtrls()[rowIndex]?.type;\r\n    }\r\n\r\n    public focusHeader(rowIndex: number, column: AgColumn | AgColumnGroup, event?: KeyboardEvent): boolean {\r\n        const allCtrls = this.getAllCtrls();\r\n        const ctrl = allCtrls[rowIndex];\r\n        if (!ctrl) {\r\n            return false;\r\n        }\r\n\r\n        return ctrl.focusHeader(column, event);\r\n    }\r\n\r\n    public getGroupRowCount(): number {\r\n        return this.groupsRowCtrls.length;\r\n    }\r\n\r\n    public getGroupRowCtrlAtIndex(index: number): HeaderRowCtrl {\r\n        return this.groupsRowCtrls[index];\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);\r\n    }\r\n\r\n    public setHorizontalScroll(offset: number): void {\r\n        this.comp.setViewportScrollLeft(offset);\r\n    }\r\n\r\n    public onScrollCallback(fn: () => void): void {\r\n        this.addManagedElementListeners(this.eViewport, { scroll: fn });\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\r\n\r\n        this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\r\n\r\n        this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\r\n\r\n        super.destroy();\r\n    }\r\n\r\n    private setupDragAndDrop(colMoves: ColumnMoveService | undefined, dropContainer: HTMLElement): void {\r\n        const bodyDropTarget = colMoves?.createBodyDropTarget(this.pinned, dropContainer);\r\n        if (bodyDropTarget) {\r\n            this.createManagedBean(bodyDropTarget);\r\n        }\r\n    }\r\n\r\n    private restoreFocusOnHeader(focusSvc: FocusService, position: HeaderPosition | null): void {\r\n        if (!position) {\r\n            return;\r\n        }\r\n\r\n        const { column } = position;\r\n\r\n        if ((column as AgColumn | AgColumnGroup).getPinned() != this.pinned) {\r\n            return;\r\n        }\r\n\r\n        focusSvc.focusHeaderPosition({ headerPosition: position });\r\n    }\r\n\r\n    // grid cols have changed - this also means the number of rows in the header can have\r\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\r\n    private onGridColumnsChanged() {\r\n        this.refresh(true);\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(filterManager: FilterManager): void {\r\n        const includeFloatingFilter = !!filterManager?.hasFloatingFilters() && !this.hidden;\r\n        if (this.includeFloatingFilter !== includeFloatingFilter) {\r\n            this.refresh(true);\r\n        }\r\n    }\r\n\r\n    private setupCenterWidth(): void {\r\n        if (this.pinned != null) {\r\n            return;\r\n        }\r\n\r\n        this.createManagedBean(new CenterWidthFeature((width) => this.comp.setCenterWidth(`${width}px`), true));\r\n    }\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { isColumn } from '../../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\r\nimport type { ColumnEventType } from '../../events';\r\nimport { _isLegacyMenuEnabled } from '../../gridOptionsUtils';\r\nimport type { HeaderCellCtrl } from '../../headerRendering/cells/column/headerCellCtrl';\r\nimport type { ContainerType } from '../../interfaces/iAfterGuiAttachedParams';\r\nimport type { Column } from '../../interfaces/iColumn';\r\nimport type { IMenuFactory } from '../../interfaces/iMenuFactory';\r\nimport { _isIOSUserAgent } from '../../utils/browser';\r\nimport { _requestAnimationFrame } from '../animationFrameService';\r\n\r\ninterface BaseShowColumnMenuParams {\r\n    column?: Column;\r\n}\r\n\r\ninterface BaseShowFilterMenuParams {\r\n    column: Column;\r\n    containerType: ContainerType;\r\n}\r\n\r\ninterface MouseShowMenuParams {\r\n    mouseEvent: MouseEvent | Touch;\r\n    positionBy: 'mouse';\r\n}\r\n\r\ninterface ButtonShowMenuParams {\r\n    buttonElement: HTMLElement;\r\n    positionBy: 'button';\r\n}\r\n\r\ninterface AutoShowMenuParams {\r\n    positionBy: 'auto';\r\n}\r\n\r\nexport type ShowColumnMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) &\r\n    BaseShowColumnMenuParams;\r\n\r\nexport type ShowFilterMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) &\r\n    BaseShowFilterMenuParams;\r\n\r\nexport class MenuService extends BeanStub implements NamedBean {\r\n    beanName = 'menuSvc' as const;\r\n\r\n    private activeMenuFactory?: IMenuFactory;\r\n\r\n    public postConstruct(): void {\r\n        const { enterpriseMenuFactory, filterMenuFactory } = this.beans;\r\n        this.activeMenuFactory = enterpriseMenuFactory ?? filterMenuFactory;\r\n    }\r\n\r\n    public showColumnMenu(params: ShowColumnMenuParams): void {\r\n        this.showColumnMenuCommon(this.activeMenuFactory, params, 'columnMenu');\r\n    }\r\n\r\n    public showFilterMenu(params: ShowFilterMenuParams): void {\r\n        const { enterpriseMenuFactory, filterMenuFactory } = this.beans;\r\n        const menuFactory =\r\n            enterpriseMenuFactory && _isLegacyMenuEnabled(this.gos) ? enterpriseMenuFactory : filterMenuFactory;\r\n        this.showColumnMenuCommon(menuFactory, params, params.containerType, true);\r\n    }\r\n\r\n    public showHeaderContextMenu(\r\n        column: AgColumn | AgProvidedColumnGroup | undefined,\r\n        mouseEvent?: MouseEvent,\r\n        touchEvent?: TouchEvent\r\n    ): void {\r\n        this.activeMenuFactory?.showMenuAfterContextMenuEvent(column, mouseEvent, touchEvent);\r\n    }\r\n\r\n    public hidePopupMenu(): void {\r\n        // hide the context menu if in enterprise\r\n        this.beans.contextMenuSvc?.hideActiveMenu();\r\n        // and hide the column menu always\r\n        this.activeMenuFactory?.hideActiveMenu();\r\n    }\r\n\r\n    public isColumnMenuInHeaderEnabled(column: AgColumn): boolean {\r\n        const { suppressHeaderMenuButton } = column.getColDef();\r\n        return (\r\n            !suppressHeaderMenuButton &&\r\n            !!this.activeMenuFactory?.isMenuEnabled(column) &&\r\n            (_isLegacyMenuEnabled(this.gos) || !!this.beans.enterpriseMenuFactory)\r\n        );\r\n    }\r\n\r\n    public isFilterMenuInHeaderEnabled(column: AgColumn): boolean {\r\n        return !column.getColDef().suppressHeaderFilterButton && !!this.beans.filterManager?.isFilterAllowed(column);\r\n    }\r\n\r\n    public isHeaderContextMenuEnabled(column?: AgColumn | AgProvidedColumnGroup): boolean {\r\n        const colDef = column && isColumn(column) ? column.getColDef() : column?.getColGroupDef();\r\n        return !colDef?.suppressHeaderContextMenu && this.gos.get('columnMenu') === 'new';\r\n    }\r\n\r\n    public isHeaderMenuButtonAlwaysShowEnabled(): boolean {\r\n        return this.isSuppressMenuHide();\r\n    }\r\n\r\n    public isHeaderMenuButtonEnabled(): boolean {\r\n        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/\r\n        // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok\r\n        // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide\r\n        // is false (default) user will need to use longpress to display the menu.\r\n        const menuHides = !this.isSuppressMenuHide();\r\n\r\n        const onIpadAndMenuHides = _isIOSUserAgent() && menuHides;\r\n\r\n        return !onIpadAndMenuHides;\r\n    }\r\n\r\n    public isHeaderFilterButtonEnabled(column: AgColumn): boolean {\r\n        return (\r\n            this.isFilterMenuInHeaderEnabled(column) &&\r\n            !_isLegacyMenuEnabled(this.gos) &&\r\n            !this.isFloatingFilterButtonDisplayed(column)\r\n        );\r\n    }\r\n\r\n    public isFilterMenuItemEnabled(column: AgColumn): boolean {\r\n        return (\r\n            !!this.beans.filterManager?.isFilterAllowed(column) &&\r\n            !_isLegacyMenuEnabled(this.gos) &&\r\n            !this.isFilterMenuInHeaderEnabled(column) &&\r\n            !this.isFloatingFilterButtonDisplayed(column)\r\n        );\r\n    }\r\n\r\n    public isFloatingFilterButtonEnabled(column: AgColumn): boolean {\r\n        return !column.getColDef().suppressFloatingFilterButton;\r\n    }\r\n\r\n    private isFloatingFilterButtonDisplayed(column: AgColumn): boolean {\r\n        return !!column.getColDef().floatingFilter && this.isFloatingFilterButtonEnabled(column);\r\n    }\r\n\r\n    private isSuppressMenuHide(): boolean {\r\n        const gos = this.gos;\r\n        const suppressMenuHide = gos.get('suppressMenuHide');\r\n        if (_isLegacyMenuEnabled(gos)) {\r\n            // default to false for legacy\r\n            return gos.exists('suppressMenuHide') ? suppressMenuHide : false;\r\n        }\r\n        return suppressMenuHide;\r\n    }\r\n\r\n    private showColumnMenuCommon(\r\n        menuFactory: IMenuFactory | undefined,\r\n        params: ShowColumnMenuParams,\r\n        containerType: ContainerType,\r\n        filtersOnly?: boolean\r\n    ): void {\r\n        const { positionBy } = params;\r\n        const column = params.column as AgColumn | undefined;\r\n        if (positionBy === 'button') {\r\n            const { buttonElement } = params;\r\n            menuFactory?.showMenuAfterButtonClick(column, buttonElement, containerType, filtersOnly);\r\n        } else if (positionBy === 'mouse') {\r\n            const { mouseEvent } = params;\r\n            menuFactory?.showMenuAfterMouseEvent(column, mouseEvent, containerType, filtersOnly);\r\n        } else if (column) {\r\n            const beans = this.beans;\r\n            const ctrlsSvc = beans.ctrlsSvc;\r\n            // auto\r\n            ctrlsSvc.getScrollFeature().ensureColumnVisible(column, 'auto');\r\n            // make sure we've finished scrolling into view before displaying the menu\r\n            _requestAnimationFrame(beans, () => {\r\n                const headerCellCtrl = ctrlsSvc\r\n                    .getHeaderRowContainerCtrl(column.getPinned())\r\n                    ?.getHeaderCtrlForColumn(column) as HeaderCellCtrl | undefined;\r\n\r\n                if (headerCellCtrl) {\r\n                    menuFactory?.showMenuAfterButtonClick(\r\n                        column,\r\n                        headerCellCtrl.getAnchorElementForMenu(filtersOnly),\r\n                        containerType,\r\n                        true\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function _setColMenuVisible(column: AgColumn, visible: boolean, source: ColumnEventType): void {\r\n    if (column.menuVisible !== visible) {\r\n        column.menuVisible = visible;\r\n        column.dispatchColEvent('menuVisibleChanged', source);\r\n    }\r\n}\r\n", "import type { AgGridCommon } from '../../interfaces/iCommon';\r\nimport type { IComponent } from '../../interfaces/iComponent';\r\nimport { Component } from '../../widgets/component';\r\n\r\nexport interface IOverlayParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {}\r\n\r\nexport interface IOverlay<\r\n    TData = any,\r\n    TContext = any,\r\n    TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\r\n> {\r\n    // Gets called when the `loadingOverlayComponentParams` grid option is updated\r\n    refresh?(params: TParams): void;\r\n}\r\n\r\nexport interface IOverlayComp<\r\n    TData = any,\r\n    TContext = any,\r\n    TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\r\n> extends IComponent<TParams>,\r\n        IOverlay<TData, TContext, TParams> {}\r\n\r\nexport abstract class OverlayComponent<\r\n        TData = any,\r\n        TContext = any,\r\n        TParams extends Readonly<IOverlayParams<TData, TContext>> = IOverlayParams<TData, TContext>,\r\n    >\r\n    extends Component\r\n    implements IOverlayComp<TData, TContext, TParams>\r\n{\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public abstract init(): void;\r\n}\r\n", "import { _makeNull } from '../../utils/generic';\r\nimport type { IOverlay, IOverlayComp, IOverlayParams } from './overlayComponent';\r\nimport { OverlayComponent } from './overlayComponent';\r\n\r\nexport interface ILoadingOverlayParams<TData = any, TContext = any> extends IOverlayParams<TData, TContext> {}\r\n\r\nexport interface ILoadingOverlay<TData = any, TContext = any>\r\n    extends IOverlay<TData, TContext, ILoadingOverlayParams> {}\r\n\r\nexport interface ILoadingOverlayComp<TData = any, TContext = any>\r\n    extends IOverlayComp<TData, TContext, ILoadingOverlayParams<TData, TContext>> {}\r\n\r\nexport class LoadingOverlayComponent\r\n    extends OverlayComponent<any, any, ILoadingOverlayParams>\r\n    implements ILoadingOverlayComp<any, any>\r\n{\r\n    public init(): void {\r\n        const customTemplate = _makeNull(this.gos.get('overlayLoadingTemplate')?.trim());\r\n\r\n        this.setTemplate(\r\n            customTemplate ??\r\n                /* html */ `<span aria-live=\"polite\" aria-atomic=\"true\" class=\"ag-overlay-loading-center\"></span>`\r\n        );\r\n\r\n        if (!customTemplate) {\r\n            const localeTextFunc = this.getLocaleTextFunc();\r\n            // setTimeout is used because some screen readers only announce `aria-live` text when\r\n            // there is a \"text change\", so we force a change from empty.\r\n            setTimeout(() => {\r\n                this.getGui().textContent = localeTextFunc('loadingOoo', 'Loading...');\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import { _makeNull } from '../../utils/generic';\r\nimport type { IOverlay, IOverlayComp, IOverlayParams } from './overlayComponent';\r\nimport { OverlayComponent } from './overlayComponent';\r\n\r\nexport interface INoRowsOverlayParams<TData = any, TContext = any> extends IOverlayParams<TData, TContext> {}\r\n\r\nexport interface INoRowsOverlay<TData = any, TContext = any> extends IOverlay<TData, TContext, INoRowsOverlayParams> {}\r\n\r\nexport interface INoRowsOverlayComp<TData = any, TContext = any>\r\n    extends IOverlayComp<TData, TContext, INoRowsOverlayParams<TData, TContext>> {}\r\n\r\nexport class NoRowsOverlayComponent\r\n    extends OverlayComponent<any, any, INoRowsOverlayParams>\r\n    implements INoRowsOverlayComp<any, any>\r\n{\r\n    public init(): void {\r\n        const customTemplate = _makeNull(this.gos.get('overlayNoRowsTemplate')?.trim());\r\n\r\n        this.setTemplate(customTemplate ?? /* html */ `<span class=\"ag-overlay-no-rows-center\"></span>`);\r\n\r\n        if (!customTemplate) {\r\n            const localeTextFunc = this.getLocaleTextFunc();\r\n            // setTimeout is used because some screen readers only announce `aria-live` text when\r\n            // there is a \"text change\", so we force a change from empty.\r\n            setTimeout(() => {\r\n                this.getGui().textContent = localeTextFunc('noRowsToShow', 'No Rows To Show');\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _warn } from '../validation/logging';\r\nimport { _setAriaRole } from './aria';\r\nimport { _isNodeOrElement, _loadTemplate } from './dom';\r\n\r\n//\r\n// IMPORTANT NOTE!\r\n//\r\n// If you change the list below, copy/paste the new content into the docs page custom-icons\r\n//\r\nexport type IconName =\r\n    | 'columnGroupOpened'\r\n    | 'columnGroupClosed'\r\n    | 'columnSelectClosed'\r\n    | 'columnSelectOpen'\r\n    | 'columnSelectIndeterminate'\r\n    | 'accordionClosed'\r\n    | 'accordionOpen'\r\n    | 'accordionIndeterminate'\r\n    | 'columnMovePin'\r\n    | 'columnMoveHide'\r\n    | 'columnMoveMove'\r\n    | 'columnMoveLeft'\r\n    | 'columnMoveRight'\r\n    | 'columnMoveGroup'\r\n    | 'columnMoveValue'\r\n    | 'columnMovePivot'\r\n    | 'dropNotAllowed'\r\n    | 'groupContracted'\r\n    | 'groupExpanded'\r\n    | 'setFilterGroupClosed'\r\n    | 'setFilterGroupOpen'\r\n    | 'setFilterGroupIndeterminate'\r\n    | 'chart'\r\n    | 'close'\r\n    | 'cancel'\r\n    | 'check'\r\n    | 'first'\r\n    | 'previous'\r\n    | 'next'\r\n    | 'last'\r\n    | 'linked'\r\n    | 'unlinked'\r\n    | 'colorPicker' // deprecated v33\r\n    | 'groupLoading'\r\n    | 'menu'\r\n    | 'legacyMenu'\r\n    | 'loadingMenuItems'\r\n    | 'menuAlt'\r\n    | 'filter'\r\n    | 'filterActive'\r\n    | 'filterTab'\r\n    | 'filtersToolPanel'\r\n    | 'columns'\r\n    | 'columnsToolPanel'\r\n    | 'maximize'\r\n    | 'minimize'\r\n    | 'menuPin'\r\n    | 'menuValue'\r\n    | 'menuAddRowGroup'\r\n    | 'menuRemoveRowGroup'\r\n    | 'clipboardCopy'\r\n    | 'clipboardCut'\r\n    | 'clipboardPaste'\r\n    | 'pivotPanel'\r\n    | 'rowGroupPanel'\r\n    | 'valuePanel'\r\n    | 'columnDrag'\r\n    | 'rowDrag'\r\n    | 'save'\r\n    | 'csvExport'\r\n    | 'excelExport'\r\n    | 'smallDown' // deprecated v33\r\n    | 'selectOpen'\r\n    | 'richSelectOpen'\r\n    | 'richSelectRemove'\r\n    | 'smallLeft' // deprecated v33\r\n    | 'smallRight' // deprecated v33\r\n    | 'panelDelimiter'\r\n    | 'panelDelimiterRtl'\r\n    | 'subMenuOpen'\r\n    | 'subMenuOpenRtl'\r\n    | 'smallUp' // deprecated v33\r\n    | 'sortAscending'\r\n    | 'sortDescending'\r\n    | 'sortUnSort'\r\n    | 'advancedFilterBuilder'\r\n    | 'advancedFilterBuilderDrag'\r\n    | 'advancedFilterBuilderInvalid'\r\n    | 'advancedFilterBuilderMoveUp'\r\n    | 'advancedFilterBuilderMoveDown'\r\n    | 'advancedFilterBuilderAdd'\r\n    | 'advancedFilterBuilderRemove'\r\n    | 'advancedFilterBuilderSelectOpen'\r\n    | 'chartsMenu'\r\n    | 'chartsMenuEdit'\r\n    | 'chartsMenuAdvancedSettings'\r\n    | 'chartsMenuAdd'\r\n    | 'chartsColorPicker'\r\n    | 'chartsThemePrevious'\r\n    | 'chartsThemeNext'\r\n    | 'chartsDownload'\r\n    | 'checkboxChecked' // deprecated v33\r\n    | 'checkboxIndeterminate' // deprecated v33\r\n    | 'checkboxUnchecked' // deprecated v33\r\n    | 'radioButtonOn' // deprecated v33\r\n    | 'radioButtonOff'; // deprecated v33\r\n\r\nexport type IconValue =\r\n    | 'expanded'\r\n    | 'contracted'\r\n    | 'tree-closed'\r\n    | 'tree-open'\r\n    | 'tree-indeterminate'\r\n    | 'pin'\r\n    | 'eye-slash'\r\n    | 'arrows'\r\n    | 'left'\r\n    | 'right'\r\n    | 'group'\r\n    | 'aggregation'\r\n    | 'pivot'\r\n    | 'not-allowed'\r\n    | 'chart'\r\n    | 'cross'\r\n    | 'cancel'\r\n    | 'tick'\r\n    | 'first'\r\n    | 'previous'\r\n    | 'next'\r\n    | 'last'\r\n    | 'linked'\r\n    | 'unlinked'\r\n    | 'color-picker'\r\n    | 'loading'\r\n    | 'menu'\r\n    | 'menu-alt'\r\n    | 'filter'\r\n    | 'columns'\r\n    | 'maximize'\r\n    | 'minimize'\r\n    | 'copy'\r\n    | 'cut'\r\n    | 'paste'\r\n    | 'grip'\r\n    | 'save'\r\n    | 'csv'\r\n    | 'excel'\r\n    | 'small-down'\r\n    | 'small-left'\r\n    | 'small-right'\r\n    | 'small-up'\r\n    | 'asc'\r\n    | 'desc'\r\n    | 'none'\r\n    | 'up'\r\n    | 'down'\r\n    | 'plus'\r\n    | 'minus'\r\n    | 'settings'\r\n    | 'checkbox-checked'\r\n    | 'checkbox-indeterminate'\r\n    | 'checkbox-unchecked'\r\n    | 'radio-button-on'\r\n    | 'radio-button-off'\r\n    | 'eye';\r\n\r\n/**\r\n * If icon provided, use this (either a string, or a function callback).\r\n * if not, then use the default icon from the theme.\r\n * Technically `iconName` could be any string, if using user-provided icons map.\r\n * However, in most cases we're providing a specific icon name, so better to have type-checking.\r\n */\r\nexport function _createIcon(iconName: IconName, beans: BeanCollection, column: AgColumn | null): Element {\r\n    const iconContents = _createIconNoSpan(iconName, beans, column);\r\n\r\n    if (iconContents) {\r\n        const { className } = iconContents;\r\n        if (\r\n            (typeof className === 'string' && className.indexOf('ag-icon') > -1) ||\r\n            (typeof className === 'object' && className['ag-icon'])\r\n        ) {\r\n            return iconContents;\r\n        }\r\n    }\r\n\r\n    const eResult = document.createElement('span');\r\n    eResult.appendChild(iconContents!);\r\n\r\n    return eResult;\r\n}\r\n\r\n/**\r\n * Technically `iconName` could be any string, if using user-provided icons map.\r\n * However, in most cases we're providing a specific icon name, so better to have type-checking.\r\n */\r\nexport function _createIconNoSpan(\r\n    iconName: IconName,\r\n    beans: BeanCollection,\r\n    column?: AgColumn | null\r\n): Element | undefined {\r\n    let userProvidedIcon: ((...args: any[]) => any) | string | null = null;\r\n\r\n    if (iconName === 'smallDown') {\r\n        _warn(262);\r\n    } else if (iconName === 'smallLeft') {\r\n        _warn(263);\r\n    } else if (iconName === 'smallRight') {\r\n        _warn(264);\r\n    }\r\n\r\n    // check col for icon first\r\n    const icons: any = column && column.getColDef().icons;\r\n\r\n    if (icons) {\r\n        userProvidedIcon = icons[iconName];\r\n    }\r\n\r\n    // if not in col, try grid options\r\n    if (beans.gos && !userProvidedIcon) {\r\n        const optionsIcons = beans.gos.get('icons');\r\n        if (optionsIcons) {\r\n            userProvidedIcon = optionsIcons[iconName];\r\n        }\r\n    }\r\n\r\n    // now if user provided, use it\r\n    if (userProvidedIcon) {\r\n        let rendererResult: any;\r\n\r\n        if (typeof userProvidedIcon === 'function') {\r\n            rendererResult = userProvidedIcon();\r\n        } else if (typeof userProvidedIcon === 'string') {\r\n            rendererResult = userProvidedIcon;\r\n        } else {\r\n            _warn(38, { iconName });\r\n            return undefined;\r\n        }\r\n\r\n        if (typeof rendererResult === 'string') {\r\n            return _loadTemplate(rendererResult);\r\n        }\r\n\r\n        if (_isNodeOrElement(rendererResult)) {\r\n            return rendererResult as Element;\r\n        }\r\n\r\n        _warn(133, { iconName });\r\n        return undefined;\r\n    } else {\r\n        const span = document.createElement('span');\r\n        const iconValue = beans.registry.getIcon(iconName as IconName);\r\n        if (!iconValue) {\r\n            beans.validation?.validateIcon(iconName);\r\n        }\r\n        const cssClass = iconValue ?? iconName;\r\n\r\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\r\n        span.setAttribute('unselectable', 'on');\r\n        _setAriaRole(span, 'presentation');\r\n\r\n        return span;\r\n    }\r\n}\r\n", "export const dragAndDropImageComponentCSS = /*css*/ `.ag-dnd-ghost{align-items:center;background-color:var(--ag-drag-and-drop-image-background-color);border:var(--ag-drag-and-drop-image-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-drag-and-drop-image-shadow);color:var(--ag-text-color);cursor:move;display:flex;font-weight:500;gap:var(--ag-cell-widget-spacing);height:var(--ag-header-height);overflow:hidden;padding-left:var(--ag-cell-horizontal-padding);padding-right:var(--ag-cell-horizontal-padding);text-overflow:ellipsis;transform:translateY(calc(var(--ag-spacing)*2));white-space:nowrap}`;\n", "import type { AgGridCommon } from '../interfaces/iCommon';\r\nimport type { IComponent } from '../interfaces/iComponent';\r\nimport { _clearElement } from '../utils/dom';\r\nimport type { IconName } from '../utils/icon';\r\nimport { _createIcon } from '../utils/icon';\r\nimport { _escapeString } from '../utils/string';\r\nimport { Component, RefPlaceholder } from '../widgets/component';\r\nimport { dragAndDropImageComponentCSS } from './dragAndDropImageComponent.css-GENERATED';\r\nimport type { DragAndDropIcon, DragSource } from './dragAndDropService';\r\n\r\nexport interface IDragAndDropImageParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\r\n    dragSource: DragSource;\r\n}\r\n\r\nexport interface IDragAndDropImage {\r\n    setIcon(iconName: string | null, shake: boolean): void;\r\n    setLabel(label: string): void;\r\n}\r\n\r\nexport interface IDragAndDropImageComponent<\r\n    TData = any,\r\n    TContext = any,\r\n    TParams extends Readonly<IDragAndDropImageParams<TData, TContext>> = IDragAndDropImageParams<TData, TContext>,\r\n> extends IComponent<TParams>,\r\n        IDragAndDropImage {}\r\n\r\nexport class DragAndDropImageComponent extends Component implements IDragAndDropImageComponent<any, any> {\r\n    private dragSource: DragSource | null = null;\r\n\r\n    private readonly eIcon: HTMLElement = RefPlaceholder;\r\n    private readonly eLabel: HTMLElement = RefPlaceholder;\r\n\r\n    private dropIconMap: { [key in DragAndDropIcon]: Element };\r\n\r\n    constructor() {\r\n        super();\r\n        this.registerCSS(dragAndDropImageComponentCSS);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const create = (iconName: IconName) => _createIcon(iconName, this.beans, null);\r\n        this.dropIconMap = {\r\n            pinned: create('columnMovePin'),\r\n            hide: create('columnMoveHide'),\r\n            move: create('columnMoveMove'),\r\n            left: create('columnMoveLeft'),\r\n            right: create('columnMoveRight'),\r\n            group: create('columnMoveGroup'),\r\n            aggregate: create('columnMoveValue'),\r\n            pivot: create('columnMovePivot'),\r\n            notAllowed: create('dropNotAllowed'),\r\n        };\r\n    }\r\n\r\n    public init(params: IDragAndDropImageParams): void {\r\n        this.dragSource = params.dragSource;\r\n\r\n        this.setTemplate(\r\n            /* html */\r\n            `<div class=\"ag-dnd-ghost ag-unselectable\">\r\n                <span data-ref=\"eIcon\" class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\r\n                <div data-ref=\"eLabel\" class=\"ag-dnd-ghost-label\"></div>\r\n            </div>`\r\n        );\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.dragSource = null;\r\n        super.destroy();\r\n    }\r\n\r\n    public setIcon(iconName: DragAndDropIcon | null, shake: boolean): void {\r\n        const { eIcon, dragSource, dropIconMap, gos } = this;\r\n\r\n        _clearElement(eIcon);\r\n\r\n        let eIconChild: Element | null = null;\r\n\r\n        if (!iconName) {\r\n            iconName = dragSource?.getDefaultIconName ? dragSource.getDefaultIconName() : 'notAllowed';\r\n        }\r\n        eIconChild = dropIconMap[iconName];\r\n\r\n        eIcon.classList.toggle('ag-shake-left-to-right', shake);\r\n\r\n        if (eIconChild === dropIconMap['hide'] && gos.get('suppressDragLeaveHidesColumns')) {\r\n            return;\r\n        }\r\n        if (eIconChild) {\r\n            eIcon.appendChild(eIconChild);\r\n        }\r\n    }\r\n\r\n    public setLabel(label: string): void {\r\n        this.eLabel.textContent = _escapeString(label);\r\n    }\r\n}\r\n", "export const agAbstractLabelCSS = /*css*/ `.ag-label{white-space:nowrap}:where(.ag-ltr) .ag-label{margin-right:var(--ag-spacing)}:where(.ag-rtl) .ag-label{margin-left:var(--ag-spacing)}:where(.ag-label-align-right) .ag-label{order:1}:where(.ag-ltr) :where(.ag-label-align-right) .ag-label{margin-left:var(--ag-spacing)}:where(.ag-rtl) :where(.ag-label-align-right) .ag-label{margin-right:var(--ag-spacing)}.ag-label-align-right>*{flex:none}.ag-label-align-top{align-items:flex-start;flex-direction:column;>*{align-self:stretch}}.ag-label-ellipsis{flex:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:where(.ag-label-align-top) .ag-label{margin-bottom:calc(var(--ag-spacing)*.5)}`;\n", "import type { AgLabelParams, LabelAlignment } from '../interfaces/agFieldParams';\r\nimport { _setAriaRole } from '../utils/aria';\r\nimport { _clearElement, _setDisabled, _setDisplayed, _setElementWidth } from '../utils/dom';\r\nimport { agAbstractLabelCSS } from './agAbstractLabel.css-GENERATED';\r\nimport type { ComponentEvent, ComponentSelector } from './component';\r\nimport { Component } from './component';\r\n\r\nexport type AgAbstractLabelEvent = ComponentEvent;\r\nexport abstract class AgAbstractLabel<\r\n    TConfig extends AgLabelParams = AgLabelParams,\r\n    TEventType extends string = AgAbstractLabelEvent,\r\n> extends Component<TEventType | AgAbstractLabelEvent> {\r\n    protected abstract eLabel: HTMLElement;\r\n\r\n    protected readonly config: TConfig;\r\n    protected labelSeparator: string = '';\r\n    protected labelAlignment: LabelAlignment = 'left';\r\n    protected disabled: boolean = false;\r\n    private label: HTMLElement | string = '';\r\n\r\n    constructor(config?: TConfig, template?: string, components?: ComponentSelector[]) {\r\n        super(template, components);\r\n\r\n        this.config = config || ({} as any);\r\n        this.registerCSS(agAbstractLabelCSS);\r\n    }\r\n\r\n    public postConstruct() {\r\n        this.addCssClass('ag-labeled');\r\n        this.eLabel.classList.add('ag-label');\r\n\r\n        const { labelSeparator, label, labelWidth, labelAlignment, disabled } = this.config;\r\n\r\n        if (disabled != null) {\r\n            this.setDisabled(disabled);\r\n        }\r\n\r\n        if (labelSeparator != null) {\r\n            this.setLabelSeparator(labelSeparator);\r\n        }\r\n\r\n        if (label != null) {\r\n            this.setLabel(label);\r\n        }\r\n\r\n        if (labelWidth != null) {\r\n            this.setLabelWidth(labelWidth);\r\n        }\r\n\r\n        this.setLabelAlignment(labelAlignment || this.labelAlignment);\r\n        this.refreshLabel();\r\n    }\r\n\r\n    protected refreshLabel() {\r\n        const { label, eLabel } = this;\r\n        _clearElement(eLabel);\r\n\r\n        if (typeof label === 'string') {\r\n            eLabel.innerText = label + this.labelSeparator;\r\n        } else if (label) {\r\n            eLabel.appendChild(label);\r\n        }\r\n\r\n        if (label === '') {\r\n            _setDisplayed(eLabel, false);\r\n            _setAriaRole(eLabel, 'presentation');\r\n        } else {\r\n            _setDisplayed(eLabel, true);\r\n            _setAriaRole(eLabel, null);\r\n        }\r\n    }\r\n\r\n    public setLabelSeparator(labelSeparator: string): this {\r\n        if (this.labelSeparator === labelSeparator) {\r\n            return this;\r\n        }\r\n\r\n        this.labelSeparator = labelSeparator;\r\n\r\n        if (this.label != null) {\r\n            this.refreshLabel();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public getLabelId(): string {\r\n        const eLabel = this.eLabel;\r\n        eLabel.id = eLabel.id || `ag-${this.getCompId()}-label`;\r\n\r\n        return eLabel.id;\r\n    }\r\n\r\n    public getLabel(): HTMLElement | string {\r\n        return this.label;\r\n    }\r\n\r\n    public setLabel(label: HTMLElement | string): this {\r\n        if (this.label === label) {\r\n            return this;\r\n        }\r\n\r\n        this.label = label;\r\n\r\n        this.refreshLabel();\r\n\r\n        return this;\r\n    }\r\n\r\n    public setLabelAlignment(alignment: LabelAlignment): this {\r\n        const eGui = this.getGui();\r\n        const eGuiClassList = eGui.classList;\r\n\r\n        eGuiClassList.toggle('ag-label-align-left', alignment === 'left');\r\n        eGuiClassList.toggle('ag-label-align-right', alignment === 'right');\r\n        eGuiClassList.toggle('ag-label-align-top', alignment === 'top');\r\n\r\n        return this;\r\n    }\r\n\r\n    public setLabelEllipsis(hasEllipsis: boolean): this {\r\n        this.eLabel.classList.toggle('ag-label-ellipsis', hasEllipsis);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setLabelWidth(width: number | 'flex'): this {\r\n        if (this.label == null) {\r\n            return this;\r\n        }\r\n\r\n        _setElementWidth(this.eLabel, width);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setDisabled(disabled: boolean): this {\r\n        disabled = !!disabled;\r\n\r\n        const element = this.getGui();\r\n\r\n        _setDisabled(element, disabled);\r\n        element.classList.toggle('ag-disabled', disabled);\r\n\r\n        this.disabled = disabled;\r\n\r\n        return this;\r\n    }\r\n\r\n    public isDisabled(): boolean {\r\n        return !!this.disabled;\r\n    }\r\n}\r\n", "import type { AgFieldParams } from '../interfaces/agFieldParams';\r\nimport { _getAriaLabel, _setAriaLabel, _setAriaLabelledBy } from '../utils/aria';\r\nimport { _setFixedWidth } from '../utils/dom';\r\nimport { AgAbstractLabel } from './agAbstractLabel';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport type FieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\nexport type AgAbstractFieldEvent = 'fieldValueChanged';\r\n\r\nexport abstract class AgAbstractField<\r\n    TValue,\r\n    TConfig extends AgFieldParams = AgFieldParams,\r\n    TEventType extends string = AgAbstractFieldEvent,\r\n> extends AgAbstractLabel<TConfig, TEventType | AgAbstractFieldEvent> {\r\n    protected previousValue: TValue | null | undefined;\r\n    protected value: TValue | null | undefined;\r\n\r\n    constructor(\r\n        config?: TConfig,\r\n        template?: string,\r\n        components?: ComponentSelector[],\r\n        protected readonly className?: string\r\n    ) {\r\n        super(config, template, components);\r\n    }\r\n\r\n    public override postConstruct(): void {\r\n        super.postConstruct();\r\n\r\n        const { width, value, onValueChange } = this.config;\r\n        if (width != null) {\r\n            this.setWidth(width);\r\n        }\r\n        if (value != null) {\r\n            this.setValue(value);\r\n        }\r\n        if (onValueChange != null) {\r\n            this.onValueChange(onValueChange);\r\n        }\r\n\r\n        if (this.className) {\r\n            this.addCssClass(this.className);\r\n        }\r\n\r\n        this.refreshAriaLabelledBy();\r\n    }\r\n\r\n    public override setLabel(label: string | HTMLElement): this {\r\n        super.setLabel(label);\r\n        this.refreshAriaLabelledBy();\r\n\r\n        return this;\r\n    }\r\n\r\n    protected refreshAriaLabelledBy() {\r\n        const ariaEl = this.getAriaElement();\r\n        const labelId = this.getLabelId();\r\n        const label = this.getLabel();\r\n\r\n        if (label == null || label == '' || _getAriaLabel(ariaEl) !== null) {\r\n            _setAriaLabelledBy(ariaEl, '');\r\n        } else {\r\n            _setAriaLabelledBy(ariaEl, labelId ?? '');\r\n        }\r\n    }\r\n\r\n    public setAriaLabel(label?: string | null): this {\r\n        _setAriaLabel(this.getAriaElement(), label);\r\n        this.refreshAriaLabelledBy();\r\n\r\n        return this;\r\n    }\r\n\r\n    public onValueChange(callbackFn: (newValue?: TValue | null) => void) {\r\n        this.addManagedListeners<AgAbstractFieldEvent>(this, { fieldValueChanged: () => callbackFn(this.getValue()) });\r\n\r\n        return this;\r\n    }\r\n\r\n    public getWidth(): number {\r\n        return this.getGui().clientWidth;\r\n    }\r\n\r\n    public setWidth(width: number): this {\r\n        _setFixedWidth(this.getGui(), width);\r\n\r\n        return this;\r\n    }\r\n\r\n    public getPreviousValue(): TValue | null | undefined {\r\n        return this.previousValue;\r\n    }\r\n\r\n    public getValue(): TValue | null | undefined {\r\n        return this.value;\r\n    }\r\n\r\n    public setValue(value?: TValue | null, silent?: boolean): this {\r\n        if (this.value === value) {\r\n            return this;\r\n        }\r\n\r\n        this.previousValue = this.value;\r\n        this.value = value;\r\n\r\n        if (!silent) {\r\n            this.dispatchLocalEvent({ type: 'fieldValueChanged' });\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\r\nimport { _setAriaLabel } from '../utils/aria';\r\nimport { _addOrRemoveAttribute, _setDisabled, _setElementWidth } from '../utils/dom';\r\nimport type { AgAbstractFieldEvent, FieldElement } from './agAbstractField';\r\nimport { AgAbstractField } from './agAbstractField';\r\nimport { RefPlaceholder } from './component';\r\n\r\nexport type AgAbstractInputFieldEvent = AgAbstractFieldEvent;\r\nexport abstract class AgAbstractInputField<\r\n    TElement extends FieldElement,\r\n    TValue,\r\n    TConfig extends AgInputFieldParams = AgInputFieldParams,\r\n    TEventType extends string = AgAbstractInputFieldEvent,\r\n> extends AgAbstractField<TValue, TConfig, AgAbstractInputFieldEvent | TEventType> {\r\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\r\n    protected readonly eWrapper: HTMLElement = RefPlaceholder;\r\n    protected readonly eInput: TElement = RefPlaceholder;\r\n\r\n    constructor(\r\n        config?: TConfig,\r\n        className?: string,\r\n        private readonly inputType: string | null = 'text',\r\n        private readonly displayFieldTag = 'input'\r\n    ) {\r\n        super(\r\n            config,\r\n            config?.template ??\r\n                /* html */ `\r\n            <div role=\"presentation\">\r\n                <div data-ref=\"eLabel\" class=\"ag-input-field-label\"></div>\r\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\r\n                    <${displayFieldTag} data-ref=\"eInput\" class=\"ag-input-field-input\"></${displayFieldTag}>\r\n                </div>\r\n            </div>`,\r\n            [],\r\n            className\r\n        );\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n        this.setInputType();\r\n\r\n        const { eLabel, eWrapper, eInput, className } = this;\r\n        eLabel.classList.add(`${className}-label`);\r\n        eWrapper.classList.add(`${className}-input-wrapper`);\r\n        eInput.classList.add(`${className}-input`);\r\n        this.addCssClass('ag-input-field');\r\n\r\n        eInput.id = eInput.id || `ag-${this.getCompId()}-input`;\r\n\r\n        const { inputName, inputWidth } = this.config;\r\n        if (inputName != null) {\r\n            this.setInputName(inputName);\r\n        }\r\n        if (inputWidth != null) {\r\n            this.setInputWidth(inputWidth);\r\n        }\r\n\r\n        this.addInputListeners();\r\n        this.activateTabIndex([eInput]);\r\n    }\r\n\r\n    protected addInputListeners() {\r\n        this.addManagedElementListeners(this.eInput, { input: (e: any) => this.setValue(e.target.value) });\r\n    }\r\n\r\n    private setInputType() {\r\n        if (this.displayFieldTag === 'input') {\r\n            this.eInput.setAttribute('type', this.inputType!);\r\n        }\r\n    }\r\n\r\n    public getInputElement(): TElement {\r\n        return this.eInput;\r\n    }\r\n\r\n    public setInputWidth(width: number | 'flex'): this {\r\n        _setElementWidth(this.eWrapper, width);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setInputName(name: string): this {\r\n        this.getInputElement().setAttribute('name', name);\r\n\r\n        return this;\r\n    }\r\n\r\n    public override getFocusableElement(): HTMLElement {\r\n        return this.eInput;\r\n    }\r\n\r\n    public setMaxLength(length: number): this {\r\n        const eInput = this.eInput as HTMLInputElement | HTMLTextAreaElement;\r\n        eInput.maxLength = length;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setInputPlaceholder(placeholder?: string | null): this {\r\n        _addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setInputAriaLabel(label?: string | null): this {\r\n        _setAriaLabel(this.eInput, label);\r\n        this.refreshAriaLabelledBy();\r\n\r\n        return this;\r\n    }\r\n\r\n    public override setDisabled(disabled: boolean): this {\r\n        _setDisabled(this.eInput, disabled);\r\n\r\n        return super.setDisabled(disabled);\r\n    }\r\n\r\n    public setAutoComplete(value: boolean | string) {\r\n        if (value === true) {\r\n            // Remove the autocomplete attribute if the value is explicitly set to true\r\n            // to allow the default browser autocomplete/autofill behaviour.\r\n            _addOrRemoveAttribute(this.eInput, 'autocomplete', null);\r\n        } else {\r\n            // When a string is provided, use it as the value of the autocomplete attribute.\r\n            // This enables users to specify how they want to the browser to handle the autocomplete on the input, as per spec:\r\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\r\n            const autoCompleteValue = typeof value === 'string' ? value : 'off';\r\n            _addOrRemoveAttribute(this.eInput, 'autocomplete', autoCompleteValue);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n", "import type { AgCheckboxParams, LabelAlignment } from '../interfaces/agFieldParams';\r\nimport { AgAbstractInputField } from './agAbstractInputField';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport class AgCheckbox<TConfig extends AgCheckboxParams = AgCheckboxParams> extends AgAbstractInputField<\r\n    HTMLInputElement,\r\n    boolean,\r\n    TConfig\r\n> {\r\n    protected override labelAlignment: LabelAlignment = 'right';\r\n\r\n    private selected?: boolean = false;\r\n    private readOnly = false;\r\n    private passive = false;\r\n\r\n    constructor(config?: TConfig, className = 'ag-checkbox', inputType = 'checkbox') {\r\n        super(config, className, inputType);\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n\r\n        const { readOnly, passive } = this.config;\r\n        if (typeof readOnly === 'boolean') this.setReadOnly(readOnly);\r\n        if (typeof passive === 'boolean') this.setPassive(passive);\r\n    }\r\n\r\n    protected override addInputListeners() {\r\n        this.addManagedElementListeners(this.eInput, { click: this.onCheckboxClick.bind(this) });\r\n        this.addManagedElementListeners(this.eLabel, { click: this.toggle.bind(this) });\r\n    }\r\n\r\n    public getNextValue(): boolean {\r\n        return this.selected === undefined ? true : !this.selected;\r\n    }\r\n\r\n    public setPassive(passive: boolean): void {\r\n        this.passive = passive;\r\n    }\r\n\r\n    public isReadOnly(): boolean {\r\n        return this.readOnly;\r\n    }\r\n\r\n    public setReadOnly(readOnly: boolean): void {\r\n        this.eWrapper.classList.toggle('ag-disabled', readOnly);\r\n        this.eInput.disabled = readOnly;\r\n        this.readOnly = readOnly;\r\n    }\r\n\r\n    public override setDisabled(disabled: boolean): this {\r\n        this.eWrapper.classList.toggle('ag-disabled', disabled);\r\n\r\n        return super.setDisabled(disabled);\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (this.eInput.disabled) {\r\n            return;\r\n        }\r\n\r\n        const previousValue = this.isSelected();\r\n        const nextValue = this.getNextValue();\r\n\r\n        if (this.passive) {\r\n            this.dispatchChange(nextValue, previousValue);\r\n        } else {\r\n            this.setValue(nextValue);\r\n        }\r\n    }\r\n\r\n    public override getValue(): boolean | undefined {\r\n        return this.isSelected();\r\n    }\r\n\r\n    public override setValue(value?: boolean, silent?: boolean): this {\r\n        this.refreshSelectedClass(value);\r\n        this.setSelected(value, silent);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setName(name: string): this {\r\n        const input = this.getInputElement();\r\n        input.name = name;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected isSelected(): boolean | undefined {\r\n        return this.selected;\r\n    }\r\n\r\n    private setSelected(selected?: boolean, silent?: boolean): void {\r\n        if (this.isSelected() === selected) {\r\n            return;\r\n        }\r\n\r\n        this.previousValue = this.isSelected();\r\n\r\n        selected = this.selected = typeof selected === 'boolean' ? selected : undefined;\r\n        const eInput = this.eInput;\r\n        eInput.checked = selected!;\r\n        eInput.indeterminate = selected === undefined;\r\n\r\n        if (!silent) {\r\n            this.dispatchChange(this.selected, this.previousValue);\r\n        }\r\n    }\r\n\r\n    private dispatchChange(selected: boolean | undefined, previousValue: boolean | undefined, event?: MouseEvent) {\r\n        this.dispatchLocalEvent({ type: 'fieldValueChanged', selected, previousValue, event });\r\n\r\n        const input = this.getInputElement();\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'checkboxChanged',\r\n            id: input.id,\r\n            name: input.name,\r\n            selected,\r\n            previousValue,\r\n        });\r\n    }\r\n\r\n    private onCheckboxClick(e: MouseEvent) {\r\n        if (this.passive || this.eInput.disabled) {\r\n            return;\r\n        }\r\n        const previousValue = this.isSelected();\r\n        const selected = (this.selected = (e.target as HTMLInputElement).checked);\r\n        this.refreshSelectedClass(selected);\r\n        this.dispatchChange(selected, previousValue, e);\r\n    }\r\n\r\n    private refreshSelectedClass(value?: boolean | null) {\r\n        const classList = this.eWrapper.classList;\r\n        classList.toggle('ag-checked', value === true);\r\n        classList.toggle('ag-indeterminate', value == null);\r\n    }\r\n}\r\n\r\nexport const AgCheckboxSelector: ComponentSelector = {\r\n    selector: 'AG-CHECKBOX',\r\n    component: AgCheckbox,\r\n};\r\n", "export const checkboxCellRendererCSS = /*css*/ `.ag-checkbox-cell{height:100%}`;\n", "import { GROUP_AUTO_COLUMN_ID } from '../../columns/columnUtils';\r\nimport { KeyCode } from '../../constants/keyCode';\r\nimport { _getActiveDomElement } from '../../gridOptionsUtils';\r\nimport { _getAriaCheckboxStateName, _setAriaLive } from '../../utils/aria';\r\nimport { _stopPropagationForAgGrid } from '../../utils/event';\r\nimport type { AgCheckbox } from '../../widgets/agCheckbox';\r\nimport { AgCheckboxSelector } from '../../widgets/agCheckbox';\r\nimport { Component, RefPlaceholder } from '../../widgets/component';\r\nimport { checkboxCellRendererCSS } from './checkboxCellRenderer.css-GENERATED';\r\nimport type { ICellRenderer, ICellRendererParams } from './iCellRenderer';\r\n\r\nexport interface ICheckboxCellRendererParams<TData = any, TContext = any>\r\n    extends ICellRendererParams<TData, boolean, TContext> {\r\n    /** Set to `true` for the input to be disabled. */\r\n    disabled?: boolean;\r\n}\r\n\r\nexport class CheckboxCellRenderer extends Component implements ICellRenderer {\r\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\r\n    private params: ICheckboxCellRendererParams;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html*/ `\r\n            <div class=\"ag-cell-wrapper ag-checkbox-cell\" role=\"presentation\">\r\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\r\n            </div>`,\r\n            [AgCheckboxSelector]\r\n        );\r\n        this.registerCSS(checkboxCellRendererCSS);\r\n    }\r\n\r\n    public init(params: ICheckboxCellRendererParams): void {\r\n        this.refresh(params);\r\n        const { eCheckbox, beans } = this;\r\n        const inputEl = eCheckbox.getInputElement();\r\n        inputEl.setAttribute('tabindex', '-1');\r\n        _setAriaLive(inputEl, 'polite');\r\n\r\n        this.addManagedListeners(inputEl, {\r\n            click: (event: Event) => {\r\n                _stopPropagationForAgGrid(event);\r\n\r\n                if (eCheckbox.isDisabled()) {\r\n                    return;\r\n                }\r\n\r\n                const isSelected = eCheckbox.getValue();\r\n\r\n                this.onCheckboxChanged(isSelected);\r\n            },\r\n            dblclick: (event: Event) => {\r\n                _stopPropagationForAgGrid(event);\r\n            },\r\n        });\r\n\r\n        this.addManagedElementListeners(params.eGridCell, {\r\n            keydown: (event: KeyboardEvent) => {\r\n                if (event.key === KeyCode.SPACE && !eCheckbox.isDisabled()) {\r\n                    if (params.eGridCell === _getActiveDomElement(beans)) {\r\n                        eCheckbox.toggle();\r\n                    }\r\n                    const isSelected = eCheckbox.getValue();\r\n                    this.onCheckboxChanged(isSelected);\r\n                    event.preventDefault();\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    public refresh(params: ICheckboxCellRendererParams): boolean {\r\n        this.params = params;\r\n        this.updateCheckbox(params);\r\n        return true;\r\n    }\r\n\r\n    private updateCheckbox(params: ICheckboxCellRendererParams): void {\r\n        let isSelected: boolean | undefined;\r\n        let displayed = true;\r\n        const { value, column, node } = params;\r\n        if (node.group && column) {\r\n            if (typeof value === 'boolean') {\r\n                isSelected = value;\r\n            } else {\r\n                const colId = column.getColId();\r\n                if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {\r\n                    // if we're grouping by this column then the value is a string and we need to parse it\r\n                    isSelected = value == null || (value as any) === '' ? undefined : (value as any) === 'true';\r\n                } else if (node.aggData && node.aggData[colId] !== undefined) {\r\n                    isSelected = value ?? undefined;\r\n                } else {\r\n                    displayed = false;\r\n                }\r\n            }\r\n        } else {\r\n            isSelected = value ?? undefined;\r\n        }\r\n        const { eCheckbox } = this;\r\n        if (!displayed) {\r\n            eCheckbox.setDisplayed(false);\r\n            return;\r\n        }\r\n        eCheckbox.setValue(isSelected);\r\n        const disabled = params.disabled ?? !column?.isCellEditable(node);\r\n        eCheckbox.setDisabled(disabled);\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n        const stateName = _getAriaCheckboxStateName(translate, isSelected);\r\n        const ariaLabel = disabled\r\n            ? stateName\r\n            : `${translate('ariaToggleCellValue', 'Press SPACE to toggle cell value')} (${stateName})`;\r\n        eCheckbox.setInputAriaLabel(ariaLabel);\r\n    }\r\n\r\n    private onCheckboxChanged(isSelected?: boolean): void {\r\n        const { eventSvc, params } = this;\r\n        const { column, node, value } = params;\r\n        const sharedEventParams = {\r\n            column: column!,\r\n            colDef: column!.getColDef(),\r\n            data: node.data,\r\n            node,\r\n            rowIndex: node.rowIndex,\r\n            rowPinned: node.rowPinned,\r\n            value,\r\n        };\r\n        eventSvc.dispatchEvent({\r\n            type: 'cellEditingStarted',\r\n            ...sharedEventParams,\r\n        });\r\n\r\n        const valueChanged = node.setDataValue(column!, isSelected, 'edit');\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'cellEditingStopped',\r\n            ...sharedEventParams,\r\n            oldValue: value,\r\n            newValue: isSelected,\r\n            valueChanged,\r\n        });\r\n\r\n        if (!valueChanged) {\r\n            // need to reset to original\r\n            this.updateCheckbox(params);\r\n        }\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { GetRowIdFunc } from '../entities/gridOptions';\r\nimport { RowNode } from '../entities/rowNode';\r\nimport { _getRowIdCallback } from '../gridOptionsUtils';\r\nimport type {\r\n    ClientSideNodeManagerUpdateRowDataResult,\r\n    IClientSideNodeManager,\r\n} from '../interfaces/iClientSideNodeManager';\r\nimport type { IChangedRowNodes, RefreshModelParams } from '../interfaces/iClientSideRowModel';\r\nimport type { RowDataTransaction } from '../interfaces/rowDataTransaction';\r\nimport { _exists } from '../utils/generic';\r\nimport { _error, _warn } from '../validation/logging';\r\n\r\nconst ROOT_NODE_ID = 'ROOT_NODE_ID';\r\n\r\n/**\r\n * This is the type of any row in allLeafChildren and childrenAfterGroup of the ClientSideNodeManager rootNode.\r\n * ClientSideNodeManager is allowed to update the sourceRowIndex property of the nodes.\r\n */\r\ninterface ClientSideNodeManagerRowNode<TData> extends RowNode<TData> {\r\n    sourceRowIndex: number;\r\n}\r\n\r\n/**\r\n * This is the type of the root RowNode of the ClientSideNodeManager\r\n * ClientSideNodeManager is allowed to update the allLeafChildren and childrenAfterGroup properties of the root node.\r\n */\r\ninterface ClientSideNodeManagerRootNode<TData> extends RowNode<TData> {\r\n    sibling: ClientSideNodeManagerRootNode<TData>;\r\n    allLeafChildren: ClientSideNodeManagerRowNode<TData>[] | null;\r\n    childrenAfterGroup: ClientSideNodeManagerRowNode<TData>[] | null;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace AbstractClientSideNodeManager {\r\n    export type RowNode<TData> = ClientSideNodeManagerRowNode<TData>;\r\n    export type RootNode<TData> = ClientSideNodeManagerRootNode<TData>;\r\n}\r\n\r\nexport abstract class AbstractClientSideNodeManager<TData = any>\r\n    extends BeanStub\r\n    implements IClientSideNodeManager<TData>\r\n{\r\n    private nextId = 0;\r\n    protected allNodesMap: { [id: string]: RowNode<TData> } = {};\r\n\r\n    public rootNode: AbstractClientSideNodeManager.RootNode<TData> | null = null;\r\n\r\n    public get treeData(): boolean {\r\n        return false; // not supported by this node manager\r\n    }\r\n\r\n    public getRowNode(id: string): RowNode | undefined {\r\n        return this.allNodesMap[id];\r\n    }\r\n\r\n    public extractRowData(): TData[] | null | undefined {\r\n        return this.rootNode?.allLeafChildren?.map((node) => node.data!);\r\n    }\r\n\r\n    public activate(rootNode: ClientSideNodeManagerRootNode<TData>): void {\r\n        this.rootNode = rootNode;\r\n\r\n        rootNode.group = true;\r\n        rootNode.level = -1;\r\n        rootNode.id = ROOT_NODE_ID;\r\n        rootNode.allLeafChildren = [];\r\n        rootNode.childrenAfterGroup = [];\r\n        rootNode.childrenAfterSort = [];\r\n        rootNode.childrenAfterAggFilter = [];\r\n        rootNode.childrenAfterFilter = [];\r\n\r\n        this.updateRootSiblingArrays(rootNode);\r\n    }\r\n\r\n    public deactivate(): void {\r\n        if (this.rootNode) {\r\n            this.allNodesMap = {};\r\n            this.rootNode = null!;\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        // Forcefully deallocate memory\r\n        this.allNodesMap = {};\r\n        this.rootNode = null;\r\n    }\r\n\r\n    public setNewRowData(rowData: TData[]): void {\r\n        const rootNode = this.rootNode;\r\n        if (!rootNode) {\r\n            return;\r\n        }\r\n\r\n        this.dispatchRowDataUpdateStartedEvent(rowData);\r\n\r\n        rootNode.childrenAfterFilter = null;\r\n        rootNode.childrenAfterGroup = null;\r\n        rootNode.childrenAfterAggFilter = null;\r\n        rootNode.childrenAfterSort = null;\r\n        rootNode.childrenMapped = null;\r\n        rootNode.updateHasChildren();\r\n\r\n        // Clear internal maps\r\n\r\n        this.allNodesMap = {};\r\n        this.nextId = 0;\r\n\r\n        this.loadNewRowData(rowData);\r\n\r\n        this.updateRootSiblingArrays(rootNode);\r\n    }\r\n\r\n    private updateRootSiblingArrays(rootNode: AbstractClientSideNodeManager.RootNode<TData>): void {\r\n        const sibling = rootNode.sibling;\r\n        if (sibling) {\r\n            sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\r\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\r\n            sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\r\n            sibling.childrenAfterSort = rootNode.childrenAfterSort;\r\n            sibling.childrenMapped = rootNode.childrenMapped;\r\n            sibling.allLeafChildren = rootNode.allLeafChildren;\r\n        }\r\n    }\r\n\r\n    protected loadNewRowData(rowData: TData[]): void {\r\n        this.rootNode!.allLeafChildren = rowData?.map((dataItem, index) => this.createRowNode(dataItem, index)) ?? [];\r\n    }\r\n\r\n    public setImmutableRowData(params: RefreshModelParams<TData>, rowData: TData[]): void {\r\n        // convert the setRowData data into a transaction object by working out adds, removes and updates\r\n\r\n        const rowDataTransaction = this.createTransactionForRowData(rowData);\r\n\r\n        // Apply the transaction\r\n        const result = this.updateRowData(rowDataTransaction, params.changedRowNodes!);\r\n\r\n        let rowsOrderChanged = false;\r\n        // If true, we will not apply the new order specified in the rowData, but keep the old order.\r\n        if (!this.gos.get('suppressMaintainUnsortedOrder')) {\r\n            // we need to reorder the nodes to match the new data order\r\n            rowsOrderChanged = this.updateRowOrderFromRowData(rowData);\r\n        }\r\n\r\n        const { rowNodeTransaction, rowsInserted } = result;\r\n        const { add, remove, update } = rowNodeTransaction;\r\n        if (rowsInserted || rowsOrderChanged || add.length || remove.length || update.length) {\r\n            params.step = 'group';\r\n            params.rowDataUpdated = true;\r\n            params.rowNodeTransactions = [rowNodeTransaction];\r\n            params.rowNodesOrderChanged = rowsInserted || rowsOrderChanged;\r\n        }\r\n    }\r\n\r\n    public updateRowData(\r\n        rowDataTran: RowDataTransaction<TData>,\r\n        changedRowNodes: IChangedRowNodes<TData>\r\n    ): ClientSideNodeManagerUpdateRowDataResult<TData> {\r\n        this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\r\n\r\n        const updateRowDataResult: ClientSideNodeManagerUpdateRowDataResult<TData> = {\r\n            changedRowNodes,\r\n            rowNodeTransaction: { remove: [], update: [], add: [] },\r\n            rowsInserted: false,\r\n        };\r\n\r\n        const nodesToUnselect: RowNode[] = [];\r\n\r\n        const getRowIdFunc = _getRowIdCallback(this.gos);\r\n        this.executeRemove(getRowIdFunc, rowDataTran, updateRowDataResult, nodesToUnselect);\r\n        this.executeUpdate(getRowIdFunc, rowDataTran, updateRowDataResult, nodesToUnselect);\r\n        this.executeAdd(rowDataTran, updateRowDataResult);\r\n\r\n        this.deselectNodes(nodesToUnselect);\r\n\r\n        return updateRowDataResult;\r\n    }\r\n\r\n    /** Converts the setRowData() command to a transaction */\r\n    private createTransactionForRowData(rowData: TData[]): RowDataTransaction<TData> {\r\n        const getRowIdFunc = _getRowIdCallback(this.gos)!;\r\n\r\n        // get a map of the existing data, that we are going to modify as we find rows to not delete\r\n        const existingNodesMap: { [id: string]: RowNode | undefined } = { ...this.allNodesMap };\r\n\r\n        const remove: TData[] = [];\r\n        const update: TData[] = [];\r\n        const add: TData[] = [];\r\n\r\n        if (_exists(rowData)) {\r\n            // split all the new data in the following:\r\n            // if new, push to 'add'\r\n            // if update, push to 'update'\r\n            // if not changed, do not include in the transaction\r\n            rowData.forEach((data: TData) => {\r\n                const id = getRowIdFunc({ data, level: 0 });\r\n                const existingNode = existingNodesMap[id];\r\n\r\n                if (existingNode) {\r\n                    const dataHasChanged = existingNode.data !== data;\r\n                    if (dataHasChanged) {\r\n                        update.push(data);\r\n                    }\r\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\r\n\r\n                    existingNodesMap[id] = undefined; // remove from list, so we know the item is not to be removed\r\n                } else {\r\n                    add.push(data);\r\n                }\r\n            });\r\n        }\r\n\r\n        // at this point, all rows that are left, should be removed\r\n        for (const rowNode of Object.values(existingNodesMap)) {\r\n            if (rowNode) {\r\n                remove.push(rowNode.data);\r\n            }\r\n        }\r\n\r\n        return { remove, update, add };\r\n    }\r\n\r\n    /**\r\n     * Used by setImmutableRowData, after updateRowData, after updating with a generated transaction to\r\n     * apply the order as specified by the the new data. We use sourceRowIndex to determine the order of the rows.\r\n     * Time complexity is O(n) where n is the number of rows/rowData\r\n     * @returns true if the order changed, otherwise false\r\n     */\r\n    private updateRowOrderFromRowData(rowData: TData[]): boolean {\r\n        const rows = this.rootNode?.allLeafChildren;\r\n        const rowsLength = rows?.length ?? 0;\r\n        const rowsOutOfOrder = new Map<TData, AbstractClientSideNodeManager.RowNode<TData>>();\r\n        let firstIndexOutOfOrder = -1;\r\n        let lastIndexOutOfOrder = -1;\r\n\r\n        // Step 1: Build the rowsOutOfOrder mapping data => row for the rows out of order, in O(n)\r\n        for (let i = 0; i < rowsLength; ++i) {\r\n            const row = rows![i];\r\n            const data = row.data;\r\n            if (data !== rowData[i]) {\r\n                // The row is not in the correct position\r\n                if (lastIndexOutOfOrder < 0) {\r\n                    firstIndexOutOfOrder = i; // First row out of order was found\r\n                }\r\n                lastIndexOutOfOrder = i; // Last row out of order\r\n                rowsOutOfOrder.set(data!, row); // A new row out of order was found, add it to the map\r\n            }\r\n        }\r\n        if (firstIndexOutOfOrder < 0) {\r\n            return false; // No rows out of order\r\n        }\r\n\r\n        // Step 2: Overwrite the rows out of order we find in the map, in O(n)\r\n        for (let i = firstIndexOutOfOrder; i <= lastIndexOutOfOrder; ++i) {\r\n            const row = rowsOutOfOrder.get(rowData[i]);\r\n            if (row !== undefined) {\r\n                rows![i] = row; // Out of order row found, overwrite it\r\n                row.sourceRowIndex = i; // Update its position\r\n            }\r\n        }\r\n        return true; // The order changed\r\n    }\r\n\r\n    protected executeAdd(\r\n        rowDataTran: RowDataTransaction,\r\n        result: ClientSideNodeManagerUpdateRowDataResult<TData>\r\n    ): void {\r\n        const add = rowDataTran.add;\r\n        if (!add?.length) {\r\n            return;\r\n        }\r\n\r\n        let allLeafChildren = this.rootNode!.allLeafChildren!;\r\n        let addIndex = allLeafChildren.length;\r\n\r\n        if (typeof rowDataTran.addIndex === 'number') {\r\n            addIndex = this.sanitizeAddIndex(rowDataTran.addIndex);\r\n\r\n            if (addIndex > 0) {\r\n                // TODO: this code should not be here, see AG-12602\r\n                // This was a fix for AG-6231, but is not the correct fix\r\n                // We enable it only for trees that use getDataPath and not the new children field\r\n                const getDataPath = this.gos.get('treeData') && this.gos.get('getDataPath');\r\n                if (getDataPath) {\r\n                    for (let i = 0; i < allLeafChildren.length; i++) {\r\n                        const node = allLeafChildren[i];\r\n                        if (node?.rowIndex == addIndex - 1) {\r\n                            addIndex = i + 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const addLength = add.length;\r\n\r\n        const changedRowNodes = result.changedRowNodes;\r\n        // create new row nodes for each data item\r\n        const newNodes = new Array(addLength);\r\n        for (let i = 0; i < addLength; i++) {\r\n            const newNode = this.createRowNode(add[i], addIndex + i);\r\n            changedRowNodes.add(newNode);\r\n            newNodes[i] = newNode;\r\n        }\r\n\r\n        const rootNode = this.rootNode!;\r\n\r\n        if (addIndex < allLeafChildren.length) {\r\n            // Insert at the specified index\r\n\r\n            const nodesBeforeIndex = allLeafChildren.slice(0, addIndex);\r\n            const nodesAfterIndex = allLeafChildren.slice(addIndex, allLeafChildren.length);\r\n\r\n            // update latter row indexes\r\n            const nodesAfterIndexFirstIndex = nodesBeforeIndex.length + newNodes.length;\r\n            for (let index = 0, length = nodesAfterIndex.length; index < length; ++index) {\r\n                nodesAfterIndex[index].sourceRowIndex = nodesAfterIndexFirstIndex + index;\r\n            }\r\n\r\n            allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\r\n\r\n            // Mark the result as rows inserted\r\n            result.rowsInserted = true;\r\n        } else {\r\n            // Just append at the end\r\n            allLeafChildren = allLeafChildren.concat(newNodes);\r\n        }\r\n\r\n        rootNode.allLeafChildren = allLeafChildren;\r\n        const sibling = rootNode.sibling;\r\n        if (sibling) {\r\n            sibling.allLeafChildren = allLeafChildren;\r\n        }\r\n\r\n        // add new row nodes to the transaction add items\r\n        result.rowNodeTransaction.add = newNodes;\r\n    }\r\n\r\n    protected executeRemove(\r\n        getRowIdFunc: GetRowIdFunc<TData> | undefined,\r\n        rowDataTran: RowDataTransaction,\r\n        { changedRowNodes, rowNodeTransaction }: ClientSideNodeManagerUpdateRowDataResult<TData>,\r\n        nodesToUnselect: RowNode<TData>[]\r\n    ): void {\r\n        const { remove } = rowDataTran;\r\n\r\n        if (!remove?.length) {\r\n            return;\r\n        }\r\n\r\n        const rowIdsRemoved: { [key: string]: boolean } = {};\r\n\r\n        remove.forEach((item) => {\r\n            const rowNode = this.lookupRowNode(getRowIdFunc, item);\r\n\r\n            if (!rowNode) {\r\n                return;\r\n            }\r\n\r\n            if (rowNode.isSelected()) {\r\n                nodesToUnselect.push(rowNode);\r\n            }\r\n\r\n            // so row renderer knows to fade row out (and not reposition it)\r\n            rowNode.clearRowTopAndRowIndex();\r\n\r\n            // NOTE: were we could remove from allLeaveChildren, however removeFromArray() is expensive, especially\r\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\r\n            rowIdsRemoved[rowNode.id!] = true;\r\n            // removeFromArray(this.rootNode.allLeafChildren, rowNode);\r\n            delete this.allNodesMap[rowNode.id!];\r\n\r\n            rowNodeTransaction.remove.push(rowNode);\r\n            changedRowNodes.remove(rowNode);\r\n        });\r\n\r\n        const rootNode = this.rootNode!;\r\n\r\n        rootNode.allLeafChildren = rootNode.allLeafChildren?.filter((rowNode) => !rowIdsRemoved[rowNode.id!]) ?? null;\r\n\r\n        // after rows have been removed, all following rows need the position index updated\r\n        rootNode.allLeafChildren?.forEach((node, idx) => {\r\n            node.sourceRowIndex = idx;\r\n        });\r\n\r\n        const sibling = rootNode.sibling;\r\n        if (sibling) {\r\n            sibling.allLeafChildren = rootNode.allLeafChildren;\r\n        }\r\n    }\r\n\r\n    protected executeUpdate(\r\n        getRowIdFunc: GetRowIdFunc<TData> | undefined,\r\n        rowDataTran: RowDataTransaction,\r\n        { changedRowNodes, rowNodeTransaction }: ClientSideNodeManagerUpdateRowDataResult<TData>,\r\n        nodesToUnselect: RowNode<TData>[]\r\n    ): void {\r\n        const { update } = rowDataTran;\r\n        if (!update?.length) {\r\n            return;\r\n        }\r\n\r\n        update.forEach((item) => {\r\n            const rowNode = this.lookupRowNode(getRowIdFunc, item);\r\n\r\n            if (!rowNode) {\r\n                return;\r\n            }\r\n\r\n            rowNode.updateData(item);\r\n            if (!rowNode.selectable && rowNode.isSelected()) {\r\n                nodesToUnselect.push(rowNode);\r\n            }\r\n\r\n            rowNodeTransaction.update.push(rowNode);\r\n            changedRowNodes.update(rowNode);\r\n        });\r\n    }\r\n\r\n    protected dispatchRowDataUpdateStartedEvent(rowData?: TData[] | null): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'rowDataUpdateStarted',\r\n            firstRowData: rowData?.length ? rowData[0] : null,\r\n        });\r\n    }\r\n\r\n    protected deselectNodes(nodesToUnselect: RowNode<TData>[]): void {\r\n        const source = 'rowDataChanged';\r\n        const selectionSvc = this.beans.selectionSvc;\r\n        const selectionChanged = nodesToUnselect.length > 0;\r\n        if (selectionChanged) {\r\n            selectionSvc?.setNodesSelected({\r\n                newValue: false,\r\n                nodes: nodesToUnselect,\r\n                suppressFinishActions: true,\r\n                source,\r\n            });\r\n        }\r\n\r\n        // we do this regardless of nodes to unselect or not, as it's possible\r\n        // a new node was inserted, so a parent that was previously selected (as all\r\n        // children were selected) should not be tri-state (as new one unselected against\r\n        // all other selected children).\r\n        selectionSvc?.updateGroupsFromChildrenSelections?.(source);\r\n\r\n        if (selectionChanged) {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'selectionChanged',\r\n                source: source,\r\n            });\r\n        }\r\n    }\r\n\r\n    private sanitizeAddIndex(addIndex: number): number {\r\n        const allChildrenCount = this.rootNode!.allLeafChildren?.length ?? 0;\r\n        if (addIndex < 0 || addIndex >= allChildrenCount || Number.isNaN(addIndex)) {\r\n            return allChildrenCount; // Append. Also for negative values, as it was historically the behavior.\r\n        }\r\n\r\n        // Ensure index is a whole number and not a floating point.\r\n        // Use case: the user want to add a row in the middle, doing addIndex = array.length / 2.\r\n        // If the array has an odd number of elements, the addIndex need to be rounded up.\r\n        // Consider that array.slice does round up internally, but we are setting this value to node.sourceRowIndex.\r\n        return Math.ceil(addIndex);\r\n    }\r\n\r\n    protected createRowNode(data: TData, sourceRowIndex: number): RowNode<TData> {\r\n        const node: ClientSideNodeManagerRowNode<TData> = new RowNode<TData>(this.beans);\r\n        node.parent = this.rootNode;\r\n        node.level = 0;\r\n        node.group = false;\r\n        node.expanded = false;\r\n        node.sourceRowIndex = sourceRowIndex;\r\n\r\n        node.setDataAndId(data, String(this.nextId));\r\n\r\n        if (this.allNodesMap[node.id!]) {\r\n            _warn(2, { nodeId: node.id });\r\n        }\r\n        this.allNodesMap[node.id!] = node;\r\n\r\n        this.nextId++;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected lookupRowNode(getRowIdFunc: ((data: any) => string) | undefined, data: TData): RowNode<TData> | null {\r\n        let rowNode: RowNode | undefined;\r\n        if (getRowIdFunc) {\r\n            // find rowNode using id\r\n            const id = getRowIdFunc({ data, level: 0 });\r\n            rowNode = this.allNodesMap[id];\r\n            if (!rowNode) {\r\n                _error(4, { id });\r\n                return null;\r\n            }\r\n        } else {\r\n            // find rowNode using object references\r\n            rowNode = this.rootNode?.allLeafChildren?.find((node) => node.data === data);\r\n            if (!rowNode) {\r\n                _error(5, { data });\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return rowNode || null;\r\n    }\r\n}\r\n", "import type { IRowNode } from './iRowNode';\r\n\r\nexport interface ServerSideTransaction<TData = any> {\r\n    /**\r\n     * The Row Store to apply the transaction to, ie what group level.\r\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\r\n     * Passing in blank to empty applies the transaction to the top level.\r\n     */\r\n    route?: string[];\r\n    /** Index position to add at. If missing, rows will be added to the end. */\r\n    addIndex?: number;\r\n    /** Rows to add */\r\n    add?: TData[];\r\n    /** Rows to remove */\r\n    remove?: TData[];\r\n    /** Rows to update */\r\n    update?: TData[];\r\n}\r\n\r\nexport interface ServerSideTransactionResult<TData = any> {\r\n    /** The status of applying the transaction. */\r\n    status: ServerSideTransactionResultStatus;\r\n    /** If rows were added, the newly created Row Nodes for those rows. */\r\n    add?: IRowNode<TData>[];\r\n    /** If rows were removed, the deleted Row Nodes. */\r\n    remove?: IRowNode<TData>[];\r\n    /** If rows were updated, the updated Row Nodes. */\r\n    update?: IRowNode<TData>[];\r\n}\r\n\r\nexport enum ServerSideTransactionResultStatus {\r\n    /** Transaction was successfully applied */\r\n    Applied = 'Applied',\r\n    /**\r\n     * Store was not found, transaction not applied.\r\n     * Either invalid route, or the parent row has not yet been expanded.\r\n     */\r\n    StoreNotFound = 'StoreNotFound',\r\n    /**\r\n     * Store is loading, transaction not applied.\r\n     */\r\n    StoreLoading = 'StoreLoading',\r\n    /**\r\n     * Store is loading (as max loads exceeded), transaction not applied.\r\n     */\r\n    StoreWaitingToLoad = 'StoreWaitingToLoad',\r\n    /**\r\n     * Store load attempt failed, transaction not applied.\r\n     */\r\n    StoreLoadingFailed = 'StoreLoadingFailed',\r\n    /**\r\n     * Store is type Partial, which doesn't accept transactions\r\n     */\r\n    StoreWrongType = 'StoreWrongType',\r\n    /**\r\n     * Transaction was cancelled, due to grid.\r\n     * Callback isApplyServerSideTransaction() returning false\r\n     */\r\n    Cancelled = 'Cancelled',\r\n    /**\r\n     * Store has not started yet, transaction not applied\r\n     */\r\n    StoreNotStarted = 'StoreNotStarted',\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { CheckboxSelectionCallback } from '../entities/colDef';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _getCheckboxes, _getHideDisabledCheckboxes, _getIsRowSelectable } from '../gridOptionsUtils';\r\nimport type { GroupCheckboxSelectionCallback } from '../interfaces/groupCellRenderer';\r\nimport { _getAriaCheckboxStateName } from '../utils/aria';\r\nimport { _stopPropagationForAgGrid } from '../utils/event';\r\nimport type { AgCheckbox } from '../widgets/agCheckbox';\r\nimport { AgCheckboxSelector } from '../widgets/agCheckbox';\r\nimport { Component, RefPlaceholder } from '../widgets/component';\r\n\r\nexport class CheckboxSelectionComponent extends Component {\r\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\r\n\r\n    private rowNode: RowNode;\r\n    private column: AgColumn | undefined;\r\n    private overrides?: {\r\n        isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined;\r\n        callbackParams: any;\r\n        removeHidden: boolean;\r\n    };\r\n\r\n    constructor() {\r\n        super(\r\n            /* html*/ `\r\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\r\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\r\n            </div>`,\r\n            [AgCheckboxSelector]\r\n        );\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.eCheckbox.setPassive(true);\r\n    }\r\n\r\n    public getCheckboxId(): string {\r\n        return this.eCheckbox.getInputElement().id;\r\n    }\r\n\r\n    private onDataChanged(): void {\r\n        // when rows are loaded for the second time, this can impact the selection, as a row\r\n        // could be loaded as already selected (if user scrolls down, and then up again).\r\n        this.onSelectionChanged();\r\n    }\r\n\r\n    private onSelectableChanged(): void {\r\n        this.showOrHideSelect();\r\n    }\r\n\r\n    private onSelectionChanged(): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const { rowNode, eCheckbox } = this;\r\n        const state = rowNode.isSelected();\r\n        const stateName = _getAriaCheckboxStateName(translate, state);\r\n        const [ariaKey, ariaLabel] = rowNode.selectable\r\n            ? ['ariaRowToggleSelection', 'Press Space to toggle row selection']\r\n            : ['ariaRowSelectionDisabled', 'Row Selection is disabled for this row'];\r\n        const translatedLabel = translate(ariaKey, ariaLabel);\r\n\r\n        eCheckbox.setValue(state, true);\r\n        eCheckbox.setInputAriaLabel(`${translatedLabel} (${stateName})`);\r\n    }\r\n\r\n    public init(params: {\r\n        rowNode: RowNode;\r\n        column?: AgColumn;\r\n        overrides?: {\r\n            isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined;\r\n            callbackParams: any;\r\n            removeHidden: boolean;\r\n        };\r\n    }): void {\r\n        this.rowNode = params.rowNode;\r\n        this.column = params.column;\r\n        this.overrides = params.overrides;\r\n\r\n        this.onSelectionChanged();\r\n\r\n        this.addManagedListeners(this.eCheckbox.getInputElement(), {\r\n            // we don't want double click on this icon to open a group\r\n            dblclick: _stopPropagationForAgGrid,\r\n            click: (event: MouseEvent) => {\r\n                // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\r\n                // would possibly get selected twice\r\n                _stopPropagationForAgGrid(event);\r\n\r\n                this.beans.selectionSvc?.handleSelectionEvent(event, this.rowNode, 'checkboxSelected');\r\n            },\r\n        });\r\n\r\n        this.addManagedListeners(this.rowNode, {\r\n            rowSelected: this.onSelectionChanged.bind(this),\r\n            dataChanged: this.onDataChanged.bind(this),\r\n            selectableChanged: this.onSelectableChanged.bind(this),\r\n        });\r\n\r\n        this.addManagedPropertyListener('rowSelection', ({ currentValue, previousValue }) => {\r\n            const curr = typeof currentValue === 'object' ? _getHideDisabledCheckboxes(currentValue) : undefined;\r\n            const prev = typeof previousValue === 'object' ? _getHideDisabledCheckboxes(previousValue) : undefined;\r\n            if (curr !== prev) {\r\n                this.onSelectableChanged();\r\n            }\r\n        });\r\n\r\n        const isRowSelectableFunc = _getIsRowSelectable(this.gos);\r\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === 'function';\r\n\r\n        if (checkboxVisibleIsDynamic) {\r\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\r\n            this.addManagedEventListeners({ displayedColumnsChanged: showOrHideSelectListener });\r\n\r\n            this.addManagedListeners(this.rowNode, {\r\n                dataChanged: showOrHideSelectListener,\r\n                cellChanged: showOrHideSelectListener,\r\n            });\r\n\r\n            this.showOrHideSelect();\r\n        }\r\n\r\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\r\n    }\r\n\r\n    private showOrHideSelect(): void {\r\n        const { column, rowNode, overrides, gos } = this;\r\n        // if the isRowSelectable() is not provided the row node is selectable by default\r\n        let selectable = rowNode.selectable;\r\n\r\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\r\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\r\n        // to call the colDef callback.\r\n        const isVisible = this.getIsVisible();\r\n        if (selectable) {\r\n            if (typeof isVisible === 'function') {\r\n                const extraParams = overrides?.callbackParams;\r\n\r\n                if (!column) {\r\n                    // full width row\r\n                    selectable = isVisible({ ...extraParams, node: rowNode, data: rowNode.data });\r\n                } else {\r\n                    const params = column.createColumnFunctionCallbackParams(rowNode);\r\n                    selectable = isVisible({ ...extraParams, ...params });\r\n                }\r\n            } else {\r\n                selectable = isVisible ?? false;\r\n            }\r\n        }\r\n\r\n        const so = gos.get('rowSelection');\r\n        const disableInsteadOfHide =\r\n            so && typeof so !== 'string' ? !_getHideDisabledCheckboxes(so) : column?.getColDef().showDisabledCheckboxes;\r\n        if (disableInsteadOfHide) {\r\n            this.eCheckbox.setDisabled(!selectable);\r\n            this.setVisible(true);\r\n            this.setDisplayed(true);\r\n            return;\r\n        }\r\n\r\n        if (overrides?.removeHidden) {\r\n            this.setDisplayed(selectable);\r\n            return;\r\n        }\r\n\r\n        this.setVisible(selectable);\r\n    }\r\n\r\n    private getIsVisible(): boolean | CheckboxSelectionCallback<any> | undefined {\r\n        const overrides = this.overrides;\r\n        if (overrides) {\r\n            return overrides.isVisible;\r\n        }\r\n\r\n        const so = this.gos.get('rowSelection');\r\n        if (so && typeof so !== 'string') {\r\n            return _getCheckboxes(so);\r\n        }\r\n\r\n        // column will be missing if groupDisplayType = 'groupRows'\r\n        return this.column?.getColDef()?.checkboxSelection;\r\n    }\r\n}\r\n", "import type { RowNode } from '../entities/rowNode';\r\nimport type { IRowModel } from '../interfaces/iRowModel';\r\n\r\ninterface RangePartition {\r\n    keep: readonly RowNode[];\r\n    discard: readonly RowNode[];\r\n}\r\n\r\n/**\r\n * The context of a row range selection operation.\r\n *\r\n * Used to model the stateful range selection behaviour found in Excel, where\r\n * a given cell/row represents the \"root\" of a selection range, and subsequent\r\n * selections are based off that root.\r\n *\r\n * See AG-9620 for more\r\n */\r\nexport class RowRangeSelectionContext {\r\n    private rootId: string | null = null;\r\n    /**\r\n     * Note that the \"end\" `RowNode` may come before or after the \"root\" `RowNode` in the\r\n     * actual grid.\r\n     */\r\n    private endId: string | null = null;\r\n    private rowModel: IRowModel;\r\n    private cachedRange: RowNode[] = [];\r\n\r\n    constructor(rowModel: IRowModel) {\r\n        this.rowModel = rowModel;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.rootId = null;\r\n        this.endId = null;\r\n        this.cachedRange.length = 0;\r\n    }\r\n\r\n    public setRoot(node: RowNode): void {\r\n        this.rootId = node.id!;\r\n        this.endId = null;\r\n        this.cachedRange.length = 0;\r\n    }\r\n\r\n    public setEndRange(end: RowNode): void {\r\n        this.endId = end.id!;\r\n        this.cachedRange.length = 0;\r\n    }\r\n\r\n    public getRange(): readonly RowNode[] {\r\n        if (this.cachedRange.length === 0) {\r\n            const root = this.getRoot();\r\n            const end = this.getEnd();\r\n\r\n            if (root == null || end == null) {\r\n                return this.cachedRange;\r\n            }\r\n\r\n            this.cachedRange = this.rowModel.getNodesInRangeForSelection(root, end) ?? [];\r\n        }\r\n\r\n        return this.cachedRange;\r\n    }\r\n\r\n    public isInRange(node: RowNode): boolean {\r\n        if (this.rootId === null) {\r\n            return false;\r\n        }\r\n\r\n        return this.getRange().some((nodeInRange) => nodeInRange.id === node.id);\r\n    }\r\n\r\n    public getRoot(): RowNode | null {\r\n        if (this.rootId) {\r\n            return this.rowModel.getRowNode(this.rootId) ?? null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getEnd(): RowNode | null {\r\n        if (this.endId) {\r\n            return this.rowModel.getRowNode(this.endId) ?? null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Truncates the range to the given node (assumed to be within the current range).\r\n     * Returns nodes that remain in the current range and those that should be removed\r\n     *\r\n     * @param node - Node at which to truncate the range\r\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\r\n     */\r\n    public truncate(node: RowNode): RangePartition {\r\n        const range = this.getRange();\r\n\r\n        if (range.length === 0) {\r\n            return { keep: [], discard: [] };\r\n        }\r\n\r\n        // if root is first, then selection range goes \"down\" the table\r\n        // so we should be unselecting the range _after_ the given `node`\r\n        const discardAfter = range[0].id === this.rootId;\r\n\r\n        const idx = range.findIndex((rowNode) => rowNode.id === node.id);\r\n        if (idx > -1) {\r\n            const above = range.slice(0, idx);\r\n            const below = range.slice(idx + 1);\r\n            this.setEndRange(node);\r\n            return discardAfter ? { keep: above, discard: below } : { keep: below, discard: above };\r\n        } else {\r\n            return { keep: range, discard: [] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extends the range to the given node. Returns nodes that remain in the current range\r\n     * and those that should be removed.\r\n     *\r\n     * @param node - Node marking the new end of the range\r\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\r\n     */\r\n    public extend(node: RowNode, groupSelectsChildren = false): RangePartition {\r\n        const root = this.getRoot();\r\n\r\n        // If the root node is null, we cannot iterate from the root to the given `node`.\r\n        // So we keep the existing selection, plus the given `node`, plus any leaf children.\r\n        if (root == null) {\r\n            const keep = this.getRange().slice();\r\n            if (groupSelectsChildren) {\r\n                node.depthFirstSearch((node) => !node.group && keep.push(node));\r\n            }\r\n            keep.push(node);\r\n\r\n            // We now have a node we can use as the root of the selection\r\n            this.setRoot(node);\r\n\r\n            return { keep, discard: [] };\r\n        }\r\n\r\n        const newRange = this.rowModel.getNodesInRangeForSelection(root, node);\r\n        if (!newRange) {\r\n            this.setRoot(node);\r\n            return { keep: [node], discard: [] };\r\n        }\r\n\r\n        if (newRange.find((newRangeNode) => newRangeNode.id === this.endId)) {\r\n            // Range between root and given node contains the current \"end\"\r\n            // so this is an extension of the current range direction\r\n            this.setEndRange(node);\r\n            return { keep: this.getRange(), discard: [] };\r\n        } else {\r\n            // otherwise, this is an inversion\r\n            const discard = this.getRange().slice();\r\n            this.setEndRange(node);\r\n            return { keep: this.getRange(), discard };\r\n        }\r\n    }\r\n}\r\n", "import { isColumnGroupAutoCol, isColumnSelectionCol } from '../columns/columnUtils';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { SelectAllMode } from '../entities/gridOptions';\r\nimport type { SelectionEventSourceType } from '../events';\r\nimport {\r\n    _getActiveDomElement,\r\n    _getCheckboxLocation,\r\n    _getHeaderCheckbox,\r\n    _getSelectAll,\r\n    _isClientSideRowModel,\r\n    _isMultiRowSelection,\r\n    _isServerSideRowModel,\r\n} from '../gridOptionsUtils';\r\nimport type { HeaderCellCtrl } from '../headerRendering/cells/column/headerCellCtrl';\r\nimport { _setAriaRole } from '../utils/aria';\r\nimport { _warn } from '../validation/logging';\r\nimport { AgCheckbox } from '../widgets/agCheckbox';\r\n\r\nexport class SelectAllFeature extends BeanStub {\r\n    private cbSelectAllVisible = false;\r\n    private processingEventFromCheckbox = false;\r\n    private headerCellCtrl: HeaderCellCtrl;\r\n\r\n    private cbSelectAll: AgCheckbox;\r\n\r\n    constructor(private readonly column: AgColumn) {\r\n        super();\r\n    }\r\n\r\n    public onSpaceKeyDown(e: KeyboardEvent): void {\r\n        const checkbox = this.cbSelectAll;\r\n\r\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(_getActiveDomElement(this.beans))) {\r\n            e.preventDefault();\r\n            checkbox.setValue(!checkbox.getValue());\r\n        }\r\n    }\r\n\r\n    public getCheckboxGui(): HTMLElement {\r\n        return this.cbSelectAll.getGui();\r\n    }\r\n\r\n    public setComp(ctrl: HeaderCellCtrl): void {\r\n        this.headerCellCtrl = ctrl;\r\n        const cbSelectAll = this.createManagedBean(new AgCheckbox());\r\n        this.cbSelectAll = cbSelectAll;\r\n        cbSelectAll.addCssClass('ag-header-select-all');\r\n        _setAriaRole(cbSelectAll.getGui(), 'presentation');\r\n        this.showOrHideSelectAll();\r\n\r\n        this.addManagedEventListeners({\r\n            newColumnsLoaded: this.showOrHideSelectAll.bind(this),\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            selectionChanged: this.onSelectionChanged.bind(this),\r\n            paginationChanged: this.onSelectionChanged.bind(this),\r\n            modelUpdated: this.onModelChanged.bind(this),\r\n        });\r\n\r\n        this.addManagedListeners(cbSelectAll, { fieldValueChanged: this.onCbSelectAll.bind(this) });\r\n        cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\r\n        this.refreshSelectAllLabel();\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(): void {\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n        this.showOrHideSelectAll();\r\n    }\r\n\r\n    private showOrHideSelectAll(): void {\r\n        const cbSelectAllVisible = this.isCheckboxSelection();\r\n        this.cbSelectAllVisible = cbSelectAllVisible;\r\n        this.cbSelectAll.setDisplayed(cbSelectAllVisible);\r\n        if (cbSelectAllVisible) {\r\n            // in case user is trying this feature with the wrong model type\r\n            this.checkRightRowModelType('selectAllCheckbox');\r\n            // in case user is trying this feature with the wrong model type\r\n            this.checkSelectionType('selectAllCheckbox');\r\n            // make sure checkbox is showing the right state\r\n            this.updateStateOfCheckbox();\r\n        }\r\n        this.refreshSelectAllLabel();\r\n    }\r\n\r\n    private onModelChanged(): void {\r\n        if (!this.cbSelectAllVisible) {\r\n            return;\r\n        }\r\n        this.updateStateOfCheckbox();\r\n    }\r\n\r\n    private onSelectionChanged(): void {\r\n        if (!this.cbSelectAllVisible) {\r\n            return;\r\n        }\r\n        this.updateStateOfCheckbox();\r\n    }\r\n\r\n    private updateStateOfCheckbox(): void {\r\n        if (this.processingEventFromCheckbox) {\r\n            return;\r\n        }\r\n\r\n        this.processingEventFromCheckbox = true;\r\n\r\n        const selectAllMode = this.getSelectAllMode();\r\n\r\n        const selectionSvc = this.beans.selectionSvc!;\r\n        const cbSelectAll = this.cbSelectAll;\r\n\r\n        const allSelected = selectionSvc.getSelectAllState(selectAllMode);\r\n        cbSelectAll.setValue(allSelected!);\r\n\r\n        const hasNodesToSelect = selectionSvc.hasNodesToSelect(selectAllMode);\r\n        cbSelectAll.setDisabled(!hasNodesToSelect);\r\n\r\n        this.refreshSelectAllLabel();\r\n\r\n        this.processingEventFromCheckbox = false;\r\n    }\r\n\r\n    private refreshSelectAllLabel(): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const { headerCellCtrl, cbSelectAll, cbSelectAllVisible } = this;\r\n        const checked = cbSelectAll.getValue();\r\n        const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\r\n        const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\r\n\r\n        headerCellCtrl.setAriaDescriptionProperty(\r\n            'selectAll',\r\n            cbSelectAllVisible ? `${ariaLabel} (${ariaStatus})` : null\r\n        );\r\n\r\n        cbSelectAll.setInputAriaLabel(translate('ariaHeaderSelection', 'Column with Header Selection'));\r\n        headerCellCtrl.announceAriaDescription();\r\n    }\r\n\r\n    private checkSelectionType(feature: string): boolean {\r\n        const isMultiSelect = _isMultiRowSelection(this.gos);\r\n\r\n        if (!isMultiSelect) {\r\n            _warn(128, { feature });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private checkRightRowModelType(feature: string): boolean {\r\n        const { gos, rowModel } = this.beans;\r\n        const rowModelMatches = _isClientSideRowModel(gos) || _isServerSideRowModel(gos);\r\n\r\n        if (!rowModelMatches) {\r\n            _warn(129, { feature, rowModel: rowModel.getType() });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private onCbSelectAll(): void {\r\n        if (this.processingEventFromCheckbox) {\r\n            return;\r\n        }\r\n        if (!this.cbSelectAllVisible) {\r\n            return;\r\n        }\r\n\r\n        const value = this.cbSelectAll.getValue();\r\n        const selectAll = this.getSelectAllMode();\r\n\r\n        let source: SelectionEventSourceType = 'uiSelectAll';\r\n        if (selectAll === 'currentPage') {\r\n            source = 'uiSelectAllCurrentPage';\r\n        } else if (selectAll === 'filtered') {\r\n            source = 'uiSelectAllFiltered';\r\n        }\r\n\r\n        const params = { source, selectAll };\r\n        const selectionSvc = this.beans.selectionSvc!;\r\n        if (value) {\r\n            selectionSvc.selectAllRowNodes(params);\r\n        } else {\r\n            selectionSvc.deselectAllRowNodes(params);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checkbox is enabled when either the `headerCheckbox` option is enabled in the new selection API\r\n     * or `headerCheckboxSelection` is enabled in the legacy API.\r\n     */\r\n    private isCheckboxSelection(): boolean {\r\n        const { column, gos, beans } = this;\r\n        const rowSelection = gos.get('rowSelection');\r\n        const colDef = column.getColDef();\r\n        const { headerCheckboxSelection } = colDef;\r\n\r\n        let result = false;\r\n        const newHeaderCheckbox = typeof rowSelection === 'object';\r\n        if (newHeaderCheckbox) {\r\n            // new selection config\r\n            const isSelectionCol = isColumnSelectionCol(column);\r\n            const isAutoCol = isColumnGroupAutoCol(column);\r\n            // default to displaying header checkbox in the selection column\r\n            const location = _getCheckboxLocation(rowSelection);\r\n            if (\r\n                (location === 'autoGroupColumn' && isAutoCol) ||\r\n                (isSelectionCol && beans.selectionColSvc?.isSelectionColumnEnabled())\r\n            ) {\r\n                result = _getHeaderCheckbox(rowSelection);\r\n            }\r\n        } else {\r\n            // legacy selection config\r\n            if (typeof headerCheckboxSelection === 'function') {\r\n                result = headerCheckboxSelection(gos.addGridCommonParams({ column, colDef }));\r\n            } else {\r\n                result = !!headerCheckboxSelection;\r\n            }\r\n        }\r\n\r\n        const featureName = newHeaderCheckbox ? 'headerCheckbox' : 'headerCheckboxSelection';\r\n\r\n        return result && this.checkRightRowModelType(featureName) && this.checkSelectionType(featureName);\r\n    }\r\n\r\n    private getSelectAllMode(): SelectAllMode {\r\n        const selectAll = _getSelectAll(this.gos, false);\r\n        if (selectAll) {\r\n            return selectAll;\r\n        }\r\n        const { headerCheckboxSelectionCurrentPageOnly, headerCheckboxSelectionFilteredOnly } = this.column.getColDef();\r\n        if (headerCheckboxSelectionCurrentPageOnly) {\r\n            return 'currentPage';\r\n        }\r\n        if (headerCheckboxSelectionFilteredOnly) {\r\n            return 'filtered';\r\n        }\r\n        return 'all';\r\n    }\r\n}\r\n", "import { isColumnSelectionCol } from '../columns/columnUtils';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { IsRowSelectable } from '../entities/gridOptions';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _createGlobalRowEvent } from '../entities/rowNodeUtils';\r\nimport type { SelectionEventSourceType } from '../events';\r\nimport {\r\n    _getActiveDomElement,\r\n    _getCheckboxes,\r\n    _getEnableDeselection,\r\n    _getEnableSelection,\r\n    _getEnableSelectionWithoutKeys,\r\n    _getGroupSelection,\r\n    _getGroupSelectsDescendants,\r\n    _getIsRowSelectable,\r\n    _isClientSideRowModel,\r\n    _isMultiRowSelection,\r\n    _isRowSelection,\r\n} from '../gridOptionsUtils';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport type { ISetNodesSelectedParams } from '../interfaces/iSelectionService';\r\nimport type { RowCtrl, RowGui } from '../rendering/row/rowCtrl';\r\nimport { _setAriaSelected } from '../utils/aria';\r\nimport type { ChangedPath } from '../utils/changedPath';\r\nimport { CheckboxSelectionComponent } from './checkboxSelectionComponent';\r\nimport { RowRangeSelectionContext } from './rowRangeSelectionContext';\r\nimport { SelectAllFeature } from './selectAllFeature';\r\n\r\nexport abstract class BaseSelectionService extends BeanStub {\r\n    protected isRowSelectable?: IsRowSelectable;\r\n    protected selectionCtx: RowRangeSelectionContext;\r\n\r\n    public postConstruct(): void {\r\n        const { gos, beans } = this;\r\n        this.selectionCtx = new RowRangeSelectionContext(beans.rowModel);\r\n\r\n        this.addManagedPropertyListeners(['isRowSelectable', 'rowSelection'], () => {\r\n            const callback = _getIsRowSelectable(gos);\r\n            if (callback !== this.isRowSelectable) {\r\n                this.isRowSelectable = callback;\r\n                this.updateSelectable();\r\n            }\r\n        });\r\n\r\n        this.isRowSelectable = _getIsRowSelectable(gos);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        this.selectionCtx.reset();\r\n    }\r\n\r\n    public createCheckboxSelectionComponent(): CheckboxSelectionComponent {\r\n        return new CheckboxSelectionComponent();\r\n    }\r\n\r\n    public createSelectAllFeature(column: AgColumn): SelectAllFeature {\r\n        return new SelectAllFeature(column);\r\n    }\r\n\r\n    protected isMultiSelect(): boolean {\r\n        return _isMultiRowSelection(this.gos);\r\n    }\r\n\r\n    public onRowCtrlSelected(rowCtrl: RowCtrl, hasFocusFunc: (gui: RowGui) => void, gui?: RowGui): void {\r\n        // Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly\r\n        // setting the required value\r\n        const selected = !!rowCtrl.rowNode.isSelected();\r\n        rowCtrl.forEachGui(gui, (gui) => {\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-selected', selected);\r\n            const element = gui.element;\r\n            _setAriaSelected(element, selected);\r\n\r\n            const hasFocus = element.contains(_getActiveDomElement(this.beans));\r\n            if (hasFocus) {\r\n                hasFocusFunc(gui);\r\n            }\r\n        });\r\n    }\r\n\r\n    public announceAriaRowSelection(rowNode: RowNode): void {\r\n        if (this.isRowSelectionBlocked(rowNode)) {\r\n            return;\r\n        }\r\n\r\n        const selected = rowNode.isSelected()!;\r\n        if (selected && !_getEnableDeselection(this.gos)) {\r\n            return;\r\n        }\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n        const label = translate(\r\n            selected ? 'ariaRowDeselect' : 'ariaRowSelect',\r\n            `Press SPACE to ${selected ? 'deselect' : 'select'} this row`\r\n        );\r\n\r\n        this.beans.ariaAnnounce?.announceValue(label, 'rowSelection');\r\n    }\r\n\r\n    protected dispatchSelectionChanged(source: SelectionEventSourceType): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'selectionChanged',\r\n            source,\r\n        });\r\n    }\r\n\r\n    public updateGroupsFromChildrenSelections?(source: SelectionEventSourceType, changedPath?: ChangedPath): boolean;\r\n\r\n    public abstract setNodesSelected(params: ISetNodesSelectedParams): number;\r\n\r\n    protected abstract updateSelectable(changedPath?: ChangedPath): void;\r\n\r\n    protected isRowSelectionBlocked(rowNode: RowNode): boolean {\r\n        return !rowNode.selectable || !!rowNode.rowPinned || !_isRowSelection(this.gos);\r\n    }\r\n\r\n    public updateRowSelectable(rowNode: RowNode, suppressSelectionUpdate?: boolean): boolean {\r\n        const selectable = this.isRowSelectable?.(rowNode) ?? true;\r\n        this.setRowSelectable(rowNode, selectable, suppressSelectionUpdate);\r\n        return selectable;\r\n    }\r\n\r\n    protected setRowSelectable(rowNode: RowNode, newVal: boolean, suppressSelectionUpdate?: boolean): void {\r\n        if (rowNode.selectable !== newVal) {\r\n            rowNode.selectable = newVal;\r\n            rowNode.dispatchRowEvent('selectableChanged');\r\n\r\n            if (suppressSelectionUpdate) {\r\n                return;\r\n            }\r\n\r\n            const isGroupSelectsChildren = _getGroupSelectsDescendants(this.gos);\r\n            if (isGroupSelectsChildren) {\r\n                const selected = this.calculateSelectedFromChildren(rowNode);\r\n                this.setNodesSelected({ nodes: [rowNode], newValue: selected ?? false, source: 'selectableChanged' });\r\n                return;\r\n            }\r\n\r\n            // if row is selected but shouldn't be selectable, then deselect.\r\n            if (rowNode.isSelected() && !rowNode.selectable) {\r\n                this.setNodesSelected({ nodes: [rowNode], newValue: false, source: 'selectableChanged' });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected calculateSelectedFromChildren(rowNode: RowNode): boolean | undefined | null {\r\n        let atLeastOneSelected = false;\r\n        let atLeastOneDeSelected = false;\r\n\r\n        if (!rowNode.childrenAfterGroup?.length) {\r\n            return rowNode.selectable ? rowNode.__selected : null;\r\n        }\r\n\r\n        for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\r\n            const child = rowNode.childrenAfterGroup[i];\r\n\r\n            let childState = child.isSelected();\r\n            // non-selectable nodes must be calculated from their children, or ignored if no value results.\r\n            if (!child.selectable) {\r\n                const selectable = this.calculateSelectedFromChildren(child);\r\n                if (selectable === null) {\r\n                    continue;\r\n                }\r\n                childState = selectable;\r\n            }\r\n\r\n            switch (childState) {\r\n                case true:\r\n                    atLeastOneSelected = true;\r\n                    break;\r\n                case false:\r\n                    atLeastOneDeSelected = true;\r\n                    break;\r\n                default:\r\n                    return undefined;\r\n            }\r\n        }\r\n\r\n        if (atLeastOneSelected && atLeastOneDeSelected) {\r\n            return undefined;\r\n        }\r\n\r\n        if (atLeastOneSelected) {\r\n            return true;\r\n        }\r\n\r\n        if (atLeastOneDeSelected) {\r\n            return false;\r\n        }\r\n\r\n        if (!rowNode.selectable) {\r\n            return null;\r\n        }\r\n\r\n        return rowNode.__selected;\r\n    }\r\n\r\n    public selectRowNode(\r\n        rowNode: RowNode,\r\n        newValue?: boolean,\r\n        e?: Event,\r\n        source: SelectionEventSourceType = 'api'\r\n    ): boolean {\r\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\r\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\r\n        const selectionNotAllowed = !rowNode.selectable && newValue;\r\n        const selectionNotChanged = rowNode.__selected === newValue;\r\n\r\n        if (selectionNotAllowed || selectionNotChanged) {\r\n            return false;\r\n        }\r\n\r\n        rowNode.__selected = newValue;\r\n\r\n        rowNode.dispatchRowEvent('rowSelected');\r\n\r\n        // in case of root node, sibling may have service while this row may not\r\n        const sibling = rowNode.sibling;\r\n        if (sibling && sibling.footer && sibling.__localEventService) {\r\n            sibling.dispatchRowEvent('rowSelected');\r\n        }\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            ..._createGlobalRowEvent(rowNode, this.gos, 'rowSelected'),\r\n            event: e || null,\r\n            source,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    public isCellCheckboxSelection(column: AgColumn, rowNode: IRowNode): boolean {\r\n        const so = this.gos.get('rowSelection');\r\n\r\n        if (so && typeof so !== 'string') {\r\n            const checkbox = isColumnSelectionCol(column) && _getCheckboxes(so);\r\n            return column.isColumnFunc(rowNode, checkbox);\r\n        } else {\r\n            return column.isColumnFunc(rowNode, column.colDef.checkboxSelection);\r\n        }\r\n    }\r\n\r\n    protected inferNodeSelections(\r\n        node: RowNode,\r\n        shiftKey: boolean,\r\n        metaKey: boolean,\r\n        source: SelectionEventSourceType\r\n    ): null | NodeSelection {\r\n        const { gos, selectionCtx } = this;\r\n        const currentSelection = node.isSelected();\r\n        const groupSelectsDescendants = _getGroupSelectsDescendants(gos);\r\n        const enableClickSelection = _getEnableSelection(gos);\r\n        const enableDeselection = _getEnableDeselection(gos);\r\n        const isRowClicked = source === 'rowClicked';\r\n\r\n        // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to\r\n        // handle this is broken. to observe, change the logic below and allow groups to be selected.\r\n        // you will see the group gets selected, then all children get selected, then the grid unselects\r\n        // the children (as the default behaviour when clicking is to unselect other rows) which results\r\n        // in the group getting unselected (as all children are unselected). the correct thing would be\r\n        // to change this, so that children of the selected group are not then subsequently un-selected.\r\n        if (isRowClicked && groupSelectsDescendants && node.group) return null;\r\n\r\n        if (isRowClicked && !(enableClickSelection || enableDeselection)) return null;\r\n\r\n        if (shiftKey && metaKey && this.isMultiSelect()) {\r\n            // SHIFT+CTRL or SHIFT+CMD is used for bulk deselection, except where the selection root\r\n            // is still selected, in which case we default to normal bulk selection behaviour\r\n            const root = selectionCtx.getRoot();\r\n            if (!root) {\r\n                // do nothing if there's no selection root\r\n                return null;\r\n            } else if (!root.isSelected()) {\r\n                // range deselection mode\r\n                const partition = selectionCtx.extend(node, groupSelectsDescendants);\r\n                return {\r\n                    select: [],\r\n                    deselect: partition.keep,\r\n                    reset: false,\r\n                };\r\n            } else {\r\n                // default to range selection\r\n                const partition = selectionCtx.isInRange(node)\r\n                    ? selectionCtx.truncate(node)\r\n                    : selectionCtx.extend(node, groupSelectsDescendants);\r\n                return {\r\n                    deselect: partition.discard,\r\n                    select: partition.keep,\r\n                    reset: false,\r\n                };\r\n            }\r\n        } else if (shiftKey && this.isMultiSelect()) {\r\n            // SHIFT is used for bulk selection\r\n            const root = selectionCtx.getRoot();\r\n            const partition = selectionCtx.isInRange(node)\r\n                ? selectionCtx.truncate(node)\r\n                : selectionCtx.extend(node, groupSelectsDescendants);\r\n            return {\r\n                select: partition.keep,\r\n                deselect: partition.discard,\r\n                reset: !!(root && !root.isSelected()),\r\n            };\r\n        } else if (metaKey) {\r\n            // CTRL is used for deselection of a single node\r\n            selectionCtx.setRoot(node);\r\n\r\n            if (isRowClicked && currentSelection && !enableDeselection) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                node,\r\n                newValue: currentSelection ? false : true,\r\n                clearSelection: !this.isMultiSelect(),\r\n            };\r\n        } else {\r\n            // Otherwise we just do normal selection of a single node\r\n            selectionCtx.setRoot(node);\r\n            const enableSelectionWithoutKeys = _getEnableSelectionWithoutKeys(gos);\r\n            const groupSelectsFiltered = _getGroupSelection(gos) === 'filteredDescendants';\r\n            const shouldClear = isRowClicked && (!enableSelectionWithoutKeys || !enableClickSelection);\r\n\r\n            // Indeterminate states need to be handled differently if `groupSelects: 'filteredDescendants'` in CSRM.\r\n            // Specifically, clicking should toggle them _off_ instead of _on_\r\n            if (groupSelectsFiltered && currentSelection === undefined && _isClientSideRowModel(gos)) {\r\n                return {\r\n                    node,\r\n                    newValue: false,\r\n                    clearSelection: !this.isMultiSelect() || shouldClear,\r\n                };\r\n            }\r\n\r\n            if (isRowClicked) {\r\n                const newValue = currentSelection ? !enableSelectionWithoutKeys : enableClickSelection;\r\n                if (newValue === currentSelection) return null;\r\n\r\n                return {\r\n                    node,\r\n                    newValue,\r\n                    clearSelection: !this.isMultiSelect() || shouldClear,\r\n                };\r\n            }\r\n\r\n            return {\r\n                node,\r\n                newValue: !currentSelection,\r\n                clearSelection: !this.isMultiSelect() || shouldClear,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\ninterface SingleNodeSelection {\r\n    node: RowNode;\r\n    newValue: boolean;\r\n    clearSelection: boolean;\r\n}\r\n\r\ninterface MultiNodeSelection {\r\n    select: readonly RowNode[];\r\n    deselect: readonly RowNode[];\r\n    reset: boolean;\r\n}\r\ntype NodeSelection = SingleNodeSelection | MultiNodeSelection;\r\n", "import type { CheckboxChangedEvent } from '../events';\r\nimport type { AgCheckboxParams } from '../interfaces/agFieldParams';\r\nimport { AgCheckbox } from './agCheckbox';\r\n\r\nexport interface AgRadioButtonParams extends AgCheckboxParams {}\r\n\r\nexport class AgRadioButton extends AgCheckbox<AgRadioButtonParams> {\r\n    constructor(config?: AgRadioButtonParams) {\r\n        super(config, 'ag-radio-button', 'radio');\r\n    }\r\n\r\n    protected override isSelected(): boolean {\r\n        return this.eInput.checked;\r\n    }\r\n\r\n    public override toggle(): void {\r\n        if (this.eInput.disabled) {\r\n            return;\r\n        }\r\n\r\n        // do not allow an active radio button to be deselected\r\n        if (!this.isSelected()) {\r\n            this.setValue(true);\r\n        }\r\n    }\r\n\r\n    protected override addInputListeners() {\r\n        super.addInputListeners();\r\n\r\n        this.addManagedEventListeners({ checkboxChanged: this.onChange.bind(this) });\r\n    }\r\n\r\n    /**\r\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\r\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\r\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\r\n     * not deselected, so we need to use our own event.\r\n     */\r\n    private onChange(event: CheckboxChangedEvent) {\r\n        const eInput = this.eInput;\r\n        if (\r\n            event.selected &&\r\n            event.name &&\r\n            eInput.name &&\r\n            eInput.name === event.name &&\r\n            event.id &&\r\n            eInput.id !== event.id\r\n        ) {\r\n            this.setValue(false, true);\r\n        }\r\n    }\r\n}\r\n", "export const agToggleButtonCSS = /*css*/ `.ag-toggle-button{flex:none;min-width:unset;width:unset}.ag-toggle-button-input-wrapper{background-color:var(--ag-toggle-button-off-background-color);border-radius:calc(var(--ag-toggle-button-height)*.5);flex:none;height:var(--ag-toggle-button-height);max-width:var(--ag-toggle-button-width);min-width:var(--ag-toggle-button-width);position:relative;transition:background-color .1s;:where(.ag-toggle-button-input){-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;display:block;height:var(--ag-toggle-button-height);margin:0;max-width:var(--ag-toggle-button-width);min-width:var(--ag-toggle-button-width);opacity:0}&:before{background-color:var(--ag-toggle-button-switch-background-color);border-radius:100%;content:\"\";display:block;height:calc(var(--ag-toggle-button-height) - var(--ag-toggle-button-switch-inset)*2);left:var(--ag-toggle-button-switch-inset);pointer-events:none;position:absolute;top:var(--ag-toggle-button-switch-inset);transition:left .1s;width:calc(var(--ag-toggle-button-height) - var(--ag-toggle-button-switch-inset)*2)}&.ag-checked{background-color:var(--ag-toggle-button-on-background-color);&:before{left:calc(100% - var(--ag-toggle-button-height) + var(--ag-toggle-button-switch-inset))}}&:focus-within{box-shadow:var(--ag-focus-shadow)}&.ag-disabled{opacity:.5}}`;\n", "import type { AgCheckboxParams } from '../interfaces/agFieldParams';\r\nimport { AgCheckbox } from './agCheckbox';\r\nimport { agToggleButtonCSS } from './agToggleButton.css-GENERATED';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport interface AgToggleButtonParams extends AgCheckboxParams {}\r\n\r\nexport class AgToggleButton extends AgCheckbox<AgToggleButtonParams> {\r\n    constructor(config?: AgToggleButtonParams) {\r\n        super(config, 'ag-toggle-button');\r\n        this.registerCSS(agToggleButtonCSS);\r\n    }\r\n\r\n    public override setValue(value: boolean, silent?: boolean): this {\r\n        super.setValue(value, silent);\r\n\r\n        this.addOrRemoveCssClass('ag-selected', this.getValue()!);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport const AgToggleButtonSelector: ComponentSelector = {\r\n    selector: 'AG-TOGGLE-BUTTON',\r\n    component: AgToggleButton,\r\n};\r\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\r\nimport { _exists } from '../utils/generic';\r\nimport { _isEventFromPrintableCharacter } from '../utils/keyboard';\r\nimport type { AgAbstractInputFieldEvent } from './agAbstractInputField';\r\nimport { AgAbstractInputField } from './agAbstractInputField';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport interface AgInputTextFieldParams extends AgInputFieldParams {\r\n    allowedCharPattern?: string;\r\n}\r\nexport type AgInputTextFieldEvent = AgAbstractInputFieldEvent;\r\nexport class AgInputTextField<\r\n    TConfig extends AgInputTextFieldParams = AgInputTextFieldParams,\r\n    TEventType extends string = AgInputTextFieldEvent,\r\n> extends AgAbstractInputField<HTMLInputElement, string, TConfig, AgInputTextFieldEvent | TEventType> {\r\n    constructor(config?: TConfig, className = 'ag-text-field', inputType = 'text') {\r\n        super(config, className, inputType);\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n\r\n        if (this.config.allowedCharPattern) {\r\n            this.preventDisallowedCharacters();\r\n        }\r\n    }\r\n\r\n    public override setValue(value?: string | null, silent?: boolean): this {\r\n        const eInput = this.eInput;\r\n        // update the input before we call super.setValue, so it's updated before the value changed event is fired\r\n        if (eInput.value !== value) {\r\n            eInput.value = _exists(value) ? value : '';\r\n        }\r\n\r\n        return super.setValue(value, silent);\r\n    }\r\n\r\n    /** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */\r\n    public setStartValue(value?: string | null): void {\r\n        this.setValue(value, true);\r\n    }\r\n\r\n    private preventDisallowedCharacters(): void {\r\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\r\n\r\n        const preventCharacters = (event: KeyboardEvent) => {\r\n            if (!_isEventFromPrintableCharacter(event)) {\r\n                return;\r\n            }\r\n\r\n            if (event.key && !pattern.test(event.key)) {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.addManagedListeners(this.eInput, {\r\n            keydown: preventCharacters,\r\n            paste: (e: ClipboardEvent) => {\r\n                const text = e.clipboardData?.getData('text');\r\n\r\n                if (text && text.split('').some((c: string) => !pattern.test(c))) {\r\n                    e.preventDefault();\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\nexport const AgInputTextFieldSelector: ComponentSelector = {\r\n    selector: 'AG-INPUT-TEXT-FIELD',\r\n    component: AgInputTextField,\r\n};\r\n", "import type { AgInputFieldParams } from '../interfaces/agFieldParams';\r\nimport { AgAbstractInputField } from './agAbstractInputField';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport class AgInputTextArea extends AgAbstractInputField<HTMLTextAreaElement, string> {\r\n    constructor(config?: AgInputFieldParams) {\r\n        super(config, 'ag-text-area', null, 'textarea');\r\n    }\r\n\r\n    public override setValue(value: string, silent?: boolean): this {\r\n        const ret = super.setValue(value, silent);\r\n\r\n        this.eInput.value = value;\r\n\r\n        return ret;\r\n    }\r\n\r\n    public setCols(cols: number): this {\r\n        this.eInput.cols = cols;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setRows(rows: number): this {\r\n        this.eInput.rows = rows;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const AgInputTextAreaSelector: ComponentSelector = {\r\n    selector: 'AG-INPUT-TEXT-AREA',\r\n    component: AgInputTextArea,\r\n};\r\n", "import { _getActiveDomElement } from '../gridOptionsUtils';\r\nimport { _addOrRemoveAttribute } from '../utils/dom';\r\nimport { _exists } from '../utils/generic';\r\nimport type { AgInputTextFieldParams } from './agInputTextField';\r\nimport { AgInputTextField } from './agInputTextField';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport interface AgInputNumberFieldParams extends AgInputTextFieldParams {\r\n    precision?: number;\r\n    step?: number;\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\nexport class AgInputNumberField extends AgInputTextField<AgInputNumberFieldParams> {\r\n    private precision?: number;\r\n    private step?: number;\r\n    private min?: number;\r\n    private max?: number;\r\n\r\n    constructor(config?: AgInputNumberFieldParams) {\r\n        super(config, 'ag-number-field', 'number');\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n        const eInput = this.eInput;\r\n        this.addManagedListeners(eInput, {\r\n            blur: () => {\r\n                const floatedValue = parseFloat(eInput.value);\r\n                const value = isNaN(floatedValue) ? '' : this.normalizeValue(floatedValue.toString());\r\n\r\n                if (this.value !== value) {\r\n                    this.setValue(value);\r\n                }\r\n            },\r\n            wheel: this.onWheel.bind(this),\r\n        });\r\n\r\n        eInput.step = 'any';\r\n\r\n        const { precision, min, max, step } = this.config;\r\n        if (typeof precision === 'number') this.setPrecision(precision);\r\n        if (typeof min === 'number') this.setMin(min);\r\n        if (typeof max === 'number') this.setMax(max);\r\n        if (typeof step === 'number') this.setStep(step);\r\n    }\r\n\r\n    private onWheel(e: WheelEvent) {\r\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\r\n        if (_getActiveDomElement(this.beans) === this.eInput) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    public normalizeValue(value: string): string {\r\n        if (value === '') {\r\n            return '';\r\n        }\r\n\r\n        if (this.precision != null) {\r\n            value = this.adjustPrecision(value);\r\n        }\r\n\r\n        const val = parseFloat(value);\r\n\r\n        const { min, max } = this;\r\n        if (min != null && val < min) {\r\n            value = min.toString();\r\n        } else if (max != null && val > max) {\r\n            value = max.toString();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private adjustPrecision(value: string, isScientificNotation?: boolean): string {\r\n        const precision = this.precision;\r\n        if (precision == null) {\r\n            return value;\r\n        }\r\n        if (isScientificNotation) {\r\n            const floatString = parseFloat(value).toFixed(precision);\r\n            return parseFloat(floatString).toString();\r\n        }\r\n\r\n        // can't use toFixed here because we don't want to round up\r\n        const parts = String(value).split('.');\r\n        if (parts.length > 1) {\r\n            if (parts[1].length <= precision) {\r\n                return value;\r\n            } else if (precision > 0) {\r\n                return `${parts[0]}.${parts[1].slice(0, precision)}`;\r\n            }\r\n        }\r\n        return parts[0];\r\n    }\r\n\r\n    public setMin(min: number | undefined): this {\r\n        if (this.min === min) {\r\n            return this;\r\n        }\r\n\r\n        this.min = min;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'min', min);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setMax(max: number | undefined): this {\r\n        if (this.max === max) {\r\n            return this;\r\n        }\r\n\r\n        this.max = max;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'max', max);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setPrecision(precision: number): this {\r\n        this.precision = precision;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setStep(step?: number): this {\r\n        if (this.step === step) {\r\n            return this;\r\n        }\r\n\r\n        this.step = step;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'step', step);\r\n\r\n        return this;\r\n    }\r\n\r\n    public override setValue(value?: string | null, silent?: boolean): this {\r\n        return this.setValueOrInputValue(\r\n            (v) => super.setValue(v, silent),\r\n            () => this,\r\n            value\r\n        );\r\n    }\r\n\r\n    public override setStartValue(value?: string | null): void {\r\n        return this.setValueOrInputValue<void>(\r\n            (v) => super.setValue(v, true),\r\n            (v) => {\r\n                this.eInput.value = v;\r\n            },\r\n            value\r\n        );\r\n    }\r\n\r\n    private setValueOrInputValue<T>(\r\n        setValueFunc: (value?: string | null) => T,\r\n        setInputValueOnlyFunc: (value: string) => T,\r\n        value?: string | null\r\n    ): T {\r\n        if (_exists(value)) {\r\n            // need to maintain the scientific notation format whilst typing (e.g. 1e10)\r\n            let setInputValueOnly = this.isScientificNotation(value);\r\n            if (setInputValueOnly && this.eInput.validity.valid) {\r\n                return setValueFunc(value);\r\n            }\r\n            if (!setInputValueOnly) {\r\n                value = this.adjustPrecision(value);\r\n                const normalizedValue = this.normalizeValue(value);\r\n                // outside of valid range\r\n                setInputValueOnly = value != normalizedValue;\r\n            }\r\n\r\n            if (setInputValueOnly) {\r\n                return setInputValueOnlyFunc(value);\r\n            }\r\n        }\r\n\r\n        return setValueFunc(value);\r\n    }\r\n\r\n    public override getValue(): string | null | undefined {\r\n        const eInput = this.eInput;\r\n        if (!eInput.validity.valid) {\r\n            return undefined;\r\n        }\r\n        const inputValue = eInput.value;\r\n        if (this.isScientificNotation(inputValue)) {\r\n            return this.adjustPrecision(inputValue, true);\r\n        }\r\n        return super.getValue();\r\n    }\r\n\r\n    private isScientificNotation(value: string): boolean {\r\n        return typeof value === 'string' && value.includes('e');\r\n    }\r\n}\r\n\r\nexport const AgInputNumberFieldSelector: ComponentSelector = {\r\n    selector: 'AG-INPUT-NUMBER-FIELD',\r\n    component: AgInputNumberField,\r\n};\r\n", "function _padStartWidthZeros(value: number, totalStringSize: number): string {\r\n    return value.toString().padStart(totalStringSize, '0');\r\n}\r\n\r\n/**\r\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\r\n * An alternative separator can be provided to be used instead of hyphens.\r\n * @param date The date to serialise\r\n * @param includeTime Whether to include the time in the serialised string\r\n * @param separator The separator to use between date parts\r\n */\r\nexport function _serialiseDate(date: Date | null, includeTime = true, separator = '-'): string | null {\r\n    if (!date) {\r\n        return null;\r\n    }\r\n\r\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()]\r\n        .map((part) => _padStartWidthZeros(part, 2))\r\n        .join(separator);\r\n\r\n    if (includeTime) {\r\n        serialised +=\r\n            ' ' +\r\n            [date.getHours(), date.getMinutes(), date.getSeconds()]\r\n                .map((part) => _padStartWidthZeros(part, 2))\r\n                .join(':');\r\n    }\r\n\r\n    return serialised;\r\n}\r\n\r\nconst calculateOrdinal = (value: number) => {\r\n    if (value > 3 && value < 21) {\r\n        return 'th';\r\n    }\r\n    const remainder = value % 10;\r\n    switch (remainder) {\r\n        case 1:\r\n            return 'st';\r\n        case 2:\r\n            return 'nd';\r\n        case 3:\r\n            return 'rd';\r\n    }\r\n    return 'th';\r\n};\r\n\r\n/**\r\n * Serialises a Date to a string of format the defined format, does not include time.\r\n * @param date The date to serialise\r\n * @param format The string to format the date to, defaults to YYYY-MM-DD\r\n */\r\nexport function _dateToFormattedString(date: Date, format: string = 'YYYY-MM-DD'): string {\r\n    const fullYear = _padStartWidthZeros(date.getFullYear(), 4);\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n    ];\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const replace: { [key: string]: () => string } = {\r\n        YYYY: () => fullYear.slice(fullYear.length - 4, fullYear.length),\r\n        YY: () => fullYear.slice(fullYear.length - 2, fullYear.length),\r\n        Y: () => `${date.getFullYear()}`,\r\n        MMMM: () => months[date.getMonth()],\r\n        MMM: () => months[date.getMonth()].slice(0, 3),\r\n        MM: () => _padStartWidthZeros(date.getMonth() + 1, 2),\r\n        Mo: () => `${date.getMonth() + 1}${calculateOrdinal(date.getMonth() + 1)}`,\r\n        M: () => `${date.getMonth() + 1}`,\r\n        Do: () => `${date.getDate()}${calculateOrdinal(date.getDate())}`,\r\n        DD: () => _padStartWidthZeros(date.getDate(), 2),\r\n        D: () => `${date.getDate()}`,\r\n        dddd: () => days[date.getDay()],\r\n        ddd: () => days[date.getDay()].slice(0, 3),\r\n        dd: () => days[date.getDay()].slice(0, 2),\r\n        do: () => `${date.getDay()}${calculateOrdinal(date.getDay())}`,\r\n        d: () => `${date.getDay()}`,\r\n    };\r\n    const regexp = new RegExp(Object.keys(replace).join('|'), 'g');\r\n    return format.replace(regexp, (match) => {\r\n        if (match in replace) {\r\n            return replace[match]();\r\n        }\r\n        return match;\r\n    });\r\n}\r\n\r\n/**\r\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\r\n */\r\nexport function _parseDateTimeFromString(value?: string | null): Date | null {\r\n    if (!value) {\r\n        return null;\r\n    }\r\n\r\n    const [dateStr, timeStr] = value.split(' ');\r\n\r\n    if (!dateStr) {\r\n        return null;\r\n    }\r\n\r\n    const fields = dateStr.split('-').map((f) => parseInt(f, 10));\r\n\r\n    if (fields.filter((f) => !isNaN(f)).length !== 3) {\r\n        return null;\r\n    }\r\n\r\n    const [year, month, day] = fields;\r\n    const date = new Date(year, month - 1, day);\r\n\r\n    if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {\r\n        // date was not parsed as expected so must have been invalid\r\n        return null;\r\n    }\r\n\r\n    if (!timeStr || timeStr === '00:00:00') {\r\n        return date;\r\n    }\r\n\r\n    const [hours, minutes, seconds] = timeStr.split(':').map((part) => parseInt(part, 10));\r\n\r\n    if (hours >= 0 && hours < 24) {\r\n        date.setHours(hours);\r\n    }\r\n\r\n    if (minutes >= 0 && minutes < 60) {\r\n        date.setMinutes(minutes);\r\n    }\r\n\r\n    if (seconds >= 0 && seconds < 60) {\r\n        date.setSeconds(seconds);\r\n    }\r\n\r\n    return date;\r\n}\r\n", "import { _getActiveDomElement } from '../gridOptionsUtils';\r\nimport { _isBrowserSafari } from '../utils/browser';\r\nimport { _parseDateTimeFromString, _serialiseDate } from '../utils/date';\r\nimport { _addOrRemoveAttribute } from '../utils/dom';\r\nimport type { AgInputTextFieldParams } from './agInputTextField';\r\nimport { AgInputTextField } from './agInputTextField';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport class AgInputDateField extends AgInputTextField {\r\n    private min?: string;\r\n    private max?: string;\r\n    private step?: number;\r\n\r\n    constructor(config?: AgInputTextFieldParams) {\r\n        super(config, 'ag-date-field', 'date');\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n\r\n        // ensures that the input element is focussed when a clear button is clicked,\r\n        // unless using safari as there is no clear button and focus does not work properly\r\n        const usingSafari = _isBrowserSafari();\r\n        this.addManagedListeners(this.eInput, {\r\n            wheel: this.onWheel.bind(this),\r\n            mousedown: () => {\r\n                if (this.isDisabled() || usingSafari) {\r\n                    return;\r\n                }\r\n                this.eInput.focus();\r\n            },\r\n        });\r\n        this.eInput.step = 'any';\r\n    }\r\n\r\n    private onWheel(e: WheelEvent) {\r\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\r\n        if (_getActiveDomElement(this.beans) === this.eInput) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    public setMin(minDate: Date | string | undefined): this {\r\n        const min = minDate instanceof Date ? _serialiseDate(minDate ?? null, false) ?? undefined : minDate;\r\n        if (this.min === min) {\r\n            return this;\r\n        }\r\n\r\n        this.min = min;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'min', min);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setMax(maxDate: Date | string | undefined): this {\r\n        const max = maxDate instanceof Date ? _serialiseDate(maxDate ?? null, false) ?? undefined : maxDate;\r\n        if (this.max === max) {\r\n            return this;\r\n        }\r\n\r\n        this.max = max;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'max', max);\r\n\r\n        return this;\r\n    }\r\n\r\n    public setStep(step?: number): this {\r\n        if (this.step === step) {\r\n            return this;\r\n        }\r\n\r\n        this.step = step;\r\n\r\n        _addOrRemoveAttribute(this.eInput, 'step', step);\r\n\r\n        return this;\r\n    }\r\n\r\n    public getDate(): Date | undefined {\r\n        if (!this.eInput.validity.valid) {\r\n            return undefined;\r\n        }\r\n        return _parseDateTimeFromString(this.getValue()) ?? undefined;\r\n    }\r\n\r\n    public setDate(date: Date | undefined, silent?: boolean): void {\r\n        this.setValue(_serialiseDate(date ?? null, false), silent);\r\n    }\r\n}\r\n\r\nexport const AgInputDateFieldSelector: ComponentSelector = {\r\n    selector: 'AG-INPUT-DATE-FIELD',\r\n    component: AgInputDateField,\r\n};\r\n", "import { _getTooltipCompDetails } from '../components/framework/userCompUtils';\r\nimport type { UserComponentFactory } from '../components/framework/userComponentFactory';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _getActiveDomElement, _getDocument } from '../gridOptionsUtils';\r\nimport { _isIOSUserAgent } from '../utils/browser';\r\nimport { _exists } from '../utils/generic';\r\nimport type { PopupService } from '../widgets/popupService';\r\nimport type { ITooltipComp } from './tooltipComponent';\r\nimport type { ITooltipCtrl } from './tooltipFeature';\r\n\r\nenum TooltipStates {\r\n    NOTHING,\r\n    WAITING_TO_SHOW,\r\n    SHOWING,\r\n}\r\nenum TooltipTrigger {\r\n    HOVER,\r\n    FOCUS,\r\n}\r\n\r\nconst SHOW_QUICK_TOOLTIP_DIFF = 1000;\r\nconst FADE_OUT_TOOLTIP_TIMEOUT = 1000;\r\nconst INTERACTIVE_HIDE_DELAY = 100;\r\n\r\n// different instances of tooltipFeature use this to see when the\r\n// last tooltip was hidden.\r\nlet lastTooltipHideTime: number;\r\nlet isLocked = false;\r\n\r\nexport class TooltipStateManager extends BeanStub {\r\n    private popupSvc?: PopupService;\r\n    private userCompFactory: UserComponentFactory;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.popupSvc = beans.popupSvc;\r\n        this.userCompFactory = beans.userCompFactory;\r\n    }\r\n\r\n    private showTooltipTimeoutId: number | undefined;\r\n    private hideTooltipTimeoutId: number | undefined;\r\n    private interactiveTooltipTimeoutId: number | undefined;\r\n\r\n    private interactionEnabled = false;\r\n    private isInteractingWithTooltip = false;\r\n\r\n    private state = TooltipStates.NOTHING;\r\n\r\n    private lastMouseEvent: MouseEvent | null;\r\n\r\n    private tooltipComp: ITooltipComp | undefined;\r\n    private tooltipPopupDestroyFunc: (() => void) | undefined;\r\n    // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to\r\n    // async we could request two tooltips before the first instance returns, in which case we should\r\n    // disregard the second instance.\r\n    private tooltipInstanceCount = 0;\r\n    private tooltipMouseTrack: boolean = false;\r\n    private tooltipTrigger: TooltipTrigger;\r\n\r\n    private tooltipMouseEnterListener: (() => null) | null;\r\n    private tooltipMouseLeaveListener: (() => null) | null;\r\n    private tooltipFocusInListener: (() => null) | null;\r\n    private tooltipFocusOutListener: (() => null) | null;\r\n\r\n    private onBodyScrollEventCallback: (() => null) | undefined;\r\n    private onColumnMovedEventCallback: (() => null) | undefined;\r\n    private onDocumentKeyDownCallback: (() => null) | undefined;\r\n\r\n    constructor(\r\n        private readonly tooltipCtrl: ITooltipCtrl,\r\n        private readonly getTooltipValue: () => any\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        if (this.gos.get('tooltipInteraction')) {\r\n            this.interactionEnabled = true;\r\n        }\r\n\r\n        this.tooltipTrigger = this.getTooltipTrigger();\r\n        this.tooltipMouseTrack = this.gos.get('tooltipMouseTrack');\r\n\r\n        const el = this.tooltipCtrl.getGui();\r\n\r\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\r\n            this.addManagedListeners(el, {\r\n                mouseenter: this.onMouseEnter.bind(this),\r\n                mouseleave: this.onMouseLeave.bind(this),\r\n            });\r\n        }\r\n\r\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\r\n            this.addManagedListeners(el, {\r\n                focusin: this.onFocusIn.bind(this),\r\n                focusout: this.onFocusOut.bind(this),\r\n            });\r\n        }\r\n\r\n        this.addManagedListeners(el, { mousemove: this.onMouseMove.bind(this) });\r\n\r\n        if (!this.interactionEnabled) {\r\n            this.addManagedListeners(el, {\r\n                mousedown: this.onMouseDown.bind(this),\r\n                keydown: this.onKeyDown.bind(this),\r\n            });\r\n        }\r\n    }\r\n\r\n    private getGridOptionsTooltipDelay(delayOption: 'tooltipShowDelay' | 'tooltipHideDelay'): number {\r\n        const delay = this.gos.get(delayOption);\r\n        return Math.max(200, delay);\r\n    }\r\n\r\n    private getTooltipDelay(type: 'show' | 'hide'): number {\r\n        if (type === 'show') {\r\n            return (\r\n                this.tooltipCtrl.getTooltipShowDelayOverride?.() ?? this.getGridOptionsTooltipDelay('tooltipShowDelay')!\r\n            );\r\n        }\r\n\r\n        return this.tooltipCtrl.getTooltipHideDelayOverride?.() ?? this.getGridOptionsTooltipDelay('tooltipHideDelay')!;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        // if this component gets destroyed while tooltip is showing, need to make sure\r\n        // we don't end with no mouseLeave event resulting in zombie tooltip\r\n        this.setToDoNothing();\r\n        super.destroy();\r\n    }\r\n\r\n    private getTooltipTrigger(): TooltipTrigger {\r\n        const trigger = this.gos.get('tooltipTrigger');\r\n\r\n        if (!trigger || trigger === 'hover') {\r\n            return TooltipTrigger.HOVER;\r\n        }\r\n\r\n        return TooltipTrigger.FOCUS;\r\n    }\r\n\r\n    public onMouseEnter(e: MouseEvent): void {\r\n        // if `interactiveTooltipTimeoutId` is set, it means that this cell has a tooltip\r\n        // and we are in the process of moving the cursor from the tooltip back to the cell\r\n        // so we need to unlock this service here.\r\n        if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {\r\n            this.unlockService();\r\n            this.startHideTimeout();\r\n        }\r\n\r\n        if (_isIOSUserAgent()) {\r\n            return;\r\n        }\r\n\r\n        if (isLocked) {\r\n            this.showTooltipTimeoutId = window.setTimeout(() => {\r\n                this.prepareToShowTooltip(e);\r\n            }, INTERACTIVE_HIDE_DELAY);\r\n        } else {\r\n            this.prepareToShowTooltip(e);\r\n        }\r\n    }\r\n\r\n    private onMouseMove(e: MouseEvent): void {\r\n        // there is a delay from the time we mouseOver a component and the time the\r\n        // tooltip is displayed, so we need to track mousemove to be able to correctly\r\n        // position the tooltip when showTooltip is called.\r\n        if (this.lastMouseEvent) {\r\n            this.lastMouseEvent = e;\r\n        }\r\n\r\n        if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {\r\n            this.positionTooltip();\r\n        }\r\n    }\r\n\r\n    private onMouseDown(): void {\r\n        this.setToDoNothing();\r\n    }\r\n\r\n    private onMouseLeave(): void {\r\n        // if interaction is enabled, we need to verify if the user is moving\r\n        // the cursor from the cell onto the tooltip, so we lock the service\r\n        // for 100ms to prevent other tooltips from being created while this is happening.\r\n        if (this.interactionEnabled) {\r\n            this.lockService();\r\n        } else {\r\n            this.setToDoNothing();\r\n        }\r\n    }\r\n\r\n    private onFocusIn(): void {\r\n        this.prepareToShowTooltip();\r\n    }\r\n\r\n    private onFocusOut(e: FocusEvent): void {\r\n        const relatedTarget = e.relatedTarget as Element;\r\n        const parentCompGui = this.tooltipCtrl.getGui();\r\n        const tooltipGui = this.tooltipComp?.getGui();\r\n\r\n        if (\r\n            this.isInteractingWithTooltip ||\r\n            parentCompGui.contains(relatedTarget) ||\r\n            (this.interactionEnabled && tooltipGui?.contains(relatedTarget))\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.setToDoNothing();\r\n    }\r\n\r\n    private onKeyDown(): void {\r\n        // if the keydown happens outside of the tooltip, we cancel\r\n        // the tooltip interaction and hide the tooltip.\r\n        if (this.isInteractingWithTooltip) {\r\n            this.isInteractingWithTooltip = false;\r\n        }\r\n        this.setToDoNothing();\r\n    }\r\n\r\n    private prepareToShowTooltip(mouseEvent?: MouseEvent): void {\r\n        // every mouseenter should be following by a mouseleave, however for some unknown, it's possible for\r\n        // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported\r\n        // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if\r\n        // state is != nothing, then we know mouseenter was already received.\r\n        if (this.state != TooltipStates.NOTHING || isLocked) {\r\n            return;\r\n        }\r\n\r\n        // if we are showing the tooltip because of focus, no delay at all\r\n        // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time\r\n        let delay = 0;\r\n        if (mouseEvent) {\r\n            delay = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay('show');\r\n        }\r\n\r\n        this.lastMouseEvent = mouseEvent || null;\r\n\r\n        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);\r\n        this.state = TooltipStates.WAITING_TO_SHOW;\r\n    }\r\n\r\n    private isLastTooltipHiddenRecently(): boolean {\r\n        // return true if <1000ms since last time we hid a tooltip\r\n        const now = new Date().getTime();\r\n        const then = lastTooltipHideTime;\r\n\r\n        return now - then < SHOW_QUICK_TOOLTIP_DIFF;\r\n    }\r\n\r\n    private setToDoNothing(fromHideTooltip?: boolean): void {\r\n        if (!fromHideTooltip && this.state === TooltipStates.SHOWING) {\r\n            this.hideTooltip();\r\n        }\r\n\r\n        if (this.onBodyScrollEventCallback) {\r\n            this.onBodyScrollEventCallback();\r\n            this.onBodyScrollEventCallback = undefined;\r\n        }\r\n\r\n        if (this.onColumnMovedEventCallback) {\r\n            this.onColumnMovedEventCallback();\r\n            this.onColumnMovedEventCallback = undefined;\r\n        }\r\n\r\n        if (this.onDocumentKeyDownCallback) {\r\n            this.onDocumentKeyDownCallback();\r\n            this.onDocumentKeyDownCallback = undefined;\r\n        }\r\n\r\n        this.clearTimeouts();\r\n        this.state = TooltipStates.NOTHING;\r\n        this.lastMouseEvent = null;\r\n    }\r\n\r\n    private showTooltip(): void {\r\n        const value = this.getTooltipValue();\r\n        const ctrl = this.tooltipCtrl;\r\n\r\n        if (!_exists(value) || (ctrl.shouldDisplayTooltip && !ctrl.shouldDisplayTooltip())) {\r\n            this.setToDoNothing();\r\n            return;\r\n        }\r\n\r\n        const rowNode = ctrl.getRowNode?.();\r\n\r\n        const params = {\r\n            location: ctrl.getLocation?.() ?? 'UNKNOWN', //'cell',\r\n            colDef: ctrl.getColDef?.(),\r\n            column: ctrl.getColumn?.(),\r\n            rowIndex: ctrl.getRowIndex?.(),\r\n            node: rowNode,\r\n            data: rowNode?.data,\r\n            value,\r\n            valueFormatted: ctrl.getValueFormatted?.(),\r\n            hideTooltipCallback: () => this.hideTooltip(true),\r\n            ...(ctrl.getAdditionalParams?.() ?? {}),\r\n        };\r\n\r\n        this.state = TooltipStates.SHOWING;\r\n        this.tooltipInstanceCount++;\r\n\r\n        // we pass in tooltipInstanceCount so the callback knows what the count was when\r\n        // we requested the tooltip, so if another tooltip was requested in the mean time\r\n        // we disregard it\r\n        const callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);\r\n\r\n        const userDetails = _getTooltipCompDetails(this.userCompFactory, params);\r\n        userDetails?.newAgStackInstance().then(callback);\r\n    }\r\n\r\n    public hideTooltip(forceHide?: boolean): void {\r\n        if (!forceHide && this.isInteractingWithTooltip) {\r\n            return;\r\n        }\r\n        // check if comp exists - due to async, although we asked for\r\n        // one, the instance may not be back yet\r\n        if (this.tooltipComp) {\r\n            this.destroyTooltipComp();\r\n            lastTooltipHideTime = new Date().getTime();\r\n        }\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'tooltipHide',\r\n            parentGui: this.tooltipCtrl.getGui(),\r\n        });\r\n\r\n        if (forceHide) {\r\n            this.isInteractingWithTooltip = false;\r\n        }\r\n\r\n        this.setToDoNothing(true);\r\n    }\r\n\r\n    private newTooltipComponentCallback(tooltipInstanceCopy: number, tooltipComp: ITooltipComp): void {\r\n        const compNoLongerNeeded =\r\n            this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;\r\n\r\n        if (compNoLongerNeeded) {\r\n            this.destroyBean(tooltipComp);\r\n            return;\r\n        }\r\n\r\n        const eGui = tooltipComp.getGui();\r\n\r\n        this.tooltipComp = tooltipComp;\r\n\r\n        if (!eGui.classList.contains('ag-tooltip')) {\r\n            eGui.classList.add('ag-tooltip-custom');\r\n        }\r\n\r\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\r\n            eGui.classList.add('ag-tooltip-animate');\r\n        }\r\n\r\n        if (this.interactionEnabled) {\r\n            eGui.classList.add('ag-tooltip-interactive');\r\n        }\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n\r\n        const addPopupRes = this.popupSvc?.addPopup({\r\n            eChild: eGui,\r\n            ariaLabel: translate('ariaLabelTooltip', 'Tooltip'),\r\n        });\r\n        if (addPopupRes) {\r\n            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;\r\n        }\r\n\r\n        this.positionTooltip();\r\n\r\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\r\n            const listener = () => this.setToDoNothing();\r\n            [this.onBodyScrollEventCallback, this.onColumnMovedEventCallback] = this.addManagedEventListeners({\r\n                bodyScroll: listener,\r\n                columnMoved: listener,\r\n            });\r\n        }\r\n\r\n        if (this.interactionEnabled) {\r\n            [this.tooltipMouseEnterListener, this.tooltipMouseLeaveListener] = this.addManagedElementListeners(eGui, {\r\n                mouseenter: this.onTooltipMouseEnter.bind(this),\r\n                mouseleave: this.onTooltipMouseLeave.bind(this),\r\n            });\r\n\r\n            [this.onDocumentKeyDownCallback] = this.addManagedElementListeners(_getDocument(this.beans), {\r\n                keydown: (e) => {\r\n                    if (!eGui.contains(e?.target as HTMLElement)) {\r\n                        this.onKeyDown();\r\n                    }\r\n                },\r\n            });\r\n\r\n            if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\r\n                [this.tooltipFocusInListener, this.tooltipFocusOutListener] = this.addManagedElementListeners(eGui, {\r\n                    focusin: this.onTooltipFocusIn.bind(this),\r\n                    focusout: this.onTooltipFocusOut.bind(this),\r\n                });\r\n            }\r\n        }\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'tooltipShow',\r\n            tooltipGui: eGui,\r\n            parentGui: this.tooltipCtrl.getGui(),\r\n        });\r\n\r\n        this.startHideTimeout();\r\n    }\r\n\r\n    private onTooltipMouseEnter(): void {\r\n        this.isInteractingWithTooltip = true;\r\n        this.unlockService();\r\n    }\r\n\r\n    private onTooltipMouseLeave(): void {\r\n        if (this.isTooltipFocused()) {\r\n            return;\r\n        }\r\n        this.isInteractingWithTooltip = false;\r\n        this.lockService();\r\n    }\r\n\r\n    private onTooltipFocusIn(): void {\r\n        this.isInteractingWithTooltip = true;\r\n    }\r\n\r\n    private isTooltipFocused(): boolean {\r\n        const tooltipGui = this.tooltipComp?.getGui();\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n\r\n        return !!tooltipGui && tooltipGui.contains(activeEl);\r\n    }\r\n\r\n    private onTooltipFocusOut(e: FocusEvent): void {\r\n        const parentGui = this.tooltipCtrl.getGui();\r\n\r\n        // focusout is dispatched when inner elements lose focus\r\n        // so we need to verify if focus is contained within the tooltip\r\n        if (this.isTooltipFocused()) {\r\n            return;\r\n        }\r\n\r\n        this.isInteractingWithTooltip = false;\r\n\r\n        // if we move the focus from the tooltip back to the original cell\r\n        // the tooltip should remain open, but we need to restart the hide timeout counter\r\n        if (parentGui.contains(e.relatedTarget as Element)) {\r\n            this.startHideTimeout();\r\n        }\r\n        // if the parent cell doesn't contain the focus, simply hide the tooltip\r\n        else {\r\n            this.hideTooltip();\r\n        }\r\n    }\r\n\r\n    private positionTooltip(): void {\r\n        const params = {\r\n            type: 'tooltip',\r\n            ePopup: this.tooltipComp!.getGui(),\r\n            nudgeY: 18,\r\n            skipObserver: this.tooltipMouseTrack,\r\n        };\r\n\r\n        if (this.lastMouseEvent) {\r\n            this.popupSvc?.positionPopupUnderMouseEvent({\r\n                ...params,\r\n                mouseEvent: this.lastMouseEvent,\r\n            });\r\n        } else {\r\n            this.popupSvc?.positionPopupByComponent({\r\n                ...params,\r\n                eventSource: this.tooltipCtrl.getGui(),\r\n                position: 'under',\r\n                keepWithinBounds: true,\r\n                nudgeY: 5,\r\n            });\r\n        }\r\n    }\r\n\r\n    private destroyTooltipComp(): void {\r\n        // add class to fade out the tooltip\r\n        this.tooltipComp!.getGui().classList.add('ag-tooltip-hiding');\r\n\r\n        // make local copies of these variables, as we use them in the async function below,\r\n        // and we clear then to 'undefined' later, so need to take a copy before they are undefined.\r\n        const tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;\r\n        const tooltipComp = this.tooltipComp;\r\n        const delay = this.tooltipTrigger === TooltipTrigger.HOVER ? FADE_OUT_TOOLTIP_TIMEOUT : 0;\r\n\r\n        window.setTimeout(() => {\r\n            tooltipPopupDestroyFunc!();\r\n            this.destroyBean(tooltipComp);\r\n        }, delay);\r\n\r\n        this.clearTooltipListeners();\r\n        this.tooltipPopupDestroyFunc = undefined;\r\n        this.tooltipComp = undefined;\r\n    }\r\n\r\n    private clearTooltipListeners(): void {\r\n        [\r\n            this.tooltipMouseEnterListener,\r\n            this.tooltipMouseLeaveListener,\r\n            this.tooltipFocusInListener,\r\n            this.tooltipFocusOutListener,\r\n        ].forEach((listener) => {\r\n            if (listener) {\r\n                listener();\r\n            }\r\n        });\r\n\r\n        this.tooltipMouseEnterListener =\r\n            this.tooltipMouseLeaveListener =\r\n            this.tooltipFocusInListener =\r\n            this.tooltipFocusOutListener =\r\n                null;\r\n    }\r\n\r\n    private lockService(): void {\r\n        isLocked = true;\r\n        this.interactiveTooltipTimeoutId = window.setTimeout(() => {\r\n            this.unlockService();\r\n            this.setToDoNothing();\r\n        }, INTERACTIVE_HIDE_DELAY);\r\n    }\r\n\r\n    private unlockService(): void {\r\n        isLocked = false;\r\n        this.clearInteractiveTimeout();\r\n    }\r\n\r\n    private startHideTimeout(): void {\r\n        this.clearHideTimeout();\r\n        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay('hide'));\r\n    }\r\n\r\n    private clearShowTimeout(): void {\r\n        if (!this.showTooltipTimeoutId) {\r\n            return;\r\n        }\r\n        window.clearTimeout(this.showTooltipTimeoutId);\r\n        this.showTooltipTimeoutId = undefined;\r\n    }\r\n\r\n    private clearHideTimeout(): void {\r\n        if (!this.hideTooltipTimeoutId) {\r\n            return;\r\n        }\r\n        window.clearTimeout(this.hideTooltipTimeoutId);\r\n        this.hideTooltipTimeoutId = undefined;\r\n    }\r\n\r\n    private clearInteractiveTimeout(): void {\r\n        if (!this.interactiveTooltipTimeoutId) {\r\n            return;\r\n        }\r\n        window.clearTimeout(this.interactiveTooltipTimeoutId);\r\n        this.interactiveTooltipTimeoutId = undefined;\r\n    }\r\n\r\n    private clearTimeouts(): void {\r\n        this.clearShowTimeout();\r\n        this.clearHideTimeout();\r\n        this.clearInteractiveTimeout();\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { TooltipLocation } from './tooltipComponent';\r\nimport { TooltipStateManager } from './tooltipStateManager';\r\n\r\nexport interface ITooltipCtrl {\r\n    getTooltipValue?(): any;\r\n    getGui(): HTMLElement;\r\n    getLocation?(): TooltipLocation;\r\n\r\n    getColumn?(): AgColumn | AgColumnGroup;\r\n    getColDef?(): ColDef | ColGroupDef;\r\n    getRowIndex?(): number;\r\n    getRowNode?(): RowNode;\r\n\r\n    // this makes no sense, why is the cell formatted value passed to the tooltip???\r\n    getValueFormatted?(): string;\r\n    getTooltipShowDelayOverride?(): number;\r\n    getTooltipHideDelayOverride?(): number;\r\n    shouldDisplayTooltip?(): boolean;\r\n\r\n    /** Additional params to be passed to the tooltip */\r\n    getAdditionalParams?(): Record<string, any>;\r\n}\r\n\r\nexport function _isShowTooltipWhenTruncated(gos: GridOptionsService): boolean {\r\n    return gos.get('tooltipShowMode') === 'whenTruncated';\r\n}\r\n\r\nexport function _getShouldDisplayTooltip(\r\n    gos: GridOptionsService,\r\n    getElement: () => HTMLElement | undefined\r\n): (() => boolean) | undefined {\r\n    return _isShowTooltipWhenTruncated(gos) ? _shouldDisplayTooltip(getElement) : undefined;\r\n}\r\n\r\nexport function _shouldDisplayTooltip(getElement: () => HTMLElement | undefined): () => boolean {\r\n    return () => {\r\n        const element = getElement();\r\n        if (!element) {\r\n            // show tooltip by default\r\n            return true;\r\n        }\r\n        return element.scrollWidth > element.clientWidth;\r\n    };\r\n}\r\n\r\nexport class TooltipFeature extends BeanStub {\r\n    private tooltip: any;\r\n\r\n    private tooltipManager: TooltipStateManager | undefined;\r\n    private browserTooltips: boolean;\r\n\r\n    constructor(\r\n        private readonly ctrl: ITooltipCtrl,\r\n        beans?: BeanCollection\r\n    ) {\r\n        super();\r\n\r\n        if (beans) {\r\n            this.beans = beans;\r\n        }\r\n    }\r\n\r\n    public postConstruct() {\r\n        this.refreshTooltip();\r\n    }\r\n\r\n    private setBrowserTooltip(tooltip: string | null) {\r\n        const name = 'title';\r\n        const eGui = this.ctrl.getGui();\r\n\r\n        if (!eGui) {\r\n            return;\r\n        }\r\n\r\n        if (tooltip != null && tooltip != '') {\r\n            eGui.setAttribute(name, tooltip);\r\n        } else {\r\n            eGui.removeAttribute(name);\r\n        }\r\n    }\r\n\r\n    private updateTooltipText(): void {\r\n        const { getTooltipValue } = this.ctrl;\r\n        if (getTooltipValue) {\r\n            this.tooltip = getTooltipValue();\r\n        }\r\n    }\r\n\r\n    private createTooltipFeatureIfNeeded(): void {\r\n        if (this.tooltipManager == null) {\r\n            this.tooltipManager = this.createBean(\r\n                new TooltipStateManager(this.ctrl, () => this.tooltip),\r\n                this.beans.context\r\n            );\r\n        }\r\n    }\r\n\r\n    public setTooltipAndRefresh(tooltip: any): void {\r\n        this.tooltip = tooltip;\r\n        this.refreshTooltip();\r\n    }\r\n\r\n    public refreshTooltip(): void {\r\n        this.browserTooltips = this.beans.gos.get('enableBrowserTooltips');\r\n        this.updateTooltipText();\r\n\r\n        if (this.browserTooltips) {\r\n            this.setBrowserTooltip(this.tooltip);\r\n            this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\r\n        } else {\r\n            this.setBrowserTooltip(null);\r\n            this.createTooltipFeatureIfNeeded();\r\n        }\r\n    }\r\n\r\n    public override destroy() {\r\n        this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport { _getDocument } from '../gridOptionsUtils';\r\nimport type { ITooltipCtrl, TooltipFeature } from '../tooltip/tooltipFeature';\r\nimport { _setAriaPosInSet, _setAriaRole, _setAriaSelected, _setAriaSetSize } from '../utils/aria';\r\nimport { _isVisible, _removeFromParent } from '../utils/dom';\r\nimport { Component } from './component';\r\n\r\nexport interface ListOption<TValue = string> {\r\n    value: TValue;\r\n    text?: string;\r\n}\r\n\r\nexport type AgListEvent = 'fieldValueChanged' | 'selectedItem';\r\n\r\nexport class AgList<TEventType extends string = AgListEvent, TValue = string> extends Component<\r\n    TEventType | AgListEvent\r\n> {\r\n    private readonly activeClass = 'ag-active-item';\r\n\r\n    private options: ListOption<TValue>[] = [];\r\n    private itemEls: HTMLElement[] = [];\r\n    private highlightedEl: HTMLElement | null;\r\n    private value: TValue | null;\r\n    private displayValue: string | null;\r\n\r\n    constructor(\r\n        private readonly cssIdentifier = 'default',\r\n        private readonly unFocusable: boolean = false\r\n    ) {\r\n        super(/* html */ `<div class=\"ag-list ag-${cssIdentifier}-list\" role=\"listbox\"></div>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const eGui = this.getGui();\r\n        this.addManagedElementListeners(eGui, { mouseleave: () => this.clearHighlighted() });\r\n        if (this.unFocusable) {\r\n            return;\r\n        }\r\n        this.addManagedElementListeners(eGui, { keydown: this.handleKeyDown.bind(this) });\r\n    }\r\n\r\n    public handleKeyDown(e: KeyboardEvent): void {\r\n        const key = e.key;\r\n        switch (key) {\r\n            case KeyCode.ENTER:\r\n                if (!this.highlightedEl) {\r\n                    this.setValue(this.getValue());\r\n                } else {\r\n                    const pos = this.itemEls.indexOf(this.highlightedEl);\r\n                    this.setValueByIndex(pos);\r\n                }\r\n                break;\r\n            case KeyCode.DOWN:\r\n            case KeyCode.UP:\r\n                e.preventDefault();\r\n                this.navigate(key);\r\n                break;\r\n            case KeyCode.PAGE_DOWN:\r\n            case KeyCode.PAGE_UP:\r\n            case KeyCode.PAGE_HOME:\r\n            case KeyCode.PAGE_END:\r\n                e.preventDefault();\r\n                this.navigateToPage(key);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private navigate(key: 'ArrowUp' | 'ArrowDown'): void {\r\n        const isDown = key === KeyCode.DOWN;\r\n        let itemToHighlight: HTMLElement;\r\n\r\n        const { itemEls, highlightedEl } = this;\r\n        if (!highlightedEl) {\r\n            itemToHighlight = itemEls[isDown ? 0 : itemEls.length - 1];\r\n        } else {\r\n            const currentIdx = itemEls.indexOf(highlightedEl);\r\n            let nextPos = currentIdx + (isDown ? 1 : -1);\r\n            nextPos = Math.min(Math.max(nextPos, 0), itemEls.length - 1);\r\n            itemToHighlight = itemEls[nextPos];\r\n        }\r\n        this.highlightItem(itemToHighlight);\r\n    }\r\n\r\n    private navigateToPage(key: 'PageUp' | 'PageDown' | 'Home' | 'End'): void {\r\n        const { itemEls, highlightedEl } = this;\r\n        if (!highlightedEl || itemEls.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const currentIdx = itemEls.indexOf(highlightedEl);\r\n        const rowCount = this.options.length - 1;\r\n        const itemHeight = itemEls[0].clientHeight;\r\n        const pageSize = Math.floor(this.getGui().clientHeight / itemHeight);\r\n\r\n        let newIndex = -1;\r\n\r\n        if (key === KeyCode.PAGE_HOME) {\r\n            newIndex = 0;\r\n        } else if (key === KeyCode.PAGE_END) {\r\n            newIndex = rowCount;\r\n        } else if (key === KeyCode.PAGE_DOWN) {\r\n            newIndex = Math.min(currentIdx + pageSize, rowCount);\r\n        } else if (key === KeyCode.PAGE_UP) {\r\n            newIndex = Math.max(currentIdx - pageSize, 0);\r\n        }\r\n\r\n        if (newIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        this.highlightItem(itemEls[newIndex]);\r\n    }\r\n\r\n    public addOptions(listOptions: ListOption<TValue>[]): this {\r\n        listOptions.forEach((listOption) => this.addOption(listOption));\r\n        return this;\r\n    }\r\n\r\n    public addOption(listOption: ListOption<TValue>): this {\r\n        const { value, text } = listOption;\r\n        const valueToRender = text || (value as any);\r\n\r\n        this.options.push({ value, text: valueToRender });\r\n        this.renderOption(value, valueToRender);\r\n\r\n        this.updateIndices();\r\n\r\n        return this;\r\n    }\r\n\r\n    public clearOptions(): void {\r\n        this.options = [];\r\n        this.reset(true);\r\n        this.itemEls.forEach((itemEl) => {\r\n            _removeFromParent(itemEl);\r\n        });\r\n        this.itemEls = [];\r\n    }\r\n\r\n    private updateIndices(): void {\r\n        const options = this.getGui().querySelectorAll('.ag-list-item');\r\n        options.forEach((option: HTMLElement, idx) => {\r\n            _setAriaPosInSet(option, idx + 1);\r\n            _setAriaSetSize(option, options.length);\r\n        });\r\n    }\r\n\r\n    private renderOption(value: TValue, text: string): void {\r\n        const eDocument = _getDocument(this.beans);\r\n        const itemEl = eDocument.createElement('div');\r\n\r\n        _setAriaRole(itemEl, 'option');\r\n        itemEl.classList.add('ag-list-item', `ag-${this.cssIdentifier}-list-item`);\r\n        const span = eDocument.createElement('span');\r\n        itemEl.appendChild(span);\r\n        span.textContent = text;\r\n\r\n        if (!this.unFocusable) {\r\n            itemEl.tabIndex = -1;\r\n        }\r\n\r\n        this.itemEls.push(itemEl);\r\n\r\n        this.addManagedListeners(itemEl, {\r\n            mouseover: () => this.highlightItem(itemEl),\r\n            mousedown: (e: MouseEvent) => {\r\n                e.preventDefault();\r\n                // `setValue` will already close the list popup, without stopPropagation\r\n                // the mousedown event will close popups that own AgSelect\r\n                e.stopPropagation();\r\n                this.setValue(value);\r\n            },\r\n        });\r\n\r\n        this.createOptionalManagedBean(\r\n            this.beans.registry.createDynamicBean<TooltipFeature>('tooltipFeature', false, {\r\n                getTooltipValue: () => text,\r\n                getGui: () => itemEl,\r\n                getLocation: () => 'UNKNOWN',\r\n                // only show tooltips for items where the text cannot be fully displayed\r\n                shouldDisplayTooltip: () => span.scrollWidth > span.clientWidth,\r\n            } as ITooltipCtrl)\r\n        );\r\n\r\n        this.getGui().appendChild(itemEl);\r\n    }\r\n\r\n    public setValue(value?: TValue | null, silent?: boolean): this {\r\n        if (this.value === value) {\r\n            this.fireItemSelected();\r\n            return this;\r\n        }\r\n\r\n        if (value == null) {\r\n            this.reset(silent);\r\n            return this;\r\n        }\r\n\r\n        const idx = this.options.findIndex((option) => option.value === value);\r\n\r\n        if (idx !== -1) {\r\n            const option = this.options[idx];\r\n\r\n            this.value = option.value;\r\n            this.displayValue = option.text!;\r\n            this.highlightItem(this.itemEls[idx]);\r\n\r\n            if (!silent) {\r\n                this.fireChangeEvent();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public setValueByIndex(idx: number): this {\r\n        return this.setValue(this.options[idx].value);\r\n    }\r\n\r\n    public getValue(): TValue | null {\r\n        return this.value;\r\n    }\r\n\r\n    public getDisplayValue(): string | null {\r\n        return this.displayValue;\r\n    }\r\n\r\n    public refreshHighlighted(): void {\r\n        this.clearHighlighted();\r\n        const idx = this.options.findIndex((option) => option.value === this.value);\r\n\r\n        if (idx !== -1) {\r\n            this.highlightItem(this.itemEls[idx]);\r\n        }\r\n    }\r\n\r\n    private reset(silent?: boolean): void {\r\n        this.value = null;\r\n        this.displayValue = null;\r\n        this.clearHighlighted();\r\n        if (!silent) {\r\n            this.fireChangeEvent();\r\n        }\r\n    }\r\n\r\n    private highlightItem(el: HTMLElement): void {\r\n        if (!_isVisible(el)) {\r\n            return;\r\n        }\r\n\r\n        this.clearHighlighted();\r\n        this.highlightedEl = el;\r\n\r\n        el.classList.add(this.activeClass);\r\n        _setAriaSelected(el, true);\r\n\r\n        const eGui = this.getGui();\r\n\r\n        const { scrollTop, clientHeight } = eGui;\r\n        const { offsetTop, offsetHeight } = el;\r\n\r\n        if (offsetTop + offsetHeight > scrollTop + clientHeight || offsetTop < scrollTop) {\r\n            el.scrollIntoView({ block: 'nearest' });\r\n        }\r\n\r\n        if (!this.unFocusable) {\r\n            el.focus();\r\n        }\r\n    }\r\n\r\n    private clearHighlighted(): void {\r\n        const highlightedEl = this.highlightedEl;\r\n        if (!highlightedEl || !_isVisible(highlightedEl)) {\r\n            return;\r\n        }\r\n\r\n        highlightedEl.classList.remove(this.activeClass);\r\n        _setAriaSelected(highlightedEl, false);\r\n\r\n        this.highlightedEl = null;\r\n    }\r\n\r\n    private fireChangeEvent(): void {\r\n        this.dispatchLocalEvent({ type: 'fieldValueChanged' });\r\n        this.fireItemSelected();\r\n    }\r\n\r\n    private fireItemSelected(): void {\r\n        this.dispatchLocalEvent({ type: 'selectedItem' });\r\n    }\r\n}\r\n", "export const agPickerFieldCSS = /*css*/ `.ag-picker-field-display{flex:1 1 auto}.ag-picker-field{align-items:center;display:flex}.ag-picker-field-icon{border:0;cursor:pointer;display:flex;margin:0;padding:0}.ag-picker-field-wrapper{background-color:var(--ag-background-color);border:var(--ag-input-border);border-radius:5px;min-height:max(var(--ag-list-item-height),calc(var(--ag-spacing)*4));overflow:hidden;&:disabled{opacity:.5}&.ag-picker-has-focus,&:focus-within{border:var(--ag-input-focus-border);box-shadow:var(--ag-focus-shadow)}}.ag-picker-field-button{background-color:var(--ag-background-color)}`;\n", "import { KeyCode } from '../constants/keyCode';\r\nimport { _isNothingFocused } from '../gridOptionsUtils';\r\nimport type { AgPickerFieldParams } from '../interfaces/agFieldParams';\r\nimport { _setAriaExpanded, _setAriaRole } from '../utils/aria';\r\nimport { _formatSize, _getAbsoluteWidth, _getInnerHeight, _setElementWidth } from '../utils/dom';\r\nimport type { IconName } from '../utils/icon';\r\nimport { _createIconNoSpan } from '../utils/icon';\r\nimport type { AgAbstractFieldEvent } from './agAbstractField';\r\nimport { AgAbstractField } from './agAbstractField';\r\nimport { agPickerFieldCSS } from './agPickerField.css-GENERATED';\r\nimport type { Component } from './component';\r\nimport { RefPlaceholder } from './component';\r\nimport type { AddPopupParams } from './popupService';\r\n\r\nexport type AgPickerFieldEvent = AgAbstractFieldEvent;\r\nexport abstract class AgPickerField<\r\n    TValue,\r\n    TConfig extends AgPickerFieldParams = AgPickerFieldParams,\r\n    TEventType extends string = AgPickerFieldEvent,\r\n    TComponent extends Component<TEventType | AgPickerFieldEvent> = Component<TEventType | AgPickerFieldEvent>,\r\n> extends AgAbstractField<TValue, TConfig, TEventType | AgPickerFieldEvent> {\r\n    protected abstract createPickerComponent(): TComponent;\r\n\r\n    protected pickerComponent: TComponent | undefined;\r\n    protected isPickerDisplayed: boolean = false;\r\n\r\n    protected maxPickerHeight: string | undefined;\r\n    protected variableWidth: boolean;\r\n    protected minPickerWidth: string | undefined;\r\n    protected maxPickerWidth: string | undefined;\r\n    protected override value: TValue;\r\n\r\n    private skipClick: boolean = false;\r\n    private pickerGap: number = 4;\r\n\r\n    private hideCurrentPicker: (() => void) | null = null;\r\n    private destroyMouseWheelFunc: (() => null) | undefined;\r\n    private ariaRole?: string;\r\n\r\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\r\n    protected readonly eWrapper: HTMLElement = RefPlaceholder;\r\n    protected readonly eDisplayField: HTMLElement = RefPlaceholder;\r\n    private readonly eIcon: HTMLButtonElement = RefPlaceholder;\r\n\r\n    constructor(config?: TConfig) {\r\n        super(\r\n            config,\r\n            config?.template ||\r\n                /* html */ `\r\n            <div class=\"ag-picker-field\" role=\"presentation\">\r\n                <div data-ref=\"eLabel\"></div>\r\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-picker-collapsed\">\r\n                    <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\r\n                    <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\r\n                </div>\r\n            </div>`,\r\n            config?.agComponents || [],\r\n            config?.className\r\n        );\r\n        this.registerCSS(agPickerFieldCSS);\r\n\r\n        this.ariaRole = config?.ariaRole;\r\n        this.onPickerFocusIn = this.onPickerFocusIn.bind(this);\r\n        this.onPickerFocusOut = this.onPickerFocusOut.bind(this);\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        const { pickerGap, maxPickerHeight, variableWidth, minPickerWidth, maxPickerWidth } = config;\r\n\r\n        if (pickerGap != null) {\r\n            this.pickerGap = pickerGap;\r\n        }\r\n\r\n        this.variableWidth = !!variableWidth;\r\n\r\n        if (maxPickerHeight != null) {\r\n            this.setPickerMaxHeight(maxPickerHeight);\r\n        }\r\n\r\n        if (minPickerWidth != null) {\r\n            this.setPickerMinWidth(minPickerWidth);\r\n        }\r\n\r\n        if (maxPickerWidth != null) {\r\n            this.setPickerMaxWidth(maxPickerWidth);\r\n        }\r\n    }\r\n\r\n    public override postConstruct() {\r\n        super.postConstruct();\r\n\r\n        this.setupAria();\r\n\r\n        const displayId = `ag-${this.getCompId()}-display`;\r\n        this.eDisplayField.setAttribute('id', displayId);\r\n\r\n        const ariaEl = this.getAriaElement();\r\n        this.addManagedElementListeners(ariaEl, { keydown: this.onKeyDown.bind(this) });\r\n\r\n        this.addManagedElementListeners(this.eLabel, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) });\r\n        this.addManagedElementListeners(this.eWrapper, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) });\r\n\r\n        const { pickerIcon, inputWidth } = this.config;\r\n\r\n        if (pickerIcon) {\r\n            const icon = _createIconNoSpan(pickerIcon as IconName, this.beans);\r\n            if (icon) {\r\n                this.eIcon.appendChild(icon);\r\n            }\r\n        }\r\n\r\n        if (inputWidth != null) {\r\n            this.setInputWidth(inputWidth);\r\n        }\r\n    }\r\n\r\n    protected setupAria(): void {\r\n        const ariaEl = this.getAriaElement();\r\n\r\n        ariaEl.setAttribute('tabindex', this.gos.get('tabIndex').toString());\r\n\r\n        _setAriaExpanded(ariaEl, false);\r\n\r\n        if (this.ariaRole) {\r\n            _setAriaRole(ariaEl, this.ariaRole);\r\n        }\r\n    }\r\n\r\n    private onLabelOrWrapperMouseDown(e?: MouseEvent): void {\r\n        if (e) {\r\n            const focusableEl = this.getFocusableElement();\r\n            // if the focusableEl is not the wrapper and the mousedown\r\n            // targets the focusableEl, we should not expand/collapse the picker.\r\n            // Note: this will happen when AgRichSelect is set with `allowTyping=true`\r\n            if (focusableEl !== this.eWrapper && e?.target === focusableEl) {\r\n                return;\r\n            }\r\n\r\n            // this prevents a BUG where MouseDown causes the element to be focused\r\n            // after the picker is shown and focus ends up being lost.\r\n            e.preventDefault();\r\n            this.getFocusableElement().focus();\r\n        }\r\n\r\n        if (this.skipClick) {\r\n            this.skipClick = false;\r\n            return;\r\n        }\r\n\r\n        if (this.isDisabled()) {\r\n            return;\r\n        }\r\n\r\n        if (this.isPickerDisplayed) {\r\n            this.hidePicker();\r\n        } else {\r\n            this.showPicker();\r\n        }\r\n    }\r\n\r\n    protected onKeyDown(e: KeyboardEvent): void {\r\n        switch (e.key) {\r\n            case KeyCode.UP:\r\n            case KeyCode.DOWN:\r\n            case KeyCode.ENTER:\r\n            case KeyCode.SPACE:\r\n                e.preventDefault();\r\n                this.onLabelOrWrapperMouseDown();\r\n                break;\r\n            case KeyCode.ESCAPE:\r\n                if (this.isPickerDisplayed) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    if (this.hideCurrentPicker) {\r\n                        this.hideCurrentPicker();\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public showPicker() {\r\n        this.isPickerDisplayed = true;\r\n\r\n        if (!this.pickerComponent) {\r\n            this.pickerComponent = this.createPickerComponent();\r\n        }\r\n\r\n        const pickerGui = this.pickerComponent.getGui();\r\n        pickerGui.addEventListener('focusin', this.onPickerFocusIn);\r\n        pickerGui.addEventListener('focusout', this.onPickerFocusOut);\r\n\r\n        this.hideCurrentPicker = this.renderAndPositionPicker();\r\n\r\n        this.toggleExpandedStyles(true);\r\n    }\r\n\r\n    protected renderAndPositionPicker(): () => void {\r\n        const ePicker = this.pickerComponent!.getGui();\r\n\r\n        if (!this.gos.get('suppressScrollWhenPopupsAreOpen')) {\r\n            [this.destroyMouseWheelFunc] = this.addManagedEventListeners({\r\n                bodyScroll: () => {\r\n                    this.hidePicker();\r\n                },\r\n            });\r\n        }\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n\r\n        const {\r\n            config: { pickerAriaLabelKey, pickerAriaLabelValue, modalPicker = true },\r\n            maxPickerHeight,\r\n            minPickerWidth,\r\n            maxPickerWidth,\r\n            variableWidth,\r\n            beans,\r\n            eWrapper,\r\n        } = this;\r\n\r\n        const popupParams: AddPopupParams = {\r\n            modal: modalPicker,\r\n            eChild: ePicker,\r\n            closeOnEsc: true,\r\n            closedCallback: () => {\r\n                const shouldRestoreFocus = _isNothingFocused(beans);\r\n                this.beforeHidePicker();\r\n\r\n                if (shouldRestoreFocus && this.isAlive()) {\r\n                    this.getFocusableElement().focus();\r\n                }\r\n            },\r\n            ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue),\r\n            anchorToElement: eWrapper,\r\n        };\r\n\r\n        // need to set position before adding to the dom\r\n        ePicker.style.position = 'absolute';\r\n        const popupSvc = beans.popupSvc!;\r\n        const addPopupRes = popupSvc.addPopup(popupParams);\r\n\r\n        if (variableWidth) {\r\n            if (minPickerWidth) {\r\n                ePicker.style.minWidth = minPickerWidth;\r\n            }\r\n            ePicker.style.width = _formatSize(_getAbsoluteWidth(eWrapper));\r\n            if (maxPickerWidth) {\r\n                ePicker.style.maxWidth = maxPickerWidth;\r\n            }\r\n        } else {\r\n            _setElementWidth(ePicker, maxPickerWidth ?? _getAbsoluteWidth(eWrapper));\r\n        }\r\n\r\n        const maxHeight = maxPickerHeight ?? `${_getInnerHeight(popupSvc.getPopupParent())}px`;\r\n\r\n        ePicker.style.setProperty('max-height', maxHeight);\r\n\r\n        this.alignPickerToComponent();\r\n\r\n        return addPopupRes.hideFunc;\r\n    }\r\n\r\n    protected alignPickerToComponent(): void {\r\n        if (!this.pickerComponent) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            pickerGap,\r\n            config: { pickerType },\r\n            beans: { popupSvc, gos },\r\n            eWrapper,\r\n            pickerComponent,\r\n        } = this;\r\n\r\n        const alignSide = gos.get('enableRtl') ? 'right' : 'left';\r\n\r\n        popupSvc!.positionPopupByComponent({\r\n            type: pickerType,\r\n            eventSource: eWrapper,\r\n            ePopup: pickerComponent.getGui(),\r\n            position: 'under',\r\n            alignSide,\r\n            keepWithinBounds: true,\r\n            nudgeY: pickerGap,\r\n        });\r\n    }\r\n\r\n    protected beforeHidePicker(): void {\r\n        if (this.destroyMouseWheelFunc) {\r\n            this.destroyMouseWheelFunc();\r\n            this.destroyMouseWheelFunc = undefined;\r\n        }\r\n\r\n        this.toggleExpandedStyles(false);\r\n\r\n        const pickerGui = this.pickerComponent!.getGui();\r\n\r\n        pickerGui.removeEventListener('focusin', this.onPickerFocusIn);\r\n        pickerGui.removeEventListener('focusout', this.onPickerFocusOut);\r\n\r\n        this.isPickerDisplayed = false;\r\n        this.pickerComponent = undefined;\r\n        this.hideCurrentPicker = null;\r\n    }\r\n\r\n    protected toggleExpandedStyles(expanded: boolean): void {\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n\r\n        const ariaEl = this.getAriaElement();\r\n\r\n        _setAriaExpanded(ariaEl, expanded);\r\n\r\n        const classList = this.eWrapper.classList;\r\n        classList.toggle('ag-picker-expanded', expanded);\r\n        classList.toggle('ag-picker-collapsed', !expanded);\r\n    }\r\n\r\n    private onPickerFocusIn(): void {\r\n        this.togglePickerHasFocus(true);\r\n    }\r\n\r\n    private onPickerFocusOut(e: FocusEvent): void {\r\n        if (!this.pickerComponent?.getGui().contains(e.relatedTarget as Element)) {\r\n            this.togglePickerHasFocus(false);\r\n        }\r\n    }\r\n\r\n    private togglePickerHasFocus(focused: boolean): void {\r\n        if (!this.pickerComponent) {\r\n            return;\r\n        }\r\n\r\n        this.eWrapper.classList.toggle('ag-picker-has-focus', focused);\r\n    }\r\n\r\n    public hidePicker(): void {\r\n        this.hideCurrentPicker?.();\r\n    }\r\n\r\n    public setInputWidth(width: number | 'flex'): this {\r\n        _setElementWidth(this.eWrapper, width);\r\n        return this;\r\n    }\r\n\r\n    public override getFocusableElement(): HTMLElement {\r\n        return this.eWrapper;\r\n    }\r\n\r\n    public setPickerGap(gap: number): this {\r\n        this.pickerGap = gap;\r\n\r\n        return this;\r\n    }\r\n\r\n    public setPickerMinWidth(width?: number | string): this {\r\n        if (typeof width === 'number') {\r\n            width = `${width}px`;\r\n        }\r\n        this.minPickerWidth = width == null ? undefined : width;\r\n        return this;\r\n    }\r\n\r\n    public setPickerMaxWidth(width?: number | string): this {\r\n        if (typeof width === 'number') {\r\n            width = `${width}px`;\r\n        }\r\n        this.maxPickerWidth = width == null ? undefined : width;\r\n        return this;\r\n    }\r\n\r\n    public setPickerMaxHeight(height?: number | string): this {\r\n        if (typeof height === 'number') {\r\n            height = `${height}px`;\r\n        }\r\n\r\n        this.maxPickerHeight = height == null ? undefined : height;\r\n        return this;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.hidePicker();\r\n        super.destroy();\r\n    }\r\n}\r\n", "export const agSelectCSS = /*css*/ `.ag-select{align-items:center;display:flex;&.ag-disabled{opacity:.5}}:where(.ag-select){.ag-picker-field-wrapper{cursor:default}&.ag-disabled .ag-picker-field-wrapper:focus{box-shadow:none}&:not(.ag-cell-editor,.ag-label-align-top){min-height:var(--ag-list-item-height)}.ag-picker-field-display{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ag-picker-field-icon{align-items:center;display:flex}}:where(.ag-ltr) :where(.ag-select){.ag-picker-field-wrapper{padding-left:calc(var(--ag-cell-horizontal-padding)/2);padding-right:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-select){.ag-picker-field-wrapper{padding-left:var(--ag-spacing);padding-right:calc(var(--ag-cell-horizontal-padding)/2)}}`;\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { AgPickerFieldParams } from '../interfaces/agFieldParams';\r\nimport { _shouldDisplayTooltip } from '../tooltip/tooltipFeature';\r\nimport type { ITooltipCtrl, TooltipFeature } from '../tooltip/tooltipFeature';\r\nimport { _setAriaControls } from '../utils/aria';\r\nimport type { ListOption } from './agList';\r\nimport { AgList } from './agList';\r\nimport { AgPickerField } from './agPickerField';\r\nimport { agSelectCSS } from './agSelect.css-GENERATED';\r\nimport type { ComponentSelector } from './component';\r\n\r\nexport interface AgSelectParams<TValue = string>\r\n    extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\r\n    options?: ListOption<TValue>[];\r\n    pickerType?: string;\r\n    pickerAriaLabelKey?: string;\r\n    pickerAriaLabelValue?: string;\r\n    placeholder?: string;\r\n}\r\nexport type AgSelectEvent = 'selectedItem';\r\nexport class AgSelect<TValue = string | null> extends AgPickerField<\r\n    TValue,\r\n    AgSelectParams<TValue> & AgPickerFieldParams,\r\n    AgSelectEvent,\r\n    AgList<AgSelectEvent, TValue>\r\n> {\r\n    protected listComponent: AgList<AgSelectEvent, TValue> | undefined;\r\n    private tooltipFeature?: TooltipFeature;\r\n\r\n    constructor(config?: AgSelectParams<TValue>) {\r\n        super({\r\n            pickerAriaLabelKey: 'ariaLabelSelectField',\r\n            pickerAriaLabelValue: 'Select Field',\r\n            pickerType: 'ag-list',\r\n            className: 'ag-select',\r\n            pickerIcon: 'selectOpen',\r\n            ariaRole: 'combobox',\r\n            ...config,\r\n        });\r\n        this.registerCSS(agSelectCSS);\r\n    }\r\n\r\n    public override postConstruct(): void {\r\n        this.tooltipFeature = this.createOptionalManagedBean(\r\n            this.beans.registry.createDynamicBean<TooltipFeature>('tooltipFeature', false, {\r\n                shouldDisplayTooltip: _shouldDisplayTooltip(() => this.eDisplayField),\r\n                getGui: () => this.getGui(),\r\n            } as ITooltipCtrl)\r\n        );\r\n        super.postConstruct();\r\n        this.createListComponent();\r\n        this.eWrapper.tabIndex = this.gos.get('tabIndex');\r\n\r\n        const { options, value, placeholder } = this.config;\r\n        if (options != null) {\r\n            this.addOptions(options);\r\n        }\r\n        if (value != null) {\r\n            // need to reapply value after list component created\r\n            this.setValue(value, true);\r\n        }\r\n        if (placeholder && value == null) {\r\n            this.eDisplayField.textContent = placeholder;\r\n        }\r\n\r\n        this.addManagedElementListeners(this.eWrapper, { focusout: this.onWrapperFocusOut.bind(this) });\r\n    }\r\n\r\n    private onWrapperFocusOut(e: FocusEvent): void {\r\n        if (!this.eWrapper.contains(e.relatedTarget as Element)) {\r\n            this.hidePicker();\r\n        }\r\n    }\r\n\r\n    private createListComponent(): void {\r\n        const listComponent = this.createBean(new AgList<AgSelectEvent, TValue>('select', true));\r\n        this.listComponent = listComponent;\r\n        listComponent.setParentComponent(this);\r\n\r\n        const eListAriaEl = listComponent.getAriaElement();\r\n        const listId = `ag-select-list-${listComponent.getCompId()}`;\r\n\r\n        eListAriaEl.setAttribute('id', listId);\r\n        _setAriaControls(this.getAriaElement(), eListAriaEl);\r\n\r\n        listComponent.addManagedListeners(listComponent, {\r\n            selectedItem: () => {\r\n                this.hidePicker();\r\n                this.dispatchLocalEvent({ type: 'selectedItem' });\r\n            },\r\n        });\r\n\r\n        listComponent.addManagedListeners(listComponent, {\r\n            fieldValueChanged: () => {\r\n                if (!this.listComponent) {\r\n                    return;\r\n                }\r\n                this.setValue(this.listComponent.getValue()!, false, true);\r\n                this.hidePicker();\r\n            },\r\n        });\r\n    }\r\n\r\n    protected createPickerComponent() {\r\n        // do not create the picker every time to save state\r\n        return this.listComponent!;\r\n    }\r\n\r\n    protected override onKeyDown(e: KeyboardEvent): void {\r\n        const { key } = e;\r\n\r\n        if (key === KeyCode.TAB) {\r\n            this.hidePicker();\r\n        }\r\n\r\n        switch (key) {\r\n            case KeyCode.ENTER:\r\n            case KeyCode.UP:\r\n            case KeyCode.DOWN:\r\n            case KeyCode.PAGE_UP:\r\n            case KeyCode.PAGE_DOWN:\r\n            case KeyCode.PAGE_HOME:\r\n            case KeyCode.PAGE_END:\r\n                e.preventDefault();\r\n                if (this.isPickerDisplayed) {\r\n                    this.listComponent?.handleKeyDown(e);\r\n                } else {\r\n                    super.onKeyDown(e);\r\n                }\r\n                break;\r\n            case KeyCode.ESCAPE:\r\n                super.onKeyDown(e);\r\n                break;\r\n            case KeyCode.SPACE:\r\n                if (this.isPickerDisplayed) {\r\n                    e.preventDefault();\r\n                } else {\r\n                    super.onKeyDown(e);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public override showPicker() {\r\n        const listComponent = this.listComponent;\r\n        if (!listComponent) {\r\n            return;\r\n        }\r\n\r\n        super.showPicker();\r\n\r\n        listComponent.refreshHighlighted();\r\n    }\r\n\r\n    public addOptions(options: ListOption<TValue>[]): this {\r\n        options.forEach((option) => this.addOption(option));\r\n\r\n        return this;\r\n    }\r\n\r\n    public addOption(option: ListOption<TValue>): this {\r\n        this.listComponent!.addOption(option);\r\n\r\n        return this;\r\n    }\r\n\r\n    public clearOptions(): this {\r\n        this.listComponent?.clearOptions();\r\n\r\n        return this;\r\n    }\r\n\r\n    public override setValue(value?: TValue, silent?: boolean, fromPicker?: boolean): this {\r\n        const {\r\n            listComponent,\r\n            config: { placeholder },\r\n            eDisplayField,\r\n            tooltipFeature,\r\n        } = this;\r\n        if (this.value === value || !listComponent) {\r\n            return this;\r\n        }\r\n\r\n        if (!fromPicker) {\r\n            listComponent.setValue(value, true);\r\n        }\r\n\r\n        const newValue = listComponent.getValue();\r\n\r\n        if (newValue === this.getValue()) {\r\n            return this;\r\n        }\r\n\r\n        let displayValue = listComponent.getDisplayValue();\r\n        if (displayValue == null && placeholder) {\r\n            displayValue = placeholder;\r\n        }\r\n\r\n        eDisplayField.textContent = displayValue!;\r\n\r\n        tooltipFeature?.setTooltipAndRefresh(displayValue ?? null);\r\n\r\n        return super.setValue(value, silent);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.listComponent = this.destroyBean(this.listComponent);\r\n\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nexport const AgSelectSelector: ComponentSelector = {\r\n    selector: 'AG-SELECT',\r\n    component: AgSelect,\r\n};\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport { _getDocument } from '../gridOptionsUtils';\r\nimport { _findFocusableElements, _findNextFocusableElement } from '../utils/focus';\r\nimport { ManagedFocusFeature } from './managedFocusFeature';\r\n\r\nexport const TabGuardClassNames = {\r\n    TAB_GUARD: 'ag-tab-guard',\r\n    TAB_GUARD_TOP: 'ag-tab-guard-top',\r\n    TAB_GUARD_BOTTOM: 'ag-tab-guard-bottom',\r\n} as const;\r\n\r\nexport interface ITabGuard {\r\n    setTabIndex(tabIndex?: string): void;\r\n}\r\n\r\nexport class TabGuardCtrl extends BeanStub {\r\n    private readonly comp: ITabGuard;\r\n    private readonly eTopGuard: HTMLElement;\r\n    private readonly eBottomGuard: HTMLElement;\r\n\r\n    private readonly eFocusableElement: HTMLElement;\r\n    private readonly focusTrapActive: boolean;\r\n    private readonly forceFocusOutWhenTabGuardsAreEmpty: boolean;\r\n    // When true, this prevents the browser from tabbing into and out of the element.\r\n    // Instead, focus must be handled manually\r\n    private readonly isFocusableContainer: boolean;\r\n\r\n    private readonly providedFocusInnerElement?: (fromBottom: boolean) => void;\r\n    private readonly providedFocusIn?: (event: FocusEvent) => void;\r\n    private readonly providedFocusOut?: (event: FocusEvent) => void;\r\n\r\n    private readonly providedShouldStopEventPropagation?: () => boolean;\r\n    private readonly providedOnTabKeyDown?: (e: KeyboardEvent) => void;\r\n    private readonly providedHandleKeyDown?: (e: KeyboardEvent) => void;\r\n\r\n    private skipTabGuardFocus: boolean = false;\r\n    private forcingFocusOut: boolean = false;\r\n    // Used when `isFocusableContainer` enabled\r\n    private allowFocus: boolean = false;\r\n\r\n    constructor(params: {\r\n        comp: ITabGuard;\r\n        eTopGuard: HTMLElement;\r\n        eBottomGuard: HTMLElement;\r\n        eFocusableElement: HTMLElement;\r\n        focusTrapActive?: boolean;\r\n        forceFocusOutWhenTabGuardsAreEmpty?: boolean;\r\n        isFocusableContainer?: boolean;\r\n        focusInnerElement?: (fromBottom: boolean) => void;\r\n        onFocusIn?: (event: FocusEvent) => void;\r\n        onFocusOut?: (event: FocusEvent) => void;\r\n        shouldStopEventPropagation?: () => boolean;\r\n        onTabKeyDown?: (e: KeyboardEvent) => void;\r\n        handleKeyDown?: (e: KeyboardEvent) => void;\r\n    }) {\r\n        super();\r\n\r\n        const {\r\n            comp,\r\n            eTopGuard,\r\n            eBottomGuard,\r\n            focusTrapActive,\r\n            forceFocusOutWhenTabGuardsAreEmpty,\r\n            isFocusableContainer,\r\n            focusInnerElement,\r\n            onFocusIn,\r\n            onFocusOut,\r\n            shouldStopEventPropagation,\r\n            onTabKeyDown,\r\n            handleKeyDown,\r\n            eFocusableElement,\r\n        } = params;\r\n\r\n        this.comp = comp;\r\n\r\n        this.eTopGuard = eTopGuard;\r\n        this.eBottomGuard = eBottomGuard;\r\n        this.providedFocusInnerElement = focusInnerElement;\r\n        this.eFocusableElement = eFocusableElement;\r\n        this.focusTrapActive = !!focusTrapActive;\r\n        this.forceFocusOutWhenTabGuardsAreEmpty = !!forceFocusOutWhenTabGuardsAreEmpty;\r\n        this.isFocusableContainer = !!isFocusableContainer;\r\n\r\n        this.providedFocusIn = onFocusIn;\r\n        this.providedFocusOut = onFocusOut;\r\n        this.providedShouldStopEventPropagation = shouldStopEventPropagation;\r\n        this.providedOnTabKeyDown = onTabKeyDown;\r\n        this.providedHandleKeyDown = handleKeyDown;\r\n    }\r\n\r\n    public postConstruct() {\r\n        this.createManagedBean(\r\n            new ManagedFocusFeature(this.eFocusableElement, {\r\n                shouldStopEventPropagation: () => this.shouldStopEventPropagation(),\r\n                onTabKeyDown: (e) => this.onTabKeyDown(e),\r\n                handleKeyDown: (e) => this.handleKeyDown(e),\r\n                onFocusIn: (e) => this.onFocusIn(e),\r\n                onFocusOut: (e) => this.onFocusOut(e),\r\n            })\r\n        );\r\n\r\n        this.activateTabGuards();\r\n\r\n        [this.eTopGuard, this.eBottomGuard].forEach((guard) =>\r\n            this.addManagedElementListeners(guard, { focus: this.onFocus.bind(this) })\r\n        );\r\n    }\r\n\r\n    private handleKeyDown(e: KeyboardEvent): void {\r\n        if (this.providedHandleKeyDown) {\r\n            this.providedHandleKeyDown(e);\r\n        }\r\n    }\r\n\r\n    private tabGuardsAreActive(): boolean {\r\n        return !!this.eTopGuard && this.eTopGuard.hasAttribute('tabIndex');\r\n    }\r\n\r\n    private shouldStopEventPropagation(): boolean {\r\n        if (this.providedShouldStopEventPropagation) {\r\n            return this.providedShouldStopEventPropagation();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private activateTabGuards(): void {\r\n        // Do not activate tabs while focus is being forced out\r\n        if (this.forcingFocusOut) {\r\n            return;\r\n        }\r\n        const tabIndex = this.gos.get('tabIndex');\r\n        this.comp.setTabIndex(tabIndex.toString());\r\n    }\r\n\r\n    private deactivateTabGuards(): void {\r\n        this.comp.setTabIndex();\r\n    }\r\n\r\n    private onFocus(e: FocusEvent): void {\r\n        if (this.isFocusableContainer && !this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\r\n            if (!this.allowFocus) {\r\n                this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.skipTabGuardFocus) {\r\n            this.skipTabGuardFocus = false;\r\n            return;\r\n        }\r\n\r\n        // when there are no focusable items within the TabGuard, focus gets stuck\r\n        // in the TabGuard itself and has nowhere to go, so we need to manually find\r\n        // the closest element to focus by calling `forceFocusOutWhenTabGuardAreEmpty`.\r\n        if (this.forceFocusOutWhenTabGuardsAreEmpty) {\r\n            const isEmpty = _findFocusableElements(this.eFocusableElement, '.ag-tab-guard').length === 0;\r\n            if (isEmpty) {\r\n                this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.isFocusableContainer && this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        const fromBottom = e.target === this.eBottomGuard;\r\n\r\n        if (this.providedFocusInnerElement) {\r\n            this.providedFocusInnerElement(fromBottom);\r\n        } else {\r\n            this.focusInnerElement(fromBottom);\r\n        }\r\n    }\r\n\r\n    private findNextElementOutsideAndFocus(up: boolean) {\r\n        const eDocument = _getDocument(this.beans);\r\n        const focusableEls = _findFocusableElements(eDocument.body, null, true);\r\n        const index = focusableEls.indexOf(up ? this.eTopGuard : this.eBottomGuard);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        let start: number;\r\n        let end: number;\r\n        if (up) {\r\n            start = 0;\r\n            end = index;\r\n        } else {\r\n            start = index + 1;\r\n            end = focusableEls.length;\r\n        }\r\n        const focusableRange = focusableEls.slice(start, end);\r\n        const targetTabIndex = this.gos.get('tabIndex');\r\n        focusableRange.sort((a: HTMLElement, b: HTMLElement) => {\r\n            const indexA = parseInt(a.getAttribute('tabindex') || '0');\r\n            const indexB = parseInt(b.getAttribute('tabindex') || '0');\r\n\r\n            if (indexB === targetTabIndex) {\r\n                return 1;\r\n            }\r\n            if (indexA === targetTabIndex) {\r\n                return -1;\r\n            }\r\n\r\n            if (indexA === 0) {\r\n                return 1;\r\n            }\r\n            if (indexB === 0) {\r\n                return -1;\r\n            }\r\n\r\n            return indexA - indexB;\r\n        });\r\n\r\n        focusableRange[up ? focusableRange.length - 1 : 0]?.focus();\r\n    }\r\n\r\n    private onFocusIn(e: FocusEvent): void {\r\n        if (this.focusTrapActive || this.forcingFocusOut) {\r\n            return;\r\n        }\r\n\r\n        if (this.providedFocusIn) {\r\n            this.providedFocusIn(e);\r\n        }\r\n\r\n        if (!this.isFocusableContainer) {\r\n            this.deactivateTabGuards();\r\n        }\r\n    }\r\n\r\n    private onFocusOut(e: FocusEvent): void {\r\n        if (this.focusTrapActive) {\r\n            return;\r\n        }\r\n\r\n        if (this.providedFocusOut) {\r\n            this.providedFocusOut(e);\r\n        }\r\n\r\n        if (!this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\r\n            this.activateTabGuards();\r\n        }\r\n    }\r\n\r\n    public onTabKeyDown(e: KeyboardEvent): void {\r\n        if (this.providedOnTabKeyDown) {\r\n            this.providedOnTabKeyDown(e);\r\n            return;\r\n        }\r\n\r\n        if (this.focusTrapActive) {\r\n            return;\r\n        }\r\n        if (e.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        const tabGuardsAreActive = this.tabGuardsAreActive();\r\n\r\n        if (tabGuardsAreActive) {\r\n            this.deactivateTabGuards();\r\n        }\r\n\r\n        const nextRoot = this.getNextFocusableElement(e.shiftKey);\r\n\r\n        if (tabGuardsAreActive) {\r\n            // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser\r\n            // tabbing to the tab guard from inside the component\r\n            setTimeout(() => this.activateTabGuards(), 0);\r\n        }\r\n\r\n        if (!nextRoot) {\r\n            return;\r\n        }\r\n\r\n        nextRoot.focus();\r\n        e.preventDefault();\r\n    }\r\n\r\n    public focusInnerElement(fromBottom = false): void {\r\n        const focusable = _findFocusableElements(this.eFocusableElement);\r\n\r\n        if (this.tabGuardsAreActive()) {\r\n            // remove tab guards from this component from list of focusable elements\r\n            focusable.splice(0, 1);\r\n            focusable.splice(focusable.length - 1, 1);\r\n        }\r\n\r\n        if (!focusable.length) {\r\n            return;\r\n        }\r\n\r\n        focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });\r\n    }\r\n\r\n    public getNextFocusableElement(backwards?: boolean): HTMLElement | null {\r\n        return _findNextFocusableElement(this.beans, this.eFocusableElement, false, backwards);\r\n    }\r\n\r\n    public forceFocusOutOfContainer(up: boolean = false): void {\r\n        // avoid multiple calls to `forceFocusOutOfContainer`\r\n        if (this.forcingFocusOut) {\r\n            return;\r\n        }\r\n\r\n        const tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;\r\n\r\n        this.activateTabGuards();\r\n        this.skipTabGuardFocus = true;\r\n        this.forcingFocusOut = true;\r\n\r\n        // this focus will set `this.skipTabGuardFocus` to false;\r\n        tabGuardToFocus.focus();\r\n\r\n        window.setTimeout(() => {\r\n            this.forcingFocusOut = false;\r\n            this.activateTabGuards();\r\n        });\r\n    }\r\n\r\n    public isTabGuard(element: HTMLElement, bottom?: boolean): boolean {\r\n        return (element === this.eTopGuard && !bottom) || (element === this.eBottomGuard && (bottom ?? true));\r\n    }\r\n\r\n    public setAllowFocus(allowFocus: boolean): void {\r\n        this.allowFocus = allowFocus;\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport { _getDocument } from '../gridOptionsUtils';\r\nimport { _setAriaRole } from '../utils/aria';\r\nimport { _clearElement, _isNodeOrElement } from '../utils/dom';\r\nimport type { Component } from './component';\r\nimport type { ITabGuard } from './tabGuardCtrl';\r\nimport { TabGuardClassNames, TabGuardCtrl } from './tabGuardCtrl';\r\n\r\nexport interface TabGuardParams {\r\n    focusInnerElement?: (fromBottom: boolean) => void;\r\n    shouldStopEventPropagation?: () => boolean;\r\n    /**\r\n     * @return `true` to prevent the default onFocusIn behavior\r\n     */\r\n    onFocusIn?: (e: FocusEvent) => void;\r\n    /**\r\n     * @return `true` to prevent the default onFocusOut behavior\r\n     */\r\n    onFocusOut?: (e: FocusEvent) => void;\r\n    onTabKeyDown?: (e: KeyboardEvent) => void;\r\n    handleKeyDown?: (e: KeyboardEvent) => void;\r\n    /**\r\n     * Set to true to create a circular focus pattern when keyboard tabbing.\r\n     */\r\n    focusTrapActive?: boolean;\r\n    /**\r\n     * Set to true to find a focusable element outside of the TabGuards to focus\r\n     */\r\n    forceFocusOutWhenTabGuardsAreEmpty?: boolean;\r\n    isFocusableContainer?: boolean;\r\n}\r\n\r\nexport class TabGuardFeature extends BeanStub {\r\n    private eTopGuard: HTMLElement;\r\n    private eBottomGuard: HTMLElement;\r\n    private eFocusableElement: HTMLElement;\r\n\r\n    private tabGuardCtrl: TabGuardCtrl;\r\n\r\n    constructor(private readonly comp: Component<any>) {\r\n        super();\r\n    }\r\n\r\n    public initialiseTabGuard(params: TabGuardParams) {\r\n        this.eTopGuard = this.createTabGuard('top');\r\n        this.eBottomGuard = this.createTabGuard('bottom');\r\n        this.eFocusableElement = this.comp.getFocusableElement();\r\n\r\n        const { eTopGuard, eBottomGuard, eFocusableElement } = this;\r\n\r\n        const tabGuards = [eTopGuard, eBottomGuard];\r\n\r\n        const compProxy: ITabGuard = {\r\n            setTabIndex: (tabIndex) => {\r\n                tabGuards.forEach((tabGuard) =>\r\n                    tabIndex != null\r\n                        ? tabGuard.setAttribute('tabindex', tabIndex)\r\n                        : tabGuard.removeAttribute('tabindex')\r\n                );\r\n            },\r\n        };\r\n\r\n        this.addTabGuards(eTopGuard, eBottomGuard);\r\n\r\n        const {\r\n            focusTrapActive = false,\r\n            onFocusIn,\r\n            onFocusOut,\r\n            focusInnerElement,\r\n            handleKeyDown,\r\n            onTabKeyDown,\r\n            shouldStopEventPropagation,\r\n            forceFocusOutWhenTabGuardsAreEmpty,\r\n            isFocusableContainer,\r\n        } = params;\r\n\r\n        this.tabGuardCtrl = this.createManagedBean(\r\n            new TabGuardCtrl({\r\n                comp: compProxy,\r\n                focusTrapActive,\r\n                eTopGuard,\r\n                eBottomGuard,\r\n                eFocusableElement,\r\n                onFocusIn,\r\n                onFocusOut,\r\n                focusInnerElement,\r\n                handleKeyDown,\r\n                onTabKeyDown,\r\n                shouldStopEventPropagation,\r\n                forceFocusOutWhenTabGuardsAreEmpty,\r\n                isFocusableContainer,\r\n            })\r\n        );\r\n    }\r\n\r\n    public getTabGuardCtrl(): TabGuardCtrl {\r\n        return this.tabGuardCtrl;\r\n    }\r\n\r\n    private createTabGuard(side: 'top' | 'bottom'): HTMLElement {\r\n        const tabGuard = _getDocument(this.beans).createElement('div');\r\n        const cls = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\r\n\r\n        tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);\r\n        _setAriaRole(tabGuard, 'presentation');\r\n\r\n        return tabGuard;\r\n    }\r\n\r\n    private addTabGuards(topTabGuard: HTMLElement, bottomTabGuard: HTMLElement): void {\r\n        const eFocusableElement = this.eFocusableElement;\r\n        eFocusableElement.insertAdjacentElement('afterbegin', topTabGuard);\r\n        eFocusableElement.insertAdjacentElement('beforeend', bottomTabGuard);\r\n    }\r\n\r\n    public removeAllChildrenExceptTabGuards(): void {\r\n        const tabGuards: [HTMLElement, HTMLElement] = [this.eTopGuard, this.eBottomGuard];\r\n        _clearElement(this.comp.getFocusableElement());\r\n        this.addTabGuards(...tabGuards);\r\n    }\r\n\r\n    public forceFocusOutOfContainer(up: boolean = false): void {\r\n        this.tabGuardCtrl.forceFocusOutOfContainer(up);\r\n    }\r\n\r\n    public appendChild(\r\n        appendChild: (newChild: HTMLElement | Component<any>, container?: HTMLElement) => void,\r\n        newChild: Component | HTMLElement,\r\n        container?: HTMLElement | undefined\r\n    ): void {\r\n        if (!_isNodeOrElement(newChild)) {\r\n            newChild = newChild.getGui();\r\n        }\r\n\r\n        const { eBottomGuard: bottomTabGuard } = this;\r\n\r\n        if (bottomTabGuard) {\r\n            bottomTabGuard.insertAdjacentElement('beforebegin', newChild as HTMLElement);\r\n        } else {\r\n            appendChild(newChild, container);\r\n        }\r\n    }\r\n}\r\n", "import type { ComponentEvent } from './component';\r\nimport { Component } from './component';\r\nimport type { TabGuardParams } from './tabGuardFeature';\r\nimport { TabGuardFeature } from './tabGuardFeature';\r\n\r\nexport class TabGuardComp<TLocalEvent extends string = ComponentEvent> extends Component<TLocalEvent> {\r\n    protected tabGuardFeature: TabGuardFeature;\r\n\r\n    protected initialiseTabGuard(params: TabGuardParams) {\r\n        this.tabGuardFeature = this.createManagedBean(new TabGuardFeature(this));\r\n        this.tabGuardFeature.initialiseTabGuard(params);\r\n    }\r\n\r\n    public forceFocusOutOfContainer(up: boolean = false): void {\r\n        this.tabGuardFeature.forceFocusOutOfContainer(up);\r\n    }\r\n\r\n    public override appendChild(newChild: Component | HTMLElement, container?: HTMLElement | undefined): void {\r\n        this.tabGuardFeature.appendChild(super.appendChild.bind(this), newChild, container);\r\n    }\r\n}\r\n", "import type { IPopupComponent } from '../interfaces/iPopupComponent';\r\nimport { Component } from './component';\r\n\r\nexport class PopupComponent extends Component implements IPopupComponent<any> {\r\n    public isPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    override setParentComponent(container: Component) {\r\n        container.addCssClass('ag-has-popup');\r\n        super.setParentComponent(container);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        const parentComp = this.parentComponent;\r\n        const hasParent = parentComp && parentComp.isAlive();\r\n\r\n        if (hasParent) {\r\n            parentComp!.getGui().classList.remove('ag-has-popup');\r\n        }\r\n\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { AgEvent } from '../events';\r\nimport type { IEventEmitter, IEventListener } from '../interfaces/iEventEmitter';\r\nimport { LocalEventService } from '../localEventService';\r\nimport { _areEventsNear } from '../utils/mouse';\r\n\r\nexport interface TapEvent extends AgEvent<'tap'> {\r\n    touchStart: Touch;\r\n}\r\nexport interface DoubleTapEvent extends AgEvent<'doubleTap'> {\r\n    touchStart: Touch;\r\n}\r\n\r\nexport interface LongTapEvent extends AgEvent<'longTap'> {\r\n    touchStart: Touch;\r\n    touchEvent: TouchEvent;\r\n}\r\n\r\nexport type TouchListenerEvent = 'tap' | 'doubleTap' | 'longTap';\r\nexport class TouchListener implements IEventEmitter<TouchListenerEvent> {\r\n    private DOUBLE_TAP_MILLIS = 500;\r\n\r\n    private destroyFuncs: ((...args: any[]) => any)[] = [];\r\n\r\n    private moved: boolean;\r\n\r\n    private touching = false;\r\n    private touchStart: Touch;\r\n\r\n    private lastTapTime: number | null;\r\n\r\n    private localEventService: LocalEventService<TouchListenerEvent> = new LocalEventService();\r\n\r\n    private preventMouseClick: boolean;\r\n\r\n    constructor(eElement: Element, preventMouseClick = false) {\r\n        this.preventMouseClick = preventMouseClick;\r\n\r\n        const startListener = this.onTouchStart.bind(this);\r\n        const moveListener = this.onTouchMove.bind(this);\r\n        const endListener = this.onTouchEnd.bind(this);\r\n\r\n        eElement.addEventListener('touchstart', startListener, { passive: true } as any);\r\n        eElement.addEventListener('touchmove', moveListener, { passive: true } as any);\r\n        // we set passive=false, as we want to prevent default on this event\r\n        eElement.addEventListener('touchend', endListener, { passive: false } as any);\r\n\r\n        this.destroyFuncs.push(() => {\r\n            eElement.removeEventListener('touchstart', startListener, { passive: true } as any);\r\n            eElement.removeEventListener('touchmove', moveListener, { passive: true } as any);\r\n            eElement.removeEventListener('touchend', endListener, { passive: false } as any);\r\n        });\r\n    }\r\n\r\n    private getActiveTouch(touchList: TouchList): Touch | null {\r\n        for (let i = 0; i < touchList.length; i++) {\r\n            const matches = touchList[i].identifier === this.touchStart.identifier;\r\n            if (matches) {\r\n                return touchList[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public addEventListener<T extends TouchListenerEvent>(eventType: T, listener: IEventListener<T>): void {\r\n        this.localEventService.addEventListener(eventType, listener);\r\n    }\r\n\r\n    public removeEventListener<T extends TouchListenerEvent>(eventType: T, listener: IEventListener<T>): void {\r\n        this.localEventService.removeEventListener(eventType, listener);\r\n    }\r\n\r\n    private onTouchStart(touchEvent: TouchEvent): void {\r\n        // only looking at one touch point at any time\r\n        if (this.touching) {\r\n            return;\r\n        }\r\n\r\n        this.touchStart = touchEvent.touches[0];\r\n        this.touching = true;\r\n\r\n        this.moved = false;\r\n\r\n        const touchStartCopy = this.touchStart;\r\n\r\n        window.setTimeout(() => {\r\n            const touchesMatch = this.touchStart === touchStartCopy;\r\n\r\n            if (this.touching && touchesMatch && !this.moved) {\r\n                this.moved = true;\r\n                const event: LongTapEvent = {\r\n                    type: 'longTap',\r\n                    touchStart: this.touchStart,\r\n                    touchEvent: touchEvent,\r\n                };\r\n                this.localEventService.dispatchEvent(event);\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    private onTouchMove(touchEvent: TouchEvent): void {\r\n        if (!this.touching) {\r\n            return;\r\n        }\r\n\r\n        const touch = this.getActiveTouch(touchEvent.touches);\r\n        if (!touch) {\r\n            return;\r\n        }\r\n\r\n        const eventIsFarAway = !_areEventsNear(touch, this.touchStart, 4);\r\n        if (eventIsFarAway) {\r\n            this.moved = true;\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(touchEvent: TouchEvent): void {\r\n        if (!this.touching) {\r\n            return;\r\n        }\r\n\r\n        if (!this.moved) {\r\n            const event: TapEvent = {\r\n                type: 'tap',\r\n                touchStart: this.touchStart,\r\n            };\r\n            this.localEventService.dispatchEvent(event);\r\n            this.checkForDoubleTap();\r\n        }\r\n\r\n        // stops the tap from also been processed as a mouse click\r\n        if (this.preventMouseClick && touchEvent.cancelable) {\r\n            touchEvent.preventDefault();\r\n        }\r\n\r\n        this.touching = false;\r\n    }\r\n\r\n    private checkForDoubleTap(): void {\r\n        const now = new Date().getTime();\r\n\r\n        if (this.lastTapTime && this.lastTapTime > 0) {\r\n            // if previous tap, see if duration is short enough to be considered double tap\r\n            const interval = now - this.lastTapTime;\r\n            if (interval > this.DOUBLE_TAP_MILLIS) {\r\n                // dispatch double tap event\r\n                const event: DoubleTapEvent = {\r\n                    type: 'doubleTap',\r\n                    touchStart: this.touchStart,\r\n                };\r\n                this.localEventService.dispatchEvent(event);\r\n\r\n                // this stops a tripple tap ending up as two double taps\r\n                this.lastTapTime = null;\r\n            } else {\r\n                this.lastTapTime = now;\r\n            }\r\n        } else {\r\n            this.lastTapTime = now;\r\n        }\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.destroyFuncs.forEach((func) => func());\r\n    }\r\n}\r\n", "import type { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { Column } from '../interfaces/iColumn';\r\nimport type { RowPinnedType } from '../interfaces/iRowNode';\r\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport type { CellPosition } from './iCellPosition';\r\nimport type { ICellRangeFeature } from './iCellRangeFeature';\r\nimport type { RowPosition } from './iRowPosition';\r\n\r\nexport interface IRangeService {\r\n    isEmpty(): boolean;\r\n    removeAllCellRanges(silent?: boolean): void;\r\n    getCellRangeCount(cell: CellPosition): number;\r\n    isCellInAnyRange(cell: CellPosition): boolean;\r\n    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;\r\n    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;\r\n    isContiguousRange(cellRange: CellRange): boolean;\r\n    isMoreThanOneCell(): boolean;\r\n    areAllRangesAbleToMerge(): boolean;\r\n    onDragStart(mouseEvent: MouseEvent): void;\r\n    onDragStop(): void;\r\n    onDragging(mouseEvent: MouseEvent): void;\r\n    getCellRanges(): CellRange[];\r\n    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;\r\n    intersectLastRange(fromMouseClick?: boolean): void;\r\n    setCellRange(params: CellRangeParams): void;\r\n    addCellRange(params: CellRangeParams): void;\r\n    extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined;\r\n    extendLatestRangeToCell(cell: CellPosition): void;\r\n    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;\r\n    getRangeStartRow(cellRange: PartialCellRange): RowPosition;\r\n    getRangeEndRow(cellRange: PartialCellRange): RowPosition;\r\n    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;\r\n    createPartialCellRangeFromRangeParams(\r\n        params: CellRangeParams,\r\n        allowEmptyColumns: boolean\r\n    ): PartialCellRange | undefined;\r\n    setCellRanges(cellRanges: CellRange[]): void;\r\n    clearCellRangeCellValues(params: ClearCellRangeParams): void;\r\n    createDragListenerFeature(eContainer: HTMLElement): BeanStub;\r\n    createCellRangeFeature(beans: BeanCollection, ctrl: CellCtrl): ICellRangeFeature;\r\n}\r\n\r\nexport enum CellRangeType {\r\n    VALUE,\r\n    DIMENSION,\r\n}\r\n\r\n/** Describes a single range of cells */\r\nexport interface CellRange {\r\n    id?: string;\r\n    type?: CellRangeType;\r\n    /** The start row of the range */\r\n    startRow?: RowPosition;\r\n    /** The end row of the range */\r\n    endRow?: RowPosition;\r\n    /** The columns in the range */\r\n    columns: Column[];\r\n    /** The start column for the range */\r\n    startColumn: Column;\r\n}\r\n\r\nexport type PartialCellRange = Omit<CellRange, 'startColumn'> & Partial<Pick<CellRange, 'startColumn'>>;\r\n\r\nexport interface CellRangeParams {\r\n    /** Start row index */\r\n    rowStartIndex: number | null;\r\n    /** Pinned state of start row. Either 'top', 'bottom' or null */\r\n    rowStartPinned?: RowPinnedType;\r\n    /** End row index */\r\n    rowEndIndex: number | null;\r\n    /** Pinned state of end row. Either 'top', 'bottom' or null */\r\n    rowEndPinned?: RowPinnedType;\r\n\r\n    /** Starting column for range */\r\n    columnStart?: string | Column;\r\n    /** End column for range */\r\n    columnEnd?: string | Column;\r\n    /** Specify Columns to include instead of using `columnStart` and `columnEnd` */\r\n    columns?: (string | Column)[];\r\n}\r\n\r\nexport interface ClearCellRangeParams {\r\n    cellRanges?: CellRange[];\r\n    /** Source passed to `cellValueChanged` event */\r\n    cellEventSource?: string;\r\n    /** `true` to dispatch `cellSelectionDeleteStart` and `cellSelectionDeleteEnd` events */\r\n    dispatchWrapperEvents?: boolean;\r\n    /** Source passed to `cellSelectionDeleteStart` and `cellSelectionDeleteEnd` events */\r\n    wrapperEventSource?: 'deleteKey';\r\n}\r\n", "import { BASE_URL } from './baseUrl';\r\nimport type { FrameworkOverridesIncomingSource, IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\r\nimport { getPassiveStateForEvent } from './utils/event';\r\nimport { AgPromise } from './utils/promise';\r\nimport { setValidationDocLink } from './validation/logging';\r\n\r\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\r\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\r\n    public renderingEngine: 'vanilla' | 'react' = 'vanilla';\r\n    private baseDocLink: string;\r\n\r\n    constructor(private frameworkName: 'javascript' | 'angular' | 'react' | 'vue' = 'javascript') {\r\n        this.baseDocLink = `${BASE_URL}/${this.frameworkName}-data-grid`;\r\n        setValidationDocLink(this.baseDocLink);\r\n    }\r\n\r\n    public setInterval(action: any, timeout?: any): AgPromise<number> {\r\n        return new AgPromise((resolve) => {\r\n            resolve(window.setInterval(action, timeout));\r\n        });\r\n    }\r\n\r\n    // for Vanilla JS, we just add the event to the element\r\n    public addEventListener(\r\n        element: HTMLElement,\r\n        type: string,\r\n        listener: EventListenerOrEventListenerObject,\r\n        options?: boolean | AddEventListenerOptions\r\n    ): void {\r\n        let eventListenerOptions: AddEventListenerOptions = {};\r\n\r\n        if (typeof options === 'object') {\r\n            eventListenerOptions = options;\r\n        } else if (typeof options === 'boolean') {\r\n            eventListenerOptions = { capture: options };\r\n        }\r\n\r\n        if (eventListenerOptions.passive == null) {\r\n            const passive = getPassiveStateForEvent(type);\r\n\r\n            if (passive != null) {\r\n                eventListenerOptions.passive = passive;\r\n            }\r\n        }\r\n\r\n        element.addEventListener(type, listener, eventListenerOptions);\r\n    }\r\n\r\n    wrapIncoming: <T>(callback: () => T, source?: FrameworkOverridesIncomingSource) => T = (callback) => callback();\r\n    wrapOutgoing: <T>(callback: () => T) => T = (callback) => callback();\r\n\r\n    frameworkComponent(_: string): any {\r\n        return null;\r\n    }\r\n\r\n    isFrameworkComponent(_: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    getDocLink(path?: string): string {\r\n        return `${this.baseDocLink}${path ? `/${path}` : ''}`;\r\n    }\r\n}\r\n", "import type { Context } from '../context/context';\r\nimport type { GridApi } from './gridApi';\r\n\r\nexport function createGridApi(context: Context): { beanName: 'gridApi'; bean: GridApi } {\r\n    return {\r\n        beanName: 'gridApi',\r\n        bean: context.getBean('apiFunctionSvc').api,\r\n    };\r\n}\r\n", "import type { BeanCollection, BeanName } from './context';\r\nimport type { GenericBean } from './genericBean';\r\n\r\n/**\r\n * We know that there is a risk in a change of behaviour if beans are registered in a different order due to the way\r\n * that this means that their event listeners will be registered in a different order. If they fire in a different order\r\n * there is a risk that behaviour will be inconsistent.\r\n * As core beans are going to become optional and could be registered in unpredictable orders via feature modules,\r\n * we need to provide a consistent order for them to be registered in.\r\n *\r\n * We have not included beans from modules as they will be registered after the core beans in the order they are provided.\r\n */\r\nconst orderedCoreBeans: BeanName[] = [\r\n    // Validate license first\r\n    'licenseManager',\r\n    // core beans only\r\n    'environment',\r\n    'eventSvc',\r\n    'gos',\r\n    'paginationAutoPageSizeSvc',\r\n    'apiFunctionSvc',\r\n    'gridApi',\r\n    'registry',\r\n    'agCompUtils',\r\n    'userCompFactory',\r\n    'rowContainerHeight',\r\n    'horizontalResizeSvc',\r\n    'localeSvc',\r\n    'pinnedRowModel',\r\n    'dragSvc',\r\n    'colGroupSvc',\r\n    'visibleCols',\r\n    'popupSvc',\r\n    'selectionSvc',\r\n    'colFilter',\r\n    'quickFilter',\r\n    'filterManager',\r\n    'colModel',\r\n    'headerNavigation',\r\n    'pageBounds',\r\n    'pagination',\r\n    'pageBoundsListener',\r\n    'stickyRowSvc',\r\n    'rowRenderer',\r\n    'expressionSvc',\r\n    'alignedGridsSvc',\r\n    'navigation',\r\n    'valueCache',\r\n    'valueSvc',\r\n    'autoWidthCalc',\r\n    'filterMenuFactory',\r\n    'dragAndDrop',\r\n    'focusSvc',\r\n    'cellNavigation',\r\n    'cellStyles',\r\n    'scrollVisibleSvc',\r\n    'sortSvc',\r\n    'colHover',\r\n    'colAnimation',\r\n    'autoColSvc',\r\n    'selectionColSvc',\r\n    'changeDetectionSvc',\r\n    'animationFrameSvc',\r\n    'undoRedo',\r\n    'colDefFactory',\r\n    'rowStyleSvc',\r\n    'rowNodeBlockLoader',\r\n    'rowNodeSorter',\r\n    'ctrlsSvc',\r\n    'pinnedCols',\r\n    'dataTypeSvc',\r\n    'syncSvc',\r\n    'overlays',\r\n    'stateSvc',\r\n    'expansionSvc',\r\n    'apiEventSvc',\r\n    'ariaAnnounce',\r\n    'menuSvc',\r\n    'colMoves',\r\n    'colAutosize',\r\n    'colFlex',\r\n    'colResize',\r\n    'pivotColsSvc',\r\n    'valueColsSvc',\r\n    'rowGroupColsSvc',\r\n    'funcColsSvc',\r\n    'colNames',\r\n    'colViewport',\r\n    'pivotResultCols',\r\n    'showRowGroupCols',\r\n    'validation', // Have validations run last\r\n];\r\n\r\nconst beanNamePosition: { [key in BeanName]?: number } = Object.fromEntries(\r\n    orderedCoreBeans.map((beanName, index) => [beanName, index])\r\n);\r\n\r\nexport function gridBeanInitComparator(\r\n    bean1: GenericBean<BeanName, BeanCollection>,\r\n    bean2: GenericBean<BeanName, BeanCollection>\r\n): number {\r\n    // if the beans are not in the ordered list, just ensure they are after the ordered beans and stable to provided order\r\n    const index1 = (bean1.beanName ? beanNamePosition[bean1.beanName] : undefined) ?? Number.MAX_SAFE_INTEGER;\r\n    const index2 = (bean2.beanName ? beanNamePosition[bean2.beanName] : undefined) ?? Number.MAX_SAFE_INTEGER;\r\n    return index1 - index2;\r\n}\r\n\r\nexport function gridBeanDestroyComparator(\r\n    bean1: GenericBean<BeanName, BeanCollection>,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    bean2: GenericBean<BeanName, BeanCollection>\r\n): number {\r\n    return bean1?.beanName === 'gridDestroySvc' ? -1 : 0;\r\n}\r\n", "import type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport { _ensureDomOrder } from '../../utils/dom';\r\nimport { Component, RefPlaceholder } from '../../widgets/component';\r\nimport { HeaderRowComp } from '../row/headerRowComp';\r\nimport type { HeaderRowCtrl, HeaderRowCtrlInstanceId } from '../row/headerRowCtrl';\r\nimport type { IHeaderRowContainerComp } from './headerRowContainerCtrl';\r\nimport { HeaderRowContainerCtrl } from './headerRowContainerCtrl';\r\n\r\nconst PINNED_LEFT_TEMPLATE = /* html */ `<div class=\"ag-pinned-left-header\" role=\"rowgroup\"></div>`;\r\n\r\nconst PINNED_RIGHT_TEMPLATE = /* html */ `<div class=\"ag-pinned-right-header\" role=\"rowgroup\"></div>`;\r\n\r\nconst CENTER_TEMPLATE = /* html */ `<div class=\"ag-header-viewport\" role=\"presentation\">\r\n        <div class=\"ag-header-container\" data-ref=\"eCenterContainer\" role=\"rowgroup\"></div>\r\n    </div>`;\r\n\r\nexport class HeaderRowContainerComp extends Component {\r\n    private eCenterContainer: HTMLElement = RefPlaceholder;\r\n\r\n    private eRowContainer: HTMLElement;\r\n\r\n    private pinned: ColumnPinnedType;\r\n\r\n    private headerRowComps: { [ctrlId: HeaderRowCtrlInstanceId]: HeaderRowComp } = {};\r\n    private rowCompsList: HeaderRowComp[] = [];\r\n\r\n    constructor(pinned: ColumnPinnedType) {\r\n        super();\r\n        this.pinned = pinned;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.selectAndSetTemplate();\r\n\r\n        const compProxy: IHeaderRowContainerComp = {\r\n            setDisplayed: (displayed) => this.setDisplayed(displayed),\r\n            setCtrls: (ctrls) => this.setCtrls(ctrls),\r\n\r\n            // only gets called for center section\r\n            setCenterWidth: (width) => (this.eCenterContainer.style.width = width),\r\n            setViewportScrollLeft: (left) => (this.getGui().scrollLeft = left),\r\n\r\n            // only gets called for pinned sections\r\n            setPinnedContainerWidth: (width) => {\r\n                const eGui = this.getGui();\r\n                eGui.style.width = width;\r\n                eGui.style.maxWidth = width;\r\n                eGui.style.minWidth = width;\r\n            },\r\n        };\r\n\r\n        const ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));\r\n        ctrl.setComp(compProxy, this.getGui());\r\n    }\r\n\r\n    private selectAndSetTemplate(): void {\r\n        const pinnedLeft = this.pinned == 'left';\r\n        const pinnedRight = this.pinned == 'right';\r\n\r\n        const template = pinnedLeft ? PINNED_LEFT_TEMPLATE : pinnedRight ? PINNED_RIGHT_TEMPLATE : CENTER_TEMPLATE;\r\n\r\n        this.setTemplate(template);\r\n\r\n        // for left and right, we add rows directly to the root element,\r\n        // but for center container we add elements to the child container.\r\n        this.eRowContainer = this.eCenterContainer !== RefPlaceholder ? this.eCenterContainer : this.getGui();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.setCtrls([]);\r\n        super.destroy();\r\n    }\r\n\r\n    private destroyRowComp(rowComp: HeaderRowComp): void {\r\n        this.destroyBean(rowComp);\r\n        this.eRowContainer.removeChild(rowComp.getGui());\r\n    }\r\n\r\n    private setCtrls(ctrls: HeaderRowCtrl[]): void {\r\n        const oldRowComps = this.headerRowComps;\r\n        this.headerRowComps = {};\r\n        this.rowCompsList = [];\r\n\r\n        let prevGui: HTMLElement;\r\n\r\n        const appendEnsuringDomOrder = (rowComp: HeaderRowComp) => {\r\n            const eGui = rowComp.getGui();\r\n\r\n            const notAlreadyIn = eGui.parentElement != this.eRowContainer;\r\n            if (notAlreadyIn) {\r\n                this.eRowContainer.appendChild(eGui);\r\n            }\r\n            if (prevGui) {\r\n                _ensureDomOrder(this.eRowContainer, eGui, prevGui);\r\n            }\r\n\r\n            prevGui = eGui;\r\n        };\r\n\r\n        ctrls.forEach((ctrl) => {\r\n            const ctrlId = ctrl.instanceId;\r\n            const existingComp = oldRowComps[ctrlId];\r\n            delete oldRowComps[ctrlId];\r\n\r\n            const rowComp = existingComp ? existingComp : this.createBean(new HeaderRowComp(ctrl));\r\n            this.headerRowComps[ctrlId] = rowComp;\r\n            this.rowCompsList.push(rowComp);\r\n\r\n            appendEnsuringDomOrder(rowComp);\r\n        });\r\n\r\n        Object.values(oldRowComps).forEach((c) => this.destroyRowComp(c));\r\n    }\r\n}\r\n", "import type { ComponentSelector } from '../widgets/component';\r\nimport { Component } from '../widgets/component';\r\nimport type { IGridHeaderComp } from './gridHeaderCtrl';\r\nimport { GridHeaderCtrl } from './gridHeaderCtrl';\r\nimport { HeaderRowContainerComp } from './rowContainer/headerRowContainerComp';\r\n\r\nexport class GridHeaderComp extends Component {\r\n    constructor() {\r\n        super(/* html */ `<div class=\"ag-header\" role=\"presentation\"/>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const compProxy: IGridHeaderComp = {\r\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\r\n            setHeightAndMinHeight: (height) => {\r\n                this.getGui().style.height = height;\r\n                this.getGui().style.minHeight = height;\r\n            },\r\n        };\r\n\r\n        const ctrl = this.createManagedBean(new GridHeaderCtrl());\r\n        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());\r\n\r\n        const addContainer = (container: HeaderRowContainerComp) => {\r\n            this.createManagedBean(container);\r\n            this.appendChild(container);\r\n        };\r\n\r\n        addContainer(new HeaderRowContainerComp('left'));\r\n        addContainer(new HeaderRowContainerComp(null));\r\n        addContainer(new HeaderRowContainerComp('right'));\r\n    }\r\n}\r\nexport const GridHeaderSelector: ComponentSelector = {\r\n    selector: 'AG-HEADER-ROOT',\r\n    component: GridHeaderComp,\r\n};\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { PopupEditorWrapper } from '../../edit/cellEditors/popupEditorWrapper';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { CellStyle } from '../../entities/colDef';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport { _getActiveDomElement } from '../../gridOptionsUtils';\r\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport type { PopupPositionParams } from '../../interfaces/iPopup';\r\nimport type { UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { _getLocaleTextFunc } from '../../misc/locale/localeUtils';\r\nimport type { CheckboxSelectionComponent } from '../../selection/checkboxSelectionComponent';\r\nimport { _setAriaRole } from '../../utils/aria';\r\nimport { _addStylesToElement, _clearElement, _removeFromParent } from '../../utils/dom';\r\nimport { _missing } from '../../utils/generic';\r\nimport { _escapeString } from '../../utils/string';\r\nimport { _warn } from '../../validation/logging';\r\nimport { Component } from '../../widgets/component';\r\nimport type { ICellRendererComp } from './../cellRenderers/iCellRenderer';\r\nimport type { DndSourceComp } from './../dndSourceComp';\r\nimport type { CellCtrl, ICellComp } from './cellCtrl';\r\n\r\nexport class CellComp extends Component {\r\n    private eCellWrapper: HTMLElement | undefined;\r\n    private eCellValue: HTMLElement | undefined;\r\n\r\n    private readonly column: AgColumn;\r\n    private readonly rowNode: RowNode;\r\n    private eRow: HTMLElement;\r\n\r\n    private includeSelection: boolean;\r\n    private includeRowDrag: boolean;\r\n    private includeDndSource: boolean;\r\n\r\n    private forceWrapper: boolean;\r\n\r\n    private checkboxSelectionComp: CheckboxSelectionComponent | undefined;\r\n    private dndSourceComp: DndSourceComp | undefined;\r\n    private rowDraggingComp: Component | undefined;\r\n\r\n    private hideEditorPopup: ((...args: any[]) => any) | null | undefined;\r\n    private cellEditorPopupWrapper: PopupEditorWrapper | undefined;\r\n    private cellEditor: ICellEditorComp | null | undefined;\r\n    private cellEditorGui: HTMLElement | null;\r\n\r\n    private cellRenderer: ICellRendererComp | null | undefined;\r\n    private cellRendererGui: HTMLElement | null;\r\n    private cellRendererClass: any;\r\n\r\n    private firstRender: boolean;\r\n\r\n    // every time we go into edit mode, or back again, this gets incremented.\r\n    // it's the components way of dealing with the async nature of framework components,\r\n    // so if a framework component takes a while to be created, we know if the object\r\n    // is still relevant when creating is finished. eg we could click edit / un-edit 20\r\n    // times before the first React edit component comes back - we should discard\r\n    // the first 19.\r\n    private rendererVersion = 0;\r\n    private editorVersion = 0;\r\n\r\n    constructor(\r\n        beans: BeanCollection,\r\n        public readonly cellCtrl: CellCtrl,\r\n        printLayout: boolean,\r\n        eRow: HTMLElement,\r\n        editingRow: boolean\r\n    ) {\r\n        super();\r\n        this.beans = beans;\r\n        this.column = cellCtrl.column;\r\n        this.rowNode = cellCtrl.rowNode;\r\n        this.eRow = eRow;\r\n\r\n        const cellDiv = document.createElement('div');\r\n        cellDiv.setAttribute('comp-id', `${this.getCompId()}`);\r\n        this.setTemplateFromElement(cellDiv);\r\n\r\n        const eGui = this.getGui();\r\n\r\n        this.forceWrapper = cellCtrl.isForceWrapper();\r\n\r\n        this.refreshWrapper(false);\r\n\r\n        _setAriaRole(eGui, cellCtrl.getCellAriaRole());\r\n        eGui.setAttribute('col-id', cellCtrl.colIdSanitised);\r\n\r\n        const compProxy: ICellComp = {\r\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\r\n            setUserStyles: (styles: CellStyle) => _addStylesToElement(eGui, styles),\r\n            getFocusableElement: () => this.getFocusableElement(),\r\n\r\n            setIncludeSelection: (include) => (this.includeSelection = include),\r\n            setIncludeRowDrag: (include) => (this.includeRowDrag = include),\r\n            setIncludeDndSource: (include) => (this.includeDndSource = include),\r\n\r\n            setRenderDetails: (compDetails, valueToDisplay, force) =>\r\n                this.setRenderDetails(compDetails, valueToDisplay, force),\r\n            setEditDetails: (compDetails, popup, position) => this.setEditDetails(compDetails, popup, position),\r\n\r\n            getCellEditor: () => this.cellEditor || null,\r\n            getCellRenderer: () => this.cellRenderer || null,\r\n            getParentOfValue: () => this.getParentOfValue(),\r\n        };\r\n\r\n        cellCtrl.setComp(compProxy, this.getGui(), this.eCellWrapper, printLayout, editingRow, undefined);\r\n    }\r\n\r\n    private getParentOfValue(): HTMLElement {\r\n        if (this.eCellValue) {\r\n            // if not editing, and using wrapper, then value goes in eCellValue\r\n            return this.eCellValue;\r\n        }\r\n        if (this.eCellWrapper) {\r\n            // if editing, and using wrapper, value (cell editor) goes in eCellWrapper\r\n            return this.eCellWrapper;\r\n        }\r\n\r\n        // if editing or rendering, and not using wrapper, value (or comp) is directly inside cell\r\n        return this.getGui();\r\n    }\r\n\r\n    private setRenderDetails(\r\n        compDetails: UserCompDetails | undefined,\r\n        valueToDisplay: any,\r\n        forceNewCellRendererInstance: boolean\r\n    ): void {\r\n        // this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing\r\n        const isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;\r\n        if (isInlineEditing) {\r\n            return;\r\n        }\r\n\r\n        // this means firstRender will be true for one pass only, as it's initialised to undefined\r\n        this.firstRender = this.firstRender == null;\r\n\r\n        // if display template has changed, means any previous Cell Renderer is in the wrong location\r\n        const controlWrapperChanged = this.refreshWrapper(false);\r\n        this.refreshEditStyles(false);\r\n\r\n        // all of these have dependencies on the eGui, so only do them after eGui is set\r\n        if (compDetails) {\r\n            const neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;\r\n            const cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);\r\n            if (!cellRendererRefreshSuccessful) {\r\n                this.destroyRenderer();\r\n                this.createCellRendererInstance(compDetails);\r\n            }\r\n        } else {\r\n            this.destroyRenderer();\r\n            this.insertValueWithoutCellRenderer(valueToDisplay);\r\n        }\r\n    }\r\n\r\n    private setEditDetails(\r\n        compDetails: UserCompDetails | undefined,\r\n        popup?: boolean,\r\n        position?: 'over' | 'under'\r\n    ): void {\r\n        if (compDetails) {\r\n            this.createCellEditorInstance(compDetails, popup, position);\r\n        } else {\r\n            this.destroyEditor();\r\n        }\r\n    }\r\n\r\n    private removeControls(): void {\r\n        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);\r\n        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);\r\n        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);\r\n    }\r\n\r\n    // returns true if wrapper was changed\r\n    private refreshWrapper(editing: boolean): boolean {\r\n        const providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;\r\n        const usingWrapper = providingControls || this.forceWrapper;\r\n\r\n        const putWrapperIn = usingWrapper && this.eCellWrapper == null;\r\n        if (putWrapperIn) {\r\n            const wrapperDiv = document.createElement('div');\r\n            wrapperDiv.setAttribute('role', 'presentation');\r\n            wrapperDiv.setAttribute('class', 'ag-cell-wrapper');\r\n            this.eCellWrapper = wrapperDiv;\r\n            this.getGui().appendChild(this.eCellWrapper);\r\n        }\r\n        const takeWrapperOut = !usingWrapper && this.eCellWrapper != null;\r\n        if (takeWrapperOut) {\r\n            _removeFromParent(this.eCellWrapper!);\r\n            this.eCellWrapper = undefined;\r\n        }\r\n\r\n        this.addOrRemoveCssClass('ag-cell-value', !usingWrapper);\r\n\r\n        const usingCellValue = !editing && usingWrapper;\r\n        const putCellValueIn = usingCellValue && this.eCellValue == null;\r\n        if (putCellValueIn) {\r\n            const cellSpan = document.createElement('span');\r\n            cellSpan.setAttribute('role', 'presentation');\r\n            cellSpan.setAttribute('class', 'ag-cell-value');\r\n            this.eCellValue = cellSpan;\r\n            this.eCellWrapper!.appendChild(this.eCellValue);\r\n        }\r\n        const takeCellValueOut = !usingCellValue && this.eCellValue != null;\r\n        if (takeCellValueOut) {\r\n            _removeFromParent(this.eCellValue!);\r\n            this.eCellValue = undefined;\r\n        }\r\n\r\n        const templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;\r\n\r\n        if (templateChanged) {\r\n            this.removeControls();\r\n        }\r\n\r\n        if (!editing) {\r\n            if (providingControls) {\r\n                this.addControls();\r\n            }\r\n        }\r\n\r\n        return templateChanged;\r\n    }\r\n\r\n    private addControls(): void {\r\n        if (this.includeRowDrag) {\r\n            if (this.rowDraggingComp == null) {\r\n                this.rowDraggingComp = this.cellCtrl.createRowDragComp();\r\n                if (this.rowDraggingComp) {\r\n                    // put the checkbox in before the value\r\n                    this.eCellWrapper!.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue!);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.includeDndSource) {\r\n            if (this.dndSourceComp == null) {\r\n                this.dndSourceComp = this.cellCtrl.createDndSource();\r\n                if (this.dndSourceComp) {\r\n                    // put the checkbox in before the value\r\n                    this.eCellWrapper!.insertBefore(this.dndSourceComp.getGui(), this.eCellValue!);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.includeSelection) {\r\n            if (this.checkboxSelectionComp == null) {\r\n                this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();\r\n                if (this.checkboxSelectionComp) {\r\n                    this.eCellWrapper!.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue!);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createCellEditorInstance(compDetails: UserCompDetails, popup?: boolean, position?: 'over' | 'under'): void {\r\n        const versionCopy = this.editorVersion;\r\n\r\n        const cellEditorPromise = compDetails.newAgStackInstance();\r\n\r\n        const { params } = compDetails;\r\n        cellEditorPromise.then((c) => this.afterCellEditorCreated(versionCopy, c!, params, popup, position));\r\n\r\n        // if we don't do this, and editor component is async, then there will be a period\r\n        // when the component isn't present and keyboard navigation won't work - so example\r\n        // of user hitting tab quickly (more quickly than renderers getting created) won't work\r\n        const cellEditorAsync = _missing(this.cellEditor);\r\n        if (cellEditorAsync && params.cellStartedEdit) {\r\n            this.cellCtrl.focusCell(true);\r\n        }\r\n    }\r\n\r\n    private insertValueWithoutCellRenderer(valueToDisplay: any): void {\r\n        const eParent = this.getParentOfValue();\r\n        _clearElement(eParent);\r\n\r\n        const escapedValue = valueToDisplay != null ? _escapeString(valueToDisplay, true) : null;\r\n        if (escapedValue != null) {\r\n            eParent.textContent = escapedValue;\r\n        }\r\n    }\r\n\r\n    private destroyEditorAndRenderer(): void {\r\n        this.destroyRenderer();\r\n        this.destroyEditor();\r\n    }\r\n\r\n    private destroyRenderer(): void {\r\n        const { context } = this.beans;\r\n        this.cellRenderer = context.destroyBean(this.cellRenderer);\r\n        _removeFromParent(this.cellRendererGui);\r\n        this.cellRendererGui = null;\r\n        this.rendererVersion++;\r\n    }\r\n\r\n    private destroyEditor(): void {\r\n        const { context } = this.beans;\r\n\r\n        if (this.hideEditorPopup) {\r\n            this.hideEditorPopup();\r\n        }\r\n        this.hideEditorPopup = undefined;\r\n\r\n        this.cellEditor = context.destroyBean(this.cellEditor);\r\n        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);\r\n\r\n        _removeFromParent(this.cellEditorGui);\r\n        this.cellEditorGui = null;\r\n\r\n        this.editorVersion++;\r\n    }\r\n\r\n    private refreshCellRenderer(compClassAndParams: UserCompDetails): boolean {\r\n        if (this.cellRenderer == null || this.cellRenderer.refresh == null) {\r\n            return false;\r\n        }\r\n\r\n        // if different Cell Renderer configured this time (eg user is using selector, and\r\n        // returns different component) then don't refresh, force recreate of Cell Renderer\r\n        if (this.cellRendererClass !== compClassAndParams.componentClass) {\r\n            return false;\r\n        }\r\n\r\n        // take any custom params off of the user\r\n        const result = this.cellRenderer.refresh(compClassAndParams.params);\r\n\r\n        // NOTE on undefined: previous version of the cellRenderer.refresh() interface\r\n        // returned nothing, if the method existed, we assumed it refreshed. so for\r\n        // backwards compatibility, we assume if method exists and returns nothing,\r\n        // that it was successful.\r\n        return result === true || result === undefined;\r\n    }\r\n\r\n    private createCellRendererInstance(compDetails: UserCompDetails): void {\r\n        // never use task service if animation frame service is turned off.\r\n        // and lastly we never use it if doing auto-height, as the auto-height service checks the\r\n        // row height directly after the cell is created, it doesn't wait around for the tasks to complete\r\n        const suppressAnimationFrame = this.beans.gos.get('suppressAnimationFrame');\r\n        const useTaskService = !suppressAnimationFrame && this.beans.animationFrameSvc;\r\n\r\n        const displayComponentVersionCopy = this.rendererVersion;\r\n\r\n        const { componentClass } = compDetails;\r\n\r\n        const createCellRendererFunc = () => {\r\n            const staleTask = this.rendererVersion !== displayComponentVersionCopy || !this.isAlive();\r\n            if (staleTask) {\r\n                return;\r\n            }\r\n\r\n            // this can return null in the event that the user has switched from a renderer component to nothing, for example\r\n            // when using a cellRendererSelect to return a component or null depending on row data etc\r\n            const componentPromise = compDetails.newAgStackInstance();\r\n            const callback = this.afterCellRendererCreated.bind(this, displayComponentVersionCopy, componentClass);\r\n            if (componentPromise) {\r\n                componentPromise.then(callback);\r\n            }\r\n        };\r\n\r\n        // we only use task service when rendering for first time, which means it is not used when doing edits.\r\n        // if we changed this (always use task service) would make sense, however it would break tests, possibly\r\n        // test of users.\r\n        if (useTaskService && this.firstRender) {\r\n            this.beans.animationFrameSvc!.createTask(createCellRendererFunc, this.rowNode.rowIndex!, 'createTasksP2');\r\n        } else {\r\n            createCellRendererFunc();\r\n        }\r\n    }\r\n\r\n    private afterCellRendererCreated(\r\n        cellRendererVersion: number,\r\n        cellRendererClass: any,\r\n        cellRenderer: ICellRendererComp\r\n    ): void {\r\n        const staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;\r\n\r\n        if (staleTask) {\r\n            this.beans.context.destroyBean(cellRenderer);\r\n            return;\r\n        }\r\n\r\n        this.cellRenderer = cellRenderer;\r\n        this.cellRendererClass = cellRendererClass;\r\n        this.cellRendererGui = this.cellRenderer.getGui();\r\n\r\n        if (this.cellRendererGui != null) {\r\n            const eParent = this.getParentOfValue();\r\n            _clearElement(eParent);\r\n            eParent.appendChild(this.cellRendererGui);\r\n        }\r\n    }\r\n\r\n    private afterCellEditorCreated(\r\n        requestVersion: number,\r\n        cellEditor: ICellEditorComp,\r\n        params: ICellEditorParams,\r\n        popup?: boolean,\r\n        position?: 'over' | 'under'\r\n    ): void {\r\n        // if editingCell=false, means user cancelled the editor before component was ready.\r\n        // if versionMismatch, then user cancelled the edit, then started the edit again, and this\r\n        //   is the first editor which is now stale.\r\n        const staleComp = requestVersion !== this.editorVersion;\r\n\r\n        if (staleComp) {\r\n            this.beans.context.destroyBean(cellEditor);\r\n            return;\r\n        }\r\n\r\n        const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\r\n        if (editingCancelledByUserComp) {\r\n            this.beans.context.destroyBean(cellEditor);\r\n            this.cellCtrl.stopEditing(true);\r\n            return;\r\n        }\r\n\r\n        if (!cellEditor.getGui) {\r\n            _warn(97, { colId: this.column.getId() });\r\n            this.beans.context.destroyBean(cellEditor);\r\n            return;\r\n        }\r\n\r\n        this.cellEditor = cellEditor;\r\n        this.cellEditorGui = cellEditor.getGui();\r\n\r\n        const cellEditorInPopup = popup || (cellEditor.isPopup !== undefined && cellEditor.isPopup());\r\n        if (cellEditorInPopup) {\r\n            this.addPopupCellEditor(params, position);\r\n        } else {\r\n            this.addInCellEditor();\r\n        }\r\n\r\n        this.refreshEditStyles(true, cellEditorInPopup);\r\n\r\n        if (cellEditor.afterGuiAttached) {\r\n            cellEditor.afterGuiAttached();\r\n        }\r\n\r\n        this.cellCtrl.cellEditorAttached();\r\n    }\r\n\r\n    private refreshEditStyles(editing: boolean, isPopup?: boolean): void {\r\n        this.addOrRemoveCssClass('ag-cell-inline-editing', editing && !isPopup);\r\n        this.addOrRemoveCssClass('ag-cell-popup-editing', editing && !!isPopup);\r\n        this.addOrRemoveCssClass('ag-cell-not-inline-editing', !editing || !!isPopup);\r\n\r\n        this.cellCtrl.setInlineEditingCss();\r\n    }\r\n\r\n    private addInCellEditor(): void {\r\n        const eGui = this.getGui();\r\n\r\n        // if focus is inside the cell, we move focus to the cell itself\r\n        // before removing it's contents, otherwise errors could be thrown.\r\n        if (eGui.contains(_getActiveDomElement(this.beans))) {\r\n            eGui.focus();\r\n        }\r\n\r\n        this.destroyRenderer();\r\n        this.refreshWrapper(true);\r\n        this.clearParentOfValue();\r\n        if (this.cellEditorGui) {\r\n            const eParent = this.getParentOfValue();\r\n            eParent.appendChild(this.cellEditorGui);\r\n        }\r\n    }\r\n\r\n    private addPopupCellEditor(params: ICellEditorParams, position?: 'over' | 'under'): void {\r\n        if (this.beans.gos.get('editType') === 'fullRow') {\r\n            //popup cellEditor does not work with fullRowEdit\r\n            _warn(98);\r\n        }\r\n\r\n        const cellEditor = this.cellEditor!;\r\n\r\n        // if a popup, then we wrap in a popup editor and return the popup\r\n        this.cellEditorPopupWrapper = this.beans.context.createBean(\r\n            this.beans.editSvc!.createPopupEditorWrapper(params)\r\n        );\r\n        const ePopupGui = this.cellEditorPopupWrapper.getGui();\r\n        if (this.cellEditorGui) {\r\n            ePopupGui.appendChild(this.cellEditorGui);\r\n        }\r\n\r\n        const popupSvc = this.beans.popupSvc!;\r\n\r\n        const useModelPopup = this.beans.gos.get('stopEditingWhenCellsLoseFocus');\r\n\r\n        // see if position provided by colDef, if not then check old way of method on cellComp\r\n        const positionToUse: 'over' | 'under' | undefined =\r\n            position != null ? position : cellEditor.getPopupPosition?.() ?? 'over';\r\n        const isRtl = this.beans.gos.get('enableRtl');\r\n\r\n        const positionParams: PopupPositionParams & { type: string; eventSource: HTMLElement } = {\r\n            ePopup: ePopupGui,\r\n            column: this.column,\r\n            rowNode: this.rowNode,\r\n            type: 'popupCellEditor',\r\n            eventSource: this.getGui(),\r\n            position: positionToUse,\r\n            alignSide: isRtl ? 'right' : 'left',\r\n            keepWithinBounds: true,\r\n        };\r\n\r\n        const positionCallback = popupSvc.positionPopupByComponent.bind(popupSvc, positionParams);\r\n\r\n        const translate = _getLocaleTextFunc(this.beans.localeSvc);\r\n\r\n        const addPopupRes = popupSvc.addPopup({\r\n            modal: useModelPopup,\r\n            eChild: ePopupGui,\r\n            closeOnEsc: true,\r\n            closedCallback: () => {\r\n                this.cellCtrl.onPopupEditorClosed();\r\n            },\r\n            anchorToElement: this.getGui(),\r\n            positionCallback,\r\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor'),\r\n        });\r\n        if (addPopupRes) {\r\n            this.hideEditorPopup = addPopupRes.hideFunc;\r\n        }\r\n    }\r\n\r\n    public detach(): void {\r\n        this.eRow.removeChild(this.getGui());\r\n    }\r\n\r\n    // if the row is also getting destroyed, then we don't need to remove from dom,\r\n    // as the row will also get removed, so no need to take out the cells from the row\r\n    // if the row is going (removing is an expensive operation, so only need to remove\r\n    // the top part)\r\n    //\r\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\r\n    public override destroy(): void {\r\n        this.cellCtrl.stopEditing();\r\n\r\n        this.destroyEditorAndRenderer();\r\n        this.removeControls();\r\n\r\n        super.destroy();\r\n    }\r\n\r\n    private clearParentOfValue(): void {\r\n        const eGui = this.getGui();\r\n\r\n        // if focus is inside the cell, we move focus to the cell itself\r\n        // before removing it's contents, otherwise errors could be thrown.\r\n        if (eGui.contains(_getActiveDomElement(this.beans))) {\r\n            eGui.focus({ preventScroll: true });\r\n        }\r\n\r\n        _clearElement(this.getParentOfValue());\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { RowStyle } from '../../entities/gridOptions';\r\nimport type { RowContainerType } from '../../gridBodyComp/rowContainer/rowContainerCtrl';\r\nimport type { UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { _setAriaRole } from '../../utils/aria';\r\nimport { _addStylesToElement, _setDomChildOrder } from '../../utils/dom';\r\nimport { Component } from '../../widgets/component';\r\nimport { CellComp } from '../cell/cellComp';\r\nimport type { CellCtrl, CellCtrlInstanceId } from '../cell/cellCtrl';\r\nimport type { ICellRendererComp } from '../cellRenderers/iCellRenderer';\r\nimport type { IRowComp, RowCtrl } from './rowCtrl';\r\n\r\nexport class RowComp extends Component {\r\n    private fullWidthCellRenderer: ICellRendererComp | null | undefined;\r\n\r\n    private rowCtrl: RowCtrl;\r\n\r\n    private domOrder: boolean;\r\n    private cellComps: { [key: CellCtrlInstanceId]: CellComp | null } = {};\r\n\r\n    constructor(ctrl: RowCtrl, beans: BeanCollection, containerType: RowContainerType) {\r\n        super();\r\n\r\n        this.beans = beans;\r\n        this.rowCtrl = ctrl;\r\n\r\n        const rowDiv = document.createElement('div');\r\n        rowDiv.setAttribute('comp-id', `${this.getCompId()}`);\r\n        rowDiv.setAttribute('style', this.getInitialStyle(containerType));\r\n        this.setTemplateFromElement(rowDiv);\r\n\r\n        const eGui = this.getGui();\r\n        const style = eGui.style;\r\n        this.domOrder = this.rowCtrl.getDomOrder();\r\n        _setAriaRole(eGui, 'row');\r\n\r\n        const compProxy: IRowComp = {\r\n            setDomOrder: (domOrder) => (this.domOrder = domOrder),\r\n            setCellCtrls: (cellCtrls) => this.setCellCtrls(cellCtrls),\r\n            showFullWidth: (compDetails) => this.showFullWidth(compDetails),\r\n            getFullWidthCellRenderer: () => this.fullWidthCellRenderer,\r\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\r\n            setUserStyles: (styles: RowStyle | undefined) => _addStylesToElement(eGui, styles),\r\n            setTop: (top) => (style.top = top),\r\n            setTransform: (transform) => (style.transform = transform),\r\n            setRowIndex: (rowIndex) => eGui.setAttribute('row-index', rowIndex),\r\n            setRowId: (rowId: string) => eGui.setAttribute('row-id', rowId),\r\n            setRowBusinessKey: (businessKey) => eGui.setAttribute('row-business-key', businessKey),\r\n            refreshFullWidth: (getUpdatedParams) => this.fullWidthCellRenderer?.refresh?.(getUpdatedParams()) ?? false,\r\n        };\r\n\r\n        ctrl.setComp(compProxy, this.getGui(), containerType, undefined);\r\n        this.addDestroyFunc(() => {\r\n            ctrl.unsetComp(containerType);\r\n        });\r\n    }\r\n\r\n    private getInitialStyle(containerType: RowContainerType): string {\r\n        const transform = this.rowCtrl.getInitialTransform(containerType);\r\n        return transform ? `transform: ${transform}` : `top: ${this.rowCtrl.getInitialRowTop(containerType)}`;\r\n    }\r\n\r\n    private showFullWidth(compDetails: UserCompDetails): void {\r\n        const callback = (cellRenderer: ICellRendererComp) => {\r\n            if (this.isAlive()) {\r\n                const eGui = cellRenderer.getGui();\r\n                this.getGui().appendChild(eGui);\r\n                this.rowCtrl.setupDetailRowAutoHeight(eGui);\r\n                this.setFullWidthRowComp(cellRenderer);\r\n            } else {\r\n                this.beans.context.destroyBean(cellRenderer);\r\n            }\r\n        };\r\n\r\n        // if not in cache, create new one\r\n        const res = compDetails.newAgStackInstance();\r\n\r\n        res.then(callback);\r\n    }\r\n\r\n    private setCellCtrls(cellCtrls: CellCtrl[]): void {\r\n        const cellsToRemove = Object.assign({}, this.cellComps);\r\n\r\n        cellCtrls.forEach((cellCtrl) => {\r\n            const key = cellCtrl.instanceId;\r\n            const existingCellComp = this.cellComps[key];\r\n\r\n            if (existingCellComp == null) {\r\n                this.newCellComp(cellCtrl);\r\n            } else {\r\n                cellsToRemove[key] = null;\r\n            }\r\n        });\r\n\r\n        const cellCompsToRemove = Object.values(cellsToRemove).filter((cellComp) => cellComp != null);\r\n\r\n        this.destroyCells(cellCompsToRemove as CellComp[]);\r\n        this.ensureDomOrder(cellCtrls);\r\n    }\r\n\r\n    private ensureDomOrder(cellCtrls: CellCtrl[]): void {\r\n        if (!this.domOrder) {\r\n            return;\r\n        }\r\n\r\n        const elementsInOrder: HTMLElement[] = [];\r\n        cellCtrls.forEach((cellCtrl) => {\r\n            const cellComp = this.cellComps[cellCtrl.instanceId];\r\n            if (cellComp) {\r\n                elementsInOrder.push(cellComp.getGui());\r\n            }\r\n        });\r\n\r\n        _setDomChildOrder(this.getGui(), elementsInOrder);\r\n    }\r\n\r\n    private newCellComp(cellCtrl: CellCtrl): void {\r\n        const cellComp = new CellComp(\r\n            this.beans,\r\n            cellCtrl,\r\n            this.rowCtrl.printLayout,\r\n            this.getGui(),\r\n            this.rowCtrl.editing\r\n        );\r\n        this.cellComps[cellCtrl.instanceId] = cellComp;\r\n        this.getGui().appendChild(cellComp.getGui());\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        this.destroyAllCells();\r\n    }\r\n\r\n    private destroyAllCells(): void {\r\n        const cellsToDestroy = Object.values(this.cellComps).filter((cp) => cp != null);\r\n        this.destroyCells(cellsToDestroy as CellComp[]);\r\n    }\r\n\r\n    private setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\r\n        this.fullWidthCellRenderer = fullWidthRowComponent;\r\n        this.addDestroyFunc(() => {\r\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\r\n        });\r\n    }\r\n\r\n    private destroyCells(cellComps: CellComp[]): void {\r\n        cellComps.forEach((cellComp) => {\r\n            // could be old reference, ie removed cell\r\n            if (!cellComp) {\r\n                return;\r\n            }\r\n\r\n            // check cellComp belongs in this container\r\n            const instanceId = cellComp.cellCtrl.instanceId;\r\n            if (this.cellComps[instanceId] !== cellComp) {\r\n                return;\r\n            }\r\n\r\n            cellComp.detach();\r\n            cellComp.destroy();\r\n            this.cellComps[instanceId] = null;\r\n        });\r\n    }\r\n}\r\n", "import { RowComp } from '../../rendering/row/rowComp';\r\nimport type { RowCtrl, RowCtrlInstanceId } from '../../rendering/row/rowCtrl';\r\nimport { _setAriaRole } from '../../utils/aria';\r\nimport { _ensureDomOrder, _insertWithDomOrder } from '../../utils/dom';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { Component, RefPlaceholder } from '../../widgets/component';\r\nimport type { IRowContainerComp, RowContainerName, RowContainerOptions } from './rowContainerCtrl';\r\nimport { RowContainerCtrl, _getRowContainerOptions } from './rowContainerCtrl';\r\n\r\nfunction templateFactory(options: RowContainerOptions): string {\r\n    let res: string;\r\n    if (options.type === 'center') {\r\n        res =\r\n            /* html */\r\n            `<div class=\"${options.viewport}\" data-ref=\"eViewport\" role=\"presentation\">\r\n                <div class=\"${options.container}\" data-ref=\"eContainer\"></div>\r\n            </div>`;\r\n    } else {\r\n        res = /* html */ `<div class=\"${options.container}\" data-ref=\"eContainer\"></div>`;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport class RowContainerComp extends Component {\r\n    private readonly eViewport: HTMLElement = RefPlaceholder;\r\n    private readonly eContainer: HTMLElement = RefPlaceholder;\r\n\r\n    private readonly name: RowContainerName;\r\n    private readonly options: RowContainerOptions;\r\n\r\n    private rowComps: { [id: RowCtrlInstanceId]: RowComp } = {};\r\n\r\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\r\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\r\n    private domOrder: boolean;\r\n    private lastPlacedElement: HTMLElement | null;\r\n\r\n    constructor(params?: { name: string }) {\r\n        super();\r\n        this.name = params?.name as RowContainerName;\r\n        this.options = _getRowContainerOptions(this.name);\r\n        this.setTemplate(templateFactory(this.options));\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const compProxy: IRowContainerComp = {\r\n            setHorizontalScroll: (offset: number) => (this.eViewport.scrollLeft = offset),\r\n            setViewportHeight: (height) => (this.eViewport.style.height = height),\r\n            setRowCtrls: ({ rowCtrls }) => this.setRowCtrls(rowCtrls),\r\n            setDomOrder: (domOrder) => {\r\n                this.domOrder = domOrder;\r\n            },\r\n            setContainerWidth: (width) => (this.eContainer.style.width = width),\r\n            setOffsetTop: (offset) => (this.eContainer.style.transform = `translateY(${offset})`),\r\n        };\r\n\r\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\r\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        // destroys all row comps\r\n        this.setRowCtrls([]);\r\n        super.destroy();\r\n    }\r\n\r\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\r\n        const oldRows = { ...this.rowComps };\r\n        this.rowComps = {};\r\n\r\n        this.lastPlacedElement = null;\r\n\r\n        const processRow = (rowCon: RowCtrl) => {\r\n            const instanceId = rowCon.instanceId;\r\n            const existingRowComp = oldRows[instanceId];\r\n\r\n            if (existingRowComp) {\r\n                this.rowComps[instanceId] = existingRowComp;\r\n                delete oldRows[instanceId];\r\n                this.ensureDomOrder(existingRowComp.getGui());\r\n            } else {\r\n                // don't create new row comps for rows which are not displayed. still want the existing components\r\n                // as they may be animating out.\r\n                if (!rowCon.rowNode.displayed) {\r\n                    return;\r\n                }\r\n                const rowComp = new RowComp(rowCon, this.beans, this.options.type);\r\n                this.rowComps[instanceId] = rowComp;\r\n                this.appendRow(rowComp.getGui());\r\n            }\r\n        };\r\n\r\n        rowCtrls.forEach(processRow);\r\n        Object.values(oldRows).forEach((oldRowComp) => {\r\n            this.eContainer.removeChild(oldRowComp.getGui());\r\n            oldRowComp.destroy();\r\n        });\r\n\r\n        _setAriaRole(this.eContainer, 'rowgroup');\r\n    }\r\n\r\n    public appendRow(element: HTMLElement) {\r\n        if (this.domOrder) {\r\n            _insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\r\n        } else {\r\n            this.eContainer.appendChild(element);\r\n        }\r\n        this.lastPlacedElement = element;\r\n    }\r\n\r\n    private ensureDomOrder(eRow: HTMLElement): void {\r\n        if (this.domOrder) {\r\n            _ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\r\n            this.lastPlacedElement = eRow;\r\n        }\r\n    }\r\n}\r\n\r\nexport const RowContainerSelector: ComponentSelector = {\r\n    selector: 'AG-ROW-CONTAINER',\r\n    component: RowContainerComp,\r\n};\r\n", "import { _isCellSelectionEnabled, _isMultiRowSelection } from '../gridOptionsUtils';\r\nimport { GridHeaderSelector } from '../headerRendering/gridHeaderComp';\r\nimport { LayoutCssClasses } from '../styling/layoutFeature';\r\nimport { _setAriaColCount, _setAriaMultiSelectable, _setAriaRole, _setAriaRowCount } from '../utils/aria';\r\nimport { _observeResize } from '../utils/dom';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { Component, RefPlaceholder } from '../widgets/component';\r\nimport { FakeHScrollSelector } from './fakeHScrollComp';\r\nimport { FakeVScrollSelector } from './fakeVScrollComp';\r\nimport type { IGridBodyComp, RowAnimationCssClasses } from './gridBodyCtrl';\r\nimport { CSS_CLASS_FORCE_VERTICAL_SCROLL, GridBodyCtrl } from './gridBodyCtrl';\r\nimport { RowContainerSelector } from './rowContainer/rowContainerComp';\r\nimport type { RowContainerName } from './rowContainer/rowContainerCtrl';\r\n\r\nfunction makeRowContainers(paramsMap: Record<string, { name: string }>, names: RowContainerName[]): string {\r\n    return names\r\n        .map((name) => {\r\n            const refName = `e${name[0].toUpperCase() + name.substring(1)}RowContainer`;\r\n            paramsMap[refName] = { name };\r\n            return /* html */ `<ag-row-container name=\"${name}\" data-ref=\"${refName}\"></ag-row-container>`;\r\n        })\r\n        .join('');\r\n}\r\n\r\nfunction getGridBodyTemplate(includeOverlay?: boolean): {\r\n    paramsMap: Record<string, { name: string }>;\r\n    template: string;\r\n} {\r\n    const paramsMap: Record<string, { name: string }> = {};\r\n    const template = /* html */ `<div class=\"ag-root ag-unselectable\" data-ref=\"eGridRoot\">\r\n        <ag-header-root></ag-header-root>\r\n        <div class=\"ag-floating-top\" data-ref=\"eTop\" role=\"presentation\">\r\n            ${makeRowContainers(paramsMap, ['topLeft', 'topCenter', 'topRight', 'topFullWidth'])}\r\n        </div>\r\n        <div class=\"ag-body\" data-ref=\"eBody\" role=\"presentation\">\r\n            <div class=\"ag-body-viewport\" data-ref=\"eBodyViewport\" role=\"presentation\">\r\n            ${makeRowContainers(paramsMap, ['left', 'center', 'right', 'fullWidth'])}\r\n            </div>\r\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\r\n        </div>\r\n        <div class=\"ag-sticky-top\" data-ref=\"eStickyTop\" role=\"presentation\">\r\n            ${makeRowContainers(paramsMap, ['stickyTopLeft', 'stickyTopCenter', 'stickyTopRight', 'stickyTopFullWidth'])}\r\n        </div>\r\n        <div class=\"ag-sticky-bottom\" data-ref=\"eStickyBottom\" role=\"presentation\">\r\n            ${makeRowContainers(paramsMap, ['stickyBottomLeft', 'stickyBottomCenter', 'stickyBottomRight', 'stickyBottomFullWidth'])}\r\n        </div>\r\n        <div class=\"ag-floating-bottom\" data-ref=\"eBottom\" role=\"presentation\">\r\n            ${makeRowContainers(paramsMap, ['bottomLeft', 'bottomCenter', 'bottomRight', 'bottomFullWidth'])}\r\n        </div>\r\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\r\n        ${includeOverlay ? /* html */ `<ag-overlay-wrapper></ag-overlay-wrapper>` : ''}\r\n    </div>`;\r\n    return { paramsMap, template };\r\n}\r\n\r\nexport class GridBodyComp extends Component {\r\n    private readonly eGridRoot: HTMLElement = RefPlaceholder;\r\n    private readonly eBodyViewport: HTMLElement = RefPlaceholder;\r\n    private readonly eStickyTop: HTMLElement = RefPlaceholder;\r\n    private readonly eStickyBottom: HTMLElement = RefPlaceholder;\r\n    private readonly eTop: HTMLElement = RefPlaceholder;\r\n    private readonly eBottom: HTMLElement = RefPlaceholder;\r\n    private readonly eBody: HTMLElement = RefPlaceholder;\r\n\r\n    private ctrl: GridBodyCtrl;\r\n\r\n    public postConstruct() {\r\n        const { overlays, rangeSvc } = this.beans;\r\n        const overlaySelector = overlays?.getOverlayWrapperSelector();\r\n\r\n        const { paramsMap, template } = getGridBodyTemplate(!!overlaySelector);\r\n\r\n        this.setTemplate(\r\n            template,\r\n            [\r\n                ...(overlaySelector ? [overlaySelector] : []),\r\n                FakeHScrollSelector,\r\n                FakeVScrollSelector,\r\n                GridHeaderSelector,\r\n                RowContainerSelector,\r\n            ],\r\n            paramsMap\r\n        );\r\n\r\n        const setHeight = (height: number, element: HTMLElement) => {\r\n            const heightString = `${height}px`;\r\n            element.style.minHeight = heightString;\r\n            element.style.height = heightString;\r\n        };\r\n\r\n        const compProxy: IGridBodyComp = {\r\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) =>\r\n                this.setRowAnimationCssOnBodyViewport(cssClass, animate),\r\n            setColumnCount: (count) => _setAriaColCount(this.getGui(), count),\r\n            setRowCount: (count) => _setAriaRowCount(this.getGui(), count),\r\n            setTopHeight: (height) => setHeight(height, this.eTop),\r\n            setBottomHeight: (height) => setHeight(height, this.eBottom),\r\n            setTopDisplay: (display) => (this.eTop.style.display = display),\r\n            setBottomDisplay: (display) => (this.eBottom.style.display = display),\r\n            setStickyTopHeight: (height) => (this.eStickyTop.style.height = height),\r\n            setStickyTopTop: (top) => (this.eStickyTop.style.top = top),\r\n            setStickyTopWidth: (width) => (this.eStickyTop.style.width = width),\r\n            setStickyBottomHeight: (height) => {\r\n                this.eStickyBottom.style.height = height;\r\n                this.eStickyBottom.classList.toggle('ag-hidden', height === '0px');\r\n            },\r\n            setStickyBottomBottom: (bottom) => (this.eStickyBottom.style.bottom = bottom),\r\n            setStickyBottomWidth: (width) => (this.eStickyBottom.style.width = width),\r\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(cssClass, flag),\r\n            updateLayoutClasses: (cssClass, params) => {\r\n                const classLists = [this.eBodyViewport.classList, this.eBody.classList];\r\n\r\n                classLists.forEach((classList) => {\r\n                    classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\r\n                    classList.toggle(LayoutCssClasses.NORMAL, params.normal);\r\n                    classList.toggle(LayoutCssClasses.PRINT, params.print);\r\n                });\r\n\r\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\r\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\r\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\r\n            },\r\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\r\n                this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\r\n            registerBodyViewportResizeListener: (listener) => {\r\n                const unsubscribeFromResize = _observeResize(this.beans, this.eBodyViewport, listener);\r\n                this.addDestroyFunc(() => unsubscribeFromResize());\r\n            },\r\n            setPinnedTopBottomOverflowY: (overflow) =>\r\n                (this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow),\r\n            setCellSelectableCss: (cssClass: string, selectable: boolean) => {\r\n                [this.eTop, this.eBodyViewport, this.eBottom].forEach((ct) =>\r\n                    ct.classList.toggle(cssClass, selectable)\r\n                );\r\n            },\r\n            setBodyViewportWidth: (width) => (this.eBodyViewport.style.width = width),\r\n            setGridRootRole: (role: 'grid' | 'treegrid') => _setAriaRole(this.eGridRoot, role),\r\n        };\r\n\r\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\r\n        this.ctrl.setComp(\r\n            compProxy,\r\n            this.getGui(),\r\n            this.eBodyViewport,\r\n            this.eTop,\r\n            this.eBottom,\r\n            this.eStickyTop,\r\n            this.eStickyBottom\r\n        );\r\n\r\n        if ((rangeSvc && _isCellSelectionEnabled(this.gos)) || _isMultiRowSelection(this.gos)) {\r\n            _setAriaMultiSelectable(this.getGui(), true);\r\n        }\r\n    }\r\n\r\n    private setRowAnimationCssOnBodyViewport(cssClass: RowAnimationCssClasses, animateRows: boolean): void {\r\n        const bodyViewportClassList = this.eBodyViewport.classList;\r\n        bodyViewportClassList.toggle('ag-row-animation' as RowAnimationCssClasses, animateRows);\r\n        bodyViewportClassList.toggle('ag-row-no-animation' as RowAnimationCssClasses, !animateRows);\r\n    }\r\n}\r\nexport const GridBodySelector: ComponentSelector = {\r\n    selector: 'AG-GRID-BODY',\r\n    component: GridBodyComp,\r\n};\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport { _stampTopLevelGridCompWithGridInstance } from '../gridBodyComp/mouseEventUtils';\r\nimport { _getActiveDomElement } from '../gridOptionsUtils';\r\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\r\nimport type { IWatermark } from '../interfaces/iWatermark';\r\nimport type { LayoutView } from '../styling/layoutFeature';\r\nimport { LayoutFeature } from '../styling/layoutFeature';\r\nimport { _last } from '../utils/array';\r\nimport { _observeResize } from '../utils/dom';\r\nimport { _findTabbableParent, _focusInto, _isHeaderFocusSuppressed } from '../utils/focus';\r\nimport type { ComponentSelector } from '../widgets/component';\r\n\r\nexport interface IGridComp extends LayoutView {\r\n    setRtlClass(cssClass: string): void;\r\n    destroyGridUi(): void;\r\n    forceFocusOutOfContainer(up: boolean): void;\r\n    getFocusableContainers(): FocusableContainer[];\r\n    setCursor(value: string | null): void;\r\n    setUserSelect(value: string | null): void;\r\n}\r\n\r\nexport interface OptionalGridComponents {\r\n    paginationSelector?: ComponentSelector;\r\n    gridHeaderDropZonesSelector?: ComponentSelector;\r\n    sideBarSelector?: ComponentSelector;\r\n    statusBarSelector?: ComponentSelector;\r\n    watermarkSelector?: ComponentSelector;\r\n}\r\n\r\nexport class GridCtrl extends BeanStub {\r\n    private view: IGridComp;\r\n    private eGridHostDiv: HTMLElement;\r\n    private eGui: HTMLElement;\r\n\r\n    private additionalFocusableContainers: Set<FocusableContainer> = new Set();\r\n\r\n    public setComp(view: IGridComp, eGridDiv: HTMLElement, eGui: HTMLElement): void {\r\n        this.view = view;\r\n        this.eGridHostDiv = eGridDiv;\r\n        this.eGui = eGui;\r\n\r\n        this.eGui.setAttribute('grid-id', this.beans.context.getGridId());\r\n\r\n        const { dragAndDrop, ctrlsSvc } = this.beans;\r\n\r\n        dragAndDrop?.registerGridDropTarget(() => this.eGui, this);\r\n\r\n        _stampTopLevelGridCompWithGridInstance(this.gos, eGridDiv);\r\n\r\n        this.createManagedBean(new LayoutFeature(this.view));\r\n\r\n        this.view.setRtlClass(this.gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr');\r\n\r\n        const unsubscribeFromResize = _observeResize(this.beans, this.eGridHostDiv, this.onGridSizeChanged.bind(this));\r\n        this.addDestroyFunc(() => unsubscribeFromResize());\r\n\r\n        ctrlsSvc.register('gridCtrl', this);\r\n    }\r\n\r\n    public isDetailGrid(): boolean {\r\n        const el = _findTabbableParent(this.getGui());\r\n\r\n        return el?.getAttribute('row-id')?.startsWith('detail') || false;\r\n    }\r\n\r\n    public getOptionalSelectors(): OptionalGridComponents {\r\n        const beans = this.beans;\r\n        return {\r\n            paginationSelector: beans.pagination?.getPaginationSelector(),\r\n            gridHeaderDropZonesSelector: beans.registry.getSelector('AG-GRID-HEADER-DROP-ZONES'),\r\n            sideBarSelector: beans.sideBar?.getSelector(),\r\n            statusBarSelector: beans.registry?.getSelector('AG-STATUS-BAR'),\r\n            watermarkSelector: (beans.licenseManager as IWatermark)?.getWatermarkSelector(),\r\n        };\r\n    }\r\n\r\n    private onGridSizeChanged(): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'gridSizeChanged',\r\n            clientWidth: this.eGridHostDiv.clientWidth,\r\n            clientHeight: this.eGridHostDiv.clientHeight,\r\n        });\r\n    }\r\n\r\n    public destroyGridUi(): void {\r\n        this.view.destroyGridUi();\r\n    }\r\n\r\n    public getGui(): HTMLElement {\r\n        return this.eGui;\r\n    }\r\n\r\n    public setResizeCursor(on: boolean): void {\r\n        this.view.setCursor(on ? 'ew-resize' : null);\r\n    }\r\n\r\n    public disableUserSelect(on: boolean): void {\r\n        this.view.setUserSelect(on ? 'none' : null);\r\n    }\r\n\r\n    public focusNextInnerContainer(backwards: boolean): boolean {\r\n        const focusableContainers = this.getFocusableContainers();\r\n        const { indexWithFocus, nextIndex } = this.getNextFocusableIndex(focusableContainers, backwards);\r\n\r\n        if (nextIndex < 0 || nextIndex >= focusableContainers.length) {\r\n            return false;\r\n        }\r\n\r\n        if (nextIndex === 0) {\r\n            if (indexWithFocus > 0) {\r\n                const { visibleCols, focusSvc } = this.beans;\r\n                const allColumns = visibleCols.allCols;\r\n                const lastColumn = _last(allColumns);\r\n                if (focusSvc.focusGridView(lastColumn, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return this.focusContainer(focusableContainers[nextIndex], backwards);\r\n    }\r\n\r\n    public focusInnerElement(fromBottom?: boolean): boolean {\r\n        const userCallbackFunction = this.gos.getCallback('focusGridInnerElement');\r\n        if (userCallbackFunction && userCallbackFunction({ fromBottom: !!fromBottom })) {\r\n            return true;\r\n        }\r\n\r\n        const focusableContainers = this.getFocusableContainers();\r\n        const { focusSvc, visibleCols } = this.beans;\r\n        const allColumns = visibleCols.allCols;\r\n\r\n        if (fromBottom) {\r\n            if (focusableContainers.length > 1) {\r\n                return this.focusContainer(_last(focusableContainers), true);\r\n            }\r\n\r\n            const lastColumn = _last(allColumns);\r\n            if (focusSvc.focusGridView(lastColumn, true)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (this.gos.get('headerHeight') === 0 || _isHeaderFocusSuppressed(this.beans)) {\r\n            if (focusSvc.focusGridView(allColumns[0])) {\r\n                return true;\r\n            }\r\n\r\n            for (let i = 1; i < focusableContainers.length; i++) {\r\n                if (_focusInto(focusableContainers[i].getGui())) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return focusSvc.focusFirstHeader();\r\n    }\r\n\r\n    public forceFocusOutOfContainer(up = false): void {\r\n        this.view.forceFocusOutOfContainer(up);\r\n    }\r\n\r\n    public addFocusableContainer(container: FocusableContainer): void {\r\n        this.additionalFocusableContainers.add(container);\r\n    }\r\n\r\n    public removeFocusableContainer(container: FocusableContainer): void {\r\n        this.additionalFocusableContainers.delete(container);\r\n    }\r\n\r\n    public allowFocusForNextCoreContainer(up?: boolean): void {\r\n        const coreContainers = this.view.getFocusableContainers();\r\n        const { nextIndex, indexWithFocus } = this.getNextFocusableIndex(coreContainers, up);\r\n        if (indexWithFocus === -1 || nextIndex < 0 || nextIndex >= coreContainers.length) {\r\n            return;\r\n        }\r\n        const comp = coreContainers[nextIndex];\r\n        comp.setAllowFocus?.(true);\r\n        // we're letting the browser handle the focus here, so need to wait for focus to move into the container before disabling focus again.\r\n        // can't do this via event, as the container may not have anything focusable. In which case, the focus will just go out of the grid.\r\n        setTimeout(() => {\r\n            comp.setAllowFocus?.(false);\r\n        });\r\n    }\r\n\r\n    private getNextFocusableIndex(\r\n        focusableContainers: FocusableContainer[],\r\n        backwards?: boolean\r\n    ): {\r\n        indexWithFocus: number;\r\n        nextIndex: number;\r\n    } {\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n        const indexWithFocus = focusableContainers.findIndex((container) => container.getGui().contains(activeEl));\r\n        const nextIndex = indexWithFocus + (backwards ? -1 : 1);\r\n        return {\r\n            indexWithFocus,\r\n            nextIndex,\r\n        };\r\n    }\r\n\r\n    private focusContainer(comp: FocusableContainer, up?: boolean): boolean {\r\n        comp.setAllowFocus?.(true);\r\n        const result = _focusInto(comp.getGui(), up);\r\n        comp.setAllowFocus?.(false);\r\n        return result;\r\n    }\r\n\r\n    private getFocusableContainers(): FocusableContainer[] {\r\n        return [...this.view.getFocusableContainers(), ...this.additionalFocusableContainers];\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.additionalFocusableContainers.clear();\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { GridBodyComp } from '../gridBodyComp/gridBodyComp';\r\nimport { GridBodySelector } from '../gridBodyComp/gridBodyComp';\r\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\r\nimport type { ISideBar } from '../interfaces/iSideBar';\r\nimport type { UpdateLayoutClassesParams } from '../styling/layoutFeature';\r\nimport { LayoutCssClasses } from '../styling/layoutFeature';\r\nimport { _isVisible } from '../utils/dom';\r\nimport { _logIfDebug } from '../utils/function';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { RefPlaceholder } from '../widgets/component';\r\nimport type { Component } from '../widgets/component';\r\nimport { TabGuardComp } from '../widgets/tabGuardComp';\r\nimport type { IGridComp, OptionalGridComponents } from './gridCtrl';\r\nimport { GridCtrl } from './gridCtrl';\r\n\r\nexport class GridComp extends TabGuardComp {\r\n    private readonly gridBody: GridBodyComp = RefPlaceholder;\r\n    private readonly sideBar: ISideBar & Component = RefPlaceholder;\r\n    private readonly pagination: TabGuardComp = RefPlaceholder;\r\n    private readonly rootWrapperBody: HTMLElement = RefPlaceholder;\r\n\r\n    private eGridDiv: HTMLElement;\r\n\r\n    constructor(eGridDiv: HTMLElement) {\r\n        super();\r\n        this.eGridDiv = eGridDiv;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const compProxy: IGridComp = {\r\n            destroyGridUi: () => this.destroyBean(this),\r\n            setRtlClass: (cssClass: string) => this.addCssClass(cssClass),\r\n            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),\r\n            updateLayoutClasses: this.updateLayoutClasses.bind(this),\r\n            getFocusableContainers: this.getFocusableContainers.bind(this),\r\n            setUserSelect: (value) => {\r\n                this.getGui().style.userSelect = value != null ? value : '';\r\n                this.getGui().style.webkitUserSelect = value != null ? value : '';\r\n            },\r\n            setCursor: (value) => {\r\n                this.getGui().style.cursor = value != null ? value : '';\r\n            },\r\n        };\r\n\r\n        const ctrl = this.createManagedBean(new GridCtrl());\r\n        const comps = ctrl.getOptionalSelectors();\r\n        const template = this.createTemplate(comps);\r\n        const requiredComps = [GridBodySelector, ...Object.values(comps).filter((c) => !!c)] as ComponentSelector[];\r\n        this.setTemplate(template, requiredComps);\r\n\r\n        ctrl.setComp(compProxy, this.eGridDiv, this.getGui());\r\n\r\n        this.insertGridIntoDom();\r\n\r\n        this.initialiseTabGuard({\r\n            // we want to override the default behaviour to do nothing for onTabKeyDown\r\n            onTabKeyDown: () => undefined,\r\n            focusInnerElement: (fromBottom) => ctrl.focusInnerElement(fromBottom),\r\n            forceFocusOutWhenTabGuardsAreEmpty: true,\r\n        });\r\n    }\r\n\r\n    private insertGridIntoDom(): void {\r\n        const eGui = this.getGui();\r\n        this.eGridDiv.appendChild(eGui);\r\n        this.addDestroyFunc(() => {\r\n            this.eGridDiv.removeChild(eGui);\r\n            _logIfDebug(this.gos, 'Grid removed from DOM');\r\n        });\r\n    }\r\n\r\n    private updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\r\n        const eRootWrapperBodyClassList = this.rootWrapperBody.classList;\r\n        const { AUTO_HEIGHT, NORMAL, PRINT } = LayoutCssClasses;\r\n        const { autoHeight, normal, print } = params;\r\n        eRootWrapperBodyClassList.toggle(AUTO_HEIGHT, autoHeight);\r\n        eRootWrapperBodyClassList.toggle(NORMAL, normal);\r\n        eRootWrapperBodyClassList.toggle(PRINT, print);\r\n\r\n        this.addOrRemoveCssClass(AUTO_HEIGHT, autoHeight);\r\n        this.addOrRemoveCssClass(NORMAL, normal);\r\n        this.addOrRemoveCssClass(PRINT, print);\r\n    }\r\n\r\n    private createTemplate(params: OptionalGridComponents): string {\r\n        const dropZones = params.gridHeaderDropZonesSelector\r\n            ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>'\r\n            : '';\r\n        const sideBar = params.sideBarSelector ? '<ag-side-bar data-ref=\"sideBar\"></ag-side-bar>' : '';\r\n        const statusBar = params.statusBarSelector ? '<ag-status-bar></ag-status-bar>' : '';\r\n        const watermark = params.watermarkSelector ? '<ag-watermark></ag-watermark>' : '';\r\n        const pagination = params.paginationSelector ? '<ag-pagination data-ref=\"pagination\"></ag-pagination>' : '';\r\n\r\n        const template =\r\n            /* html */\r\n            `<div class=\"ag-root-wrapper\" role=\"presentation\">\r\n                ${dropZones}\r\n                <div class=\"ag-root-wrapper-body\" data-ref=\"rootWrapperBody\" role=\"presentation\">\r\n                    <ag-grid-body data-ref=\"gridBody\"></ag-grid-body>\r\n                    ${sideBar}\r\n                </div>\r\n                ${statusBar}\r\n                ${pagination}\r\n                ${watermark}\r\n            </div>`;\r\n\r\n        return template;\r\n    }\r\n\r\n    public override getFocusableElement(): HTMLElement {\r\n        return this.rootWrapperBody;\r\n    }\r\n\r\n    public override forceFocusOutOfContainer(up: boolean = false): void {\r\n        if (!up && this.pagination?.isDisplayed()) {\r\n            this.pagination.forceFocusOutOfContainer(up);\r\n            return;\r\n        }\r\n        super.forceFocusOutOfContainer(up);\r\n    }\r\n\r\n    protected getFocusableContainers(): FocusableContainer[] {\r\n        const focusableContainers: FocusableContainer[] = [this.gridBody];\r\n\r\n        [this.sideBar, this.pagination].forEach((comp) => {\r\n            if (comp) {\r\n                focusableContainers.push(comp);\r\n            }\r\n        });\r\n\r\n        return focusableContainers.filter((el) => _isVisible(el.getGui()));\r\n    }\r\n}\r\n", "import type { ValidationModuleName } from '../interfaces/iModule';\r\nimport type {\r\n    GridApi,\r\n    _AdvancedFilterGridApi,\r\n    _AggregationGridApi,\r\n    _CellSelectionGridApi,\r\n    _ClientSideRowModelGridApi,\r\n    _ClipboardGridApi,\r\n    _ColumnAutosizeApi,\r\n    _ColumnChooserGridApi,\r\n    _ColumnFilterGridApi,\r\n    _ColumnGridApi,\r\n    _ColumnGroupGridApi,\r\n    _ColumnHoverApi,\r\n    _ColumnMoveApi,\r\n    _ColumnResizeApi,\r\n    _CommunityMenuGridApi,\r\n    _ContextMenuGridApi,\r\n    _CoreGridApi,\r\n    _CsrmSsrmSharedGridApi,\r\n    _CsvExportGridApi,\r\n    _DragGridApi,\r\n    _EditGridApi,\r\n    _EventGridApi,\r\n    _ExcelExportGridApi,\r\n    _FilterGridApi,\r\n    _GridChartsGridApi,\r\n    _HighlightChangesGridApi,\r\n    _InfiniteRowModelGridApi,\r\n    _KeyboardNavigationGridApi,\r\n    _MasterDetailGridApi,\r\n    _OverlayGridApi,\r\n    _PaginationGridApi,\r\n    _PinnedRowGridApi,\r\n    _PivotGridApi,\r\n    _QuickFilterGridApi,\r\n    _RenderGridApi,\r\n    _RowGridApi,\r\n    _RowGroupingGridApi,\r\n    _RowSelectionGridApi,\r\n    _ScrollGridApi,\r\n    _ServerSideRowModelGridApi,\r\n    _SideBarGridApi,\r\n    _SortGridApi,\r\n    _SsrmInfiniteSharedGridApi,\r\n    _StateGridApi,\r\n    _StatusBarGridApi,\r\n    _UndoRedoGridApi,\r\n    _ValueApi,\r\n    _ValueCacheApi,\r\n} from './gridApi';\r\n\r\nconst mod = <TGridApi extends Partial<GridApi>>(\r\n    moduleName: ValidationModuleName,\r\n    input: Record<keyof TGridApi, 0>\r\n): Record<keyof TGridApi, ValidationModuleName> => {\r\n    for (const key of Object.keys(input)) {\r\n        (input as any)[key] = moduleName;\r\n    }\r\n    return input as any;\r\n};\r\n\r\nexport const gridApiFunctionsMap: Record<keyof GridApi, ValidationModuleName> = {\r\n    dispatchEvent: 'CommunityCore', // this is always registered\r\n    ...mod<_CoreGridApi<any>>('CommunityCore', {\r\n        destroy: 0,\r\n        getGridId: 0,\r\n        getGridOption: 0,\r\n        isDestroyed: 0,\r\n        setGridOption: 0,\r\n        updateGridOptions: 0,\r\n    }),\r\n    ...mod<_StateGridApi>('GridState', {\r\n        getState: 0,\r\n    }),\r\n    ...mod<_RowSelectionGridApi<any>>('SharedRowSelection', {\r\n        setNodesSelected: 0,\r\n        selectAll: 0,\r\n        deselectAll: 0,\r\n        selectAllFiltered: 0,\r\n        deselectAllFiltered: 0,\r\n        selectAllOnCurrentPage: 0,\r\n        deselectAllOnCurrentPage: 0,\r\n        getSelectedNodes: 0,\r\n        getSelectedRows: 0,\r\n    }),\r\n    ...mod<_RowGridApi<any>>('RowApi', {\r\n        redrawRows: 0,\r\n        setRowNodeExpanded: 0,\r\n        getRowNode: 0,\r\n        addRenderedRowListener: 0,\r\n        getRenderedNodes: 0,\r\n        forEachNode: 0,\r\n        getFirstDisplayedRowIndex: 0,\r\n        getLastDisplayedRowIndex: 0,\r\n        getDisplayedRowAtIndex: 0,\r\n        getDisplayedRowCount: 0,\r\n    }),\r\n    ...mod<_ScrollGridApi<any>>('ScrollApi', {\r\n        getVerticalPixelRange: 0,\r\n        getHorizontalPixelRange: 0,\r\n        ensureColumnVisible: 0,\r\n        ensureIndexVisible: 0,\r\n        ensureNodeVisible: 0,\r\n    }),\r\n    ...mod<_KeyboardNavigationGridApi>('KeyboardNavigation', {\r\n        getFocusedCell: 0,\r\n        clearFocusedCell: 0,\r\n        setFocusedCell: 0,\r\n        tabToNextCell: 0,\r\n        tabToPreviousCell: 0,\r\n        setFocusedHeader: 0,\r\n    }),\r\n    ...mod<_EventGridApi<any>>('EventApi', {\r\n        addEventListener: 0,\r\n        addGlobalListener: 0,\r\n        removeEventListener: 0,\r\n        removeGlobalListener: 0,\r\n    }),\r\n    ...mod<_ValueCacheApi>('ValueCache', {\r\n        expireValueCache: 0,\r\n    }),\r\n    ...mod<_ValueApi<any>>('CellApi', {\r\n        getCellValue: 0,\r\n    }),\r\n    ...mod<_CommunityMenuGridApi>('SharedMenu', {\r\n        showColumnMenu: 0,\r\n        hidePopupMenu: 0,\r\n    }),\r\n    ...mod<_SortGridApi>('Sort', {\r\n        onSortChanged: 0,\r\n    }),\r\n    ...mod<_PinnedRowGridApi>('PinnedRow', {\r\n        getPinnedTopRowCount: 0,\r\n        getPinnedBottomRowCount: 0,\r\n        getPinnedTopRow: 0,\r\n        getPinnedBottomRow: 0,\r\n    }),\r\n    ...mod<_OverlayGridApi>('Overlay', {\r\n        showLoadingOverlay: 0,\r\n        showNoRowsOverlay: 0,\r\n        hideOverlay: 0,\r\n    }),\r\n    ...mod<_RenderGridApi<any>>('RenderApi', {\r\n        setGridAriaProperty: 0,\r\n        refreshCells: 0,\r\n        refreshHeader: 0,\r\n        isAnimationFrameQueueEmpty: 0,\r\n        flushAllAnimationFrames: 0,\r\n        getSizesForCurrentTheme: 0,\r\n        getCellRendererInstances: 0,\r\n    }),\r\n    ...mod<_HighlightChangesGridApi<any>>('HighlightChanges', {\r\n        flashCells: 0,\r\n    }),\r\n    ...mod<_DragGridApi>('RowDrag', {\r\n        addRowDropZone: 0,\r\n        removeRowDropZone: 0,\r\n        getRowDropZoneParams: 0,\r\n    }),\r\n    ...mod<_ColumnGridApi<any>>('ColumnApi', {\r\n        getColumnDefs: 0,\r\n        getColumnDef: 0,\r\n        getDisplayNameForColumn: 0,\r\n        getColumn: 0,\r\n        getColumns: 0,\r\n        applyColumnState: 0,\r\n        getColumnState: 0,\r\n        resetColumnState: 0,\r\n        isPinning: 0,\r\n        isPinningLeft: 0,\r\n        isPinningRight: 0,\r\n        getDisplayedColAfter: 0,\r\n        getDisplayedColBefore: 0,\r\n        setColumnsVisible: 0,\r\n        setColumnsPinned: 0,\r\n        getAllGridColumns: 0,\r\n        getDisplayedLeftColumns: 0,\r\n        getDisplayedCenterColumns: 0,\r\n        getDisplayedRightColumns: 0,\r\n        getAllDisplayedColumns: 0,\r\n        getAllDisplayedVirtualColumns: 0,\r\n    }),\r\n    ...mod<_ColumnAutosizeApi>('ColumnAutoSize', {\r\n        sizeColumnsToFit: 0,\r\n        autoSizeColumns: 0,\r\n        autoSizeAllColumns: 0,\r\n    }),\r\n    ...mod<_ColumnGroupGridApi>('ColumnGroup', {\r\n        setColumnGroupOpened: 0,\r\n        getColumnGroup: 0,\r\n        getProvidedColumnGroup: 0,\r\n        getDisplayNameForColumnGroup: 0,\r\n        getColumnGroupState: 0,\r\n        setColumnGroupState: 0,\r\n        resetColumnGroupState: 0,\r\n        getLeftDisplayedColumnGroups: 0,\r\n        getCenterDisplayedColumnGroups: 0,\r\n        getRightDisplayedColumnGroups: 0,\r\n        getAllDisplayedColumnGroups: 0,\r\n    }),\r\n    ...mod<_ColumnMoveApi>('ColumnMove', {\r\n        moveColumnByIndex: 0,\r\n        moveColumns: 0,\r\n    }),\r\n    ...mod<_ColumnResizeApi>('ColumnResize', {\r\n        setColumnWidths: 0,\r\n    }),\r\n    ...mod<_ColumnHoverApi>('ColumnHover', {\r\n        isColumnHovered: 0,\r\n    }),\r\n    ...mod<_EditGridApi<any>>('EditCore', {\r\n        getCellEditorInstances: 0,\r\n        getEditingCells: 0,\r\n        stopEditing: 0,\r\n        startEditingCell: 0,\r\n    }),\r\n    ...mod<_UndoRedoGridApi>('UndoRedoEdit', {\r\n        undoCellEditing: 0,\r\n        redoCellEditing: 0,\r\n        getCurrentUndoSize: 0,\r\n        getCurrentRedoSize: 0,\r\n    }),\r\n    ...mod<_FilterGridApi>('FilterCore', {\r\n        isAnyFilterPresent: 0,\r\n        onFilterChanged: 0,\r\n    }),\r\n    ...mod<_ColumnFilterGridApi>('ColumnFilter', {\r\n        isColumnFilterPresent: 0,\r\n        getColumnFilterInstance: 0,\r\n        destroyFilter: 0,\r\n        setFilterModel: 0,\r\n        getFilterModel: 0,\r\n        getColumnFilterModel: 0,\r\n        setColumnFilterModel: 0,\r\n        showColumnFilter: 0,\r\n    }),\r\n    ...mod<_QuickFilterGridApi>('QuickFilter', {\r\n        isQuickFilterPresent: 0,\r\n        getQuickFilter: 0,\r\n        resetQuickFilter: 0,\r\n    }),\r\n    ...mod<_PaginationGridApi>('Pagination', {\r\n        paginationIsLastPageFound: 0,\r\n        paginationGetPageSize: 0,\r\n        paginationGetCurrentPage: 0,\r\n        paginationGetTotalPages: 0,\r\n        paginationGetRowCount: 0,\r\n        paginationGoToNextPage: 0,\r\n        paginationGoToPreviousPage: 0,\r\n        paginationGoToFirstPage: 0,\r\n        paginationGoToLastPage: 0,\r\n        paginationGoToPage: 0,\r\n    }),\r\n    ...mod<_CsrmSsrmSharedGridApi>('CsrmSsrmSharedApi', {\r\n        expandAll: 0,\r\n        collapseAll: 0,\r\n        onRowHeightChanged: 0,\r\n    }),\r\n    ...mod<_SsrmInfiniteSharedGridApi>('SsrmInfiniteSharedApi', {\r\n        setRowCount: 0,\r\n        getCacheBlockState: 0,\r\n        isLastRowIndexKnown: 0,\r\n    }),\r\n\r\n    ...mod<_ClientSideRowModelGridApi<any>>('ClientSideRowModelApi', {\r\n        onGroupExpandedOrCollapsed: 0,\r\n        refreshClientSideRowModel: 0,\r\n        isRowDataEmpty: 0,\r\n        forEachLeafNode: 0,\r\n        forEachNodeAfterFilter: 0,\r\n        forEachNodeAfterFilterAndSort: 0,\r\n        resetRowHeights: 0,\r\n        applyTransaction: 0,\r\n        applyTransactionAsync: 0,\r\n        flushAsyncTransactions: 0,\r\n        getBestCostNodeSelection: 0,\r\n    }),\r\n\r\n    ...mod<_CsvExportGridApi>('CsvExport', {\r\n        getDataAsCsv: 0,\r\n        exportDataAsCsv: 0,\r\n    }),\r\n\r\n    ...mod<_InfiniteRowModelGridApi>('InfiniteRowModel', {\r\n        refreshInfiniteCache: 0,\r\n        purgeInfiniteCache: 0,\r\n        getInfiniteRowCount: 0,\r\n    }),\r\n\r\n    ...mod<_AdvancedFilterGridApi>('AdvancedFilter', {\r\n        getAdvancedFilterModel: 0,\r\n        setAdvancedFilterModel: 0,\r\n        showAdvancedFilterBuilder: 0,\r\n        hideAdvancedFilterBuilder: 0,\r\n    }),\r\n\r\n    ...mod<_GridChartsGridApi>('IntegratedCharts', {\r\n        getChartModels: 0,\r\n        getChartRef: 0,\r\n        getChartImageDataURL: 0,\r\n        downloadChart: 0,\r\n        openChartToolPanel: 0,\r\n        closeChartToolPanel: 0,\r\n        createRangeChart: 0,\r\n        createPivotChart: 0,\r\n        createCrossFilterChart: 0,\r\n        updateChart: 0,\r\n        restoreChart: 0,\r\n    }),\r\n\r\n    ...mod<_ClipboardGridApi>('Clipboard', {\r\n        copyToClipboard: 0,\r\n        cutToClipboard: 0,\r\n        copySelectedRowsToClipboard: 0,\r\n        copySelectedRangeToClipboard: 0,\r\n        copySelectedRangeDown: 0,\r\n        pasteFromClipboard: 0,\r\n    }),\r\n\r\n    ...mod<_ExcelExportGridApi>('ExcelExport', {\r\n        getDataAsExcel: 0,\r\n        exportDataAsExcel: 0,\r\n        getSheetDataForExcel: 0,\r\n        getMultipleSheetsAsExcel: 0,\r\n        exportMultipleSheetsAsExcel: 0,\r\n    }),\r\n\r\n    ...mod<_MasterDetailGridApi>('SharedMasterDetail', {\r\n        addDetailGridInfo: 0,\r\n        removeDetailGridInfo: 0,\r\n        getDetailGridInfo: 0,\r\n        forEachDetailGridInfo: 0,\r\n    }),\r\n\r\n    ...mod<_ContextMenuGridApi>('ContextMenu', {\r\n        showContextMenu: 0,\r\n    }),\r\n\r\n    ...mod<_ColumnChooserGridApi>('ColumnMenu', {\r\n        showColumnChooser: 0,\r\n        hideColumnChooser: 0,\r\n    }),\r\n\r\n    ...mod<_CellSelectionGridApi>('CellSelection', {\r\n        getCellRanges: 0,\r\n        addCellRange: 0,\r\n        clearRangeSelection: 0,\r\n        clearCellSelection: 0,\r\n    }),\r\n\r\n    ...mod<_RowGroupingGridApi>('SharedRowGrouping', {\r\n        setRowGroupColumns: 0,\r\n        removeRowGroupColumns: 0,\r\n        addRowGroupColumns: 0,\r\n        getRowGroupColumns: 0,\r\n        moveRowGroupColumn: 0,\r\n    }),\r\n\r\n    ...mod<_AggregationGridApi<any>>('SharedAggregation', {\r\n        addAggFuncs: 0,\r\n        clearAggFuncs: 0,\r\n        setColumnAggFunc: 0,\r\n    }),\r\n\r\n    ...mod<_PivotGridApi<any>>('SharedPivot', {\r\n        isPivotMode: 0,\r\n        getPivotResultColumn: 0,\r\n        setValueColumns: 0,\r\n        getValueColumns: 0,\r\n        removeValueColumns: 0,\r\n        addValueColumns: 0,\r\n        setPivotColumns: 0,\r\n        removePivotColumns: 0,\r\n        addPivotColumns: 0,\r\n        getPivotColumns: 0,\r\n        setPivotResultColumns: 0,\r\n        getPivotResultColumns: 0,\r\n    }),\r\n\r\n    ...mod<_ServerSideRowModelGridApi<any>>('ServerSideRowModelApi', {\r\n        getServerSideSelectionState: 0,\r\n        setServerSideSelectionState: 0,\r\n        applyServerSideTransaction: 0,\r\n        applyServerSideTransactionAsync: 0,\r\n        applyServerSideRowData: 0,\r\n        retryServerSideLoads: 0,\r\n        flushServerSideAsyncTransactions: 0,\r\n        refreshServerSide: 0,\r\n        getServerSideGroupLevelState: 0,\r\n    }),\r\n\r\n    ...mod<_SideBarGridApi<any>>('SideBar', {\r\n        isSideBarVisible: 0,\r\n        setSideBarVisible: 0,\r\n        setSideBarPosition: 0,\r\n        openToolPanel: 0,\r\n        closeToolPanel: 0,\r\n        getOpenedToolPanel: 0,\r\n        refreshToolPanel: 0,\r\n        isToolPanelShowing: 0,\r\n        getToolPanelInstance: 0,\r\n        getSideBar: 0,\r\n    }),\r\n\r\n    ...mod<_StatusBarGridApi>('StatusBar', {\r\n        getStatusPanel: 0,\r\n    }),\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AllEvents } from '../events';\r\nimport { _warn } from '../validation/logging';\r\nimport type { GridApi } from './gridApi';\r\nimport { gridApiFunctionsMap } from './gridApiFunctions';\r\nimport type { ApiFunction, ApiFunctionName } from './iApiFunction';\r\n\r\nconst defaultFns = {\r\n    isDestroyed: () => true,\r\n    destroy() {},\r\n    preConstruct() {},\r\n    postConstruct() {},\r\n    preWireBeans() {},\r\n    wireBeans() {},\r\n};\r\n\r\nconst dispatchEvent = (beans: BeanCollection, event: AllEvents): void => beans.eventSvc.dispatchEvent(event);\r\n\r\n// We use a class for AGGridApi so in stack traces calling grid.api.xxx() if an error is thrown it will print \"GridApi.xxx\"\r\nclass GridApiClass {}\r\nReflect.defineProperty(GridApiClass, 'name', { value: 'GridApi' });\r\n\r\nexport class ApiFunctionService extends BeanStub implements NamedBean {\r\n    beanName = 'apiFunctionSvc' as const;\r\n\r\n    public readonly api: GridApi = new GridApiClass() as GridApi;\r\n\r\n    private fns: {\r\n        [key in ApiFunctionName]?: (beans: BeanCollection, ...args: any[]) => any;\r\n    } = {\r\n        ...defaultFns,\r\n\r\n        // dispatchEvent is used by frameworks, also used by aligned grids to identify a grid api instance\r\n        dispatchEvent,\r\n    };\r\n\r\n    private preDestroyLink: string = '';\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        const { api } = this;\r\n        for (const key of Object.keys(gridApiFunctionsMap)) {\r\n            api[key as ApiFunctionName] = this.makeApi(key as ApiFunctionName)[key];\r\n        }\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.preDestroyLink = this.beans.frameworkOverrides.getDocLink('grid-lifecycle/#grid-pre-destroyed');\r\n    }\r\n\r\n    public addFunction<TFunctionName extends ApiFunctionName>(\r\n        functionName: TFunctionName,\r\n        func: ApiFunction<TFunctionName>\r\n    ): void {\r\n        const { fns, beans } = this;\r\n        if (fns !== defaultFns) {\r\n            fns[functionName] = beans?.validation?.validateApiFunction(functionName, func) ?? func;\r\n        }\r\n    }\r\n\r\n    private makeApi(apiName: ApiFunctionName) {\r\n        // We return an object here to be sure the function name is properly applied,\r\n        // in this way error stack trace are correct and gridApi.xxx.name === 'xxx'\r\n        // This is generally faster than using Object.defineProperty(gridApi, apiName, { value: apiName, configurable: true });\r\n        // Keep this function as light and simple as possible.\r\n        return {\r\n            [apiName]: (...args: any[]) => {\r\n                const {\r\n                    beans,\r\n                    fns: { [apiName]: fn },\r\n                } = this;\r\n                return fn ? fn(beans!, ...args) : this.apiNotFound(apiName);\r\n            },\r\n        };\r\n    }\r\n\r\n    private apiNotFound(fnName: ApiFunctionName): void {\r\n        const { beans, gos, preDestroyLink } = this;\r\n        if (!beans) {\r\n            _warn(26, { fnName, preDestroyLink });\r\n        } else {\r\n            const module = gridApiFunctionsMap[fnName];\r\n            if (gos.assertModuleRegistered(module, `api.${fnName}`)) {\r\n                _warn(27, { fnName, module });\r\n            }\r\n        }\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        this.fns = defaultFns;\r\n        (this.beans as any) = null;\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { ManagedGridOptionKey, ManagedGridOptions } from '../gridOptionsInitial';\r\n\r\nexport function getGridId(beans: BeanCollection): string {\r\n    return beans.context.getGridId();\r\n}\r\n\r\nexport function destroy(beans: BeanCollection): void {\r\n    beans.gridDestroySvc.destroy();\r\n}\r\n\r\nexport function isDestroyed(beans: BeanCollection): boolean {\r\n    return beans.gridDestroySvc.destroyCalled;\r\n}\r\n\r\nexport function getGridOption<Key extends keyof GridOptions<TData>, TData = any>(\r\n    beans: BeanCollection,\r\n    key: Key\r\n): GridOptions<TData>[Key] {\r\n    return beans.gos.get(key);\r\n}\r\n\r\nexport function setGridOption<Key extends ManagedGridOptionKey, TData = any>(\r\n    beans: BeanCollection,\r\n    key: Key,\r\n    value: GridOptions<TData>[Key]\r\n): void {\r\n    updateGridOptions(beans, { [key]: value });\r\n}\r\n\r\nexport function updateGridOptions<TDataUpdate = any>(\r\n    beans: BeanCollection,\r\n    options: ManagedGridOptions<TDataUpdate>\r\n): void {\r\n    // NOTE: The TDataUpdate generic is used to ensure that the update options match the generic passed into the GridApi above as TData.\r\n    // This is required because if we just use TData directly then Typescript will get into an infinite loop due to callbacks which recursively include the GridApi.\r\n    beans.gos.updateGridOptions({ options });\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { DndSourceOnRowDragParams } from '../entities/colDef';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _createIconNoSpan } from '../utils/icon';\r\nimport { Component } from '../widgets/component';\r\n\r\nexport class DndSourceComp extends Component {\r\n    constructor(\r\n        private readonly rowNode: RowNode,\r\n        private readonly column: AgColumn,\r\n        private readonly eCell: HTMLElement\r\n    ) {\r\n        super(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const eGui = this.getGui();\r\n        eGui.appendChild(_createIconNoSpan('rowDrag', this.beans, null)!);\r\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\r\n        this.addGuiEventListener('mousedown', (e: MouseEvent) => {\r\n            e.stopPropagation();\r\n        });\r\n        this.addDragSource();\r\n        this.checkVisibility();\r\n    }\r\n\r\n    private addDragSource(): void {\r\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\r\n    }\r\n\r\n    private onDragStart(dragEvent: DragEvent): void {\r\n        const { rowNode, column, eCell, gos } = this;\r\n        const providedOnRowDrag = column.getColDef().dndSourceOnRowDrag;\r\n\r\n        const dataTransfer = dragEvent.dataTransfer!;\r\n\r\n        dataTransfer.setDragImage(eCell, 0, 0);\r\n\r\n        if (providedOnRowDrag) {\r\n            const params: DndSourceOnRowDragParams = gos.addGridCommonParams({\r\n                rowNode,\r\n                dragEvent,\r\n            });\r\n            providedOnRowDrag(params);\r\n        } else {\r\n            // default behaviour is to convert data to json and set into drag component\r\n            try {\r\n                const jsonData = JSON.stringify(rowNode.data);\r\n\r\n                dataTransfer.setData('application/json', jsonData);\r\n                dataTransfer.setData('text/plain', jsonData);\r\n            } catch (e) {\r\n                // if we cannot convert the data to json, then we do not set the type\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkVisibility(): void {\r\n        const visible = this.column.isDndSource(this.rowNode);\r\n        this.setDisplayed(visible);\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { RowDropZoneEvents, RowDropZoneParams } from './rowDragFeature';\r\n\r\nexport function addRowDropZone(beans: BeanCollection, params: RowDropZoneParams): void {\r\n    beans.rowDragSvc?.rowDragFeature?.addRowDropZone(params);\r\n}\r\n\r\nexport function removeRowDropZone(beans: BeanCollection, params: RowDropZoneParams): void {\r\n    const activeDropTarget = beans.dragAndDrop?.findExternalZone(params);\r\n\r\n    if (activeDropTarget) {\r\n        beans.dragAndDrop?.removeDropTarget(activeDropTarget);\r\n    }\r\n}\r\n\r\nexport function getRowDropZoneParams(beans: BeanCollection, events?: RowDropZoneEvents): RowDropZoneParams | undefined {\r\n    return beans.rowDragSvc?.rowDragFeature?.getRowDropZone(events);\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { DragListenerParams } from './dragService';\r\n\r\nexport interface HorizontalResizeParams {\r\n    eResizeBar: HTMLElement;\r\n    dragStartPixels?: number;\r\n    onResizeStart: (shiftKey: boolean) => void;\r\n    onResizing: (delta: number) => void;\r\n    onResizeEnd: (delta: number) => void;\r\n}\r\n\r\nexport class HorizontalResizeService extends BeanStub implements NamedBean {\r\n    beanName = 'horizontalResizeSvc' as const;\r\n\r\n    private dragStartX: number;\r\n    private resizeAmount: number;\r\n\r\n    public addResizeBar(params: HorizontalResizeParams): () => void {\r\n        const dragSource: DragListenerParams = {\r\n            dragStartPixels: params.dragStartPixels || 0,\r\n            eElement: params.eResizeBar,\r\n            onDragStart: this.onDragStart.bind(this, params),\r\n            onDragStop: this.onDragStop.bind(this, params),\r\n            onDragging: this.onDragging.bind(this, params),\r\n            onDragCancel: this.onDragStop.bind(this, params),\r\n            includeTouch: true,\r\n            stopPropagationForTouch: true,\r\n        };\r\n\r\n        const { dragSvc } = this.beans;\r\n\r\n        dragSvc!.addDragSource(dragSource);\r\n\r\n        // we pass remove func back to the caller, so call can tell us when they\r\n        // are finished, and then we remove the listener from the drag source\r\n        const finishedWithResizeFunc = () => dragSvc!.removeDragSource(dragSource);\r\n\r\n        return finishedWithResizeFunc;\r\n    }\r\n\r\n    private onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\r\n        this.dragStartX = mouseEvent.clientX;\r\n\r\n        this.setResizeIcons();\r\n\r\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\r\n        params.onResizeStart(shiftKey);\r\n    }\r\n\r\n    private setResizeIcons(): void {\r\n        const ctrl = this.beans.ctrlsSvc.get('gridCtrl');\r\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\r\n        ctrl.setResizeCursor(true);\r\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\r\n        ctrl.disableUserSelect(true);\r\n    }\r\n\r\n    private onDragStop(params: HorizontalResizeParams): void {\r\n        params.onResizeEnd(this.resizeAmount);\r\n        this.resetIcons();\r\n    }\r\n\r\n    private resetIcons(): void {\r\n        const ctrl = this.beans.ctrlsSvc.get('gridCtrl');\r\n        ctrl.setResizeCursor(false);\r\n        ctrl.disableUserSelect(false);\r\n    }\r\n\r\n    private onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\r\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\r\n        params.onResizing(this.resizeAmount);\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { AgEventType } from '../eventTypes';\r\nimport type { IRowDragItem } from '../interfaces/iRowDragItem';\r\nimport { _createIconNoSpan } from '../utils/icon';\r\nimport { Component } from '../widgets/component';\r\nimport type { DragSource } from './dragAndDropService';\r\nimport { DragSourceType } from './dragAndDropService';\r\n\r\nexport class RowDragComp extends Component {\r\n    private dragSource: DragSource | null = null;\r\n    private mouseDownListener: (() => void) | undefined;\r\n\r\n    constructor(\r\n        private readonly cellValueFn: () => string,\r\n        private readonly rowNode: RowNode,\r\n        private readonly column?: AgColumn,\r\n        private readonly customGui?: HTMLElement,\r\n        private readonly dragStartPixels?: number,\r\n        private readonly suppressVisibilityChange?: boolean\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public isCustomGui(): boolean {\r\n        return this.customGui != null;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const { beans, rowNode, column, gos } = this;\r\n        if (!this.customGui) {\r\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\r\n            this.getGui().appendChild(_createIconNoSpan('rowDrag', beans, null)!);\r\n            this.addDragSource();\r\n        } else {\r\n            this.setDragElement(this.customGui, this.dragStartPixels);\r\n        }\r\n\r\n        if (!this.suppressVisibilityChange) {\r\n            const strategy = gos.get('rowDragManaged')\r\n                ? new ManagedVisibilityStrategy(this, rowNode, column)\r\n                : new NonManagedVisibilityStrategy(this, rowNode, column);\r\n\r\n            this.createManagedBean(strategy, this.beans.context);\r\n        }\r\n    }\r\n\r\n    public setDragElement(dragElement: HTMLElement, dragStartPixels?: number) {\r\n        // We set suppressDataRefValidation as the drag element could contain AG Grid comps with data references\r\n        // that are not part of this row dragger's context. Maybe this should just setGui and not setTemplateFromElement?\r\n        this.setTemplateFromElement(dragElement, undefined, undefined, true);\r\n        this.addDragSource(dragStartPixels);\r\n    }\r\n\r\n    private getSelectedNodes(): RowNode[] {\r\n        const rowNode = this.rowNode;\r\n        const isRowDragMultiRow = this.gos.get('rowDragMultiRow');\r\n        if (!isRowDragMultiRow) {\r\n            return [rowNode];\r\n        }\r\n\r\n        const selection = this.beans.selectionSvc?.getSelectedNodes() ?? [];\r\n\r\n        return selection.indexOf(rowNode) !== -1 ? selection : [rowNode];\r\n    }\r\n\r\n    private getDragItem(): IRowDragItem {\r\n        const { column, rowNode } = this;\r\n        return {\r\n            rowNode,\r\n            rowNodes: this.getSelectedNodes(),\r\n            columns: column ? [column] : undefined,\r\n            defaultTextValue: this.cellValueFn(),\r\n        };\r\n    }\r\n\r\n    private getRowDragText(column?: AgColumn) {\r\n        if (column) {\r\n            const colDef = column.getColDef();\r\n            if (colDef.rowDragText) {\r\n                return colDef.rowDragText;\r\n            }\r\n        }\r\n        return this.gos.get('rowDragText');\r\n    }\r\n\r\n    private addDragSource(dragStartPixels: number = 4): void {\r\n        // if this is changing the drag element, delete the previous dragSource\r\n        if (this.dragSource) {\r\n            this.removeDragSource();\r\n        }\r\n\r\n        const eGui = this.getGui();\r\n\r\n        if (this.gos.get('enableCellTextSelection')) {\r\n            this.removeMouseDownListener();\r\n\r\n            this.mouseDownListener = this.addManagedElementListeners(eGui, {\r\n                mousedown: (e) => {\r\n                    e?.preventDefault();\r\n                },\r\n            })[0];\r\n        }\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n\r\n        this.dragSource = {\r\n            type: DragSourceType.RowDrag,\r\n            eElement: eGui,\r\n            dragItemName: () => {\r\n                const dragItem = this.getDragItem();\r\n                const dragItemCount = dragItem.rowNodes?.length || 1;\r\n\r\n                const rowDragText = this.getRowDragText(this.column);\r\n                if (rowDragText) {\r\n                    return rowDragText(dragItem, dragItemCount);\r\n                }\r\n\r\n                return dragItemCount === 1\r\n                    ? this.cellValueFn()\r\n                    : `${dragItemCount} ${translate('rowDragRows', 'rows')}`;\r\n            },\r\n            getDragItem: () => this.getDragItem(),\r\n            dragStartPixels,\r\n            dragSourceDomDataKey: this.gos.getDomDataKey(),\r\n        };\r\n\r\n        this.beans.dragAndDrop!.addDragSource(this.dragSource, true);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.removeDragSource();\r\n        this.removeMouseDownListener();\r\n        super.destroy();\r\n    }\r\n\r\n    private removeDragSource() {\r\n        if (!this.dragSource) {\r\n            return;\r\n        }\r\n\r\n        this.beans.dragAndDrop!.removeDragSource(this.dragSource);\r\n        this.dragSource = null;\r\n    }\r\n\r\n    private removeMouseDownListener() {\r\n        if (!this.mouseDownListener) {\r\n            return;\r\n        }\r\n\r\n        this.mouseDownListener();\r\n        this.mouseDownListener = undefined;\r\n    }\r\n}\r\n\r\nclass VisibilityStrategy extends BeanStub {\r\n    constructor(\r\n        private readonly parent: RowDragComp,\r\n        protected readonly rowNode: RowNode,\r\n        private readonly column?: AgColumn\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\r\n        const displayedOptions = { skipAriaHidden: true };\r\n        if (neverDisplayed) {\r\n            this.parent.setDisplayed(false, displayedOptions);\r\n        } else {\r\n            let shown: boolean = true;\r\n            let isShownSometimes: boolean = false;\r\n\r\n            const { column, rowNode, parent } = this;\r\n            if (column) {\r\n                shown = column.isRowDrag(rowNode) || parent.isCustomGui();\r\n                isShownSometimes = typeof column.getColDef().rowDrag === 'function';\r\n            }\r\n\r\n            // if shown sometimes, them some rows can have drag handle while other don't,\r\n            // so we use setVisible to keep the handles horizontally aligned (as _setVisible\r\n            // keeps the empty space, whereas setDisplayed looses the space)\r\n            if (isShownSometimes) {\r\n                parent.setDisplayed(true, displayedOptions);\r\n                parent.setVisible(shown, displayedOptions);\r\n            } else {\r\n                parent.setDisplayed(shown, displayedOptions);\r\n                parent.setVisible(true, displayedOptions);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// when non managed, the visibility depends on suppressRowDrag property only\r\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\r\n    public postConstruct(): void {\r\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\r\n\r\n        // in case data changes, then we need to update visibility of drag item\r\n        const listener = this.workOutVisibility.bind(this);\r\n        this.addManagedListeners(this.rowNode, {\r\n            dataChanged: listener,\r\n            cellChanged: listener,\r\n        });\r\n\r\n        this.addManagedListeners(this.beans.eventSvc, { newColumnsLoaded: listener });\r\n\r\n        this.workOutVisibility();\r\n    }\r\n\r\n    private onSuppressRowDrag(): void {\r\n        this.workOutVisibility();\r\n    }\r\n\r\n    private workOutVisibility(): void {\r\n        // only show the drag if both sort and filter are not present\r\n        const neverDisplayed = this.gos.get('suppressRowDrag');\r\n        this.setDisplayedOrVisible(neverDisplayed);\r\n    }\r\n}\r\n\r\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\r\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\r\n    public postConstruct(): void {\r\n        const listener = this.workOutVisibility.bind(this);\r\n        // we do not show the component if sort, filter or grouping is active\r\n        this.addManagedListeners<AgEventType>(this.beans.eventSvc, {\r\n            sortChanged: listener,\r\n            filterChanged: listener,\r\n            columnRowGroupChanged: listener,\r\n            newColumnsLoaded: listener,\r\n        });\r\n\r\n        // in case data changes, then we need to update visibility of drag item\r\n        this.addManagedListeners(this.rowNode, {\r\n            dataChanged: listener,\r\n            cellChanged: listener,\r\n        });\r\n\r\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\r\n\r\n        this.workOutVisibility();\r\n    }\r\n\r\n    private onSuppressRowDrag(): void {\r\n        this.workOutVisibility();\r\n    }\r\n\r\n    private workOutVisibility(): void {\r\n        const { rowDragSvc, dragAndDrop, gos } = this.beans;\r\n        // only show the drag if both sort and filter are not present\r\n        const rowDragFeature = rowDragSvc!.rowDragFeature;\r\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\r\n        const suppressRowDrag = gos.get('suppressRowDrag');\r\n        const hasExternalDropZones = dragAndDrop!.hasExternalDropZones();\r\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\r\n\r\n        this.setDisplayedOrVisible(neverDisplayed);\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _isCellSelectionEnabled, _isClientSideRowModel } from '../gridOptionsUtils';\r\nimport { RowDragComp } from './rowDragComp';\r\nimport { RowDragFeature } from './rowDragFeature';\r\n\r\nexport class RowDragService extends BeanStub implements NamedBean {\r\n    beanName = 'rowDragSvc' as const;\r\n\r\n    public rowDragFeature?: RowDragFeature;\r\n\r\n    public setupRowDrag(element: HTMLElement, ctrl: BeanStub): void {\r\n        const rowDragFeature = ctrl.createManagedBean(new RowDragFeature(element));\r\n        const dragAndDrop = this.beans.dragAndDrop!;\r\n        dragAndDrop.addDropTarget(rowDragFeature);\r\n        ctrl.addDestroyFunc(() => dragAndDrop.removeDropTarget(rowDragFeature));\r\n        this.rowDragFeature = rowDragFeature;\r\n    }\r\n\r\n    public createRowDragComp(\r\n        cellValueFn: () => string,\r\n        rowNode: RowNode,\r\n        column?: AgColumn,\r\n        customGui?: HTMLElement,\r\n        dragStartPixels?: number,\r\n        suppressVisibilityChange?: boolean\r\n    ): RowDragComp {\r\n        return new RowDragComp(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange);\r\n    }\r\n\r\n    public createRowDragCompForRow(rowNode: RowNode, element: HTMLElement): RowDragComp | undefined {\r\n        if (_isCellSelectionEnabled(this.gos)) {\r\n            return undefined;\r\n        }\r\n        const translate = this.getLocaleTextFunc();\r\n        return this.createRowDragComp(\r\n            () => `1 ${translate('rowDragRow', 'row')}`,\r\n            rowNode,\r\n            undefined,\r\n            element,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    public createRowDragCompForCell(\r\n        rowNode: RowNode,\r\n        column: AgColumn,\r\n        cellValueFn: () => string,\r\n        element?: HTMLElement,\r\n        dragStartPixels?: number,\r\n        suppressVisibilityChange?: boolean\r\n    ): RowDragComp | undefined {\r\n        const gos = this.gos;\r\n        if (gos.get('rowDragManaged')) {\r\n            // row dragging only available in default row model and when not using pagination\r\n            if (!_isClientSideRowModel(gos) || gos.get('pagination')) {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        // otherwise (normal case) we are creating a RowDraggingComp for the first time\r\n        const rowDragComp = this.createRowDragComp(\r\n            cellValueFn,\r\n            rowNode,\r\n            column,\r\n            element,\r\n            dragStartPixels,\r\n            suppressVisibilityChange\r\n        );\r\n        return rowDragComp;\r\n    }\r\n}\r\n", "import type { _DragGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { DndSourceComp } from '../rendering/dndSourceComp';\r\nimport { VERSION } from '../version';\r\nimport { DragAndDropImageComponent } from './dragAndDropImageComponent';\r\nimport { DragAndDropService } from './dragAndDropService';\r\nimport { addRowDropZone, getRowDropZoneParams, removeRowDropZone } from './dragApi';\r\nimport { DragService } from './dragService';\r\nimport { HorizontalResizeService } from './horizontalResizeService';\r\nimport { RowDragService } from './rowDragService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const DragModule: _ModuleWithoutApi = {\r\n    moduleName: 'Drag',\r\n    version: VERSION,\r\n    beans: [DragService],\r\n};\r\n\r\n/**\r\n * @feature Import & Export -> Drag & Drop\r\n * @colDef dndSource, dndSourceOnRowDrag\r\n */\r\nexport const DragAndDropModule: _ModuleWithoutApi = {\r\n    moduleName: 'DragAndDrop',\r\n    version: VERSION,\r\n    dynamicBeans: {\r\n        dndSourceComp: DndSourceComp as any,\r\n    },\r\n    icons: {\r\n        // drag handle used to pick up draggable rows\r\n        rowDrag: 'grip',\r\n    },\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const SharedDragAndDropModule: _ModuleWithoutApi = {\r\n    moduleName: 'SharedDragAndDrop',\r\n    version: VERSION,\r\n    beans: [DragAndDropService],\r\n    dependsOn: [DragModule],\r\n    userComponents: {\r\n        agDragAndDropImage: DragAndDropImageComponent,\r\n    },\r\n    icons: {\r\n        // shown on drag and drop image component icon while dragging column to the side of the grid to pin\r\n        columnMovePin: 'pin',\r\n        // shown on drag and drop image component icon while dragging over part of the page that is not a drop zone\r\n        columnMoveHide: 'eye-slash',\r\n        // shown on drag and drop image component icon while dragging columns to reorder\r\n        columnMoveMove: 'arrows',\r\n        // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\r\n        columnMoveLeft: 'left',\r\n        // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\r\n        columnMoveRight: 'right',\r\n        // shown on drag and drop image component icon while dragging over Row Groups drop zone\r\n        columnMoveGroup: 'group',\r\n        // shown on drag and drop image component icon while dragging over Values drop zone\r\n        columnMoveValue: 'aggregation',\r\n        // shown on drag and drop image component icon while dragging over pivot drop zone\r\n        columnMovePivot: 'pivot',\r\n        // shown on drag and drop image component icon while dragging over drop zone that doesn't support it, e.g.\r\n        // string column over aggregation drop zone\r\n        dropNotAllowed: 'not-allowed',\r\n        // drag handle used to pick up draggable rows\r\n        rowDrag: 'grip',\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Rows -> Row Dragging\r\n * @colDef rowDrag\r\n */\r\nexport const RowDragModule: _ModuleWithApi<_DragGridApi> = {\r\n    moduleName: 'RowDrag',\r\n    version: VERSION,\r\n    beans: [RowDragService],\r\n    apiFunctions: {\r\n        addRowDropZone,\r\n        removeRowDropZone,\r\n        getRowDropZoneParams,\r\n    },\r\n    dependsOn: [SharedDragAndDropModule],\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const HorizontalResizeModule: _ModuleWithoutApi = {\r\n    moduleName: 'HorizontalResize',\r\n    version: VERSION,\r\n    beans: [HorizontalResizeService],\r\n    dependsOn: [DragModule],\r\n};\r\n", "export const columnMovingCSS = /*css*/ `:where(.ag-ltr) :where(.ag-column-moving){.ag-cell,.ag-header-cell{transition:left .2s}.ag-header-group-cell{transition:left .2s,width .2s}}:where(.ag-rtl) :where(.ag-column-moving){.ag-cell,.ag-header-cell{transition:right .2s}.ag-header-group-cell{transition:right .2s,width .2s}}`;\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\n\r\nexport class ColumnAnimationService extends BeanStub implements NamedBean {\r\n    beanName = 'colAnimation' as const;\r\n\r\n    private gridBodyCtrl: GridBodyCtrl;\r\n\r\n    private executeNextFuncs: ((...args: any[]) => any)[] = [];\r\n    private executeLaterFuncs: ((...args: any[]) => any)[] = [];\r\n\r\n    private active = false;\r\n    // activeNext starts with active but it is reset earlier after the nextFuncs are cleared\r\n    // to prevent calls made to executeNextVMTurn from queuing functions after executeNextFuncs has already been flushed,\r\n    private activeNext = false;\r\n    private suppressAnimation = false;\r\n\r\n    private animationThreadCount = 0;\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => (this.gridBodyCtrl = p.gridBodyCtrl));\r\n    }\r\n\r\n    public isActive(): boolean {\r\n        return this.active && !this.suppressAnimation;\r\n    }\r\n\r\n    public setSuppressAnimation(suppress: boolean): void {\r\n        this.suppressAnimation = suppress;\r\n    }\r\n\r\n    public start(): void {\r\n        if (this.active) {\r\n            return;\r\n        }\r\n\r\n        const { gos } = this;\r\n\r\n        if (gos.get('suppressColumnMoveAnimation')) {\r\n            return;\r\n        }\r\n\r\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\r\n        // the animation moves all the row the the right rather than to the left (ie it's the static\r\n        // columns that actually get their coordinates updated)\r\n        if (gos.get('enableRtl')) {\r\n            return;\r\n        }\r\n\r\n        this.ensureAnimationCssClassPresent();\r\n\r\n        this.active = true;\r\n        this.activeNext = true;\r\n    }\r\n\r\n    public finish(): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        this.flush(\r\n            () => (this.activeNext = false),\r\n            () => (this.active = false)\r\n        );\r\n    }\r\n\r\n    public executeNextVMTurn(func: (...args: any[]) => any): void {\r\n        if (this.activeNext) {\r\n            this.executeNextFuncs.push(func);\r\n        } else {\r\n            func();\r\n        }\r\n    }\r\n\r\n    public executeLaterVMTurn(func: (...args: any[]) => any): void {\r\n        if (this.active) {\r\n            this.executeLaterFuncs.push(func);\r\n        } else {\r\n            func();\r\n        }\r\n    }\r\n\r\n    private ensureAnimationCssClassPresent(): void {\r\n        // up the count, so we can tell if someone else has updated the count\r\n        // by the time the 'wait' func executes\r\n        this.animationThreadCount++;\r\n        const animationThreadCountCopy = this.animationThreadCount;\r\n        const { gridBodyCtrl } = this;\r\n        gridBodyCtrl.setColumnMovingCss(true);\r\n\r\n        this.executeLaterFuncs.push(() => {\r\n            // only remove the class if this thread was the last one to update it\r\n            if (this.animationThreadCount === animationThreadCountCopy) {\r\n                gridBodyCtrl.setColumnMovingCss(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    private flush(callbackNext: () => void, callbackLater: () => void): void {\r\n        const { executeNextFuncs, executeLaterFuncs } = this;\r\n        if (executeNextFuncs.length === 0 && executeLaterFuncs.length === 0) {\r\n            callbackNext();\r\n            callbackLater();\r\n            return;\r\n        }\r\n\r\n        const runFuncs = (queue: ((...args: any[]) => any)[]) => {\r\n            while (queue.length) {\r\n                const func = queue.pop();\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.beans.frameworkOverrides.wrapIncoming(() => {\r\n            window.setTimeout(() => {\r\n                callbackNext();\r\n                runFuncs(executeNextFuncs);\r\n            }, 0);\r\n            window.setTimeout(() => {\r\n                // run the callback before executeLaterFuncs\r\n                // because some functions being executed later\r\n                // check if this service is `active`.\r\n                callbackLater();\r\n                runFuncs(executeLaterFuncs);\r\n            }, 200);\r\n        });\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { Column } from '../interfaces/iColumn';\r\n\r\nexport function moveColumnByIndex(beans: BeanCollection, fromIndex: number, toIndex: number): void {\r\n    beans.colMoves?.moveColumnByIndex(fromIndex, toIndex, 'api');\r\n}\r\n\r\nexport function moveColumns(beans: BeanCollection, columnsToMoveKeys: (string | ColDef | Column)[], toIndex: number) {\r\n    beans.colMoves?.moveColumns(columnsToMoveKeys, toIndex, 'api');\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { DragAndDropIcon, DraggingEvent } from '../../dragAndDrop/dragAndDropService';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport type { DropListener } from './bodyDropTarget';\r\n\r\nexport class BodyDropPivotTarget extends BeanStub implements DropListener {\r\n    private columnsToAggregate: AgColumn[] = [];\r\n    private columnsToGroup: AgColumn[] = [];\r\n    private columnsToPivot: AgColumn[] = [];\r\n\r\n    constructor(private readonly pinned: ColumnPinnedType) {\r\n        super();\r\n    }\r\n\r\n    /** Callback for when drag enters */\r\n    public onDragEnter(draggingEvent: DraggingEvent): void {\r\n        this.clearColumnsList();\r\n\r\n        // in pivot mode, we don't accept any drops if functions are read only\r\n        if (this.gos.get('functionsReadOnly')) {\r\n            return;\r\n        }\r\n\r\n        const dragColumns = draggingEvent.dragItem.columns as AgColumn[] | undefined;\r\n\r\n        if (!dragColumns) {\r\n            return;\r\n        }\r\n\r\n        dragColumns.forEach((column) => {\r\n            // we don't allow adding secondary columns\r\n            if (!column.isPrimary()) {\r\n                return;\r\n            }\r\n\r\n            if (column.isAnyFunctionActive()) {\r\n                return;\r\n            }\r\n\r\n            if (column.isAllowValue()) {\r\n                this.columnsToAggregate.push(column);\r\n            } else if (column.isAllowRowGroup()) {\r\n                this.columnsToGroup.push(column);\r\n            } else if (column.isAllowPivot()) {\r\n                this.columnsToPivot.push(column);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getIconName(): DragAndDropIcon | null {\r\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\r\n        if (totalColumns > 0) {\r\n            return this.pinned ? 'pinned' : 'move';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Callback for when drag leaves */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onDragLeave(draggingEvent: DraggingEvent): void {\r\n        // if we are taking columns out of the center, then we remove them from the report\r\n        this.clearColumnsList();\r\n    }\r\n\r\n    private clearColumnsList(): void {\r\n        this.columnsToAggregate.length = 0;\r\n        this.columnsToGroup.length = 0;\r\n        this.columnsToPivot.length = 0;\r\n    }\r\n\r\n    /** Callback for when dragging */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onDragging(draggingEvent: DraggingEvent): void {}\r\n\r\n    /** Callback for when drag stops */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onDragStop(draggingEvent: DraggingEvent): void {\r\n        const { valueColsSvc, rowGroupColsSvc, pivotColsSvc } = this.beans;\r\n        if (this.columnsToAggregate.length > 0) {\r\n            valueColsSvc?.addColumns(this.columnsToAggregate, 'toolPanelDragAndDrop');\r\n        }\r\n        if (this.columnsToGroup.length > 0) {\r\n            rowGroupColsSvc?.addColumns(this.columnsToGroup, 'toolPanelDragAndDrop');\r\n        }\r\n        if (this.columnsToPivot.length > 0) {\r\n            pivotColsSvc?.addColumns(this.columnsToPivot, 'toolPanelDragAndDrop');\r\n        }\r\n    }\r\n\r\n    public onDragCancel(): void {\r\n        this.clearColumnsList();\r\n    }\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { VisibleColsService } from '../columns/visibleColsService';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport { _areEqual, _last, _sortNumerically } from '../utils/array';\r\nimport type { ColumnMoveService } from './columnMoveService';\r\n\r\nexport interface ColumnMoveParams {\r\n    allMovingColumns: AgColumn[];\r\n    isFromHeader: boolean;\r\n    fromLeft: boolean;\r\n    xPosition: number;\r\n    fromEnter: boolean;\r\n    fakeEvent: boolean;\r\n    pinned: ColumnPinnedType;\r\n    gos: GridOptionsService;\r\n    colModel: ColumnModel;\r\n    colMoves: ColumnMoveService;\r\n    visibleCols: VisibleColsService;\r\n}\r\n\r\n// returns the provided cols sorted in same order as they appear in this.cols, eg if this.cols\r\n// contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]\r\nfunction sortColsLikeCols(colsList: AgColumn[], cols: AgColumn[]): void {\r\n    if (!cols || cols.length <= 1) {\r\n        return;\r\n    }\r\n\r\n    const notAllColsPresent = cols.filter((c) => colsList.indexOf(c) < 0).length > 0;\r\n    if (notAllColsPresent) {\r\n        return;\r\n    }\r\n\r\n    cols.sort((a, b) => {\r\n        const indexA = colsList.indexOf(a);\r\n        const indexB = colsList.indexOf(b);\r\n        return indexA - indexB;\r\n    });\r\n}\r\n\r\nexport function getBestColumnMoveIndexFromXPosition(\r\n    params: ColumnMoveParams\r\n): { columns: AgColumn[]; toIndex: number } | undefined {\r\n    const { isFromHeader, fromLeft, xPosition, fromEnter, fakeEvent, pinned, gos, colModel, colMoves, visibleCols } =\r\n        params;\r\n\r\n    let { allMovingColumns } = params;\r\n    if (isFromHeader) {\r\n        // If the columns we're dragging are the only visible columns of their group, move the hidden ones too\r\n        const newCols: AgColumn[] = [];\r\n        allMovingColumns.forEach((col) => {\r\n            let movingGroup: AgColumnGroup | null = null;\r\n\r\n            let parent = col.getParent();\r\n            while (parent != null && parent.getDisplayedLeafColumns().length === 1) {\r\n                movingGroup = parent;\r\n                parent = parent.getParent();\r\n            }\r\n            if (movingGroup != null) {\r\n                const isMarryChildren = !!movingGroup.getColGroupDef()?.marryChildren;\r\n                const columnsToMove = isMarryChildren\r\n                    ? // when marry children is true, we also have to move hidden\r\n                      // columns within the group, so grab them from the `providedColumnGroup`\r\n                      movingGroup.getProvidedColumnGroup().getLeafColumns()\r\n                    : movingGroup.getLeafColumns();\r\n\r\n                columnsToMove.forEach((newCol) => {\r\n                    if (!newCols.includes(newCol)) {\r\n                        newCols.push(newCol);\r\n                    }\r\n                });\r\n            } else if (!newCols.includes(col)) {\r\n                newCols.push(col);\r\n            }\r\n        });\r\n        allMovingColumns = newCols;\r\n    }\r\n\r\n    // it is important to sort the moving columns as they are in grid columns, as the list of moving columns\r\n    // could themselves be part of 'married children' groups, which means we need to maintain the order within\r\n    // the moving list.\r\n    const allMovingColumnsOrdered = allMovingColumns.slice();\r\n    sortColsLikeCols(colModel.getCols(), allMovingColumnsOrdered);\r\n\r\n    const validMoves = calculateValidMoves({\r\n        movingCols: allMovingColumnsOrdered,\r\n        draggingRight: fromLeft,\r\n        xPosition,\r\n        pinned,\r\n        gos,\r\n        colModel,\r\n        visibleCols,\r\n    });\r\n\r\n    // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move\r\n    // (ie left or right) to the mouse direction. however\r\n    const oldIndex = calculateOldIndex(allMovingColumnsOrdered, colModel);\r\n\r\n    if (validMoves.length === 0) {\r\n        return;\r\n    }\r\n\r\n    const firstValidMove = validMoves[0];\r\n\r\n    // the two check below stop an error when the user grabs a group my a middle column, then\r\n    // it is possible the mouse pointer is to the right of a column while been dragged left.\r\n    // so we need to make sure that the mouse pointer is actually left of the left most column\r\n    // if moving left, and right of the right most column if moving right\r\n\r\n    // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from\r\n    // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should\r\n    // place the column to the RHS even if the mouse is moving left and the column is already on\r\n    // the LHS. otherwise we stick to the rule described above.\r\n\r\n    let constrainDirection = oldIndex !== null && !fromEnter;\r\n\r\n    // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag\r\n    if (isFromHeader) {\r\n        constrainDirection = oldIndex !== null;\r\n    }\r\n\r\n    // if the event was faked by a change in column pin state, then the original location of the column\r\n    // is not reliable for dictating where the column may now be placed.\r\n    if (constrainDirection && !fakeEvent) {\r\n        // only allow left drag if this column is moving left\r\n        if (!fromLeft && firstValidMove >= (oldIndex as number)) {\r\n            return;\r\n        }\r\n\r\n        // only allow right drag if this column is moving right\r\n        if (fromLeft && firstValidMove <= (oldIndex as number)) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // From when we find a move that passes all the rules\r\n    // Remember what that move would look like in terms of displayed cols\r\n    // keep going with further moves until we find a different result in displayed output\r\n    // In this way potentialMoves contains all potential moves over 'hidden' columns\r\n    const displayedCols = visibleCols.allCols;\r\n\r\n    const potentialMoves: { move: number; fragCount: number }[] = [];\r\n    let targetOrder: AgColumn[] | null = null;\r\n\r\n    for (let i = 0; i < validMoves.length; i++) {\r\n        const move: number = validMoves[i];\r\n\r\n        const order = colMoves.getProposedColumnOrder(allMovingColumnsOrdered, move);\r\n\r\n        if (!colMoves.doesOrderPassRules(order)) {\r\n            continue;\r\n        }\r\n        const displayedOrder = order.filter((col) => displayedCols.includes(col));\r\n        if (targetOrder === null) {\r\n            targetOrder = displayedOrder;\r\n        } else if (!_areEqual(displayedOrder, targetOrder)) {\r\n            break; // Stop looking for potential moves if the displayed result changes from the target\r\n        }\r\n        const fragCount = groupFragCount(order);\r\n        potentialMoves.push({ move, fragCount });\r\n    }\r\n\r\n    if (potentialMoves.length === 0) {\r\n        return;\r\n    }\r\n\r\n    // The best move is the move with least group fragmentation\r\n    potentialMoves.sort((a, b) => a.fragCount - b.fragCount);\r\n    const toIndex = potentialMoves[0].move;\r\n\r\n    if (toIndex > colModel.getCols().length - allMovingColumns.length) {\r\n        return;\r\n    }\r\n\r\n    return { columns: allMovingColumns, toIndex };\r\n}\r\n\r\nexport function attemptMoveColumns(\r\n    params: ColumnMoveParams & { finished: boolean }\r\n): { columns: AgColumn[]; toIndex: number } | null | undefined {\r\n    const { columns, toIndex } = getBestColumnMoveIndexFromXPosition(params) || {};\r\n    const { finished, colMoves } = params;\r\n\r\n    if (!columns || toIndex == null) {\r\n        return null;\r\n    }\r\n\r\n    colMoves.moveColumns(columns, toIndex, 'uiColumnMoved', finished);\r\n\r\n    return finished ? null : { columns, toIndex };\r\n}\r\n\r\n// returns the index of the first column in the list ONLY if the cols are all beside\r\n// each other. if the cols are not beside each other, then returns null\r\nfunction calculateOldIndex(movingCols: AgColumn[], colModel: ColumnModel): number | null {\r\n    const gridCols: AgColumn[] = colModel.getCols();\r\n    const indexes = _sortNumerically(movingCols.map((col) => gridCols.indexOf(col)));\r\n    const firstIndex = indexes[0];\r\n    const lastIndex = _last(indexes);\r\n    const spread = lastIndex - firstIndex;\r\n    const gapsExist = spread !== indexes.length - 1;\r\n\r\n    return gapsExist ? null : firstIndex;\r\n}\r\n\r\n// A measure of how fragmented in terms of groups an order of columns is\r\nfunction groupFragCount(columns: AgColumn[]): number {\r\n    function parents(col: AgColumn): AgProvidedColumnGroup[] {\r\n        const result: AgProvidedColumnGroup[] = [];\r\n        let parent = col.getOriginalParent();\r\n        while (parent != null) {\r\n            result.push(parent);\r\n            parent = parent.getOriginalParent();\r\n        }\r\n        return result;\r\n    }\r\n    let count = 0;\r\n    for (let i = 0; i < columns.length - 1; i++) {\r\n        let a = parents(columns[i]);\r\n        let b = parents(columns[i + 1]);\r\n        // iterate over the longest one\r\n        [a, b] = a.length > b.length ? [a, b] : [b, a];\r\n        a.forEach((parent) => {\r\n            if (b.indexOf(parent) === -1) {\r\n                count++; // More fragmented if other column doesn't share the parent\r\n            }\r\n        });\r\n    }\r\n    return count;\r\n}\r\n\r\nfunction getDisplayedColumns(visibleCols: VisibleColsService, type: ColumnPinnedType): AgColumn[] {\r\n    switch (type) {\r\n        case 'left':\r\n            return visibleCols.leftCols;\r\n        case 'right':\r\n            return visibleCols.rightCols;\r\n        default:\r\n            return visibleCols.centerCols;\r\n    }\r\n}\r\n\r\nfunction calculateValidMoves(params: {\r\n    movingCols: AgColumn[];\r\n    draggingRight: boolean;\r\n    xPosition: number;\r\n    pinned: ColumnPinnedType;\r\n    gos: GridOptionsService;\r\n    colModel: ColumnModel;\r\n    visibleCols: VisibleColsService;\r\n}): number[] {\r\n    const { movingCols, draggingRight, xPosition, pinned, gos, colModel, visibleCols } = params;\r\n    const isMoveBlocked =\r\n        gos.get('suppressMovableColumns') || movingCols.some((col) => col.getColDef().suppressMovable);\r\n\r\n    if (isMoveBlocked) {\r\n        return [];\r\n    }\r\n    // this is the list of cols on the screen, so it's these we use when comparing the x mouse position\r\n    const allDisplayedCols = getDisplayedColumns(visibleCols, pinned);\r\n    // but this list is the list of all cols, when we move a col it's the index within this list that gets used,\r\n    // so the result we return has to be and index location for this list\r\n    const allGridCols = colModel.getCols();\r\n\r\n    const movingDisplayedCols = allDisplayedCols.filter((col) => movingCols.includes(col));\r\n    const otherDisplayedCols = allDisplayedCols.filter((col) => !movingCols.includes(col));\r\n    const otherGridCols = allGridCols.filter((col) => !movingCols.includes(col));\r\n\r\n    // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.\r\n    // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving\r\n    // col between b and c (so that it is under the mouse position).\r\n    let displayIndex = 0;\r\n    let availableWidth = xPosition;\r\n\r\n    // if we are dragging right, then the columns will be to the left of the mouse, so we also want to\r\n    // include the width of the moving columns\r\n    if (draggingRight) {\r\n        let widthOfMovingDisplayedCols = 0;\r\n        movingDisplayedCols.forEach((col) => (widthOfMovingDisplayedCols += col.getActualWidth()));\r\n        availableWidth -= widthOfMovingDisplayedCols;\r\n    }\r\n\r\n    if (availableWidth > 0) {\r\n        // now count how many of the displayed columns will fit to the left\r\n        for (let i = 0; i < otherDisplayedCols.length; i++) {\r\n            const col = otherDisplayedCols[i];\r\n            availableWidth -= col.getActualWidth();\r\n            if (availableWidth < 0) {\r\n                break;\r\n            }\r\n            displayIndex++;\r\n        }\r\n        // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works\r\n        if (draggingRight) {\r\n            displayIndex++;\r\n        }\r\n    }\r\n\r\n    // the display index is with respect to all the showing columns, however when we move, it's with\r\n    // respect to all grid columns, so we need to translate from display index to grid index\r\n\r\n    let firstValidMove: number;\r\n    if (displayIndex > 0) {\r\n        const leftColumn = otherDisplayedCols[displayIndex - 1];\r\n        firstValidMove = otherGridCols.indexOf(leftColumn) + 1;\r\n    } else {\r\n        firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);\r\n        if (firstValidMove === -1) {\r\n            firstValidMove = 0;\r\n        }\r\n    }\r\n\r\n    const validMoves = [firstValidMove];\r\n    const numberComparator = (a: number, b: number) => a - b;\r\n\r\n    // add in other valid moves due to hidden columns and married children. for example, a particular\r\n    // move might break a group that has married children (so move isn't valid), however there could\r\n    // be hidden columns (not displayed) that we could jump over to make the move valid. because\r\n    // they are hidden, user doesn't see any different, however it allows moves that would otherwise\r\n    // not work. for example imagine a group with 9 columns and all columns are hidden except the\r\n    // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will\r\n    // be relative to the not-shown column, however we need to consider the move jumping over all the\r\n    // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the\r\n    // grid, there would be no way to put a column after it (as the grid would only consider beside the\r\n    // visible column, which would fail valid move rules).\r\n    if (draggingRight) {\r\n        // if dragging right, then we add all the additional moves to the right. so in other words\r\n        // if the next move is not valid, find the next move to the right that is valid.\r\n        let pointer = firstValidMove + 1;\r\n        const lastIndex = allGridCols.length - 1;\r\n        while (pointer <= lastIndex) {\r\n            validMoves.push(pointer);\r\n            pointer++;\r\n        }\r\n\r\n        // adding columns here means the order is now messed up\r\n        validMoves.sort(numberComparator);\r\n    } else {\r\n        // if dragging left we do the reverse of dragging right, we add in all the valid moves to the\r\n        // left. however we also have to consider moves to the right for all hidden columns first.\r\n        // (this logic is hard to reason with, it was worked out with trial and error,\r\n        // more observation rather than science).\r\n\r\n        // add moves to the right\r\n        let pointer = firstValidMove;\r\n        const lastIndex = allGridCols.length - 1;\r\n        let displacedCol = allGridCols[pointer];\r\n\r\n        // takes into account visible=false and group=closed, ie it is not displayed\r\n        while (pointer <= lastIndex && allDisplayedCols.indexOf(displacedCol) < 0) {\r\n            pointer++;\r\n            validMoves.push(pointer);\r\n            displacedCol = allGridCols[pointer];\r\n        }\r\n\r\n        // add moves to the left\r\n        pointer = firstValidMove - 1;\r\n        const firstDisplayIndex = 0;\r\n        while (pointer >= firstDisplayIndex) {\r\n            validMoves.push(pointer);\r\n            pointer--;\r\n        }\r\n\r\n        // adding columns here means the order is now messed up\r\n        validMoves.sort(numberComparator).reverse();\r\n    }\r\n\r\n    return validMoves;\r\n}\r\n\r\nexport function normaliseX(params: {\r\n    x: number;\r\n    pinned?: ColumnPinnedType;\r\n    fromKeyboard?: boolean;\r\n    useHeaderRow?: boolean;\r\n    skipScrollPadding?: boolean;\r\n    gos: GridOptionsService;\r\n    ctrlsSvc: CtrlsService;\r\n}): number {\r\n    const { pinned, fromKeyboard, gos, ctrlsSvc, useHeaderRow, skipScrollPadding } = params;\r\n    let eViewport = ctrlsSvc.getHeaderRowContainerCtrl(pinned)?.eViewport;\r\n\r\n    let { x } = params;\r\n\r\n    if (!eViewport) {\r\n        return 0;\r\n    }\r\n\r\n    if (fromKeyboard) {\r\n        x -= eViewport.getBoundingClientRect().left;\r\n    }\r\n\r\n    // flip the coordinate if doing RTL\r\n    if (gos.get('enableRtl')) {\r\n        if (useHeaderRow) {\r\n            eViewport = eViewport.querySelector('.ag-header-row') as HTMLElement;\r\n        }\r\n        x = eViewport.clientWidth - x;\r\n    }\r\n\r\n    // adjust for scroll only if centre container (the pinned containers don't scroll)\r\n    if (pinned == null && !skipScrollPadding) {\r\n        x += ctrlsSvc.get('center').getCenterViewportScrollLeft();\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nexport function setColumnsMoving(columns: AgColumn[], isMoving: boolean): void {\r\n    for (const column of columns) {\r\n        column.moving = isMoving;\r\n        column.dispatchColEvent('movingChanged', 'uiColumnMoved');\r\n    }\r\n}\r\n", "import type { HorizontalDirection } from '../../constants/direction';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { DragAndDropIcon, DraggingEvent } from '../../dragAndDrop/dragAndDropService';\r\nimport { DragSourceType } from '../../dragAndDrop/dragAndDropService';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { ColumnEventType } from '../../events';\r\nimport type { GridBodyCtrl } from '../../gridBodyComp/gridBodyCtrl';\r\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport { ColumnHighlightPosition } from '../../interfaces/iColumn';\r\nimport { _last } from '../../utils/array';\r\nimport { _exists, _missing } from '../../utils/generic';\r\nimport type { ColumnMoveParams } from '../internalColumnMoveUtils';\r\nimport { attemptMoveColumns, getBestColumnMoveIndexFromXPosition, normaliseX } from '../internalColumnMoveUtils';\r\nimport type { DropListener } from './bodyDropTarget';\r\n\r\nconst MOVE_FAIL_THRESHOLD = 7;\r\nconst SCROLL_MOVE_WIDTH = 100;\r\nconst SCROLL_GAP_NEEDED_BEFORE_MOVE = SCROLL_MOVE_WIDTH / 2;\r\nconst SCROLL_ACCELERATION_RATE = 5;\r\nconst SCROLL_TIME_INTERVAL = 100;\r\n\r\nexport class MoveColumnFeature extends BeanStub implements DropListener {\r\n    private gridBodyCon: GridBodyCtrl;\r\n\r\n    private needToMoveLeft = false;\r\n    private needToMoveRight = false;\r\n    private movingIntervalId: number | null;\r\n    private intervalCount: number;\r\n\r\n    private isCenterContainer: boolean;\r\n\r\n    private lastDraggingEvent: DraggingEvent | null;\r\n    private lastHighlightedColumn: { column: AgColumn; position: ColumnHighlightPosition } | null;\r\n    private lastMovedInfo: { columns: AgColumn[]; toIndex: number } | null = null;\r\n\r\n    // this counts how long the user has been trying to scroll by dragging and failing,\r\n    // if they fail x amount of times, then the column will get pinned. this is what gives\r\n    // the 'hold and pin' functionality\r\n    private failedMoveAttempts: number;\r\n\r\n    constructor(private readonly pinned: ColumnPinnedType) {\r\n        super();\r\n        this.isCenterContainer = !_exists(pinned);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCon = p.gridBodyCtrl;\r\n        });\r\n    }\r\n\r\n    public getIconName(): DragAndDropIcon {\r\n        const { pinned, lastDraggingEvent } = this;\r\n\r\n        const columns = lastDraggingEvent?.dragItem.columns ?? [];\r\n\r\n        for (const col of columns) {\r\n            const colPinned = col.getPinned();\r\n            // when the column is lockPinned, only moves within pinned section\r\n            if (col.getColDef().lockPinned) {\r\n                if (colPinned == pinned) {\r\n                    return 'move';\r\n                }\r\n                continue;\r\n            }\r\n            // if the column pinned state is the same as the container's, or\r\n            // when `unpinning` a column, set the icon to move\r\n            if (colPinned === pinned || !pinned) {\r\n                return 'move';\r\n            }\r\n\r\n            // moving an unpinned column to a pinned container\r\n            // set the icon to pinned\r\n            if (!colPinned && pinned) {\r\n                return 'pinned';\r\n            }\r\n        }\r\n\r\n        return 'notAllowed';\r\n    }\r\n\r\n    public onDragEnter(draggingEvent: DraggingEvent): void {\r\n        // we do dummy drag, so make sure column appears in the right location when first placed\r\n\r\n        const dragItem = draggingEvent.dragItem;\r\n        const columns = dragItem.columns as AgColumn[] | undefined;\r\n        const dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;\r\n\r\n        if (dragCameFromToolPanel) {\r\n            // the if statement doesn't work if drag leaves grid, then enters again\r\n            this.setColumnsVisible(columns, true, 'uiColumnDragged');\r\n        } else {\r\n            // restore previous state of visible columns upon re-entering. this means if the user drags\r\n            // a group out, and then drags the group back in, only columns that were originally visible\r\n            // will be visible again. otherwise a group with three columns (but only two visible) could\r\n            // be dragged out, then when it's dragged in again, all three are visible. this stops that.\r\n            const visibleState = dragItem.visibleState;\r\n            const visibleColumns: AgColumn[] = (columns || []).filter((column) => visibleState![column.getId()]);\r\n            this.setColumnsVisible(visibleColumns, true, 'uiColumnDragged');\r\n        }\r\n\r\n        if (!this.gos.get('suppressMoveWhenColumnDragging')) {\r\n            this.attemptToPinColumns(columns, this.pinned);\r\n        }\r\n        this.onDragging(draggingEvent, true, true);\r\n    }\r\n\r\n    public onDragging(\r\n        draggingEvent: DraggingEvent | null = this.lastDraggingEvent,\r\n        fromEnter = false,\r\n        fakeEvent = false,\r\n        finished = false\r\n    ): void {\r\n        const { gos, ctrlsSvc } = this.beans;\r\n        const isSuppressMoveWhenDragging = gos.get('suppressMoveWhenColumnDragging');\r\n\r\n        if (finished && !isSuppressMoveWhenDragging) {\r\n            this.finishColumnMoving();\r\n            return;\r\n        }\r\n\r\n        this.lastDraggingEvent = draggingEvent;\r\n\r\n        // if moving up or down (ie not left or right) then do nothing\r\n        if (!draggingEvent || (!finished && _missing(draggingEvent.hDirection))) {\r\n            return;\r\n        }\r\n\r\n        const mouseX = normaliseX({\r\n            x: draggingEvent.x,\r\n            pinned: this.pinned,\r\n            gos,\r\n            ctrlsSvc,\r\n        });\r\n\r\n        // if the user is dragging into the panel, ie coming from the side panel into the main grid,\r\n        // we don't want to scroll the grid this time, it would appear like the table is jumping\r\n        // each time a column is dragged in.\r\n        if (!fromEnter) {\r\n            this.checkCenterForScrolling(mouseX);\r\n        }\r\n\r\n        if (isSuppressMoveWhenDragging) {\r\n            this.handleColumnDragWhileSuppressingMovement(draggingEvent, fromEnter, fakeEvent, mouseX, finished);\r\n        } else {\r\n            this.handleColumnDragWhileAllowingMovement(draggingEvent, fromEnter, fakeEvent, mouseX, finished);\r\n        }\r\n    }\r\n\r\n    public onDragLeave(): void {\r\n        this.ensureIntervalCleared();\r\n        this.clearHighlighted();\r\n        this.lastMovedInfo = null;\r\n    }\r\n\r\n    public onDragStop(): void {\r\n        this.onDragging(this.lastDraggingEvent!, false, true, true);\r\n        this.ensureIntervalCleared();\r\n        this.lastMovedInfo = null;\r\n    }\r\n\r\n    public onDragCancel(): void {\r\n        this.clearHighlighted();\r\n        this.ensureIntervalCleared();\r\n        this.lastMovedInfo = null;\r\n    }\r\n\r\n    public setColumnsVisible(columns: AgColumn[] | null | undefined, visible: boolean, source: ColumnEventType) {\r\n        if (!columns) {\r\n            return;\r\n        }\r\n\r\n        const allowedCols = columns.filter((c) => !c.getColDef().lockVisible);\r\n        this.beans.colModel.setColsVisible(allowedCols, visible, source);\r\n    }\r\n\r\n    private finishColumnMoving(): void {\r\n        this.clearHighlighted();\r\n\r\n        const lastMovedInfo = this.lastMovedInfo;\r\n        if (!lastMovedInfo) {\r\n            return;\r\n        }\r\n\r\n        const { columns, toIndex } = lastMovedInfo;\r\n\r\n        this.beans.colMoves!.moveColumns(columns, toIndex, 'uiColumnMoved', true);\r\n    }\r\n\r\n    private handleColumnDragWhileSuppressingMovement(\r\n        draggingEvent: DraggingEvent,\r\n        fromEnter: boolean,\r\n        fakeEvent: boolean,\r\n        mouseX: number,\r\n        finished: boolean\r\n    ): void {\r\n        const allMovingColumns = this.getAllMovingColumns(draggingEvent, true);\r\n\r\n        if (finished) {\r\n            // first we handle pinning, then move columns\r\n            const isAttemptingToPin = this.isAttemptingToPin(allMovingColumns);\r\n            if (isAttemptingToPin) {\r\n                this.attemptToPinColumns(allMovingColumns, undefined, true);\r\n            }\r\n\r\n            const { fromLeft, xPosition } = this.getNormalisedXPositionInfo(allMovingColumns, isAttemptingToPin) || {};\r\n\r\n            if (fromLeft == null || xPosition == null) {\r\n                this.finishColumnMoving();\r\n                return;\r\n            }\r\n\r\n            this.moveColumnsAfterHighlight({\r\n                allMovingColumns,\r\n                xPosition,\r\n                fromEnter,\r\n                fakeEvent,\r\n                fromLeft,\r\n            });\r\n        } else {\r\n            if (!this.beans.dragAndDrop!.isDropZoneWithinThisGrid(draggingEvent)) {\r\n                return;\r\n            }\r\n            this.highlightHoveredColumn(allMovingColumns, mouseX);\r\n        }\r\n    }\r\n\r\n    private handleColumnDragWhileAllowingMovement(\r\n        draggingEvent: DraggingEvent,\r\n        fromEnter: boolean,\r\n        fakeEvent: boolean,\r\n        mouseX: number,\r\n        finished: boolean\r\n    ): void {\r\n        const allMovingColumns = this.getAllMovingColumns(draggingEvent);\r\n        const fromLeft = this.normaliseDirection(draggingEvent.hDirection!) === 'right';\r\n        const isFromHeader = draggingEvent.dragSource.type === DragSourceType.HeaderCell;\r\n\r\n        const params = this.getMoveColumnParams({\r\n            allMovingColumns,\r\n            isFromHeader,\r\n            xPosition: mouseX,\r\n            fromLeft,\r\n            fromEnter,\r\n            fakeEvent,\r\n        });\r\n        const lastMovedInfo = attemptMoveColumns({ ...params, finished });\r\n\r\n        if (lastMovedInfo) {\r\n            this.lastMovedInfo = lastMovedInfo;\r\n        }\r\n    }\r\n\r\n    private getAllMovingColumns(draggingEvent: DraggingEvent, useSplit: boolean = false): AgColumn[] {\r\n        const dragItem = draggingEvent.dragSource.getDragItem();\r\n        let columns: AgColumn[] | null = null;\r\n\r\n        if (useSplit) {\r\n            columns = dragItem.columnsInSplit as AgColumn[];\r\n            if (!columns) {\r\n                columns = dragItem.columns as AgColumn[];\r\n            }\r\n        } else {\r\n            columns = dragItem.columns as AgColumn[];\r\n        }\r\n\r\n        // if locked return true only if both col and container are same pin type.\r\n        // double equals (==) here on purpose so that null==undefined is true (for not pinned options)\r\n        // if not pin locked, then always allowed to be in this container\r\n        const conditionCallback = (col: AgColumn) =>\r\n            col.getColDef().lockPinned ? col.getPinned() == this.pinned : true;\r\n\r\n        if (!columns) {\r\n            return [];\r\n        }\r\n\r\n        return columns.filter(conditionCallback);\r\n    }\r\n\r\n    private getMoveColumnParams(params: {\r\n        allMovingColumns: AgColumn[];\r\n        isFromHeader: boolean;\r\n        xPosition: number;\r\n        fromLeft: boolean;\r\n        fromEnter: boolean;\r\n        fakeEvent: boolean;\r\n    }): ColumnMoveParams {\r\n        const { allMovingColumns, isFromHeader, xPosition, fromLeft, fromEnter, fakeEvent } = params;\r\n        const { gos, colModel, colMoves, visibleCols } = this.beans;\r\n\r\n        return {\r\n            allMovingColumns,\r\n            isFromHeader,\r\n            fromLeft,\r\n            xPosition,\r\n            pinned: this.pinned,\r\n            fromEnter,\r\n            fakeEvent,\r\n            gos,\r\n            colModel,\r\n            colMoves: colMoves!,\r\n            visibleCols,\r\n        };\r\n    }\r\n\r\n    private highlightHoveredColumn(movingColumns: AgColumn[], mouseX: number) {\r\n        const { gos, colModel } = this.beans;\r\n        const isRtl = gos.get('enableRtl');\r\n        const consideredColumns = colModel\r\n            .getCols()\r\n            .filter((col) => col.isVisible() && col.getPinned() === this.pinned);\r\n\r\n        let start: number | null = null;\r\n        let width: number | null = null;\r\n        let targetColumn: AgColumn | null = null;\r\n\r\n        for (const col of consideredColumns) {\r\n            width = col.getActualWidth();\r\n            start = this.getNormalisedColumnLeft(col, 0, isRtl);\r\n\r\n            if (start != null) {\r\n                const end = start + width;\r\n\r\n                if (start <= mouseX && end >= mouseX) {\r\n                    targetColumn = col;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            start = null;\r\n            width = null;\r\n        }\r\n\r\n        if (!targetColumn) {\r\n            // we fall into this condition if no columns are being hover\r\n            // (e.g. hovering an empty area of the column header beyond all columns)\r\n            for (let i = consideredColumns.length - 1; i >= 0; i--) {\r\n                const currentColumn = consideredColumns[i];\r\n                const parent = consideredColumns[i].getParent();\r\n                if (!parent) {\r\n                    targetColumn = currentColumn;\r\n                    break;\r\n                }\r\n\r\n                const leafDisplayedCols = parent?.getDisplayedLeafColumns();\r\n\r\n                if (leafDisplayedCols.length) {\r\n                    targetColumn = _last(leafDisplayedCols);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!targetColumn) {\r\n                return;\r\n            }\r\n\r\n            start = this.getNormalisedColumnLeft(targetColumn, 0, isRtl);\r\n            width = targetColumn.getActualWidth();\r\n        } else if (movingColumns.indexOf(targetColumn) !== -1) {\r\n            targetColumn = null;\r\n        }\r\n\r\n        if (this.lastHighlightedColumn?.column !== targetColumn) {\r\n            this.clearHighlighted();\r\n        }\r\n\r\n        if (targetColumn == null || start == null || width == null) {\r\n            return;\r\n        }\r\n\r\n        let position: ColumnHighlightPosition;\r\n\r\n        if (mouseX - start < width / 2 !== isRtl) {\r\n            position = ColumnHighlightPosition.Before;\r\n        } else {\r\n            position = ColumnHighlightPosition.After;\r\n        }\r\n\r\n        setColumnHighlighted(targetColumn, position);\r\n        this.lastHighlightedColumn = { column: targetColumn, position };\r\n    }\r\n\r\n    private getNormalisedXPositionInfo(\r\n        allMovingColumns: AgColumn[],\r\n        isAttemptingToPin: boolean\r\n    ): { fromLeft: boolean; xPosition: number } | undefined {\r\n        const { gos, visibleCols } = this.beans;\r\n        const isRtl = gos.get('enableRtl');\r\n\r\n        const { firstMovingCol, column, position } = this.getColumnMoveAndTargetInfo(\r\n            allMovingColumns,\r\n            isAttemptingToPin,\r\n            isRtl\r\n        );\r\n\r\n        if (!firstMovingCol || !column || position == null) {\r\n            return;\r\n        }\r\n\r\n        const visibleColumns = visibleCols.allCols;\r\n        const movingColIndex = visibleColumns.indexOf(firstMovingCol);\r\n        const targetIndex = visibleColumns.indexOf(column!);\r\n        const isBefore = (position === ColumnHighlightPosition.Before) !== isRtl;\r\n        const fromLeft = movingColIndex < targetIndex || (movingColIndex === targetIndex && !isBefore);\r\n        let diff: number = 0;\r\n\r\n        if (isBefore) {\r\n            if (fromLeft) {\r\n                diff -= 1;\r\n            }\r\n        } else {\r\n            if (!fromLeft) {\r\n                diff += 1;\r\n            }\r\n        }\r\n\r\n        if (targetIndex + diff === movingColIndex) {\r\n            return;\r\n        }\r\n\r\n        const targetColumn = visibleColumns[targetIndex + diff];\r\n\r\n        if (!targetColumn) {\r\n            return;\r\n        }\r\n\r\n        const xPosition = this.getNormalisedColumnLeft(targetColumn, 20, isRtl)!;\r\n\r\n        return { fromLeft, xPosition };\r\n    }\r\n\r\n    private getColumnMoveAndTargetInfo(\r\n        allMovingColumns: AgColumn[],\r\n        isAttemptingToPin: boolean,\r\n        isRtl: boolean\r\n    ): {\r\n        firstMovingCol?: AgColumn;\r\n        column?: AgColumn;\r\n        position?: ColumnHighlightPosition;\r\n    } {\r\n        const lastHighlightedColumn: {\r\n            column?: AgColumn;\r\n            position?: ColumnHighlightPosition;\r\n        } = this.lastHighlightedColumn || {};\r\n        const { firstMovingCol, lastMovingCol } = findFirstAndLastMovingColumns(allMovingColumns);\r\n\r\n        if (!firstMovingCol || !lastMovingCol || lastHighlightedColumn.column || !isAttemptingToPin) {\r\n            return {\r\n                firstMovingCol,\r\n                ...lastHighlightedColumn,\r\n            };\r\n        }\r\n\r\n        const pinned = this.getPinDirection();\r\n        const isLeft = pinned === 'left';\r\n\r\n        return {\r\n            firstMovingCol,\r\n            position: isLeft ? ColumnHighlightPosition.After : ColumnHighlightPosition.Before,\r\n            column: isLeft !== isRtl ? firstMovingCol : lastMovingCol,\r\n        };\r\n    }\r\n\r\n    private normaliseDirection(hDirection: HorizontalDirection): HorizontalDirection {\r\n        if (this.gos.get('enableRtl')) {\r\n            switch (hDirection) {\r\n                case 'left':\r\n                    return 'right';\r\n                case 'right':\r\n                    return 'left';\r\n            }\r\n        }\r\n\r\n        return hDirection;\r\n    }\r\n\r\n    private getNormalisedColumnLeft(col: AgColumn, padding: number, isRtl: boolean): number | null {\r\n        const { gos, ctrlsSvc } = this.beans;\r\n        const left = col.getLeft();\r\n\r\n        if (left == null) {\r\n            return null;\r\n        }\r\n\r\n        const width = col.getActualWidth();\r\n\r\n        return normaliseX({\r\n            x: isRtl ? left + width - padding : left + padding,\r\n            pinned: col.getPinned(),\r\n            useHeaderRow: isRtl,\r\n            skipScrollPadding: true,\r\n            gos,\r\n            ctrlsSvc,\r\n        });\r\n    }\r\n\r\n    private isAttemptingToPin(columns: AgColumn[]) {\r\n        const isMovingHorizontally = this.needToMoveLeft || this.needToMoveRight;\r\n        const isFailedMoreThanThreshold = this.failedMoveAttempts > MOVE_FAIL_THRESHOLD;\r\n        return (\r\n            (isMovingHorizontally && isFailedMoreThanThreshold) ||\r\n            columns.some((col) => col.getPinned() !== this.pinned)\r\n        );\r\n    }\r\n\r\n    private moveColumnsAfterHighlight(params: {\r\n        allMovingColumns: AgColumn[];\r\n        xPosition: number;\r\n        fromEnter: boolean;\r\n        fakeEvent: boolean;\r\n        fromLeft: boolean;\r\n    }): void {\r\n        const { allMovingColumns, xPosition, fromEnter, fakeEvent, fromLeft } = params;\r\n\r\n        const columnMoveParams = this.getMoveColumnParams({\r\n            allMovingColumns,\r\n            isFromHeader: true,\r\n            xPosition,\r\n            fromLeft,\r\n            fromEnter,\r\n            fakeEvent,\r\n        });\r\n        const { columns, toIndex } = getBestColumnMoveIndexFromXPosition(columnMoveParams) || {};\r\n\r\n        if (columns && toIndex != null) {\r\n            this.lastMovedInfo = {\r\n                columns,\r\n                toIndex,\r\n            };\r\n        }\r\n\r\n        this.finishColumnMoving();\r\n    }\r\n\r\n    private clearHighlighted(): void {\r\n        const { lastHighlightedColumn } = this;\r\n        if (!lastHighlightedColumn) {\r\n            return;\r\n        }\r\n\r\n        setColumnHighlighted(lastHighlightedColumn.column, null);\r\n        this.lastHighlightedColumn = null;\r\n    }\r\n\r\n    private checkCenterForScrolling(xAdjustedForScroll: number): void {\r\n        if (!this.isCenterContainer) {\r\n            return;\r\n        }\r\n\r\n        // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)\r\n        // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen\r\n        const centerCtrl = this.beans.ctrlsSvc.get('center');\r\n        const firstVisiblePixel = centerCtrl.getCenterViewportScrollLeft();\r\n        const lastVisiblePixel = firstVisiblePixel + centerCtrl.getCenterWidth();\r\n\r\n        let needToMoveRight: boolean;\r\n        let needToMoveLeft: boolean;\r\n        if (this.gos.get('enableRtl')) {\r\n            needToMoveRight = xAdjustedForScroll < firstVisiblePixel + SCROLL_GAP_NEEDED_BEFORE_MOVE;\r\n            needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - SCROLL_GAP_NEEDED_BEFORE_MOVE;\r\n        } else {\r\n            needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + SCROLL_GAP_NEEDED_BEFORE_MOVE;\r\n            needToMoveRight = xAdjustedForScroll > lastVisiblePixel - SCROLL_GAP_NEEDED_BEFORE_MOVE;\r\n        }\r\n        this.needToMoveRight = needToMoveRight;\r\n        this.needToMoveLeft = needToMoveLeft;\r\n\r\n        if (needToMoveLeft || needToMoveRight) {\r\n            this.ensureIntervalStarted();\r\n        } else {\r\n            this.ensureIntervalCleared();\r\n        }\r\n    }\r\n\r\n    private ensureIntervalStarted(): void {\r\n        if (this.movingIntervalId) {\r\n            return;\r\n        }\r\n\r\n        this.intervalCount = 0;\r\n        this.failedMoveAttempts = 0;\r\n        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), SCROLL_TIME_INTERVAL);\r\n        this.beans.dragAndDrop!.getDragAndDropImageComponent()?.setIcon(this.needToMoveLeft ? 'left' : 'right', true);\r\n    }\r\n\r\n    private ensureIntervalCleared(): void {\r\n        if (!this.movingIntervalId) {\r\n            return;\r\n        }\r\n\r\n        window.clearInterval(this.movingIntervalId);\r\n        this.movingIntervalId = null;\r\n        this.failedMoveAttempts = 0;\r\n        this.beans.dragAndDrop!.getDragAndDropImageComponent()?.setIcon(this.getIconName(), false);\r\n    }\r\n\r\n    private moveInterval(): void {\r\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\r\n        // and getting faster. this is to give smoother user experience. we max at `SCROLL_MOVE_WIDTH` to limit the speed.\r\n        let pixelsToMove: number;\r\n        this.intervalCount++;\r\n        pixelsToMove = 10 + this.intervalCount * SCROLL_ACCELERATION_RATE;\r\n        if (pixelsToMove > SCROLL_MOVE_WIDTH) {\r\n            pixelsToMove = SCROLL_MOVE_WIDTH;\r\n        }\r\n\r\n        let pixelsMoved: number | null = null;\r\n        const scrollFeature = this.gridBodyCon.scrollFeature;\r\n\r\n        if (this.needToMoveLeft) {\r\n            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);\r\n        } else if (this.needToMoveRight) {\r\n            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);\r\n        }\r\n\r\n        if (pixelsMoved !== 0) {\r\n            this.onDragging(this.lastDraggingEvent);\r\n            this.failedMoveAttempts = 0;\r\n        } else {\r\n            // we count the failed move attempts. if we fail to move `MOVE_FAIL_THRESHOLD` times, then we pin the column.\r\n            // this is how we achieve pining by dragging the column to the edge of the grid.\r\n            this.failedMoveAttempts++;\r\n\r\n            const { pinnedCols, dragAndDrop, gos } = this.beans;\r\n\r\n            if (this.failedMoveAttempts <= MOVE_FAIL_THRESHOLD + 1 || !pinnedCols) {\r\n                return;\r\n            }\r\n\r\n            dragAndDrop!.getDragAndDropImageComponent()?.setIcon('pinned', false);\r\n\r\n            if (!gos.get('suppressMoveWhenColumnDragging')) {\r\n                const columns = this.lastDraggingEvent?.dragItem.columns as AgColumn[] | undefined;\r\n                this.attemptToPinColumns(columns, undefined, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPinDirection(): 'left' | 'right' | undefined {\r\n        if (this.needToMoveLeft || this.pinned === 'left') {\r\n            return 'left';\r\n        }\r\n\r\n        if (this.needToMoveRight || this.pinned === 'right') {\r\n            return 'right';\r\n        }\r\n    }\r\n\r\n    private attemptToPinColumns(\r\n        columns: AgColumn[] | undefined,\r\n        pinned?: ColumnPinnedType,\r\n        fromMoving: boolean = false\r\n    ): number {\r\n        const allowedCols = (columns || []).filter((c) => !c.getColDef().lockPinned);\r\n\r\n        if (!allowedCols.length) {\r\n            return 0;\r\n        }\r\n\r\n        if (fromMoving) {\r\n            pinned = this.getPinDirection();\r\n        }\r\n\r\n        const { pinnedCols, dragAndDrop } = this.beans;\r\n\r\n        pinnedCols?.setColsPinned(allowedCols, pinned, 'uiColumnDragged');\r\n\r\n        if (fromMoving) {\r\n            dragAndDrop!.nudge();\r\n        }\r\n\r\n        return allowedCols.length;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        this.lastDraggingEvent = null;\r\n        this.clearHighlighted();\r\n        this.lastMovedInfo = null;\r\n    }\r\n}\r\n\r\nfunction setColumnHighlighted(column: AgColumn, highlighted: ColumnHighlightPosition | null): void {\r\n    if (column.highlighted === highlighted) {\r\n        return;\r\n    }\r\n\r\n    column.highlighted = highlighted;\r\n    column.dispatchColEvent('headerHighlightChanged', 'uiColumnMoved');\r\n}\r\n\r\nfunction findFirstAndLastMovingColumns(allMovingColumns: AgColumn[]): {\r\n    firstMovingCol?: AgColumn;\r\n    lastMovingCol?: AgColumn;\r\n} {\r\n    const moveLen = allMovingColumns.length;\r\n\r\n    let firstMovingCol: AgColumn | undefined;\r\n    let lastMovingCol: AgColumn | undefined;\r\n\r\n    for (let i = 0; i <= moveLen; i++) {\r\n        if (!firstMovingCol) {\r\n            const leftCol = allMovingColumns[i];\r\n            if (leftCol.getLeft() != null) {\r\n                firstMovingCol = leftCol;\r\n            }\r\n        }\r\n\r\n        if (!lastMovingCol) {\r\n            const rightCol = allMovingColumns[moveLen - 1 - i];\r\n            if (rightCol.getLeft() != null) {\r\n                lastMovingCol = rightCol;\r\n            }\r\n        }\r\n\r\n        if (firstMovingCol && lastMovingCol) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { firstMovingCol, lastMovingCol };\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { DragAndDropIcon, DraggingEvent, DropTarget } from '../../dragAndDrop/dragAndDropService';\r\nimport { DragSourceType } from '../../dragAndDrop/dragAndDropService';\r\nimport type { ColumnPinnedType } from '../../interfaces/iColumn';\r\nimport { BodyDropPivotTarget } from './bodyDropPivotTarget';\r\nimport { MoveColumnFeature } from './moveColumnFeature';\r\n\r\nexport interface DropListener {\r\n    getIconName(): DragAndDropIcon | null;\r\n    onDragEnter(params: DraggingEvent): void;\r\n    onDragLeave(params: DraggingEvent): void;\r\n    onDragging(params: DraggingEvent): void;\r\n    onDragStop(params: DraggingEvent): void;\r\n    onDragCancel(): void;\r\n}\r\n\r\nexport class BodyDropTarget extends BeanStub implements DropTarget {\r\n    private eSecondaryContainers: HTMLElement[][];\r\n    private currentDropListener: DropListener;\r\n\r\n    private moveColumnFeature: MoveColumnFeature;\r\n    private bodyDropPivotTarget: BodyDropPivotTarget;\r\n\r\n    constructor(\r\n        private readonly pinned: ColumnPinnedType,\r\n        private readonly eContainer: HTMLElement\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const { ctrlsSvc, dragAndDrop } = this.beans;\r\n        const pinned = this.pinned;\r\n        ctrlsSvc.whenReady(this, (p) => {\r\n            let eSecondaryContainers: HTMLElement[][];\r\n            const eBodyViewport = p.gridBodyCtrl.eBodyViewport;\r\n            switch (pinned) {\r\n                case 'left':\r\n                    eSecondaryContainers = [\r\n                        [eBodyViewport, p.left.eContainer],\r\n                        [p.bottomLeft.eContainer],\r\n                        [p.topLeft.eContainer],\r\n                    ];\r\n                    break;\r\n                case 'right':\r\n                    eSecondaryContainers = [\r\n                        [eBodyViewport, p.right.eContainer],\r\n                        [p.bottomRight.eContainer],\r\n                        [p.topRight.eContainer],\r\n                    ];\r\n                    break;\r\n                default:\r\n                    eSecondaryContainers = [\r\n                        [eBodyViewport, p.center.eViewport],\r\n                        [p.bottomCenter.eViewport],\r\n                        [p.topCenter.eViewport],\r\n                    ];\r\n                    break;\r\n            }\r\n            this.eSecondaryContainers = eSecondaryContainers;\r\n        });\r\n\r\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(pinned));\r\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(pinned));\r\n\r\n        dragAndDrop!.addDropTarget(this);\r\n        this.addDestroyFunc(() => dragAndDrop!.removeDropTarget(this));\r\n    }\r\n\r\n    public isInterestedIn(type: DragSourceType): boolean {\r\n        return (\r\n            type === DragSourceType.HeaderCell ||\r\n            (type === DragSourceType.ToolPanel && this.gos.get('allowDragFromColumnsToolPanel'))\r\n        );\r\n    }\r\n\r\n    public getSecondaryContainers(): HTMLElement[][] {\r\n        return this.eSecondaryContainers;\r\n    }\r\n\r\n    public getContainer(): HTMLElement {\r\n        return this.eContainer;\r\n    }\r\n\r\n    public getIconName(): DragAndDropIcon | null {\r\n        return this.currentDropListener.getIconName();\r\n    }\r\n\r\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\r\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\r\n    // dropped into the grid's body.\r\n    private isDropColumnInPivotMode(draggingEvent: DraggingEvent): boolean {\r\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\r\n        // a standard column move, however if it came from the toolpanel, then we are introducing\r\n        // dimensions or values to the grid\r\n        return this.beans.colModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\r\n    }\r\n\r\n    public onDragEnter(draggingEvent: DraggingEvent): void {\r\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\r\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\r\n        // we change visibility state and position.\r\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent)\r\n            ? this.bodyDropPivotTarget\r\n            : this.moveColumnFeature;\r\n        this.currentDropListener.onDragEnter(draggingEvent);\r\n    }\r\n\r\n    public onDragLeave(params: DraggingEvent): void {\r\n        this.currentDropListener.onDragLeave(params);\r\n    }\r\n\r\n    public onDragging(params: DraggingEvent): void {\r\n        this.currentDropListener.onDragging(params);\r\n    }\r\n\r\n    public onDragStop(params: DraggingEvent): void {\r\n        this.currentDropListener.onDragStop(params);\r\n    }\r\n\r\n    public onDragCancel(): void {\r\n        this.currentDropListener.onDragCancel();\r\n    }\r\n}\r\n", "import type { ColKey } from '../columns/columnModel';\r\nimport type { HorizontalDirection } from '../constants/direction';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { DragSource } from '../dragAndDrop/dragAndDropService';\r\nimport { DragSourceType } from '../dragAndDrop/dragAndDropService';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport { isColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { Column, ColumnPinnedType } from '../interfaces/iColumn';\r\nimport type { DragItem } from '../interfaces/iDragItem';\r\nimport { _last, _moveInArray, _removeFromArray } from '../utils/array';\r\nimport { _warn } from '../validation/logging';\r\nimport { BodyDropTarget } from './columnDrag/bodyDropTarget';\r\nimport { doesMovePassMarryChildren } from './columnMoveUtils';\r\nimport { attemptMoveColumns, normaliseX, setColumnsMoving } from './internalColumnMoveUtils';\r\n\r\nenum Direction {\r\n    LEFT = -1,\r\n    NONE = 0,\r\n    RIGHT = 1,\r\n}\r\nexport class ColumnMoveService extends BeanStub implements NamedBean {\r\n    beanName = 'colMoves' as const;\r\n\r\n    public moveColumnByIndex(fromIndex: number, toIndex: number, source: ColumnEventType): void {\r\n        const gridColumns = this.beans.colModel.getCols();\r\n        if (!gridColumns) {\r\n            return;\r\n        }\r\n\r\n        const column = gridColumns[fromIndex];\r\n        this.moveColumns([column], toIndex, source);\r\n    }\r\n\r\n    public moveColumns(\r\n        columnsToMoveKeys: ColKey[],\r\n        toIndex: number,\r\n        source: ColumnEventType,\r\n        finished: boolean = true\r\n    ): void {\r\n        const { colModel, colAnimation, visibleCols, eventSvc } = this.beans;\r\n        const gridColumns = colModel.getCols();\r\n        if (!gridColumns) {\r\n            return;\r\n        }\r\n\r\n        if (toIndex > gridColumns.length - columnsToMoveKeys.length) {\r\n            // Trying to insert in invalid position\r\n            _warn(30, { toIndex });\r\n            return;\r\n        }\r\n\r\n        colAnimation?.start();\r\n        // we want to pull all the columns out first and put them into an ordered list\r\n        const movedColumns = colModel.getColsForKeys(columnsToMoveKeys);\r\n\r\n        if (this.doesMovePassRules(movedColumns, toIndex)) {\r\n            _moveInArray(colModel.getCols(), movedColumns, toIndex);\r\n            visibleCols.refresh(source);\r\n            eventSvc.dispatchEvent({\r\n                type: 'columnMoved',\r\n                columns: movedColumns,\r\n                column: movedColumns.length === 1 ? movedColumns[0] : null,\r\n                toIndex,\r\n                finished,\r\n                source,\r\n            });\r\n        }\r\n\r\n        colAnimation?.finish();\r\n    }\r\n\r\n    private doesMovePassRules(columnsToMove: AgColumn[], toIndex: number): boolean {\r\n        // make a copy of what the grid columns would look like after the move\r\n        const proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);\r\n        return this.doesOrderPassRules(proposedColumnOrder);\r\n    }\r\n\r\n    public doesOrderPassRules(gridOrder: AgColumn[]) {\r\n        const { colModel, gos } = this.beans;\r\n        if (!doesMovePassMarryChildren(gridOrder, colModel.getColTree())) {\r\n            return false;\r\n        }\r\n\r\n        const doesMovePassLockedPositions = (proposedColumnOrder: AgColumn[]) => {\r\n            const lockPositionToPlacement = (position: ColDef['lockPosition']) => {\r\n                if (!position) {\r\n                    return Direction.NONE;\r\n                }\r\n                return position === 'left' || position === true ? Direction.LEFT : Direction.RIGHT;\r\n            };\r\n\r\n            const isRtl = gos.get('enableRtl');\r\n            let lastPlacement = isRtl ? Direction.RIGHT : Direction.LEFT;\r\n            let rulePassed = true;\r\n            proposedColumnOrder.forEach((col) => {\r\n                const placement = lockPositionToPlacement(col.getColDef().lockPosition);\r\n                if (isRtl) {\r\n                    if (placement > lastPlacement) {\r\n                        // If placement goes up, we're not in the correct order\r\n                        rulePassed = false;\r\n                    }\r\n                } else {\r\n                    if (placement < lastPlacement) {\r\n                        // If placement goes down, we're not in the correct order\r\n                        rulePassed = false;\r\n                    }\r\n                }\r\n                lastPlacement = placement;\r\n            });\r\n\r\n            return rulePassed;\r\n        };\r\n\r\n        if (!doesMovePassLockedPositions(gridOrder)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getProposedColumnOrder(columnsToMove: AgColumn[], toIndex: number): AgColumn[] {\r\n        const gridColumns = this.beans.colModel.getCols();\r\n        const proposedColumnOrder = gridColumns.slice();\r\n        _moveInArray(proposedColumnOrder, columnsToMove as AgColumn[], toIndex);\r\n        return proposedColumnOrder;\r\n    }\r\n\r\n    public createBodyDropTarget(pinned: ColumnPinnedType, dropContainer: HTMLElement): BodyDropTarget {\r\n        return new BodyDropTarget(pinned, dropContainer);\r\n    }\r\n\r\n    public moveHeader(\r\n        hDirection: HorizontalDirection,\r\n        eGui: HTMLElement,\r\n        column: AgColumn | AgColumnGroup,\r\n        pinned: ColumnPinnedType,\r\n        bean: BeanStub\r\n    ): void {\r\n        const { ctrlsSvc, gos, colModel, visibleCols, focusSvc } = this.beans;\r\n        const rect = eGui.getBoundingClientRect();\r\n        const left = rect.left;\r\n        const isGroup = isColumnGroup(column);\r\n        const width = isGroup ? rect.width : column.getActualWidth();\r\n        const isLeft = (hDirection === 'left') !== gos.get('enableRtl');\r\n\r\n        const xPosition = normaliseX({\r\n            x: isLeft ? left - 20 : left + width + 20,\r\n            pinned,\r\n            fromKeyboard: true,\r\n            gos,\r\n            ctrlsSvc,\r\n        });\r\n        const headerPosition = focusSvc.focusedHeader;\r\n\r\n        attemptMoveColumns({\r\n            allMovingColumns: isGroup ? column.getLeafColumns() : [column],\r\n            isFromHeader: true,\r\n            fromLeft: hDirection === 'right',\r\n            xPosition,\r\n            pinned,\r\n            fromEnter: false,\r\n            fakeEvent: false,\r\n            gos,\r\n            colModel,\r\n            colMoves: this,\r\n            visibleCols,\r\n            finished: true,\r\n        });\r\n\r\n        let targetColumn: AgColumn;\r\n        if (isGroup) {\r\n            const displayedLeafColumns = column.getDisplayedLeafColumns();\r\n            targetColumn = isLeft ? displayedLeafColumns[0] : _last(displayedLeafColumns);\r\n        } else {\r\n            targetColumn = column;\r\n        }\r\n\r\n        ctrlsSvc.getScrollFeature().ensureColumnVisible(targetColumn, 'auto');\r\n\r\n        if ((!bean.isAlive() || gos.get('ensureDomOrder')) && headerPosition) {\r\n            let restoreFocusColumn: AgColumn | AgColumnGroup | undefined;\r\n            if (isGroup) {\r\n                const groupId = column.getGroupId();\r\n                const leafCols = column.getLeafColumns();\r\n                if (!leafCols.length) {\r\n                    return;\r\n                }\r\n                const parent = leafCols[0].getParent();\r\n                if (!parent) {\r\n                    return;\r\n                }\r\n\r\n                restoreFocusColumn = findGroupWidthId(parent, groupId);\r\n            } else {\r\n                restoreFocusColumn = column;\r\n            }\r\n            if (restoreFocusColumn) {\r\n                focusSvc.focusHeaderPosition({\r\n                    headerPosition: {\r\n                        ...headerPosition,\r\n                        column: restoreFocusColumn,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public setDragSourceForHeader(\r\n        eSource: HTMLElement,\r\n        column: AgColumn | AgColumnGroup,\r\n        displayName: string | null\r\n    ): DragSource {\r\n        const { gos, colModel, dragAndDrop, visibleCols } = this.beans;\r\n        let hideColumnOnExit = !gos.get('suppressDragLeaveHidesColumns');\r\n        const isGroup = isColumnGroup(column);\r\n        const columns = isGroup ? column.getProvidedColumnGroup().getLeafColumns() : [column];\r\n        const getDragItem = isGroup\r\n            ? () => createDragItemForGroup(column, visibleCols.allCols)\r\n            : () => createDragItem(column);\r\n        const dragSource: DragSource = {\r\n            type: DragSourceType.HeaderCell,\r\n            eElement: eSource,\r\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\r\n            getDragItem,\r\n            dragItemName: displayName,\r\n            onDragStarted: () => {\r\n                hideColumnOnExit = !gos.get('suppressDragLeaveHidesColumns');\r\n                setColumnsMoving(columns, true);\r\n            },\r\n            onDragStopped: () => setColumnsMoving(columns, false),\r\n            onDragCancelled: () => setColumnsMoving(columns, false),\r\n            onGridEnter: (dragItem) => {\r\n                if (hideColumnOnExit) {\r\n                    const { columns = [], visibleState } = dragItem ?? {};\r\n                    const hasVisibleState = isGroup\r\n                        ? (col: Column) => !visibleState || visibleState[col.getColId()]\r\n                        : () => true;\r\n                    const unlockedColumns = columns.filter(\r\n                        (col) => !col.getColDef().lockVisible && hasVisibleState(col)\r\n                    );\r\n                    colModel.setColsVisible(unlockedColumns as AgColumn[], true, 'uiColumnMoved');\r\n                }\r\n            },\r\n            onGridExit: (dragItem) => {\r\n                if (hideColumnOnExit) {\r\n                    const unlockedColumns = dragItem?.columns?.filter((col) => !col.getColDef().lockVisible) || [];\r\n                    colModel.setColsVisible(unlockedColumns as AgColumn[], false, 'uiColumnMoved');\r\n                }\r\n            },\r\n        };\r\n\r\n        dragAndDrop!.addDragSource(dragSource, true);\r\n\r\n        return dragSource;\r\n    }\r\n}\r\n\r\nfunction findGroupWidthId(columnGroup: AgColumnGroup | null, id: any): AgColumnGroup | undefined {\r\n    while (columnGroup) {\r\n        if (columnGroup.getGroupId() === id) {\r\n            return columnGroup;\r\n        }\r\n        columnGroup = columnGroup.getParent();\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction createDragItem(column: AgColumn): DragItem {\r\n    const visibleState: { [key: string]: boolean } = {};\r\n    visibleState[column.getId()] = column.isVisible();\r\n\r\n    return {\r\n        columns: [column],\r\n        visibleState: visibleState,\r\n    };\r\n}\r\n\r\n// when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\r\n// and in the order they are currently in the screen.\r\nfunction createDragItemForGroup(columnGroup: AgColumnGroup, allCols: AgColumn[]): DragItem {\r\n    const allColumnsOriginalOrder = columnGroup.getProvidedColumnGroup().getLeafColumns();\r\n\r\n    // capture visible state, used when re-entering grid to dictate which columns should be visible\r\n    const visibleState: { [key: string]: boolean } = {};\r\n    allColumnsOriginalOrder.forEach((column) => (visibleState[column.getId()] = column.isVisible()));\r\n\r\n    const allColumnsCurrentOrder: AgColumn[] = [];\r\n    allCols.forEach((column) => {\r\n        if (allColumnsOriginalOrder.indexOf(column) >= 0) {\r\n            allColumnsCurrentOrder.push(column);\r\n            _removeFromArray(allColumnsOriginalOrder, column);\r\n        }\r\n    });\r\n\r\n    // we are left with non-visible columns, stick these in at the end\r\n    allColumnsOriginalOrder.forEach((column) => allColumnsCurrentOrder.push(column));\r\n\r\n    const columnsInSplit: AgColumn[] = [];\r\n    const columnGroupColumns = columnGroup.getLeafColumns();\r\n\r\n    for (const col of allColumnsCurrentOrder) {\r\n        if (columnGroupColumns.indexOf(col) !== -1) {\r\n            columnsInSplit.push(col);\r\n        }\r\n    }\r\n\r\n    // create and return dragItem\r\n    return {\r\n        columns: allColumnsCurrentOrder,\r\n        columnsInSplit,\r\n        visibleState: visibleState,\r\n    };\r\n}\r\n", "import type { _ColumnMoveApi } from '../api/gridApi';\r\nimport { SharedDragAndDropModule } from '../dragAndDrop/dragModule';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { columnMovingCSS } from './column-moving.css-GENERATED';\r\nimport { ColumnAnimationService } from './columnAnimationService';\r\nimport { moveColumnByIndex, moveColumns } from './columnMoveApi';\r\nimport { ColumnMoveService } from './columnMoveService';\r\n\r\n/**\r\n * @feature Columns -> Column Moving\r\n */\r\nexport const ColumnMoveModule: _ModuleWithApi<_ColumnMoveApi> = {\r\n    moduleName: 'ColumnMove',\r\n    version: VERSION,\r\n    beans: [ColumnMoveService, ColumnAnimationService],\r\n    apiFunctions: {\r\n        moveColumnByIndex,\r\n        moveColumns,\r\n    },\r\n    dependsOn: [SharedDragAndDropModule],\r\n    css: [columnMovingCSS],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { RowContainerCtrl } from '../gridBodyComp/rowContainer/rowContainerCtrl';\r\n\r\nexport class AutoWidthCalculator extends BeanStub implements NamedBean {\r\n    beanName = 'autoWidthCalc' as const;\r\n\r\n    private centerRowContainerCtrl: RowContainerCtrl;\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.centerRowContainerCtrl = p.center;\r\n        });\r\n    }\r\n\r\n    // this is the trick: we create a dummy container and clone all the cells\r\n    // into the dummy, then check the dummy's width. then destroy the dummy\r\n    // as we don't need it any more.\r\n    // drawback: only the cells visible on the screen are considered\r\n    public getPreferredWidthForColumn(column: AgColumn, skipHeader?: boolean): number {\r\n        const eHeaderCell = this.getHeaderCellForColumn(column);\r\n        // cell isn't visible\r\n        if (!eHeaderCell) {\r\n            return -1;\r\n        }\r\n\r\n        const elements = this.beans.rowRenderer.getAllCellsNotSpanningForColumn(column);\r\n\r\n        if (!skipHeader) {\r\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\r\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\r\n            // as the groups can span columns and this class only considers one column at a time.\r\n            elements.push(eHeaderCell);\r\n        }\r\n\r\n        return this.addElementsToContainerAndGetWidth(elements);\r\n    }\r\n\r\n    public getPreferredWidthForColumnGroup(columnGroup: AgColumnGroup): number {\r\n        const eHeaderCell = this.getHeaderCellForColumn(columnGroup);\r\n\r\n        if (!eHeaderCell) {\r\n            return -1;\r\n        }\r\n\r\n        return this.addElementsToContainerAndGetWidth([eHeaderCell]);\r\n    }\r\n\r\n    private addElementsToContainerAndGetWidth(elements: HTMLElement[]): number {\r\n        // this element has to be a form, otherwise form elements within a cell\r\n        // will be validated while being cloned. This can cause issues such as\r\n        // radio buttons being reset and losing their values.\r\n        const eDummyContainer = document.createElement('form');\r\n        // position fixed, so it isn't restricted to the boundaries of the parent\r\n        eDummyContainer.style.position = 'fixed';\r\n\r\n        // we put the dummy into the body container, so it will inherit all the\r\n        // css styles that the real cells are inheriting\r\n        const eBodyContainer = this.centerRowContainerCtrl.eContainer;\r\n\r\n        elements.forEach((el) => this.cloneItemIntoDummy(el, eDummyContainer));\r\n\r\n        // only append the dummyContainer to the DOM after it contains all the necessary items\r\n        eBodyContainer.appendChild(eDummyContainer);\r\n\r\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\r\n        // container will have a width wide enough just to fit the largest.\r\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\r\n\r\n        // we are finished with the dummy container, so get rid of it\r\n        eBodyContainer.removeChild(eDummyContainer);\r\n\r\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\r\n        // user can configure the grid to add a few more pixels after the calculated width\r\n        const autoSizePadding = this.gos.get('autoSizePadding');\r\n\r\n        return dummyContainerWidth + autoSizePadding;\r\n    }\r\n\r\n    private getHeaderCellForColumn(column: AgColumnGroup | AgColumn): HTMLElement | null {\r\n        let element: HTMLElement | null = null;\r\n\r\n        this.beans.ctrlsSvc.getHeaderRowContainerCtrls().forEach((container) => {\r\n            const res = container.getHtmlElementForColumnHeader(column);\r\n            if (res != null) {\r\n                element = res;\r\n            }\r\n        });\r\n\r\n        return element;\r\n    }\r\n\r\n    private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\r\n        // make a deep clone of the cell\r\n        const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\r\n        // the original has a fixed width, we remove this to allow the natural width based on content\r\n        eCellClone.style.width = '';\r\n        // the original has position = absolute, we need to remove this so it's positioned normally\r\n        eCellClone.style.position = 'static';\r\n        eCellClone.style.left = '';\r\n        // we put the cell into a containing div, as otherwise the cells would just line up\r\n        // on the same line, standard flow layout, by putting them into divs, they are laid\r\n        // out one per line\r\n        const eCloneParent = document.createElement('div');\r\n        const eCloneParentClassList = eCloneParent.classList;\r\n        const isHeader = ['ag-header-cell', 'ag-header-group-cell'].some((cls) => eCellClone.classList.contains(cls));\r\n\r\n        if (isHeader) {\r\n            eCloneParentClassList.add('ag-header', 'ag-header-row');\r\n            eCloneParent.style.position = 'static';\r\n        } else {\r\n            eCloneParentClassList.add('ag-row');\r\n        }\r\n\r\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\r\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\r\n        // onto group items.\r\n        let pointer = eCell.parentElement;\r\n        while (pointer) {\r\n            const isRow = ['ag-header-row', 'ag-row'].some((cls) => pointer!.classList.contains(cls));\r\n            if (isRow) {\r\n                for (let i = 0; i < pointer.classList.length; i++) {\r\n                    const item = pointer.classList[i];\r\n\r\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\r\n                    // element from fitting into it's parent, and we need the element to stretch the parent\r\n                    // as we are measuring the parents width\r\n                    if (item != 'ag-row-position-absolute') {\r\n                        eCloneParentClassList.add(item);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            pointer = pointer.parentElement;\r\n        }\r\n\r\n        // the twig on the branch, the branch on the tree, the tree in the hole,\r\n        // the hole in the bog, the bog in the clone, the clone in the parent,\r\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\r\n        eCloneParent.appendChild(eCellClone);\r\n        eDummyContainer.appendChild(eCloneParent);\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { AutoWidthCalculator } from './autoWidthCalculator';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const AutoWidthModule: _ModuleWithoutApi = {\r\n    moduleName: 'AutoWidth',\r\n    version: VERSION,\r\n    beans: [AutoWidthCalculator],\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { Column } from '../interfaces/iColumn';\r\n\r\nexport function setColumnWidths(\r\n    beans: BeanCollection,\r\n    columnWidths: { key: string | ColDef | Column; newWidth: number }[],\r\n    finished: boolean = true,\r\n    source: ColumnEventType = 'api'\r\n): void {\r\n    beans.colResize?.setColumnWidths(columnWidths, false, finished, source);\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { IHeaderResizeFeature } from '../headerRendering/cells/abstractCell/abstractHeaderCellCtrl';\r\nimport type { IHeaderGroupCellComp } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport type { ColumnResizeSet } from './columnResizeService';\r\n\r\ninterface ColumnSizeAndRatios {\r\n    columnsToResize: AgColumn[];\r\n    resizeStartWidth: number;\r\n    resizeRatios: number[];\r\n    groupAfterColumns?: AgColumn[];\r\n    groupAfterStartWidth?: number;\r\n    groupAfterRatios?: number[];\r\n}\r\nexport class GroupResizeFeature extends BeanStub implements IHeaderResizeFeature {\r\n    private resizeCols?: AgColumn[];\r\n    private resizeStartWidth: number;\r\n    private resizeRatios?: number[];\r\n\r\n    private resizeTakeFromCols?: AgColumn[];\r\n    private resizeTakeFromStartWidth?: number;\r\n    private resizeTakeFromRatios?: number[];\r\n\r\n    constructor(\r\n        private comp: IHeaderGroupCellComp,\r\n        private eResize: HTMLElement,\r\n        private pinned: ColumnPinnedType,\r\n        private columnGroup: AgColumnGroup\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        if (!this.columnGroup.isResizable()) {\r\n            this.comp.setResizableDisplayed(false);\r\n            return;\r\n        }\r\n\r\n        const { horizontalResizeSvc, gos, colAutosize } = this.beans;\r\n\r\n        const finishedWithResizeFunc = horizontalResizeSvc!.addResizeBar({\r\n            eResizeBar: this.eResize,\r\n            onResizeStart: this.onResizeStart.bind(this),\r\n            onResizing: this.onResizing.bind(this, false),\r\n            onResizeEnd: this.onResizing.bind(this, true),\r\n        });\r\n\r\n        this.addDestroyFunc(finishedWithResizeFunc);\r\n\r\n        if (!gos.get('suppressAutoSize') && colAutosize) {\r\n            this.addDestroyFunc(\r\n                colAutosize.addColumnGroupResize(this.eResize, this.columnGroup, () =>\r\n                    this.resizeLeafColumnsToFit('uiColumnResized')\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    private onResizeStart(shiftKey: boolean): void {\r\n        const {\r\n            columnsToResize,\r\n            resizeStartWidth,\r\n            resizeRatios,\r\n            groupAfterColumns,\r\n            groupAfterStartWidth,\r\n            groupAfterRatios,\r\n        } = this.getInitialValues(shiftKey);\r\n\r\n        this.resizeCols = columnsToResize;\r\n        this.resizeStartWidth = resizeStartWidth;\r\n        this.resizeRatios = resizeRatios;\r\n\r\n        this.resizeTakeFromCols = groupAfterColumns;\r\n        this.resizeTakeFromStartWidth = groupAfterStartWidth;\r\n        this.resizeTakeFromRatios = groupAfterRatios;\r\n\r\n        this.toggleColumnResizing(true);\r\n    }\r\n\r\n    public onResizing(finished: boolean, resizeAmount: any, source: ColumnEventType = 'uiColumnResized'): void {\r\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\r\n        const width = this.resizeStartWidth + resizeAmountNormalised;\r\n\r\n        this.resizeColumnsFromLocalValues(width, source, finished);\r\n    }\r\n\r\n    public getInitialValues(shiftKey?: boolean): ColumnSizeAndRatios {\r\n        const getInitialSizeOfColumns = (columns: AgColumn[]) =>\r\n            columns.reduce((totalWidth: number, column: AgColumn) => totalWidth + column.getActualWidth(), 0);\r\n        const getSizeRatiosOfColumns = (columns: AgColumn[], initialSizeOfColumns: number) =>\r\n            columns.map((column) => column.getActualWidth() / initialSizeOfColumns);\r\n\r\n        const columnsToResize = this.getColumnsToResize();\r\n        const resizeStartWidth = getInitialSizeOfColumns(columnsToResize);\r\n        const resizeRatios = getSizeRatiosOfColumns(columnsToResize, resizeStartWidth);\r\n\r\n        const columnSizeAndRatios: ColumnSizeAndRatios = {\r\n            columnsToResize,\r\n            resizeStartWidth,\r\n            resizeRatios,\r\n        };\r\n\r\n        let groupAfter: AgColumnGroup | null = null;\r\n\r\n        if (shiftKey) {\r\n            groupAfter = this.beans.colGroupSvc?.getGroupAtDirection(this.columnGroup, 'After') ?? null;\r\n        }\r\n\r\n        if (groupAfter) {\r\n            const takeFromLeafCols = groupAfter.getDisplayedLeafColumns();\r\n            const groupAfterColumns = (columnSizeAndRatios.groupAfterColumns = takeFromLeafCols.filter((col) =>\r\n                col.isResizable()\r\n            ));\r\n            const groupAfterStartWidth = (columnSizeAndRatios.groupAfterStartWidth =\r\n                getInitialSizeOfColumns(groupAfterColumns));\r\n            columnSizeAndRatios.groupAfterRatios = getSizeRatiosOfColumns(groupAfterColumns, groupAfterStartWidth);\r\n        } else {\r\n            columnSizeAndRatios.groupAfterColumns = undefined;\r\n            columnSizeAndRatios.groupAfterStartWidth = undefined;\r\n            columnSizeAndRatios.groupAfterRatios = undefined;\r\n        }\r\n\r\n        return columnSizeAndRatios;\r\n    }\r\n\r\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\r\n        const preferredSize = this.beans.autoWidthCalc!.getPreferredWidthForColumnGroup(this.columnGroup);\r\n        const initialValues = this.getInitialValues();\r\n\r\n        if (preferredSize > initialValues.resizeStartWidth) {\r\n            this.resizeColumns(initialValues, preferredSize, source, true);\r\n        }\r\n    }\r\n\r\n    private resizeColumnsFromLocalValues(totalWidth: number, source: ColumnEventType, finished: boolean = true): void {\r\n        if (!this.resizeCols || !this.resizeRatios) {\r\n            return;\r\n        }\r\n\r\n        const initialValues: ColumnSizeAndRatios = {\r\n            columnsToResize: this.resizeCols,\r\n            resizeStartWidth: this.resizeStartWidth,\r\n            resizeRatios: this.resizeRatios,\r\n            groupAfterColumns: this.resizeTakeFromCols,\r\n            groupAfterStartWidth: this.resizeTakeFromStartWidth,\r\n            groupAfterRatios: this.resizeTakeFromRatios,\r\n        };\r\n\r\n        this.resizeColumns(initialValues, totalWidth, source, finished);\r\n    }\r\n\r\n    public resizeColumns(\r\n        initialValues: ColumnSizeAndRatios,\r\n        totalWidth: number,\r\n        source: ColumnEventType,\r\n        finished: boolean = true\r\n    ): void {\r\n        const {\r\n            columnsToResize,\r\n            resizeStartWidth,\r\n            resizeRatios,\r\n            groupAfterColumns,\r\n            groupAfterStartWidth,\r\n            groupAfterRatios,\r\n        } = initialValues;\r\n\r\n        const resizeSets: ColumnResizeSet[] = [];\r\n\r\n        resizeSets.push({\r\n            columns: columnsToResize,\r\n            ratios: resizeRatios,\r\n            width: totalWidth,\r\n        });\r\n\r\n        if (groupAfterColumns) {\r\n            const diff = totalWidth - resizeStartWidth;\r\n            resizeSets.push({\r\n                columns: groupAfterColumns,\r\n                ratios: groupAfterRatios!,\r\n                width: groupAfterStartWidth! - diff,\r\n            });\r\n        }\r\n\r\n        this.beans.colResize?.resizeColumnSets({\r\n            resizeSets,\r\n            finished,\r\n            source: source,\r\n        });\r\n\r\n        if (finished) {\r\n            this.toggleColumnResizing(false);\r\n        }\r\n    }\r\n\r\n    public toggleColumnResizing(resizing: boolean): void {\r\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\r\n    }\r\n\r\n    private getColumnsToResize(): AgColumn[] {\r\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\r\n        return leafCols.filter((col) => col.isResizable());\r\n    }\r\n\r\n    // optionally inverts the drag, depending on pinned and RTL\r\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\r\n    private normaliseDragChange(dragChange: number): number {\r\n        let result = dragChange;\r\n\r\n        if (this.gos.get('enableRtl')) {\r\n            // for RTL, dragging left makes the col bigger, except when pinning left\r\n            if (this.pinned !== 'left') {\r\n                result *= -1;\r\n            }\r\n        } else if (this.pinned === 'right') {\r\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\r\n            result *= -1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        this.resizeCols = undefined;\r\n        this.resizeRatios = undefined;\r\n\r\n        this.resizeTakeFromCols = undefined;\r\n        this.resizeTakeFromRatios = undefined;\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { IHeaderResizeFeature } from '../headerRendering/cells/abstractCell/abstractHeaderCellCtrl';\r\nimport type { HeaderCellCtrl, IHeaderCellComp } from '../headerRendering/cells/column/headerCellCtrl';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport { _getInnerWidth, _setDisplayed } from '../utils/dom';\r\n\r\nexport class ResizeFeature extends BeanStub implements IHeaderResizeFeature {\r\n    private lastResizeAmount: number;\r\n    private resizeStartWidth: number;\r\n    private resizeWithShiftKey: boolean;\r\n\r\n    constructor(\r\n        private pinned: ColumnPinnedType,\r\n        private column: AgColumn,\r\n        private eResize: HTMLElement,\r\n        private comp: IHeaderCellComp,\r\n        private ctrl: HeaderCellCtrl\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const destroyResizeFuncs: (() => void)[] = [];\r\n\r\n        let canResize: boolean;\r\n        let canAutosize: boolean;\r\n\r\n        const addResize = () => {\r\n            _setDisplayed(this.eResize, canResize);\r\n\r\n            if (!canResize) {\r\n                return;\r\n            }\r\n\r\n            const { horizontalResizeSvc, colAutosize } = this.beans;\r\n\r\n            const finishedWithResizeFunc = horizontalResizeSvc!.addResizeBar({\r\n                eResizeBar: this.eResize,\r\n                onResizeStart: this.onResizeStart.bind(this),\r\n                onResizing: this.onResizing.bind(this, false),\r\n                onResizeEnd: this.onResizing.bind(this, true),\r\n            });\r\n            destroyResizeFuncs.push(finishedWithResizeFunc);\r\n\r\n            if (canAutosize && colAutosize) {\r\n                destroyResizeFuncs.push(colAutosize.addColumnAutosize(this.eResize, this.column));\r\n            }\r\n        };\r\n\r\n        const removeResize = () => {\r\n            destroyResizeFuncs.forEach((f) => f());\r\n            destroyResizeFuncs.length = 0;\r\n        };\r\n\r\n        const refresh = () => {\r\n            const resize = this.column.isResizable();\r\n            const autoSize = !this.gos.get('suppressAutoSize') && !this.column.getColDef().suppressAutoSize;\r\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\r\n            if (propertyChange) {\r\n                canResize = resize;\r\n                canAutosize = autoSize;\r\n                removeResize();\r\n                addResize();\r\n            }\r\n        };\r\n\r\n        refresh();\r\n        this.addDestroyFunc(removeResize);\r\n        this.ctrl.setRefreshFunction('resize', refresh);\r\n    }\r\n\r\n    private onResizing(finished: boolean, resizeAmount: number): void {\r\n        const { column: key, lastResizeAmount, resizeStartWidth, beans } = this;\r\n\r\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\r\n        const newWidth = resizeStartWidth + resizeAmountNormalised;\r\n\r\n        const columnWidths = [{ key, newWidth }];\r\n\r\n        const { pinnedCols, ctrlsSvc, colResize } = beans;\r\n\r\n        if (this.column.getPinned()) {\r\n            const leftWidth = pinnedCols?.leftWidth ?? 0;\r\n            const rightWidth = pinnedCols?.rightWidth ?? 0;\r\n            const bodyWidth = _getInnerWidth(ctrlsSvc.getGridBodyCtrl().eBodyViewport) - 50;\r\n\r\n            if (leftWidth + rightWidth + (resizeAmountNormalised - lastResizeAmount) > bodyWidth) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.lastResizeAmount = resizeAmountNormalised;\r\n\r\n        colResize?.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, 'uiColumnResized');\r\n\r\n        if (finished) {\r\n            this.toggleColumnResizing(false);\r\n        }\r\n    }\r\n\r\n    private onResizeStart(shiftKey: boolean): void {\r\n        this.resizeStartWidth = this.column.getActualWidth();\r\n        this.lastResizeAmount = 0;\r\n        this.resizeWithShiftKey = shiftKey;\r\n\r\n        this.toggleColumnResizing(true);\r\n    }\r\n\r\n    public toggleColumnResizing(resizing: boolean): void {\r\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\r\n    }\r\n\r\n    // optionally inverts the drag, depending on pinned and RTL\r\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\r\n    private normaliseResizeAmount(dragChange: number): number {\r\n        let result = dragChange;\r\n\r\n        const notPinningLeft = this.pinned !== 'left';\r\n        const pinningRight = this.pinned === 'right';\r\n\r\n        if (this.gos.get('enableRtl')) {\r\n            // for RTL, dragging left makes the col bigger, except when pinning left\r\n            if (notPinningLeft) {\r\n                result *= -1;\r\n            }\r\n        } else {\r\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\r\n            if (pinningRight) {\r\n                result *= -1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { dispatchColumnResizedEvent } from '../columns/columnEventUtils';\r\nimport type { ColKey } from '../columns/columnModel';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { HeaderCellCtrl, IHeaderCellComp } from '../headerRendering/cells/column/headerCellCtrl';\r\nimport type { IHeaderGroupCellComp } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport { _error } from '../validation/logging';\r\nimport { GroupResizeFeature } from './groupResizeFeature';\r\nimport { ResizeFeature } from './resizeFeature';\r\n\r\nexport interface ColumnResizeSet {\r\n    columns: AgColumn[];\r\n    ratios: number[];\r\n    width: number;\r\n}\r\n\r\nexport class ColumnResizeService extends BeanStub implements NamedBean {\r\n    beanName = 'colResize' as const;\r\n\r\n    public setColumnWidths(\r\n        columnWidths: {\r\n            key: ColKey; // @key - the column who's size we want to change\r\n            newWidth: number; // @newWidth - width in pixels\r\n        }[],\r\n        shiftKey: boolean, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column\r\n        finished: boolean, // @finished - ends up in the event, tells the user if more events are to come\r\n        source: ColumnEventType\r\n    ): void {\r\n        const sets: ColumnResizeSet[] = [];\r\n\r\n        const { colModel, gos, visibleCols } = this.beans;\r\n\r\n        columnWidths.forEach((columnWidth) => {\r\n            const col = colModel.getColDefCol(columnWidth.key) || colModel.getCol(columnWidth.key);\r\n\r\n            if (!col) {\r\n                return;\r\n            }\r\n\r\n            sets.push({\r\n                width: columnWidth.newWidth,\r\n                ratios: [1],\r\n                columns: [col],\r\n            });\r\n\r\n            // if user wants to do shift resize by default, then we invert the shift operation\r\n            const defaultIsShift = gos.get('colResizeDefault') === 'shift';\r\n\r\n            if (defaultIsShift) {\r\n                shiftKey = !shiftKey;\r\n            }\r\n\r\n            if (shiftKey) {\r\n                const otherCol = visibleCols.getColAfter(col);\r\n                if (!otherCol) {\r\n                    return;\r\n                }\r\n\r\n                const widthDiff = col.getActualWidth() - columnWidth.newWidth;\r\n                const otherColWidth = otherCol.getActualWidth() + widthDiff;\r\n\r\n                sets.push({\r\n                    width: otherColWidth,\r\n                    ratios: [1],\r\n                    columns: [otherCol],\r\n                });\r\n            }\r\n        });\r\n\r\n        if (sets.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.resizeColumnSets({\r\n            resizeSets: sets,\r\n            finished,\r\n            source,\r\n        });\r\n    }\r\n\r\n    // method takes sets of columns and resizes them. either all sets will be resized, or nothing\r\n    // be resized. this is used for example when user tries to resize a group and holds shift key,\r\n    // then both the current group (grows), and the adjacent group (shrinks), will get resized,\r\n    // so that's two sets for this method.\r\n    public resizeColumnSets(params: {\r\n        resizeSets: ColumnResizeSet[];\r\n        finished: boolean;\r\n        source: ColumnEventType;\r\n    }): void {\r\n        const { resizeSets, finished, source } = params;\r\n        const passMinMaxCheck =\r\n            !resizeSets || resizeSets.every((columnResizeSet) => checkMinAndMaxWidthsForSet(columnResizeSet));\r\n\r\n        if (!passMinMaxCheck) {\r\n            // even though we are not going to resize beyond min/max size, we still need to dispatch event when finished\r\n            if (finished) {\r\n                const columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;\r\n                dispatchColumnResizedEvent(this.eventSvc, columns, finished, source);\r\n            }\r\n\r\n            return; // don't resize!\r\n        }\r\n\r\n        const changedCols: AgColumn[] = [];\r\n        const allResizedCols: AgColumn[] = [];\r\n\r\n        resizeSets.forEach((set) => {\r\n            const { width, columns, ratios } = set;\r\n\r\n            // keep track of pixels used, and last column gets the remaining,\r\n            // to cater for rounding errors, and min width adjustments\r\n            const newWidths: { [colId: string]: number } = {};\r\n            const finishedCols: { [colId: string]: boolean } = {};\r\n\r\n            columns.forEach((col) => allResizedCols.push(col));\r\n\r\n            // the loop below goes through each col. if a col exceeds it's min/max width,\r\n            // it then gets set to its min/max width and the column is removed marked as 'finished'\r\n            // and the calculation is done again leaving this column out. take for example columns\r\n            // {A, width: 50, maxWidth: 100}\r\n            // {B, width: 50}\r\n            // {C, width: 50}\r\n            // and then the set is set to width 600 - on the first pass the grid tries to set each column\r\n            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked\r\n            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up\r\n            // splitting the remaining 500 pixels.\r\n            let finishedColsGrew = true;\r\n            let loopCount = 0;\r\n\r\n            while (finishedColsGrew) {\r\n                loopCount++;\r\n                if (loopCount > 1000) {\r\n                    // this should never happen, but in the future, someone might introduce a bug here,\r\n                    // so we stop the browser from hanging and report bug properly\r\n                    _error(31);\r\n                    break;\r\n                }\r\n\r\n                finishedColsGrew = false;\r\n\r\n                const subsetCols: AgColumn[] = [];\r\n                let subsetRatioTotal = 0;\r\n                let pixelsToDistribute = width;\r\n\r\n                columns.forEach((col, index) => {\r\n                    const thisColFinished = finishedCols[col.getId()];\r\n                    if (thisColFinished) {\r\n                        pixelsToDistribute -= newWidths[col.getId()];\r\n                    } else {\r\n                        subsetCols.push(col);\r\n                        const ratioThisCol = ratios[index];\r\n                        subsetRatioTotal += ratioThisCol;\r\n                    }\r\n                });\r\n\r\n                // because we are not using all of the ratios (cols can be missing),\r\n                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,\r\n                // and so the ratioScale will be 1.\r\n                const ratioScale = 1 / subsetRatioTotal;\r\n\r\n                subsetCols.forEach((col, index) => {\r\n                    const lastCol = index === subsetCols.length - 1;\r\n                    let colNewWidth: number;\r\n\r\n                    if (lastCol) {\r\n                        colNewWidth = pixelsToDistribute;\r\n                    } else {\r\n                        colNewWidth = Math.round(ratios[index] * width * ratioScale);\r\n                        pixelsToDistribute -= colNewWidth;\r\n                    }\r\n\r\n                    const minWidth = col.getMinWidth();\r\n                    const maxWidth = col.getMaxWidth();\r\n\r\n                    if (colNewWidth < minWidth) {\r\n                        colNewWidth = minWidth;\r\n                        finishedCols[col.getId()] = true;\r\n                        finishedColsGrew = true;\r\n                    } else if (maxWidth > 0 && colNewWidth > maxWidth) {\r\n                        colNewWidth = maxWidth;\r\n                        finishedCols[col.getId()] = true;\r\n                        finishedColsGrew = true;\r\n                    }\r\n\r\n                    newWidths[col.getId()] = colNewWidth;\r\n                });\r\n            }\r\n\r\n            columns.forEach((col) => {\r\n                const newWidth = newWidths[col.getId()];\r\n                const actualWidth = col.getActualWidth();\r\n\r\n                if (actualWidth !== newWidth) {\r\n                    col.setActualWidth(newWidth, source);\r\n                    changedCols.push(col);\r\n                }\r\n            });\r\n        });\r\n\r\n        // if no cols changed, then no need to update more or send event.\r\n        const atLeastOneColChanged = changedCols.length > 0;\r\n\r\n        let flexedCols: AgColumn[] = [];\r\n\r\n        if (atLeastOneColChanged) {\r\n            const { colFlex, visibleCols, colViewport } = this.beans;\r\n            flexedCols =\r\n                colFlex?.refreshFlexedColumns({\r\n                    resizingCols: allResizedCols,\r\n                    skipSetLeft: true,\r\n                }) ?? [];\r\n            visibleCols.setLeftValues(source);\r\n            visibleCols.updateBodyWidths();\r\n            colViewport.checkViewportColumns();\r\n        }\r\n\r\n        // check for change first, to avoid unnecessary firing of events\r\n        // however we always dispatch 'finished' events. this is important\r\n        // when groups are resized, as if the group is changing slowly,\r\n        // eg 1 pixel at a time, then each change will dispatch change events\r\n        // in all the columns in the group, but only one with get the pixel.\r\n        const colsForEvent = allResizedCols.concat(flexedCols);\r\n\r\n        if (atLeastOneColChanged || finished) {\r\n            dispatchColumnResizedEvent(this.eventSvc, colsForEvent, finished, source, flexedCols);\r\n        }\r\n    }\r\n\r\n    public resizeHeader(column: AgColumn, delta: number, shiftKey: boolean): void {\r\n        if (!column.isResizable()) {\r\n            return;\r\n        }\r\n\r\n        const actualWidth = column.getActualWidth();\r\n        const minWidth = column.getMinWidth();\r\n        const maxWidth = column.getMaxWidth();\r\n\r\n        const newWidth = Math.min(Math.max(actualWidth + delta, minWidth), maxWidth);\r\n\r\n        this.setColumnWidths([{ key: column, newWidth }], shiftKey, true, 'uiColumnResized');\r\n    }\r\n\r\n    public createResizeFeature(\r\n        pinned: ColumnPinnedType,\r\n        column: AgColumn,\r\n        eResize: HTMLElement,\r\n        comp: IHeaderCellComp,\r\n        ctrl: HeaderCellCtrl\r\n    ): ResizeFeature {\r\n        return new ResizeFeature(pinned, column, eResize, comp, ctrl);\r\n    }\r\n\r\n    public createGroupResizeFeature(\r\n        comp: IHeaderGroupCellComp,\r\n        eResize: HTMLElement,\r\n        pinned: ColumnPinnedType,\r\n        columnGroup: AgColumnGroup\r\n    ): GroupResizeFeature {\r\n        return new GroupResizeFeature(comp, eResize, pinned, columnGroup);\r\n    }\r\n}\r\n\r\nfunction checkMinAndMaxWidthsForSet(columnResizeSet: ColumnResizeSet): boolean {\r\n    const { columns, width } = columnResizeSet;\r\n\r\n    // every col has a min width, so sum them all up and see if we have enough room\r\n    // for all the min widths\r\n    let minWidthAccumulated = 0;\r\n    let maxWidthAccumulated = 0;\r\n    let maxWidthActive = true;\r\n\r\n    columns.forEach((col) => {\r\n        const minWidth = col.getMinWidth();\r\n        minWidthAccumulated += minWidth || 0;\r\n\r\n        const maxWidth = col.getMaxWidth();\r\n        if (maxWidth > 0) {\r\n            maxWidthAccumulated += maxWidth;\r\n        } else {\r\n            // if at least one columns has no max width, it means the group of columns\r\n            // then has no max width, as at least one column can take as much width as possible\r\n            maxWidthActive = false;\r\n        }\r\n    });\r\n\r\n    const minWidthPasses = width >= minWidthAccumulated;\r\n    const maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;\r\n\r\n    return minWidthPasses && maxWidthPasses;\r\n}\r\n", "import type { _ColumnResizeApi } from '../api/gridApi';\r\nimport { HorizontalResizeModule } from '../dragAndDrop/dragModule';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { AutoWidthModule } from '../rendering/autoWidthModule';\r\nimport { VERSION } from '../version';\r\nimport { setColumnWidths } from './columnResizeApi';\r\nimport { ColumnResizeService } from './columnResizeService';\r\n\r\n/**\r\n * @feature Columns -> Column Sizing\r\n */\r\nexport const ColumnResizeModule: _ModuleWithApi<_ColumnResizeApi> = {\r\n    moduleName: 'ColumnResize',\r\n    version: VERSION,\r\n    beans: [ColumnResizeService],\r\n    apiFunctions: {\r\n        setColumnWidths,\r\n    },\r\n    dependsOn: [HorizontalResizeModule, AutoWidthModule],\r\n};\r\n", "import { BeanStub } from '../../../context/beanStub';\r\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\r\nimport type { IHeaderGroupCellComp } from './headerGroupCellCtrl';\r\n\r\nexport class GroupWidthFeature extends BeanStub {\r\n    private columnGroup: AgColumnGroup;\r\n    private comp: IHeaderGroupCellComp;\r\n\r\n    // the children can change, we keep destroy functions related to listening to the children here\r\n    private removeChildListenersFuncs: (() => void)[] = [];\r\n\r\n    constructor(comp: IHeaderGroupCellComp, columnGroup: AgColumnGroup) {\r\n        super();\r\n        this.columnGroup = columnGroup;\r\n        this.comp = comp;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        // we need to listen to changes in child columns, as they impact our width\r\n        this.addListenersToChildrenColumns();\r\n\r\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\r\n        this.addManagedListeners(this.columnGroup, {\r\n            displayedChildrenChanged: this.onDisplayedChildrenChanged.bind(this),\r\n        });\r\n\r\n        this.onWidthChanged();\r\n\r\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\r\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\r\n        // listeners are removed when we finally get destroyed\r\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\r\n    }\r\n\r\n    private addListenersToChildrenColumns(): void {\r\n        // first destroy any old listeners\r\n        this.removeListenersOnChildrenColumns();\r\n\r\n        // now add new listeners to the new set of children\r\n        const widthChangedListener = this.onWidthChanged.bind(this);\r\n        this.columnGroup.getLeafColumns().forEach((column) => {\r\n            column.addEventListener('widthChanged', widthChangedListener);\r\n            column.addEventListener('visibleChanged', widthChangedListener);\r\n            this.removeChildListenersFuncs.push(() => {\r\n                column.removeEventListener('widthChanged', widthChangedListener);\r\n                column.removeEventListener('visibleChanged', widthChangedListener);\r\n            });\r\n        });\r\n    }\r\n\r\n    private removeListenersOnChildrenColumns(): void {\r\n        this.removeChildListenersFuncs.forEach((func) => func());\r\n        this.removeChildListenersFuncs = [];\r\n    }\r\n\r\n    private onDisplayedChildrenChanged(): void {\r\n        this.addListenersToChildrenColumns();\r\n        this.onWidthChanged();\r\n    }\r\n\r\n    private onWidthChanged(): void {\r\n        const columnWidth = this.columnGroup.getActualWidth();\r\n        this.comp.setWidth(`${columnWidth}px`);\r\n        this.comp.addOrRemoveCssClass('ag-hidden', columnWidth === 0);\r\n    }\r\n}\r\n", "import type { GroupResizeFeature } from '../../../columnResize/groupResizeFeature';\r\nimport { setupCompBean } from '../../../components/emptyBean';\r\nimport { _getHeaderGroupCompDetails } from '../../../components/framework/userCompUtils';\r\nimport { KeyCode } from '../../../constants/keyCode';\r\nimport type { BeanStub } from '../../../context/beanStub';\r\nimport type { AgColumn } from '../../../entities/agColumn';\r\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\r\nimport type { ColumnEventType } from '../../../events';\r\nimport { ColumnHighlightPosition } from '../../../interfaces/iColumn';\r\nimport type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\r\nimport type { TooltipFeature } from '../../../tooltip/tooltipFeature';\r\nimport { _last } from '../../../utils/array';\r\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\r\nimport type { IAbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellCtrl';\r\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\r\nimport { _getHeaderClassesFromColDef } from '../cssClassApplier';\r\nimport { GroupWidthFeature } from './groupWidthFeature';\r\nimport type { IHeaderGroupComp, IHeaderGroupParams } from './headerGroupComp';\r\n\r\nexport interface IHeaderGroupCellComp extends IAbstractHeaderCellComp {\r\n    setResizableDisplayed(displayed: boolean): void;\r\n    setWidth(width: string): void;\r\n    setHeaderWrapperMaxHeight(value: number | null): void;\r\n    setHeaderWrapperHidden(value: boolean): void;\r\n    setAriaExpanded(expanded: 'true' | 'false' | undefined): void;\r\n    setUserCompDetails(compDetails: UserCompDetails): void;\r\n    getUserCompInstance(): IHeaderGroupComp | undefined;\r\n}\r\n\r\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl<\r\n    IHeaderGroupCellComp,\r\n    AgColumnGroup,\r\n    GroupResizeFeature\r\n> {\r\n    private expandable: boolean;\r\n    private displayName: string | null;\r\n    private tooltipFeature: TooltipFeature | undefined;\r\n\r\n    public setComp(\r\n        comp: IHeaderGroupCellComp,\r\n        eGui: HTMLElement,\r\n        eResize: HTMLElement,\r\n        eHeaderCompWrapper: HTMLElement,\r\n        compBean: BeanStub<any> | undefined\r\n    ): void {\r\n        const { column, beans } = this;\r\n        const { context, colNames, colHover, colResize } = beans;\r\n        this.comp = comp;\r\n        compBean = setupCompBean(this, context, compBean);\r\n        this.setGui(eGui, compBean);\r\n\r\n        this.displayName = colNames.getDisplayNameForColumnGroup(column, 'header');\r\n\r\n        this.addClasses();\r\n        this.setupMovingCss(compBean);\r\n        this.setupExpandable(compBean);\r\n        this.setupTooltip();\r\n\r\n        this.setupAutoHeight({\r\n            wrapperElement: eHeaderCompWrapper,\r\n            compBean,\r\n        });\r\n\r\n        this.setupUserComp();\r\n        this.addHeaderMouseListeners(compBean);\r\n\r\n        this.addManagedPropertyListener('groupHeaderHeight', this.refreshMaxHeaderHeight.bind(this));\r\n        this.refreshMaxHeaderHeight();\r\n\r\n        const pinned = this.rowCtrl.pinned;\r\n        const leafCols = column.getProvidedColumnGroup().getLeafColumns();\r\n\r\n        colHover?.createHoverFeature(compBean, leafCols, eGui);\r\n        compBean.createManagedBean(new SetLeftFeature(column, eGui, beans));\r\n        compBean.createManagedBean(new GroupWidthFeature(comp, column));\r\n        if (colResize) {\r\n            this.resizeFeature = compBean.createManagedBean(\r\n                colResize.createGroupResizeFeature(comp, eResize, pinned, column)\r\n            );\r\n        } else {\r\n            comp.setResizableDisplayed(false);\r\n        }\r\n\r\n        compBean.createManagedBean(\r\n            new ManagedFocusFeature(eGui, {\r\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\r\n                onTabKeyDown: () => undefined,\r\n                handleKeyDown: this.handleKeyDown.bind(this),\r\n                onFocusIn: this.onFocusIn.bind(this),\r\n            })\r\n        );\r\n\r\n        this.addHighlightListeners(compBean, leafCols);\r\n\r\n        compBean.addManagedPropertyListener('suppressMovableColumns', this.onSuppressColMoveChange);\r\n        this.addResizeAndMoveKeyboardListeners(compBean);\r\n        // Make sure this is the last destroy func as it clears the gui and comp\r\n        compBean.addDestroyFunc(() => this.clearComponent());\r\n    }\r\n\r\n    private refreshMaxHeaderHeight(): void {\r\n        const { gos, comp } = this;\r\n\r\n        const groupHeaderHeight = gos.get('groupHeaderHeight');\r\n\r\n        if (groupHeaderHeight != null) {\r\n            if (groupHeaderHeight === 0) {\r\n                comp.setHeaderWrapperHidden(true);\r\n            } else {\r\n                comp.setHeaderWrapperMaxHeight(groupHeaderHeight);\r\n            }\r\n        } else {\r\n            comp.setHeaderWrapperHidden(false);\r\n            comp.setHeaderWrapperMaxHeight(null);\r\n        }\r\n    }\r\n\r\n    private addHighlightListeners(compBean: BeanStub, columns: AgColumn[]): void {\r\n        if (!this.beans.gos.get('suppressMoveWhenColumnDragging')) {\r\n            return;\r\n        }\r\n\r\n        for (const column of columns) {\r\n            compBean.addManagedListeners(column, {\r\n                headerHighlightChanged: this.onLeafColumnHighlightChanged.bind(this, column),\r\n            });\r\n        }\r\n    }\r\n\r\n    private onLeafColumnHighlightChanged(column: AgColumn): void {\r\n        const displayedColumns = this.column.getDisplayedLeafColumns();\r\n        const isFirst = displayedColumns[0] === column;\r\n        const isLast = _last(displayedColumns) === column;\r\n\r\n        if (!isFirst && !isLast) {\r\n            return;\r\n        }\r\n\r\n        const highlighted = column.getHighlighted();\r\n        const isColumnMoveAtThisLevel = !!this.rowCtrl.findHeaderCellCtrl((ctrl) => {\r\n            return ctrl.column.isMoving();\r\n        });\r\n\r\n        let beforeOn = false;\r\n        let afterOn = false;\r\n\r\n        if (isColumnMoveAtThisLevel) {\r\n            const isRtl = this.beans.gos.get('enableRtl');\r\n            const isHighlightAfter = highlighted === ColumnHighlightPosition.After;\r\n            const isHighlightBefore = highlighted === ColumnHighlightPosition.Before;\r\n\r\n            if (isFirst) {\r\n                if (isRtl) {\r\n                    afterOn = isHighlightAfter;\r\n                } else {\r\n                    beforeOn = isHighlightBefore;\r\n                }\r\n            }\r\n\r\n            if (isLast) {\r\n                if (isRtl) {\r\n                    beforeOn = isHighlightBefore;\r\n                } else {\r\n                    afterOn = isHighlightAfter;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.comp.addOrRemoveCssClass('ag-header-highlight-before', beforeOn);\r\n        this.comp.addOrRemoveCssClass('ag-header-highlight-after', afterOn);\r\n    }\r\n\r\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\r\n        const { resizeFeature } = this;\r\n        // check to avoid throwing when a component has not been setup yet (React 18)\r\n        if (!resizeFeature) {\r\n            return;\r\n        }\r\n\r\n        const initialValues = resizeFeature.getInitialValues(shiftKey);\r\n\r\n        resizeFeature.resizeColumns(initialValues, initialValues.resizeStartWidth + delta, 'uiColumnResized', true);\r\n    }\r\n\r\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\r\n        // check to avoid throwing when a component has not been setup yet (React 18)\r\n        this.resizeFeature?.resizeLeafColumnsToFit(source);\r\n    }\r\n\r\n    private setupUserComp(): void {\r\n        const { colGroupSvc, userCompFactory, gos } = this.beans;\r\n        const params: IHeaderGroupParams = gos.addGridCommonParams({\r\n            displayName: this.displayName!,\r\n            columnGroup: this.column,\r\n            setExpanded: (expanded: boolean) => {\r\n                colGroupSvc!.setColumnGroupOpened(this.column.getProvidedColumnGroup(), expanded, 'gridInitializing');\r\n            },\r\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\r\n                gos.assertModuleRegistered('Tooltip', 3);\r\n                this.setupTooltip(value, shouldDisplayTooltip);\r\n            },\r\n        });\r\n\r\n        const compDetails = _getHeaderGroupCompDetails(userCompFactory, params);\r\n        if (compDetails) {\r\n            this.comp.setUserCompDetails(compDetails);\r\n        }\r\n    }\r\n\r\n    private addHeaderMouseListeners(compBean: BeanStub): void {\r\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\r\n        const clickListener = () =>\r\n            this.dispatchColumnMouseEvent('columnHeaderClicked', this.column.getProvidedColumnGroup());\r\n        const contextMenuListener = (event: MouseEvent) =>\r\n            this.handleContextMenuMouseEvent(event, undefined, this.column.getProvidedColumnGroup());\r\n\r\n        compBean.addManagedListeners(this.eGui, {\r\n            mouseenter: listener,\r\n            mouseleave: listener,\r\n            click: clickListener,\r\n            contextmenu: contextMenuListener,\r\n        });\r\n    }\r\n\r\n    private handleMouseOverChange(isMouseOver: boolean): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: isMouseOver ? 'columnHeaderMouseOver' : 'columnHeaderMouseLeave',\r\n            column: this.column.getProvidedColumnGroup(),\r\n        });\r\n    }\r\n\r\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\r\n        this.tooltipFeature = this.beans.tooltipSvc?.setupHeaderGroupTooltip(\r\n            this.tooltipFeature,\r\n            this,\r\n            value,\r\n            shouldDisplayTooltip\r\n        );\r\n    }\r\n\r\n    private setupExpandable(compBean: BeanStub): void {\r\n        const providedColGroup = this.column.getProvidedColumnGroup();\r\n\r\n        this.refreshExpanded();\r\n\r\n        const listener = this.refreshExpanded.bind(this);\r\n        compBean.addManagedListeners(providedColGroup, {\r\n            expandedChanged: listener,\r\n            expandableChanged: listener,\r\n        });\r\n    }\r\n\r\n    private refreshExpanded(): void {\r\n        const { column } = this;\r\n        this.expandable = column.isExpandable();\r\n        const expanded = column.isExpanded();\r\n\r\n        if (this.expandable) {\r\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\r\n        } else {\r\n            this.comp.setAriaExpanded(undefined);\r\n        }\r\n    }\r\n\r\n    private addClasses(): void {\r\n        const { column } = this;\r\n        const colGroupDef = column.getColGroupDef();\r\n        const classes = _getHeaderClassesFromColDef(colGroupDef, this.gos, null, column);\r\n\r\n        // having different classes below allows the style to not have a bottom border\r\n        // on the group header, if no group is specified\r\n        if (column.isPadding()) {\r\n            classes.push('ag-header-group-cell-no-group');\r\n            const leafCols = column.getLeafColumns();\r\n            if (leafCols.every((col) => col.isSpanHeaderHeight())) {\r\n                classes.push('ag-header-span-height');\r\n            }\r\n        } else {\r\n            classes.push('ag-header-group-cell-with-group');\r\n            if (colGroupDef?.wrapHeaderText) {\r\n                classes.push('ag-header-cell-wrap-text');\r\n            }\r\n        }\r\n\r\n        classes.forEach((c) => this.comp.addOrRemoveCssClass(c, true));\r\n    }\r\n\r\n    private setupMovingCss(compBean: BeanStub): void {\r\n        const { column } = this;\r\n        const providedColumnGroup = column.getProvidedColumnGroup();\r\n        const leafColumns = providedColumnGroup.getLeafColumns();\r\n\r\n        // function adds or removes the moving css, based on if the col is moving.\r\n        // this is what makes the header go dark when it is been moved (gives impression to\r\n        // user that the column was picked up).\r\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', column.isMoving());\r\n\r\n        leafColumns.forEach((col) => {\r\n            compBean.addManagedListeners(col, { movingChanged: listener });\r\n        });\r\n\r\n        listener();\r\n    }\r\n\r\n    private onSuppressColMoveChange = () => {\r\n        if (!this.isAlive() || this.isSuppressMoving()) {\r\n            this.removeDragSource();\r\n        } else {\r\n            if (!this.dragSource) {\r\n                this.setDragSource(this.eGui);\r\n            }\r\n        }\r\n    };\r\n\r\n    private onFocusIn(e: FocusEvent) {\r\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\r\n            this.focusThis();\r\n        }\r\n    }\r\n\r\n    protected override handleKeyDown(e: KeyboardEvent): void {\r\n        super.handleKeyDown(e);\r\n\r\n        const wrapperHasFocus = this.getWrapperHasFocus();\r\n\r\n        if (!this.expandable || !wrapperHasFocus) {\r\n            return;\r\n        }\r\n\r\n        if (e.key === KeyCode.ENTER) {\r\n            const column = this.column;\r\n            const newExpandedValue = !column.isExpanded();\r\n\r\n            this.beans.colGroupSvc!.setColumnGroupOpened(\r\n                column.getProvidedColumnGroup(),\r\n                newExpandedValue,\r\n                'uiColumnExpanded'\r\n            );\r\n        }\r\n    }\r\n\r\n    // unlike columns, this will only get called once, as we don't react on props on column groups\r\n    // (we will always destroy and recreate this comp if something changes)\r\n    public setDragSource(eHeaderGroup: HTMLElement): void {\r\n        if (!this.isAlive() || this.isSuppressMoving()) {\r\n            return;\r\n        }\r\n\r\n        this.removeDragSource();\r\n\r\n        if (!eHeaderGroup) {\r\n            return;\r\n        }\r\n\r\n        this.dragSource =\r\n            this.beans.colMoves?.setDragSourceForHeader(eHeaderGroup, this.column, this.displayName) ?? null;\r\n    }\r\n\r\n    private isSuppressMoving(): boolean {\r\n        // if any child is fixed, then don't allow moving\r\n        return (\r\n            this.gos.get('suppressMovableColumns') ||\r\n            this.column\r\n                .getLeafColumns()\r\n                .some((column) => column.getColDef().suppressMovable || column.getColDef().lockPosition)\r\n        );\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.tooltipFeature = this.destroyBean(this.tooltipFeature);\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\r\nimport type { HeaderLocation } from '../../entities/colDef';\r\nimport type { Column, ColumnGroup, ProvidedColumnGroup } from '../../interfaces/iColumn';\r\n\r\nexport function setColumnGroupOpened(\r\n    beans: BeanCollection,\r\n    group: ProvidedColumnGroup | string,\r\n    newValue: boolean\r\n): void {\r\n    beans.colGroupSvc?.setColumnGroupOpened(group as AgProvidedColumnGroup | string, newValue, 'api');\r\n}\r\n\r\nexport function getColumnGroup(beans: BeanCollection, name: string, instanceId?: number): ColumnGroup | null {\r\n    return beans.colGroupSvc?.getColumnGroup(name, instanceId) ?? null;\r\n}\r\n\r\nexport function getProvidedColumnGroup(beans: BeanCollection, name: string): ProvidedColumnGroup | null {\r\n    return beans.colGroupSvc?.getProvidedColGroup(name) ?? null;\r\n}\r\n\r\nexport function getDisplayNameForColumnGroup(\r\n    beans: BeanCollection,\r\n    columnGroup: ColumnGroup,\r\n    location: HeaderLocation\r\n): string {\r\n    return beans.colNames.getDisplayNameForColumnGroup(columnGroup as AgColumnGroup, location) || '';\r\n}\r\n\r\nexport function getColumnGroupState(beans: BeanCollection): { groupId: string; open: boolean }[] {\r\n    return beans.colGroupSvc?.getColumnGroupState() ?? [];\r\n}\r\n\r\nexport function setColumnGroupState(beans: BeanCollection, stateItems: { groupId: string; open: boolean }[]): void {\r\n    beans.colGroupSvc?.setColumnGroupState(stateItems, 'api');\r\n}\r\n\r\nexport function resetColumnGroupState(beans: BeanCollection): void {\r\n    beans.colGroupSvc?.resetColumnGroupState('api');\r\n}\r\n\r\nexport function getLeftDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\r\n    return beans.visibleCols.treeLeft;\r\n}\r\n\r\nexport function getCenterDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\r\n    return beans.visibleCols.treeCenter;\r\n}\r\n\r\nexport function getRightDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] {\r\n    return beans.visibleCols.treeRight;\r\n}\r\n\r\nexport function getAllDisplayedColumnGroups(beans: BeanCollection): (Column | ColumnGroup)[] | null {\r\n    return beans.visibleCols.getAllTrees();\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { isColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport { isColumnGroup } from '../entities/agColumnGroup';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { ColumnPinnedType, HeaderColumnId } from '../interfaces/iColumn';\r\nimport { _last } from '../utils/array';\r\nimport type { ColumnGroupService, CreateGroupsParams } from './columnGroups/columnGroupService';\r\nimport type { ColumnModel } from './columnModel';\r\nimport { getWidthOfColsInList } from './columnUtils';\r\nimport { GroupInstanceIdCreator } from './groupInstanceIdCreator';\r\n\r\nfunction _removeAllFromUnorderedArray<T>(array: T[], toRemove: T[]) {\r\n    for (let i = 0; i < toRemove.length; i++) {\r\n        const index = array.indexOf(toRemove[i]);\r\n\r\n        if (index >= 0) {\r\n            // preserve the last element, then shorten array length by 1 to delete index\r\n            array[index] = array[array.length - 1];\r\n            array.pop();\r\n        }\r\n    }\r\n}\r\n\r\n// takes in a list of columns, as specified by the column definitions, and returns column groups\r\nexport class VisibleColsService extends BeanStub implements NamedBean {\r\n    beanName = 'visibleCols' as const;\r\n\r\n    // tree of columns to be displayed for each section\r\n    public treeLeft: (AgColumn | AgColumnGroup)[];\r\n    public treeRight: (AgColumn | AgColumnGroup)[];\r\n    public treeCenter: (AgColumn | AgColumnGroup)[];\r\n\r\n    // for fast lookup, to see if a column or group is still visible\r\n    private colsAndGroupsMap: { [id: HeaderColumnId]: AgColumn | AgColumnGroup } = {};\r\n\r\n    // leave level columns of the displayed trees\r\n    public leftCols: AgColumn[] = [];\r\n    public rightCols: AgColumn[] = [];\r\n    public centerCols: AgColumn[] = [];\r\n    // all three lists above combined\r\n    public allCols: AgColumn[] = [];\r\n\r\n    public autoHeightCols: AgColumn[];\r\n\r\n    // used by:\r\n    // + angularGrid -> for setting body width\r\n    // + rowController -> setting main row widths (when inserting and resizing)\r\n    // need to cache this\r\n    public bodyWidth = 0;\r\n    private leftWidth = 0;\r\n    private rightWidth = 0;\r\n\r\n    public isBodyWidthDirty = true;\r\n\r\n    // list of all columns (displayed and hidden) in visible order including pinned\r\n    private ariaOrderColumns: AgColumn[];\r\n\r\n    public refresh(source: ColumnEventType, skipTreeBuild = false): void {\r\n        const { colModel, colGroupSvc, colViewport } = this.beans;\r\n        // when we open/close col group, skipTreeBuild=false, as we know liveCols haven't changed\r\n        if (!skipTreeBuild) {\r\n            this.buildTrees(colModel, colGroupSvc);\r\n        }\r\n\r\n        colGroupSvc?.updateOpenClosedVisibility();\r\n\r\n        const leftCols = pickDisplayedCols(this.treeLeft);\r\n        this.leftCols = leftCols;\r\n        this.centerCols = pickDisplayedCols(this.treeCenter);\r\n        const rightCols = pickDisplayedCols(this.treeRight);\r\n        this.rightCols = rightCols;\r\n\r\n        this.joinColsAriaOrder(colModel);\r\n        this.joinCols();\r\n        this.setLeftValues(source);\r\n        this.autoHeightCols = this.allCols.filter((col) => col.isAutoHeight());\r\n        this.beans.colFlex?.refreshFlexedColumns();\r\n        this.updateBodyWidths();\r\n        colViewport.checkViewportColumns(false);\r\n        this.setFirstRightAndLastLeftPinned(colModel, leftCols, rightCols, source);\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'displayedColumnsChanged',\r\n            source,\r\n        });\r\n    }\r\n\r\n    // after setColumnWidth or updateGroupsAndPresentedCols\r\n    public updateBodyWidths(): void {\r\n        const newBodyWidth = getWidthOfColsInList(this.centerCols);\r\n        const newLeftWidth = getWidthOfColsInList(this.leftCols);\r\n        const newRightWidth = getWidthOfColsInList(this.rightCols);\r\n\r\n        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed\r\n        // columns, due to RTL inverting the y coordinates\r\n        this.isBodyWidthDirty = this.bodyWidth !== newBodyWidth;\r\n\r\n        const atLeastOneChanged =\r\n            this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;\r\n\r\n        if (atLeastOneChanged) {\r\n            this.bodyWidth = newBodyWidth;\r\n            this.leftWidth = newLeftWidth;\r\n            this.rightWidth = newRightWidth;\r\n\r\n            // this event is fired to allow the grid viewport to resize before the\r\n            // scrollbar tries to update its visibility.\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'columnContainerWidthChanged',\r\n            });\r\n\r\n            // when this fires, it is picked up by the gridPanel, which ends up in\r\n            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'displayedColumnsWidthChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    // sets the left pixel position of each column\r\n    public setLeftValues(source: ColumnEventType): void {\r\n        this.setLeftValuesOfCols(source);\r\n        this.setLeftValuesOfGroups();\r\n    }\r\n\r\n    private setFirstRightAndLastLeftPinned(\r\n        colModel: ColumnModel,\r\n        leftCols: AgColumn[],\r\n        rightCols: AgColumn[],\r\n        source: ColumnEventType\r\n    ): void {\r\n        let lastLeft: AgColumn | null;\r\n        let firstRight: AgColumn | null;\r\n\r\n        if (this.gos.get('enableRtl')) {\r\n            lastLeft = leftCols ? leftCols[0] : null;\r\n            firstRight = rightCols ? _last(rightCols) : null;\r\n        } else {\r\n            lastLeft = leftCols ? _last(leftCols) : null;\r\n            firstRight = rightCols ? rightCols[0] : null;\r\n        }\r\n\r\n        colModel.getCols().forEach((col) => {\r\n            col.setLastLeftPinned(col === lastLeft, source);\r\n            col.setFirstRightPinned(col === firstRight, source);\r\n        });\r\n    }\r\n\r\n    private buildTrees(colModel: ColumnModel, columnGroupSvc: ColumnGroupService | undefined) {\r\n        const cols = colModel.getColsToShow();\r\n\r\n        const leftCols = cols.filter((col) => col.getPinned() == 'left');\r\n        const rightCols = cols.filter((col) => col.getPinned() == 'right');\r\n        const centerCols = cols.filter((col) => col.getPinned() != 'left' && col.getPinned() != 'right');\r\n\r\n        const idCreator = new GroupInstanceIdCreator();\r\n\r\n        const createGroups = (params: CreateGroupsParams): (AgColumn | AgColumnGroup)[] => {\r\n            return columnGroupSvc ? columnGroupSvc.createColumnGroups(params) : params.columns;\r\n        };\r\n        this.treeLeft = createGroups({\r\n            columns: leftCols,\r\n            idCreator,\r\n            pinned: 'left',\r\n            oldDisplayedGroups: this.treeLeft,\r\n        });\r\n        this.treeRight = createGroups({\r\n            columns: rightCols,\r\n            idCreator,\r\n            pinned: 'right',\r\n            oldDisplayedGroups: this.treeRight,\r\n        });\r\n        this.treeCenter = createGroups({\r\n            columns: centerCols,\r\n            idCreator,\r\n            pinned: null,\r\n            oldDisplayedGroups: this.treeCenter,\r\n        });\r\n\r\n        this.updateColsAndGroupsMap();\r\n    }\r\n\r\n    public clear(): void {\r\n        this.leftCols = [];\r\n        this.rightCols = [];\r\n        this.centerCols = [];\r\n        this.allCols = [];\r\n        this.ariaOrderColumns = [];\r\n    }\r\n\r\n    private joinColsAriaOrder(colModel: ColumnModel): void {\r\n        const allColumns = colModel.getCols();\r\n        const pinnedLeft: AgColumn[] = [];\r\n        const center: AgColumn[] = [];\r\n        const pinnedRight: AgColumn[] = [];\r\n\r\n        for (const col of allColumns) {\r\n            const pinned = col.getPinned();\r\n            if (!pinned) {\r\n                center.push(col);\r\n            } else if (pinned === true || pinned === 'left') {\r\n                pinnedLeft.push(col);\r\n            } else {\r\n                pinnedRight.push(col);\r\n            }\r\n        }\r\n\r\n        this.ariaOrderColumns = pinnedLeft.concat(center).concat(pinnedRight);\r\n    }\r\n\r\n    public getAriaColIndex(colOrGroup: AgColumn | AgColumnGroup): number {\r\n        let col: AgColumn;\r\n\r\n        if (isColumnGroup(colOrGroup)) {\r\n            col = colOrGroup.getLeafColumns()[0];\r\n        } else {\r\n            col = colOrGroup;\r\n        }\r\n\r\n        return this.ariaOrderColumns.indexOf(col) + 1;\r\n    }\r\n\r\n    private setLeftValuesOfGroups(): void {\r\n        // a groups left value is the lest left value of it's children\r\n        [this.treeLeft, this.treeRight, this.treeCenter].forEach((columns) => {\r\n            columns.forEach((column) => {\r\n                if (isColumnGroup(column)) {\r\n                    const columnGroup = column;\r\n                    columnGroup.checkLeft();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private setLeftValuesOfCols(source: ColumnEventType): void {\r\n        const { colModel } = this.beans;\r\n        const primaryCols = colModel.getColDefCols();\r\n        if (!primaryCols) {\r\n            return;\r\n        }\r\n\r\n        // go through each list of displayed columns\r\n        const allColumns = colModel.getCols().slice(0);\r\n\r\n        // let totalColumnWidth = this.getWidthOfColsInList()\r\n        const doingRtl = this.gos.get('enableRtl');\r\n\r\n        [this.leftCols, this.rightCols, this.centerCols].forEach((columns) => {\r\n            if (doingRtl) {\r\n                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards\r\n                let left = getWidthOfColsInList(columns);\r\n                columns.forEach((column) => {\r\n                    left -= column.getActualWidth();\r\n                    column.setLeft(left, source);\r\n                });\r\n            } else {\r\n                // otherwise normal LTR, we start at zero\r\n                let left = 0;\r\n                columns.forEach((column) => {\r\n                    column.setLeft(left, source);\r\n                    left += column.getActualWidth();\r\n                });\r\n            }\r\n            _removeAllFromUnorderedArray(allColumns, columns);\r\n        });\r\n\r\n        // items left in allColumns are columns not displayed, so remove the left position. this is\r\n        // important for the rows, as if a col is made visible, then taken out, then made visible again,\r\n        // we don't want the animation of the cell floating in from the old position, whatever that was.\r\n        allColumns.forEach((column) => {\r\n            column.setLeft(null, source);\r\n        });\r\n    }\r\n\r\n    private joinCols(): void {\r\n        if (this.gos.get('enableRtl')) {\r\n            this.allCols = this.rightCols.concat(this.centerCols).concat(this.leftCols);\r\n        } else {\r\n            this.allCols = this.leftCols.concat(this.centerCols).concat(this.rightCols);\r\n        }\r\n    }\r\n\r\n    public getAllTrees(): (AgColumn | AgColumnGroup)[] | null {\r\n        if (this.treeLeft && this.treeRight && this.treeCenter) {\r\n            return this.treeLeft.concat(this.treeCenter).concat(this.treeRight);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // gridPanel -> ensureColumnVisible\r\n    public isColDisplayed(column: AgColumn): boolean {\r\n        return this.allCols.indexOf(column as AgColumn) >= 0;\r\n    }\r\n\r\n    public getLeftColsForRow(rowNode: RowNode): AgColumn[] {\r\n        const {\r\n            leftCols,\r\n            beans: { colModel },\r\n        } = this;\r\n        const colSpanActive = colModel.colSpanActive;\r\n        if (!colSpanActive) {\r\n            return leftCols;\r\n        }\r\n\r\n        return this.getColsForRow(rowNode, leftCols);\r\n    }\r\n\r\n    public getRightColsForRow(rowNode: RowNode): AgColumn[] {\r\n        const {\r\n            rightCols,\r\n            beans: { colModel },\r\n        } = this;\r\n        const colSpanActive = colModel.colSpanActive;\r\n        if (!colSpanActive) {\r\n            return rightCols;\r\n        }\r\n\r\n        return this.getColsForRow(rowNode, rightCols);\r\n    }\r\n\r\n    public getColsForRow(\r\n        rowNode: RowNode,\r\n        displayedColumns: AgColumn[],\r\n        filterCallback?: (column: AgColumn) => boolean,\r\n        emptySpaceBeforeColumn?: (column: AgColumn) => boolean\r\n    ): AgColumn[] {\r\n        const result: AgColumn[] = [];\r\n        let lastConsideredCol: AgColumn | null = null;\r\n\r\n        for (let i = 0; i < displayedColumns.length; i++) {\r\n            const col = displayedColumns[i] as AgColumn;\r\n            const maxAllowedColSpan = displayedColumns.length - i;\r\n            const colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);\r\n            const columnsToCheckFilter: AgColumn[] = [col];\r\n\r\n            if (colSpan > 1) {\r\n                const colsToRemove = colSpan - 1;\r\n\r\n                for (let j = 1; j <= colsToRemove; j++) {\r\n                    columnsToCheckFilter.push(displayedColumns[i + j]);\r\n                }\r\n\r\n                i += colsToRemove;\r\n            }\r\n\r\n            // see which cols we should take out for column virtualisation\r\n            let filterPasses: boolean;\r\n\r\n            if (filterCallback) {\r\n                // if user provided a callback, means some columns may not be in the viewport.\r\n                // the user will NOT provide a callback if we are talking about pinned areas,\r\n                // as pinned areas have no horizontal scroll and do not virtualise the columns.\r\n                // if lots of columns, that means column spanning, and we set filterPasses = true\r\n                // if one or more of the columns spanned pass the filter.\r\n                filterPasses = false;\r\n                columnsToCheckFilter.forEach((colForFilter) => {\r\n                    if (filterCallback(colForFilter)) {\r\n                        filterPasses = true;\r\n                    }\r\n                });\r\n            } else {\r\n                filterPasses = true;\r\n            }\r\n\r\n            if (filterPasses) {\r\n                if (result.length === 0 && lastConsideredCol) {\r\n                    const gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;\r\n                    if (gapBeforeColumn) {\r\n                        result.push(lastConsideredCol);\r\n                    }\r\n                }\r\n                result.push(col);\r\n            }\r\n\r\n            lastConsideredCol = col;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getContainerWidth(pinned: ColumnPinnedType): number {\r\n        switch (pinned) {\r\n            case 'left':\r\n                return this.leftWidth;\r\n            case 'right':\r\n                return this.rightWidth;\r\n            default:\r\n                return this.bodyWidth;\r\n        }\r\n    }\r\n\r\n    public getColBefore(col: AgColumn): AgColumn | null {\r\n        const allDisplayedColumns = this.allCols;\r\n        const oldIndex = allDisplayedColumns.indexOf(col as AgColumn);\r\n\r\n        if (oldIndex > 0) {\r\n            return allDisplayedColumns[oldIndex - 1];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public isPinningLeft(): boolean {\r\n        return this.leftCols.length > 0;\r\n    }\r\n\r\n    public isPinningRight(): boolean {\r\n        return this.rightCols.length > 0;\r\n    }\r\n\r\n    private updateColsAndGroupsMap(): void {\r\n        this.colsAndGroupsMap = {};\r\n\r\n        const func = (child: AgColumn | AgColumnGroup) => {\r\n            this.colsAndGroupsMap[child.getUniqueId()] = child;\r\n        };\r\n\r\n        depthFirstAllColumnTreeSearch(this.treeCenter, false, func);\r\n        depthFirstAllColumnTreeSearch(this.treeLeft, false, func);\r\n        depthFirstAllColumnTreeSearch(this.treeRight, false, func);\r\n    }\r\n\r\n    public isVisible(item: AgColumn | AgColumnGroup): boolean {\r\n        const fromMap = this.colsAndGroupsMap[item.getUniqueId()];\r\n        // check for reference, in case new column / group with same id is now present\r\n        return fromMap === item;\r\n    }\r\n\r\n    public getFirstColumn(): AgColumn | null {\r\n        const isRtl = this.gos.get('enableRtl');\r\n        const queryOrder: ('leftCols' | 'centerCols' | 'rightCols')[] = ['leftCols', 'centerCols', 'rightCols'];\r\n\r\n        if (isRtl) {\r\n            queryOrder.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < queryOrder.length; i++) {\r\n            const container = this[queryOrder[i]];\r\n            if (container.length) {\r\n                return isRtl ? _last(container) : container[0];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // used by:\r\n    // + rowRenderer -> for navigation\r\n    public getColAfter(col: AgColumn): AgColumn | null {\r\n        const allDisplayedColumns = this.allCols;\r\n        const oldIndex = allDisplayedColumns.indexOf(col as AgColumn);\r\n\r\n        if (oldIndex < allDisplayedColumns.length - 1) {\r\n            return allDisplayedColumns[oldIndex + 1];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // used by:\r\n    // + angularGrid -> setting pinned body width\r\n    // note: this should be cached\r\n    public getColsLeftWidth() {\r\n        return getWidthOfColsInList(this.leftCols);\r\n    }\r\n\r\n    // note: this should be cached\r\n    public getDisplayedColumnsRightWidth() {\r\n        return getWidthOfColsInList(this.rightCols);\r\n    }\r\n\r\n    public isColAtEdge(col: AgColumn | AgColumnGroup, edge: 'first' | 'last'): boolean {\r\n        const allColumns = this.allCols;\r\n        if (!allColumns.length) {\r\n            return false;\r\n        }\r\n\r\n        const isFirst = edge === 'first';\r\n\r\n        let columnToCompare: AgColumn;\r\n        if (isColumnGroup(col)) {\r\n            const leafColumns = col.getDisplayedLeafColumns();\r\n            if (!leafColumns.length) {\r\n                return false;\r\n            }\r\n\r\n            columnToCompare = isFirst ? leafColumns[0] : _last(leafColumns);\r\n        } else {\r\n            columnToCompare = col;\r\n        }\r\n\r\n        return (isFirst ? allColumns[0] : _last(allColumns)) === columnToCompare;\r\n    }\r\n}\r\n\r\nexport function depthFirstAllColumnTreeSearch(\r\n    tree: (AgColumn | AgColumnGroup)[] | null,\r\n    useDisplayedChildren: boolean,\r\n    callback: (treeNode: AgColumn | AgColumnGroup) => void\r\n): void {\r\n    if (!tree) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < tree.length; i++) {\r\n        const child = tree[i];\r\n        if (isColumnGroup(child)) {\r\n            const childTree = useDisplayedChildren ? child.getDisplayedChildren() : child.getChildren();\r\n            depthFirstAllColumnTreeSearch(childTree, useDisplayedChildren, callback);\r\n        }\r\n        callback(child);\r\n    }\r\n}\r\n\r\nfunction pickDisplayedCols(tree: (AgColumn | AgColumnGroup)[]): AgColumn[] {\r\n    const res: AgColumn[] = [];\r\n    depthFirstAllColumnTreeSearch(tree, true, (child) => {\r\n        if (isColumn(child)) {\r\n            res.push(child);\r\n        }\r\n    });\r\n    return res;\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { createUniqueColumnGroupId, isColumnGroup } from '../../entities/agColumnGroup';\r\nimport { AgColumnGroup } from '../../entities/agColumnGroup';\r\nimport { AgProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\r\nimport { isProvidedColumnGroup } from '../../entities/agProvidedColumnGroup';\r\nimport type { ColGroupDef } from '../../entities/colDef';\r\nimport type { ColumnEventType } from '../../events';\r\nimport type { ColumnPinnedType, HeaderColumnId } from '../../interfaces/iColumn';\r\nimport { _last } from '../../utils/array';\r\nimport { _exists } from '../../utils/generic';\r\nimport { _recursivelyCreateColumns, depthFirstOriginalTreeSearch } from '../columnFactoryUtils';\r\nimport type { ColumnKeyCreator } from '../columnKeyCreator';\r\nimport type { GroupInstanceIdCreator } from '../groupInstanceIdCreator';\r\nimport { depthFirstAllColumnTreeSearch } from '../visibleColsService';\r\n\r\nexport interface CreateGroupsParams {\r\n    // all displayed columns sorted - this is the columns the grid should show\r\n    columns: AgColumn[];\r\n    // creates unique id's for the group\r\n    idCreator: GroupInstanceIdCreator;\r\n    // whether it's left, right or center col\r\n    pinned: ColumnPinnedType;\r\n    // we try to reuse old groups if we can, to allow gui to do animation\r\n    oldDisplayedGroups?: (AgColumn | AgColumnGroup)[];\r\n    // set `isStandaloneStructure` to true if this structure will not be used\r\n    // by the grid UI. This is useful for export modules (gridSerializer).\r\n    isStandaloneStructure?: boolean;\r\n}\r\n\r\nexport class ColumnGroupService extends BeanStub implements NamedBean {\r\n    beanName = 'colGroupSvc' as const;\r\n\r\n    public getColumnGroupState(): { groupId: string; open: boolean }[] {\r\n        const columnGroupState: { groupId: string; open: boolean }[] = [];\r\n        const gridBalancedTree = this.beans.colModel.getColTree();\r\n\r\n        depthFirstOriginalTreeSearch(null, gridBalancedTree, (node) => {\r\n            if (isProvidedColumnGroup(node)) {\r\n                columnGroupState.push({\r\n                    groupId: node.getGroupId(),\r\n                    open: node.isExpanded(),\r\n                });\r\n            }\r\n        });\r\n\r\n        return columnGroupState;\r\n    }\r\n\r\n    public resetColumnGroupState(source: ColumnEventType): void {\r\n        const primaryColumnTree = this.beans.colModel.getColDefColTree();\r\n        if (!primaryColumnTree) {\r\n            return;\r\n        }\r\n\r\n        const stateItems: { groupId: string; open: boolean | undefined }[] = [];\r\n\r\n        depthFirstOriginalTreeSearch(null, primaryColumnTree, (child) => {\r\n            if (isProvidedColumnGroup(child)) {\r\n                const colGroupDef = child.getColGroupDef();\r\n                const groupState = {\r\n                    groupId: child.getGroupId(),\r\n                    open: !colGroupDef ? undefined : colGroupDef.openByDefault,\r\n                };\r\n                stateItems.push(groupState);\r\n            }\r\n        });\r\n\r\n        this.setColumnGroupState(stateItems, source);\r\n    }\r\n\r\n    public setColumnGroupState(\r\n        stateItems: { groupId: string; open: boolean | undefined }[],\r\n        source: ColumnEventType\r\n    ): void {\r\n        const { colModel, colAnimation, visibleCols, eventSvc } = this.beans;\r\n        const gridBalancedTree = colModel.getColTree();\r\n        if (!gridBalancedTree) {\r\n            return;\r\n        }\r\n\r\n        colAnimation?.start();\r\n\r\n        const impactedGroups: AgProvidedColumnGroup[] = [];\r\n\r\n        stateItems.forEach((stateItem) => {\r\n            const groupKey = stateItem.groupId;\r\n            const newValue = stateItem.open;\r\n            const providedColumnGroup = this.getProvidedColGroup(groupKey);\r\n\r\n            if (!providedColumnGroup) {\r\n                return;\r\n            }\r\n            if (providedColumnGroup.isExpanded() === newValue) {\r\n                return;\r\n            }\r\n\r\n            providedColumnGroup.setExpanded(newValue);\r\n            impactedGroups.push(providedColumnGroup);\r\n        });\r\n\r\n        visibleCols.refresh(source, true);\r\n\r\n        if (impactedGroups.length) {\r\n            eventSvc.dispatchEvent({\r\n                type: 'columnGroupOpened',\r\n                columnGroup: impactedGroups.length === 1 ? impactedGroups[0] : undefined,\r\n                columnGroups: impactedGroups,\r\n            });\r\n        }\r\n\r\n        colAnimation?.finish();\r\n    }\r\n\r\n    // called by headerRenderer - when a header is opened or closed\r\n    public setColumnGroupOpened(\r\n        key: AgProvidedColumnGroup | string | null,\r\n        newValue: boolean,\r\n        source: ColumnEventType\r\n    ): void {\r\n        let keyAsString: string;\r\n\r\n        if (isProvidedColumnGroup(key)) {\r\n            keyAsString = key.getId();\r\n        } else {\r\n            keyAsString = key || '';\r\n        }\r\n        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);\r\n    }\r\n\r\n    public getProvidedColGroup(key: string): AgProvidedColumnGroup | null {\r\n        let res: AgProvidedColumnGroup | null = null;\r\n\r\n        depthFirstOriginalTreeSearch(null, this.beans.colModel.getColTree(), (node) => {\r\n            if (isProvidedColumnGroup(node)) {\r\n                if (node.getId() === key) {\r\n                    res = node;\r\n                }\r\n            }\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    public getGroupAtDirection(columnGroup: AgColumnGroup, direction: 'After' | 'Before'): AgColumnGroup | null {\r\n        // pick the last displayed column in this group\r\n        const requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();\r\n        const colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();\r\n        const col: AgColumn | null = direction === 'After' ? _last(colGroupLeafColumns) : colGroupLeafColumns[0];\r\n        const getDisplayColMethod: 'getColAfter' | 'getColBefore' = `getCol${direction}` as any;\r\n\r\n        while (true) {\r\n            // keep moving to the next col, until we get to another group\r\n            const column = this.beans.visibleCols[getDisplayColMethod](col);\r\n\r\n            if (!column) {\r\n                return null;\r\n            }\r\n\r\n            const groupPointer = this.getColGroupAtLevel(column, requiredLevel);\r\n\r\n            if (groupPointer !== columnGroup) {\r\n                return groupPointer;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getColGroupAtLevel(column: AgColumn, level: number): AgColumnGroup | null {\r\n        // get group at same level as the one we are looking for\r\n        let groupPointer: AgColumnGroup = column.getParent()!;\r\n        let originalGroupLevel: number;\r\n        let groupPointerLevel: number;\r\n\r\n        while (true) {\r\n            const groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();\r\n            originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();\r\n            groupPointerLevel = groupPointer.getPaddingLevel();\r\n\r\n            if (originalGroupLevel + groupPointerLevel <= level) {\r\n                break;\r\n            }\r\n            groupPointer = groupPointer.getParent()!;\r\n        }\r\n\r\n        return groupPointer;\r\n    }\r\n\r\n    public updateOpenClosedVisibility(): void {\r\n        const allColumnGroups = this.beans.visibleCols.getAllTrees();\r\n\r\n        depthFirstAllColumnTreeSearch(allColumnGroups, false, (child) => {\r\n            if (isColumnGroup(child)) {\r\n                child.calculateDisplayedColumns();\r\n            }\r\n        });\r\n    }\r\n\r\n    // returns the group with matching colId and instanceId. If instanceId is missing,\r\n    // matches only on the colId.\r\n    public getColumnGroup(colId: string | AgColumnGroup, partId?: number): AgColumnGroup | null {\r\n        if (!colId) {\r\n            return null;\r\n        }\r\n        if (isColumnGroup(colId)) {\r\n            return colId;\r\n        }\r\n\r\n        const allColumnGroups = this.beans.visibleCols.getAllTrees();\r\n        const checkPartId = typeof partId === 'number';\r\n        let result: AgColumnGroup | null = null;\r\n\r\n        depthFirstAllColumnTreeSearch(allColumnGroups, false, (child) => {\r\n            if (isColumnGroup(child)) {\r\n                const columnGroup = child;\r\n                let matched: boolean;\r\n\r\n                if (checkPartId) {\r\n                    matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();\r\n                } else {\r\n                    matched = colId === columnGroup.getGroupId();\r\n                }\r\n\r\n                if (matched) {\r\n                    result = columnGroup;\r\n                }\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public createColumnGroups(params: CreateGroupsParams): (AgColumn | AgColumnGroup)[] {\r\n        const { columns, idCreator, pinned, oldDisplayedGroups, isStandaloneStructure } = params;\r\n        const oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups!);\r\n\r\n        /**\r\n         * The following logic starts at the leaf level of columns, iterating through them to build their parent\r\n         * groups when the parents match.\r\n         *\r\n         * The created groups are then added to an array, and similarly iterated on until we reach the top level.\r\n         *\r\n         * When row groups have no original parent, it's added to the result.\r\n         */\r\n        const topLevelResultCols: (AgColumn | AgColumnGroup)[] = [];\r\n\r\n        // this is an array of cols or col groups at one level of depth, starting from leaf and ending at root\r\n        let groupsOrColsAtCurrentLevel: (AgColumn | AgColumnGroup)[] = columns as AgColumn[];\r\n        while (groupsOrColsAtCurrentLevel.length) {\r\n            // store what's currently iterating so the function can build the next level of col groups\r\n            const currentlyIterating = groupsOrColsAtCurrentLevel;\r\n            groupsOrColsAtCurrentLevel = [];\r\n\r\n            // store the index of the last row which was different from the previous row, this is used as a slice\r\n            // index for finding the children to group together\r\n            let lastGroupedColIdx = 0;\r\n\r\n            // create a group of children from lastGroupedColIdx to the provided `to` parameter\r\n            const createGroupToIndex = (to: number) => {\r\n                const from = lastGroupedColIdx;\r\n                lastGroupedColIdx = to;\r\n\r\n                const previousNode = currentlyIterating[from];\r\n                const previousNodeProvided = isColumnGroup(previousNode)\r\n                    ? previousNode.getProvidedColumnGroup()\r\n                    : previousNode;\r\n                const previousNodeParent = previousNodeProvided.getOriginalParent() as AgProvidedColumnGroup | null;\r\n\r\n                if (previousNodeParent == null) {\r\n                    // if the last node was different, and had a null parent, then we add all the nodes to the final\r\n                    // results)\r\n                    for (let i = from; i < to; i++) {\r\n                        topLevelResultCols.push(currentlyIterating[i]);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // the parent differs from the previous node, so we create a group from the previous node\r\n                // and add all to the result array, except the current node.\r\n                const newGroup = this.createColumnGroup(\r\n                    previousNodeParent,\r\n                    idCreator,\r\n                    oldColumnsMapped,\r\n                    pinned,\r\n                    isStandaloneStructure\r\n                );\r\n\r\n                for (let i = from; i < to; i++) {\r\n                    newGroup.addChild(currentlyIterating[i]);\r\n                }\r\n                groupsOrColsAtCurrentLevel.push(newGroup);\r\n            };\r\n\r\n            for (let i = 1; i < currentlyIterating.length; i++) {\r\n                const thisNode = currentlyIterating[i];\r\n                const thisNodeProvided = isColumnGroup(thisNode) ? thisNode.getProvidedColumnGroup() : thisNode;\r\n                const thisNodeParent = thisNodeProvided.getOriginalParent();\r\n\r\n                const previousNode = currentlyIterating[lastGroupedColIdx];\r\n                const previousNodeProvided = isColumnGroup(previousNode)\r\n                    ? previousNode.getProvidedColumnGroup()\r\n                    : previousNode;\r\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\r\n\r\n                if (thisNodeParent !== previousNodeParent) {\r\n                    createGroupToIndex(i);\r\n                }\r\n            }\r\n\r\n            if (lastGroupedColIdx < currentlyIterating.length) {\r\n                createGroupToIndex(currentlyIterating.length);\r\n            }\r\n        }\r\n\r\n        if (!isStandaloneStructure) {\r\n            this.setupParentsIntoCols(topLevelResultCols, null);\r\n        }\r\n        return topLevelResultCols;\r\n    }\r\n\r\n    public createProvidedColumnGroup(\r\n        primaryColumns: boolean,\r\n        colGroupDef: ColGroupDef,\r\n        level: number,\r\n        existingColumns: AgColumn[],\r\n        columnKeyCreator: ColumnKeyCreator,\r\n        existingGroups: AgProvidedColumnGroup[],\r\n        source: ColumnEventType\r\n    ): AgProvidedColumnGroup {\r\n        const groupId = columnKeyCreator.getUniqueKey(colGroupDef.groupId || null, null);\r\n        const colGroupDefMerged = this.createMergedColGroupDef(colGroupDef, groupId);\r\n        const providedGroup = new AgProvidedColumnGroup(colGroupDefMerged, groupId, false, level);\r\n        this.createBean(providedGroup);\r\n        const existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);\r\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\r\n        // one column instance for colDef with common id\r\n        if (existingGroupAndIndex) {\r\n            existingGroups.splice(existingGroupAndIndex.idx, 1);\r\n        }\r\n\r\n        const existingGroup = existingGroupAndIndex?.group;\r\n        if (existingGroup) {\r\n            providedGroup.setExpanded(existingGroup.isExpanded());\r\n        }\r\n\r\n        const children = _recursivelyCreateColumns(\r\n            this.beans,\r\n            colGroupDefMerged.children,\r\n            level + 1,\r\n            primaryColumns,\r\n            existingColumns,\r\n            columnKeyCreator,\r\n            existingGroups,\r\n            source\r\n        );\r\n\r\n        providedGroup.setChildren(children);\r\n\r\n        return providedGroup;\r\n    }\r\n\r\n    public balanceColumnTree(\r\n        unbalancedTree: (AgColumn | AgProvidedColumnGroup)[],\r\n        currentDept: number,\r\n        columnDept: number,\r\n        columnKeyCreator: ColumnKeyCreator\r\n    ): (AgColumn | AgProvidedColumnGroup)[] {\r\n        const result: (AgColumn | AgProvidedColumnGroup)[] = [];\r\n\r\n        // go through each child, for groups, recurse a level deeper,\r\n        // for columns we need to pad\r\n        for (let i = 0; i < unbalancedTree.length; i++) {\r\n            const child = unbalancedTree[i];\r\n            if (isProvidedColumnGroup(child)) {\r\n                // child is a group, all we do is go to the next level of recursion\r\n                const originalGroup = child;\r\n                const newChildren = this.balanceColumnTree(\r\n                    originalGroup.getChildren(),\r\n                    currentDept + 1,\r\n                    columnDept,\r\n                    columnKeyCreator\r\n                );\r\n                originalGroup.setChildren(newChildren);\r\n                result.push(originalGroup);\r\n            } else {\r\n                // child is a column - so here we add in the padded column groups if needed\r\n                let firstPaddedGroup: AgProvidedColumnGroup | undefined;\r\n                let currentPaddedGroup: AgProvidedColumnGroup | undefined;\r\n\r\n                // this for loop will NOT run any loops if no padded column groups are needed\r\n                for (let j = columnDept - 1; j >= currentDept; j--) {\r\n                    const newColId = columnKeyCreator.getUniqueKey(null, null);\r\n                    const colGroupDefMerged = this.createMergedColGroupDef(null, newColId);\r\n\r\n                    const paddedGroup = new AgProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);\r\n                    this.createBean(paddedGroup);\r\n\r\n                    if (currentPaddedGroup) {\r\n                        currentPaddedGroup.setChildren([paddedGroup]);\r\n                    }\r\n\r\n                    currentPaddedGroup = paddedGroup;\r\n\r\n                    if (!firstPaddedGroup) {\r\n                        firstPaddedGroup = currentPaddedGroup;\r\n                    }\r\n                }\r\n\r\n                // likewise this if statement will not run if no padded groups\r\n                if (firstPaddedGroup && currentPaddedGroup) {\r\n                    result.push(firstPaddedGroup);\r\n                    const hasGroups = unbalancedTree.some((leaf) => isProvidedColumnGroup(leaf));\r\n\r\n                    if (hasGroups) {\r\n                        currentPaddedGroup.setChildren([child]);\r\n                        continue;\r\n                    } else {\r\n                        currentPaddedGroup.setChildren(unbalancedTree);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                result.push(child);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public findDepth(balancedColumnTree: (AgColumn | AgProvidedColumnGroup)[]): number {\r\n        let depth = 0;\r\n        let pointer = balancedColumnTree;\r\n\r\n        while (pointer && pointer[0] && isProvidedColumnGroup(pointer[0])) {\r\n            depth++;\r\n            pointer = (pointer[0] as AgProvidedColumnGroup).getChildren();\r\n        }\r\n        return depth;\r\n    }\r\n\r\n    public findMaxDepth(treeChildren: (AgColumn | AgProvidedColumnGroup)[], depth: number): number {\r\n        let maxDeptThisLevel = depth;\r\n\r\n        for (let i = 0; i < treeChildren.length; i++) {\r\n            const abstractColumn = treeChildren[i];\r\n            if (isProvidedColumnGroup(abstractColumn)) {\r\n                const originalGroup = abstractColumn;\r\n                const newDept = this.findMaxDepth(originalGroup.getChildren(), depth + 1);\r\n                if (maxDeptThisLevel < newDept) {\r\n                    maxDeptThisLevel = newDept;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxDeptThisLevel;\r\n    }\r\n\r\n    /**\r\n     * Inserts dummy group columns in the hierarchy above auto-generated columns\r\n     * in order to ensure auto-generated columns are leaf nodes (and therefore are\r\n     * displayed correctly)\r\n     */\r\n    public balanceTreeForAutoCols(autoCols: AgColumn[], depth: number): (AgColumn | AgProvidedColumnGroup)[] {\r\n        const tree: (AgColumn | AgProvidedColumnGroup)[] = [];\r\n\r\n        autoCols.forEach((col) => {\r\n            // at the end, this will be the top of the tree item.\r\n            let nextChild: AgColumn | AgProvidedColumnGroup = col;\r\n\r\n            for (let i = depth - 1; i >= 0; i--) {\r\n                const autoGroup = new AgProvidedColumnGroup(null, `FAKE_PATH_${col.getId()}}_${i}`, true, i);\r\n                this.createBean(autoGroup);\r\n                autoGroup.setChildren([nextChild]);\r\n                nextChild.originalParent = autoGroup;\r\n                nextChild = autoGroup;\r\n            }\r\n\r\n            if (depth === 0) {\r\n                col.originalParent = null;\r\n            }\r\n\r\n            // at this point, the nextChild is the top most item in the tree\r\n            tree.push(nextChild);\r\n        });\r\n\r\n        return tree;\r\n    }\r\n\r\n    private createMergedColGroupDef(colGroupDef: ColGroupDef | null, groupId: string): ColGroupDef {\r\n        const colGroupDefMerged: ColGroupDef = {} as ColGroupDef;\r\n        const { gos, validation } = this.beans;\r\n        Object.assign(colGroupDefMerged, gos.get('defaultColGroupDef'));\r\n        Object.assign(colGroupDefMerged, colGroupDef);\r\n        validation?.validateColDef(colGroupDefMerged, groupId);\r\n\r\n        return colGroupDefMerged;\r\n    }\r\n\r\n    private findExistingGroup(\r\n        newGroupDef: ColGroupDef,\r\n        existingGroups: AgProvidedColumnGroup[]\r\n    ): { idx: number; group: AgProvidedColumnGroup } | undefined {\r\n        const newHasId = newGroupDef.groupId != null;\r\n        if (!newHasId) {\r\n            return undefined;\r\n        }\r\n\r\n        for (let i = 0; i < existingGroups.length; i++) {\r\n            const existingGroup = existingGroups[i];\r\n            const existingDef = existingGroup.getColGroupDef();\r\n            if (!existingDef) {\r\n                continue;\r\n            }\r\n\r\n            if (existingGroup.getId() === newGroupDef.groupId) {\r\n                return { idx: i, group: existingGroup };\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private createColumnGroup(\r\n        providedGroup: AgProvidedColumnGroup,\r\n        groupInstanceIdCreator: GroupInstanceIdCreator,\r\n        oldColumnsMapped: { [key: string]: AgColumnGroup },\r\n        pinned: ColumnPinnedType,\r\n        isStandaloneStructure?: boolean\r\n    ): AgColumnGroup {\r\n        const groupId = providedGroup.getGroupId();\r\n        const instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);\r\n        const uniqueId = createUniqueColumnGroupId(groupId, instanceId);\r\n\r\n        let columnGroup: AgColumnGroup | null = oldColumnsMapped[uniqueId];\r\n\r\n        // if the user is setting new colDefs, it is possible that the id's overlap, and we\r\n        // would have a false match from above. so we double check we are talking about the\r\n        // same original column group.\r\n        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {\r\n            columnGroup = null;\r\n        }\r\n\r\n        if (_exists(columnGroup)) {\r\n            // clean out the old column group here, as we will be adding children into it again\r\n            columnGroup.reset();\r\n        } else {\r\n            columnGroup = new AgColumnGroup(providedGroup, groupId, instanceId, pinned);\r\n            if (!isStandaloneStructure) {\r\n                this.createBean(columnGroup);\r\n            }\r\n        }\r\n\r\n        return columnGroup;\r\n    }\r\n\r\n    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup\r\n    private mapOldGroupsById(displayedGroups: (AgColumn | AgColumnGroup)[]): {\r\n        [uniqueId: string]: AgColumnGroup;\r\n    } {\r\n        const result: { [uniqueId: HeaderColumnId]: AgColumnGroup } = {};\r\n\r\n        const recursive = (columnsOrGroups: (AgColumn | AgColumnGroup)[] | null) => {\r\n            columnsOrGroups!.forEach((columnOrGroup) => {\r\n                if (isColumnGroup(columnOrGroup)) {\r\n                    const columnGroup = columnOrGroup;\r\n                    result[columnOrGroup.getUniqueId()] = columnGroup;\r\n                    recursive(columnGroup.getChildren());\r\n                }\r\n            });\r\n        };\r\n\r\n        if (displayedGroups) {\r\n            recursive(displayedGroups);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private setupParentsIntoCols(\r\n        columnsOrGroups: (AgColumn | AgColumnGroup)[] | null,\r\n        parent: AgColumnGroup | null\r\n    ): void {\r\n        columnsOrGroups!.forEach((columnsOrGroup) => {\r\n            columnsOrGroup.parent = parent;\r\n            if (isColumnGroup(columnsOrGroup)) {\r\n                const columnGroup = columnsOrGroup;\r\n                this.setupParentsIntoCols(columnGroup.getChildren(), columnGroup);\r\n            }\r\n        });\r\n    }\r\n}\r\n", "import type { _ColumnGroupGridApi } from '../../api/gridApi';\r\nimport { HeaderGroupCellCtrl } from '../../headerRendering/cells/columnGroup/headerGroupCellCtrl';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport {\r\n    getAllDisplayedColumnGroups,\r\n    getCenterDisplayedColumnGroups,\r\n    getColumnGroup,\r\n    getColumnGroupState,\r\n    getDisplayNameForColumnGroup,\r\n    getLeftDisplayedColumnGroups,\r\n    getProvidedColumnGroup,\r\n    getRightDisplayedColumnGroups,\r\n    resetColumnGroupState,\r\n    setColumnGroupOpened,\r\n    setColumnGroupState,\r\n} from './columnGroupApi';\r\nimport { ColumnGroupService } from './columnGroupService';\r\n\r\n/**\r\n * @feature Columns -> Column Groups\r\n * @colGroupDef\r\n */\r\nexport const ColumnGroupModule: _ModuleWithApi<_ColumnGroupGridApi> = {\r\n    moduleName: 'ColumnGroup',\r\n    version: VERSION,\r\n    dynamicBeans: { headerGroupCellCtrl: HeaderGroupCellCtrl as any },\r\n    beans: [ColumnGroupService],\r\n    apiFunctions: {\r\n        getAllDisplayedColumnGroups,\r\n        getCenterDisplayedColumnGroups,\r\n        getColumnGroup,\r\n        getColumnGroupState,\r\n        getDisplayNameForColumnGroup,\r\n        getLeftDisplayedColumnGroups,\r\n        getProvidedColumnGroup,\r\n        getRightDisplayedColumnGroups,\r\n        resetColumnGroupState,\r\n        setColumnGroupOpened,\r\n        setColumnGroupState,\r\n    },\r\n};\r\n", "import type { _ModuleWithoutApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { CheckboxCellRenderer } from './checkboxCellRenderer';\r\n\r\n/**\r\n * @feature Cells -> Cell Data Types\r\n * @colDef cellDataType\r\n */\r\nexport const CheckboxCellRendererModule: _ModuleWithoutApi = {\r\n    moduleName: 'CheckboxCellRenderer',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agCheckboxCellRenderer: CheckboxCellRenderer,\r\n    },\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColDef, ColGroupDef, HeaderLocation } from '../entities/colDef';\r\nimport type { Column, ColumnPinnedType } from '../interfaces/iColumn';\r\nimport { _applyColumnState, _getColumnState, _resetColumnState } from './columnStateUtils';\r\nimport type { ApplyColumnStateParams, ColumnState } from './columnStateUtils';\r\n\r\nexport type ColumnChangedEventType = 'columnValueChanged' | 'columnPivotChanged' | 'columnRowGroupChanged';\r\n\r\nexport function getColumnDef<TValue = any, TData = any>(\r\n    beans: BeanCollection,\r\n    key: string | Column<TValue>\r\n): ColDef<TData, TValue> | null {\r\n    const column = beans.colModel.getColDefCol(key);\r\n    if (column) {\r\n        return column.getColDef();\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getColumnDefs<TData = any>(beans: BeanCollection): (ColDef<TData> | ColGroupDef<TData>)[] | undefined {\r\n    return beans.colModel.getColumnDefs();\r\n}\r\n\r\nexport function getDisplayNameForColumn(beans: BeanCollection, column: Column, location: HeaderLocation): string {\r\n    return beans.colNames.getDisplayNameForColumn(column as AgColumn, location) || '';\r\n}\r\n\r\nexport function getColumn<TValue = any, TData = any>(\r\n    beans: BeanCollection,\r\n    key: string | ColDef<TData, TValue> | Column<TValue>\r\n): Column<TValue> | null {\r\n    return beans.colModel.getColDefCol(key);\r\n}\r\n\r\nexport function getColumns(beans: BeanCollection): Column[] | null {\r\n    return beans.colModel.getColDefCols();\r\n}\r\n\r\nexport function applyColumnState(beans: BeanCollection, params: ApplyColumnStateParams): boolean {\r\n    return _applyColumnState(beans, params, 'api');\r\n}\r\n\r\nexport function getColumnState(beans: BeanCollection): ColumnState[] {\r\n    return _getColumnState(beans);\r\n}\r\n\r\nexport function resetColumnState(beans: BeanCollection): void {\r\n    _resetColumnState(beans, 'api');\r\n}\r\n\r\nexport function isPinning(beans: BeanCollection): boolean {\r\n    return beans.visibleCols.isPinningLeft() || beans.visibleCols.isPinningRight();\r\n}\r\n\r\nexport function isPinningLeft(beans: BeanCollection): boolean {\r\n    return beans.visibleCols.isPinningLeft();\r\n}\r\n\r\nexport function isPinningRight(beans: BeanCollection): boolean {\r\n    return beans.visibleCols.isPinningRight();\r\n}\r\n\r\nexport function getDisplayedColAfter(beans: BeanCollection, col: Column): Column | null {\r\n    return beans.visibleCols.getColAfter(col as AgColumn);\r\n}\r\n\r\nexport function getDisplayedColBefore(beans: BeanCollection, col: Column): Column | null {\r\n    return beans.visibleCols.getColBefore(col as AgColumn);\r\n}\r\n\r\nexport function setColumnsVisible(beans: BeanCollection, keys: (string | Column)[], visible: boolean): void {\r\n    beans.colModel.setColsVisible(keys as (string | AgColumn)[], visible, 'api');\r\n}\r\n\r\nexport function setColumnsPinned(\r\n    beans: BeanCollection,\r\n    keys: (string | ColDef | Column)[],\r\n    pinned: ColumnPinnedType\r\n): void {\r\n    beans.pinnedCols?.setColsPinned(keys, pinned, 'api');\r\n}\r\n\r\nexport function getAllGridColumns(beans: BeanCollection): Column[] {\r\n    return beans.colModel.getCols();\r\n}\r\n\r\nexport function getDisplayedLeftColumns(beans: BeanCollection): Column[] {\r\n    return beans.visibleCols.leftCols;\r\n}\r\n\r\nexport function getDisplayedCenterColumns(beans: BeanCollection): Column[] {\r\n    return beans.visibleCols.centerCols;\r\n}\r\n\r\nexport function getDisplayedRightColumns(beans: BeanCollection): Column[] {\r\n    return beans.visibleCols.rightCols;\r\n}\r\n\r\nexport function getAllDisplayedColumns(beans: BeanCollection): Column[] {\r\n    return beans.visibleCols.allCols;\r\n}\r\n\r\nexport function getAllDisplayedVirtualColumns(beans: BeanCollection): Column[] {\r\n    return beans.colViewport.getViewportColumns();\r\n}\r\n", "import type { IColsService } from 'ag-grid-community';\r\n\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\r\nimport { SKIP_JS_BUILTINS } from '../utils/object';\r\n\r\n// returns copy of an object, doing a deep clone of any objects with that object.\r\n// this is used for eg creating copies of Column Definitions, where we want to\r\n// deep copy all objects, but do not want to deep copy functions (eg when user provides\r\n// a function or class for colDef.cellRenderer)\r\nexport function _deepCloneDefinition<T>(object: T, keysToSkip?: string[]): T | undefined {\r\n    if (!object) {\r\n        return;\r\n    }\r\n\r\n    const obj = object as any;\r\n    const res: any = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        if ((keysToSkip && keysToSkip.indexOf(key) >= 0) || SKIP_JS_BUILTINS.has(key)) {\r\n            return;\r\n        }\r\n\r\n        const value = obj[key];\r\n\r\n        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does\r\n        // NOT include the following:\r\n        // 1) arrays\r\n        // 2) functions or classes (eg api instance)\r\n        const sourceIsSimpleObject = typeof value === 'object' && value !== null && value.constructor === Object;\r\n\r\n        if (sourceIsSimpleObject) {\r\n            res[key] = _deepCloneDefinition(value);\r\n        } else {\r\n            res[key] = value;\r\n        }\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport class ColumnDefFactory extends BeanStub implements NamedBean {\r\n    beanName = 'colDefFactory' as const;\r\n\r\n    private rowGroupColsSvc?: IColsService;\r\n    private pivotColsSvc?: IColsService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.rowGroupColsSvc = beans.rowGroupColsSvc;\r\n        this.pivotColsSvc = beans.pivotColsSvc;\r\n    }\r\n\r\n    public getColumnDefs(\r\n        colDefColsList: AgColumn[],\r\n        showingPivotResult: boolean,\r\n        lastOrder: AgColumn[] | null,\r\n        colsList: AgColumn[]\r\n    ): (ColDef | ColGroupDef)[] | undefined {\r\n        const cols = colDefColsList.slice();\r\n\r\n        if (showingPivotResult) {\r\n            cols.sort((a, b) => lastOrder!.indexOf(a) - lastOrder!.indexOf(b));\r\n        } else if (lastOrder) {\r\n            cols.sort((a, b) => colsList.indexOf(a) - colsList.indexOf(b));\r\n        }\r\n\r\n        const rowGroupColumns = this.rowGroupColsSvc?.columns;\r\n        const pivotColumns = this.pivotColsSvc?.columns;\r\n\r\n        return this.buildColumnDefs(cols, rowGroupColumns, pivotColumns);\r\n    }\r\n\r\n    private buildColumnDefs(\r\n        cols: AgColumn[],\r\n        rowGroupColumns: AgColumn[] = [],\r\n        pivotColumns: AgColumn[] = []\r\n    ): (ColDef | ColGroupDef)[] {\r\n        const res: (ColDef | ColGroupDef)[] = [];\r\n\r\n        const colGroupDefs: { [id: string]: ColGroupDef } = {};\r\n\r\n        cols.forEach((col: AgColumn) => {\r\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\r\n\r\n            let addToResult = true;\r\n\r\n            let childDef: ColDef | ColGroupDef = colDef;\r\n\r\n            let pointer = col.getOriginalParent();\r\n            let lastPointer: AgProvidedColumnGroup | null = null;\r\n            while (pointer) {\r\n                let parentDef: ColGroupDef | null | undefined = null;\r\n\r\n                // we don't include padding groups, as the column groups provided\r\n                // by application didn't have these. the whole point of padding groups\r\n                // is to balance the column tree that the user provided.\r\n                if (pointer.isPadding()) {\r\n                    pointer = pointer.getOriginalParent();\r\n                    continue;\r\n                }\r\n\r\n                // if colDef for this group already exists, use it\r\n                const existingParentDef = colGroupDefs[pointer.getGroupId()];\r\n                if (existingParentDef) {\r\n                    existingParentDef.children.push(childDef);\r\n                    // if we added to result, it would be the second time we did it\r\n                    addToResult = false;\r\n                    // we don't want to continue up the tree, as it has already been\r\n                    // done for this group\r\n                    break;\r\n                }\r\n\r\n                parentDef = this.createDefFromGroup(pointer);\r\n\r\n                if (parentDef) {\r\n                    parentDef.children = [childDef];\r\n                    colGroupDefs[parentDef.groupId!] = parentDef;\r\n                    childDef = parentDef;\r\n                    pointer = pointer.getOriginalParent();\r\n                }\r\n\r\n                if (pointer != null && lastPointer === pointer) {\r\n                    addToResult = false;\r\n                    break;\r\n                }\r\n                // Ensure we don't get stuck in an infinite loop\r\n                lastPointer = pointer;\r\n            }\r\n\r\n            if (addToResult) {\r\n                res.push(childDef);\r\n            }\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    private createDefFromGroup(group: AgProvidedColumnGroup): ColGroupDef | null | undefined {\r\n        const defCloned = _deepCloneDefinition(group.getColGroupDef(), ['children']);\r\n\r\n        if (defCloned) {\r\n            defCloned.groupId = group.getGroupId();\r\n        }\r\n\r\n        return defCloned;\r\n    }\r\n\r\n    private createDefFromColumn(col: AgColumn, rowGroupColumns: AgColumn[], pivotColumns: AgColumn[]): ColDef {\r\n        const colDefCloned = _deepCloneDefinition(col.getColDef())!;\r\n\r\n        colDefCloned.colId = col.getColId();\r\n\r\n        colDefCloned.width = col.getActualWidth();\r\n        colDefCloned.rowGroup = col.isRowGroupActive();\r\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\r\n        colDefCloned.pivot = col.isPivotActive();\r\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\r\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\r\n        colDefCloned.hide = col.isVisible() ? undefined : true;\r\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\r\n\r\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\r\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\r\n\r\n        return colDefCloned;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColumnEventType } from '../events';\r\nimport { dispatchColumnResizedEvent } from './columnEventUtils';\r\n\r\ntype FlexItem = {\r\n    col: AgColumn;\r\n    isFlex: boolean;\r\n    flex: number;\r\n    min: number;\r\n    max: number;\r\n    initialSize: number;\r\n    targetSize: number;\r\n    frozenSize?: number;\r\n    violationType?: 'min' | 'max';\r\n};\r\n\r\nexport class ColumnFlexService extends BeanStub implements NamedBean {\r\n    beanName = 'colFlex' as const;\r\n\r\n    private flexViewportWidth: number;\r\n\r\n    public refreshFlexedColumns(\r\n        params: {\r\n            resizingCols?: AgColumn[];\r\n            skipSetLeft?: boolean;\r\n            viewportWidth?: number;\r\n            source?: ColumnEventType;\r\n            fireResizedEvent?: boolean;\r\n            updateBodyWidths?: boolean;\r\n        } = {}\r\n    ): AgColumn[] {\r\n        const source = params.source ? params.source : 'flex';\r\n\r\n        if (params.viewportWidth != null) {\r\n            this.flexViewportWidth = params.viewportWidth;\r\n        }\r\n\r\n        const totalSpace = this.flexViewportWidth;\r\n\r\n        if (!totalSpace) {\r\n            return [];\r\n        }\r\n\r\n        const { visibleCols } = this.beans;\r\n\r\n        const visibleCenterCols = visibleCols.centerCols;\r\n        let flexAfterDisplayIndex = -1;\r\n        if (params.resizingCols) {\r\n            const allResizingCols = new Set(params.resizingCols);\r\n            // find the last resizing col, as only cols after this one are affected by the resizing\r\n            for (let i = visibleCenterCols.length - 1; i >= 0; i--) {\r\n                if (allResizingCols.has(visibleCenterCols[i])) {\r\n                    flexAfterDisplayIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // NOTE this is an implementation of the \"Resolve Flexible Lengths\" part\r\n        // of the flex spec, simplified because we only support flex growing not\r\n        // shrinking, and don't support flex-basis.\r\n        // https://www.w3.org/TR/css-flexbox-1/#resolve-flexible-lengths\r\n        let hasFlexItems = false;\r\n        const items = visibleCenterCols.map((col, i): FlexItem => {\r\n            const flex = col.getFlex();\r\n            const isFlex = flex != null && flex > 0 && i > flexAfterDisplayIndex;\r\n\r\n            hasFlexItems ||= isFlex;\r\n\r\n            return {\r\n                col,\r\n                isFlex,\r\n                flex: Math.max(0, flex ?? 0),\r\n                initialSize: col.getActualWidth(),\r\n                min: col.getMinWidth(),\r\n                max: col.getMaxWidth(),\r\n                targetSize: 0,\r\n            };\r\n        });\r\n\r\n        if (!hasFlexItems) {\r\n            return [];\r\n        }\r\n\r\n        let unfrozenItemCount = items.length;\r\n        let unfrozenFlex = items.reduce((acc, item) => acc + item.flex, 0);\r\n        let unfrozenSpace = totalSpace;\r\n\r\n        const freeze = (item: FlexItem, width: number) => {\r\n            item.frozenSize = width;\r\n            item.col.setActualWidth(width, source);\r\n            unfrozenSpace -= width;\r\n            unfrozenFlex -= item.flex;\r\n            unfrozenItemCount -= 1;\r\n        };\r\n\r\n        const isFrozen = (item: FlexItem) => item.frozenSize != null;\r\n\r\n        // Freeze inflexible columns\r\n        for (const item of items) {\r\n            if (!item.isFlex) {\r\n                freeze(item, item.initialSize);\r\n            }\r\n        }\r\n\r\n        // a. Check for flexible items. If all the flex items on the line are\r\n        // frozen, free space has been distributed; exit this loop.\r\n        while (unfrozenItemCount > 0) {\r\n            // b. Calculate the remaining free space as for initial free space,\r\n            // above. If the sum of the unfrozen flex items\u2019 flex factors is\r\n            // less than one, multiply the initial free space by this sum.\r\n            const spaceToFill = Math.round(unfrozenFlex < 1 ? unfrozenSpace * unfrozenFlex : unfrozenSpace);\r\n\r\n            // c. Distribute free space proportional to the flex factors.\r\n            let lastUnfrozenItem: FlexItem | undefined;\r\n            let actualLeft = 0;\r\n            let idealRight = 0;\r\n\r\n            for (const item of items) {\r\n                if (isFrozen(item)) {\r\n                    continue;\r\n                }\r\n\r\n                lastUnfrozenItem = item;\r\n                idealRight += spaceToFill * (item.flex / unfrozenFlex);\r\n\r\n                const idealSize = idealRight - actualLeft;\r\n                const roundedSize = Math.round(idealSize);\r\n\r\n                item.targetSize = roundedSize;\r\n                actualLeft += roundedSize;\r\n            }\r\n\r\n            if (lastUnfrozenItem) {\r\n                // Correct cumulative rounding errors: adjust the size of the\r\n                // last item to fill any remaining space\r\n                lastUnfrozenItem.targetSize += spaceToFill - actualLeft;\r\n            }\r\n\r\n            // d. Fix min/max violations. Clamp each non-frozen item\u2019s target\r\n            // main size by its used min and max main sizes... If the item\u2019s\r\n            // target main size was made smaller by this, it\u2019s a max violation.\r\n            // If the item\u2019s target main size was made larger by this, it\u2019s a\r\n            // min violation.\r\n            let totalViolation = 0;\r\n            for (const item of items) {\r\n                if (isFrozen(item)) {\r\n                    continue;\r\n                }\r\n\r\n                const unclampedSize = item.targetSize;\r\n                const clampedSize = Math.min(Math.max(unclampedSize, item.min), item.max);\r\n\r\n                totalViolation += clampedSize - unclampedSize;\r\n                item.violationType =\r\n                    clampedSize === unclampedSize ? undefined : clampedSize < unclampedSize ? 'max' : 'min';\r\n\r\n                item.targetSize = clampedSize;\r\n            }\r\n\r\n            // e. Freeze over-flexed items. The total violation is the sum of\r\n            // the adjustments from the previous step.\r\n            // If the total violation is:\r\n            //     - Zero, Freeze all items\r\n            //     - Positive, Freeze all the items with min violations\r\n            //     - Negative, Freeze all the items with max violations\r\n            const freezeType = totalViolation === 0 ? 'all' : totalViolation > 0 ? 'min' : 'max';\r\n\r\n            for (const item of items) {\r\n                if (isFrozen(item)) {\r\n                    continue;\r\n                }\r\n\r\n                if (freezeType === 'all' || item.violationType === freezeType) {\r\n                    freeze(item, item.targetSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!params.skipSetLeft) {\r\n            visibleCols.setLeftValues(source);\r\n        }\r\n\r\n        if (params.updateBodyWidths) {\r\n            visibleCols.updateBodyWidths();\r\n        }\r\n\r\n        const unconstrainedFlexColumns = items\r\n            .filter((item) => item.isFlex && !item.violationType)\r\n            .map((item) => item.col);\r\n\r\n        if (params.fireResizedEvent) {\r\n            const changedColumns = items.filter((item) => item.initialSize !== item.frozenSize).map((item) => item.col);\r\n            const flexingColumns = items.filter((item) => item.flex).map((item) => item.col);\r\n\r\n            dispatchColumnResizedEvent(this.eventSvc, changedColumns, true, source, flexingColumns);\r\n        }\r\n\r\n        return unconstrainedFlexColumns;\r\n    }\r\n\r\n    public initCol(column: AgColumn): void {\r\n        const { flex, initialFlex } = column.colDef;\r\n        if (flex !== undefined) {\r\n            column.flex = flex;\r\n        } else if (initialFlex !== undefined) {\r\n            column.flex = initialFlex;\r\n        }\r\n    }\r\n\r\n    // this method should only be used by the colModel to\r\n    // change flex when required by the applyColumnState method.\r\n    public setColFlex(column: AgColumn, flex: number | null) {\r\n        column.flex = flex ?? null;\r\n        column.dispatchStateUpdatedEvent('flex');\r\n    }\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColDef, SuppressKeyboardEventParams, ValueFormatterFunc, ValueFormatterParams } from '../entities/colDef';\r\nimport type {\r\n    BaseCellDataType,\r\n    CoreDataTypeDefinition,\r\n    DataTypeDefinition,\r\n    DataTypeFormatValueFunc,\r\n    DateStringDataTypeDefinition,\r\n    ValueFormatterLiteParams,\r\n    ValueParserLiteParams,\r\n} from '../entities/dataType';\r\nimport type { AgGridEvent, ColumnEventType } from '../events';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport { _isClientSideRowModel } from '../gridOptionsUtils';\r\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\r\nimport type { ColumnEventName } from '../interfaces/iColumn';\r\nimport type { IEventListener } from '../interfaces/iEventEmitter';\r\nimport { _parseDateTimeFromString, _serialiseDate } from '../utils/date';\r\nimport { _toStringOrNull } from '../utils/generic';\r\nimport { _getValueUsingField } from '../utils/object';\r\nimport { _warn } from '../validation/logging';\r\nimport { _addColumnDefaultAndTypes } from './columnFactoryUtils';\r\nimport type { ColumnModel } from './columnModel';\r\nimport { _applyColumnState, getColumnStateFromColDef } from './columnStateUtils';\r\nimport type { ColumnState, ColumnStateParams } from './columnStateUtils';\r\nimport { _convertColumnEventSourceType, convertColumnTypes } from './columnUtils';\r\n\r\ninterface GroupSafeValueFormatter {\r\n    groupSafeValueFormatter?: ValueFormatterFunc;\r\n}\r\n\r\ntype DataTypeDefinitions = {\r\n    [cellDataType: string]: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter;\r\n};\r\n\r\nexport class DataTypeService extends BeanStub implements NamedBean {\r\n    beanName = 'dataTypeSvc' as const;\r\n\r\n    private colModel: ColumnModel;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.colModel = beans.colModel;\r\n    }\r\n\r\n    private dataTypeDefinitions: DataTypeDefinitions = {};\r\n    private dataTypeMatchers: { [cellDataType: string]: ((value: any) => boolean) | undefined };\r\n    private formatValueFuncs: { [cellDataType: string]: DataTypeFormatValueFunc };\r\n    public isPendingInference: boolean = false;\r\n    private hasObjectValueParser: boolean;\r\n    private hasObjectValueFormatter: boolean;\r\n    private initialData: any | null | undefined;\r\n    private isColumnTypeOverrideInDataTypeDefinitions: boolean = false;\r\n    // keep track of any column state updates whilst waiting for data types to be inferred\r\n    private columnStateUpdatesPendingInference: { [colId: string]: Set<keyof ColumnStateParams> } = {};\r\n    private columnStateUpdateListenerDestroyFuncs: (() => void)[] = [];\r\n\r\n    public postConstruct(): void {\r\n        this.processDataTypeDefinitions();\r\n\r\n        this.addManagedPropertyListener('dataTypeDefinitions', (event) => {\r\n            this.processDataTypeDefinitions();\r\n            this.colModel.recreateColumnDefs(_convertColumnEventSourceType(event.source));\r\n        });\r\n    }\r\n\r\n    private processDataTypeDefinitions(): void {\r\n        const defaultDataTypes = this.getDefaultDataTypes();\r\n        const newDataTypeDefinitions: DataTypeDefinitions = {};\r\n        this.dataTypeDefinitions = newDataTypeDefinitions;\r\n        const newFormatValueFuncs: { [cellDataType: string]: DataTypeFormatValueFunc } = {};\r\n        this.formatValueFuncs = newFormatValueFuncs;\r\n        const generateFormatValueFunc = (\r\n            dataTypeDefinition: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter\r\n        ): DataTypeFormatValueFunc => {\r\n            return (params) => {\r\n                const { column, node, value } = params;\r\n                let valueFormatter = column.getColDef().valueFormatter;\r\n                if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {\r\n                    valueFormatter = dataTypeDefinition.valueFormatter;\r\n                }\r\n                return this.beans.valueSvc.formatValue(column as AgColumn, node, value, valueFormatter as any)!;\r\n            };\r\n        };\r\n        Object.entries(defaultDataTypes).forEach(([cellDataType, dataTypeDefinition]) => {\r\n            const mergedDataTypeDefinition = {\r\n                ...dataTypeDefinition,\r\n                groupSafeValueFormatter: createGroupSafeValueFormatter(dataTypeDefinition, this.gos),\r\n            };\r\n            newDataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\r\n            newFormatValueFuncs[cellDataType] = generateFormatValueFunc(mergedDataTypeDefinition);\r\n        });\r\n        const dataTypeDefinitions = this.gos.get('dataTypeDefinitions') ?? {};\r\n        const newDataTypeMatchers: { [cellDataType: string]: ((value: any) => boolean) | undefined } = {};\r\n        this.dataTypeMatchers = newDataTypeMatchers;\r\n\r\n        Object.entries(dataTypeDefinitions).forEach(([cellDataType, dataTypeDefinition]) => {\r\n            const mergedDataTypeDefinition = this.processDataTypeDefinition(\r\n                dataTypeDefinition,\r\n                dataTypeDefinitions,\r\n                [cellDataType],\r\n                defaultDataTypes\r\n            );\r\n            if (mergedDataTypeDefinition) {\r\n                newDataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\r\n                if (dataTypeDefinition.dataTypeMatcher) {\r\n                    newDataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;\r\n                }\r\n                newFormatValueFuncs[cellDataType] = generateFormatValueFunc(mergedDataTypeDefinition);\r\n            }\r\n        });\r\n        this.checkObjectValueHandlers(defaultDataTypes);\r\n\r\n        ['dateString', 'text', 'number', 'boolean', 'date'].forEach((cellDataType) => {\r\n            const overriddenDataTypeMatcher = newDataTypeMatchers[cellDataType];\r\n            if (overriddenDataTypeMatcher) {\r\n                // remove to maintain correct ordering\r\n                delete newDataTypeMatchers[cellDataType];\r\n            }\r\n            newDataTypeMatchers[cellDataType] =\r\n                overriddenDataTypeMatcher ?? defaultDataTypes[cellDataType].dataTypeMatcher;\r\n        });\r\n    }\r\n\r\n    private processDataTypeDefinition(\r\n        dataTypeDefinition: DataTypeDefinition,\r\n        dataTypeDefinitions: { [key: string]: DataTypeDefinition },\r\n        alreadyProcessedDataTypes: string[],\r\n        defaultDataTypes: { [key: string]: CoreDataTypeDefinition }\r\n    ): (DataTypeDefinition & GroupSafeValueFormatter) | undefined {\r\n        let mergedDataTypeDefinition: DataTypeDefinition;\r\n        const extendsCellDataType = dataTypeDefinition.extendsDataType;\r\n\r\n        if (dataTypeDefinition.columnTypes) {\r\n            this.isColumnTypeOverrideInDataTypeDefinitions = true;\r\n        }\r\n\r\n        if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {\r\n            let baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];\r\n            const overriddenBaseDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\r\n            if (baseDataTypeDefinition && overriddenBaseDataTypeDefinition) {\r\n                // only if it's valid do we override with a provided one\r\n                baseDataTypeDefinition = overriddenBaseDataTypeDefinition;\r\n            }\r\n            if (!validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {\r\n                return undefined;\r\n            }\r\n            mergedDataTypeDefinition = mergeDataTypeDefinitions(baseDataTypeDefinition, dataTypeDefinition);\r\n        } else {\r\n            if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {\r\n                _warn(44);\r\n                return undefined;\r\n            }\r\n            const extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\r\n            if (!validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {\r\n                return undefined;\r\n            }\r\n            const mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(\r\n                extendedDataTypeDefinition,\r\n                dataTypeDefinitions,\r\n                [...alreadyProcessedDataTypes, extendsCellDataType],\r\n                defaultDataTypes\r\n            );\r\n            if (!mergedExtendedDataTypeDefinition) {\r\n                return undefined;\r\n            }\r\n            mergedDataTypeDefinition = mergeDataTypeDefinitions(mergedExtendedDataTypeDefinition, dataTypeDefinition);\r\n        }\r\n\r\n        return {\r\n            ...mergedDataTypeDefinition,\r\n            groupSafeValueFormatter: createGroupSafeValueFormatter(mergedDataTypeDefinition, this.gos),\r\n        };\r\n    }\r\n\r\n    public updateColDefAndGetColumnType(\r\n        colDef: ColDef,\r\n        userColDef: ColDef,\r\n        colId: string\r\n    ): string | string[] | undefined {\r\n        let { cellDataType } = userColDef;\r\n        const { field } = userColDef;\r\n        if (cellDataType === undefined) {\r\n            cellDataType = colDef.cellDataType;\r\n        }\r\n        if (cellDataType == null || cellDataType === true) {\r\n            cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;\r\n        }\r\n        if (!cellDataType) {\r\n            colDef.cellDataType = false;\r\n            return undefined;\r\n        }\r\n        const dataTypeDefinition = this.dataTypeDefinitions[cellDataType as string];\r\n        if (!dataTypeDefinition) {\r\n            _warn(47, { cellDataType });\r\n            return undefined;\r\n        }\r\n        colDef.cellDataType = cellDataType;\r\n        if (dataTypeDefinition.groupSafeValueFormatter) {\r\n            colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;\r\n        }\r\n        if (dataTypeDefinition.valueParser) {\r\n            colDef.valueParser = dataTypeDefinition.valueParser;\r\n        }\r\n        if (!dataTypeDefinition.suppressDefaultProperties) {\r\n            this.setColDefPropertiesForBaseDataType(colDef, cellDataType, dataTypeDefinition, colId);\r\n        }\r\n        return dataTypeDefinition.columnTypes;\r\n    }\r\n\r\n    public addColumnListeners(column: AgColumn): void {\r\n        if (!this.isPendingInference) {\r\n            return;\r\n        }\r\n        const columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];\r\n        if (!columnStateUpdates) {\r\n            return;\r\n        }\r\n        const columnListener: IEventListener<ColumnEventName> = (\r\n            event: AgGridEvent<any, any, ColumnEventName> & { key: keyof ColumnStateParams }\r\n        ) => {\r\n            columnStateUpdates.add(event.key);\r\n        };\r\n        column.addEventListener('columnStateUpdated', columnListener);\r\n        this.columnStateUpdateListenerDestroyFuncs.push(() =>\r\n            column.removeEventListener('columnStateUpdated', columnListener)\r\n        );\r\n    }\r\n\r\n    private canInferCellDataType(colDef: ColDef, userColDef: ColDef): boolean {\r\n        const { gos } = this;\r\n        if (!_isClientSideRowModel(gos)) {\r\n            return false;\r\n        }\r\n        const propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };\r\n        if (doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {\r\n            return false;\r\n        }\r\n        const columnTypes = userColDef.type === null ? colDef.type : userColDef.type;\r\n        if (columnTypes) {\r\n            const columnTypeDefs = gos.get('columnTypes') ?? {};\r\n            const hasPropsPreventingInference = convertColumnTypes(columnTypes).some((columnType) => {\r\n                const columnTypeDef = columnTypeDefs[columnType.trim()];\r\n                return columnTypeDef && doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);\r\n            });\r\n            if (hasPropsPreventingInference) {\r\n                return false;\r\n            }\r\n        }\r\n        return !doColDefPropsPreventInference(colDef, propsToCheckForInference);\r\n    }\r\n\r\n    private inferCellDataType(field: string | undefined, colId: string): string | undefined {\r\n        if (!field) {\r\n            return undefined;\r\n        }\r\n        let value: any;\r\n        const initialData = this.getInitialData();\r\n        if (initialData) {\r\n            const fieldContainsDots = field.indexOf('.') >= 0 && !this.gos.get('suppressFieldDotNotation');\r\n            value = _getValueUsingField(initialData, field, fieldContainsDots);\r\n        } else {\r\n            this.initWaitForRowData(colId);\r\n        }\r\n        if (value == null) {\r\n            return undefined;\r\n        }\r\n        const [cellDataType] = Object.entries(this.dataTypeMatchers).find(([_cellDataType, dataTypeMatcher]) =>\r\n            dataTypeMatcher!(value)\r\n        ) ?? ['object'];\r\n        return cellDataType;\r\n    }\r\n\r\n    private getInitialData(): any {\r\n        const rowData = this.gos.get('rowData');\r\n        if (rowData?.length) {\r\n            return rowData[0];\r\n        } else if (this.initialData) {\r\n            return this.initialData;\r\n        } else {\r\n            const rowNodes = (this.beans.rowModel as IClientSideRowModel).rootNode?.allLeafChildren;\r\n            if (rowNodes?.length) {\r\n                return rowNodes[0].data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private initWaitForRowData(colId: string): void {\r\n        this.columnStateUpdatesPendingInference[colId] = new Set();\r\n        if (this.isPendingInference) {\r\n            return;\r\n        }\r\n        this.isPendingInference = true;\r\n        const columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;\r\n        const { colAutosize, eventSvc } = this.beans;\r\n        if (columnTypeOverridesExist && colAutosize) {\r\n            colAutosize.shouldQueueResizeOperations = true;\r\n        }\r\n        const [destroyFunc] = this.addManagedEventListeners({\r\n            rowDataUpdateStarted: (event) => {\r\n                const { firstRowData } = event;\r\n                if (!firstRowData) {\r\n                    return;\r\n                }\r\n                destroyFunc?.();\r\n                this.isPendingInference = false;\r\n                this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);\r\n                this.columnStateUpdatesPendingInference = {};\r\n                if (columnTypeOverridesExist) {\r\n                    colAutosize?.processResizeOperations();\r\n                }\r\n                eventSvc.dispatchEvent({\r\n                    type: 'dataTypesInferred',\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    private processColumnsPendingInference(firstRowData: any, columnTypeOverridesExist: boolean): void {\r\n        this.initialData = firstRowData;\r\n        const state: ColumnState[] = [];\r\n        this.destroyColumnStateUpdateListeners();\r\n        const newRowGroupColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\r\n        const newPivotColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\r\n        Object.entries(this.columnStateUpdatesPendingInference).forEach(([colId, columnStateUpdates]) => {\r\n            const column = this.colModel.getCol(colId);\r\n            if (!column) {\r\n                return;\r\n            }\r\n            const oldColDef = column.getColDef();\r\n            if (!this.resetColDefIntoCol(column, 'cellDataTypeInferred')) {\r\n                return;\r\n            }\r\n            const newColDef = column.getColDef();\r\n            if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {\r\n                const updatedColumnState = getUpdatedColumnState(column, columnStateUpdates);\r\n                if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {\r\n                    newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;\r\n                }\r\n                if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {\r\n                    newPivotColumnStateWithoutIndex[colId] = updatedColumnState;\r\n                }\r\n                state.push(updatedColumnState);\r\n            }\r\n        });\r\n        if (columnTypeOverridesExist) {\r\n            state.push(\r\n                ...this.generateColumnStateForRowGroupAndPivotIndexes(\r\n                    newRowGroupColumnStateWithoutIndex,\r\n                    newPivotColumnStateWithoutIndex\r\n                )\r\n            );\r\n        }\r\n        if (state.length) {\r\n            _applyColumnState(this.beans, { state }, 'cellDataTypeInferred');\r\n        }\r\n        this.initialData = null;\r\n    }\r\n\r\n    private generateColumnStateForRowGroupAndPivotIndexes(\r\n        updatedRowGroupColumnState: { [colId: string]: ColumnState },\r\n        updatedPivotColumnState: { [colId: string]: ColumnState }\r\n    ): ColumnState[] {\r\n        // Generally columns should appear in the order they were before. For any new columns, these should appear in the original col def order.\r\n        // The exception is for columns that were added via `addGroupColumns`. These should appear at the end.\r\n        // We don't have to worry about full updates, as in this case the arrays are correct, and they won't appear in the updated lists.\r\n\r\n        const existingColumnStateUpdates: { [colId: string]: ColumnState } = {};\r\n\r\n        const { rowGroupColsSvc, pivotColsSvc } = this.beans;\r\n\r\n        rowGroupColsSvc?.restoreColumnOrder(existingColumnStateUpdates, updatedRowGroupColumnState);\r\n        pivotColsSvc?.restoreColumnOrder(existingColumnStateUpdates, updatedPivotColumnState);\r\n\r\n        return Object.values(existingColumnStateUpdates);\r\n    }\r\n\r\n    private resetColDefIntoCol(column: AgColumn, source: ColumnEventType): boolean {\r\n        const userColDef = column.getUserProvidedColDef();\r\n        if (!userColDef) {\r\n            return false;\r\n        }\r\n        const newColDef = _addColumnDefaultAndTypes(this.beans, userColDef, column.getColId());\r\n        column.setColDef(newColDef, userColDef, source);\r\n        return true;\r\n    }\r\n\r\n    private checkObjectValueHandlers(defaultDataTypes: { [key: string]: CoreDataTypeDefinition }): void {\r\n        const resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;\r\n        const defaultObjectDataTypeDefinition = defaultDataTypes.object;\r\n        this.hasObjectValueParser =\r\n            resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;\r\n        this.hasObjectValueFormatter =\r\n            resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;\r\n    }\r\n\r\n    private getDateStringTypeDefinition(column?: AgColumn | null): DateStringDataTypeDefinition {\r\n        const { dateString } = this.dataTypeDefinitions;\r\n        if (!column) {\r\n            return dateString as DateStringDataTypeDefinition;\r\n        }\r\n        return (this.getDataTypeDefinition(column) ?? dateString) as DateStringDataTypeDefinition;\r\n    }\r\n\r\n    public getDateParserFunction(column?: AgColumn | null): (value: string | undefined) => Date | undefined {\r\n        return this.getDateStringTypeDefinition(column).dateParser!;\r\n    }\r\n\r\n    public getDateFormatterFunction(column?: AgColumn | null): (value: Date | undefined) => string | undefined {\r\n        return this.getDateStringTypeDefinition(column).dateFormatter!;\r\n    }\r\n\r\n    public getDataTypeDefinition(column: AgColumn): DataTypeDefinition | CoreDataTypeDefinition | undefined {\r\n        const colDef = column.getColDef();\r\n        if (!colDef.cellDataType) {\r\n            return undefined;\r\n        }\r\n        return this.dataTypeDefinitions[colDef.cellDataType as string];\r\n    }\r\n\r\n    public getBaseDataType(column: AgColumn): BaseCellDataType | undefined {\r\n        return this.getDataTypeDefinition(column)?.baseDataType;\r\n    }\r\n\r\n    public checkType(column: AgColumn, value: any): boolean {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        const dataTypeMatcher = this.getDataTypeDefinition(column)?.dataTypeMatcher;\r\n        if (!dataTypeMatcher) {\r\n            return true;\r\n        }\r\n        return dataTypeMatcher(value);\r\n    }\r\n\r\n    public validateColDef(colDef: ColDef): void {\r\n        const warning = (property: 'Formatter' | 'Parser') => _warn(48, { property });\r\n        if (colDef.cellDataType === 'object') {\r\n            const { object } = this.dataTypeDefinitions;\r\n            if (colDef.valueFormatter === object.groupSafeValueFormatter && !this.hasObjectValueFormatter) {\r\n                warning('Formatter');\r\n            }\r\n            if (colDef.editable && colDef.valueParser === object.valueParser && !this.hasObjectValueParser) {\r\n                warning('Parser');\r\n            }\r\n        }\r\n    }\r\n\r\n    public getFormatValue(cellDataType: string): DataTypeFormatValueFunc | undefined {\r\n        return this.formatValueFuncs[cellDataType];\r\n    }\r\n\r\n    public isColPendingInference(colId: string): boolean {\r\n        return this.isPendingInference && !!this.columnStateUpdatesPendingInference[colId];\r\n    }\r\n\r\n    private setColDefPropertiesForBaseDataType(\r\n        colDef: ColDef,\r\n        cellDataType: string,\r\n        dataTypeDefinition: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter,\r\n        colId: string\r\n    ): void {\r\n        const formatValue = this.formatValueFuncs[cellDataType];\r\n        switch (dataTypeDefinition.baseDataType) {\r\n            case 'number': {\r\n                colDef.cellEditor = 'agNumberCellEditor';\r\n                break;\r\n            }\r\n            case 'boolean': {\r\n                colDef.cellEditor = 'agCheckboxCellEditor';\r\n                colDef.cellRenderer = 'agCheckboxCellRenderer';\r\n                colDef.suppressKeyboardEvent = (params: SuppressKeyboardEventParams<any, boolean>) =>\r\n                    !!params.colDef.editable && params.event.key === KeyCode.SPACE;\r\n                break;\r\n            }\r\n            case 'date': {\r\n                colDef.cellEditor = 'agDateCellEditor';\r\n                colDef.keyCreator = formatValue;\r\n                break;\r\n            }\r\n            case 'dateString': {\r\n                colDef.cellEditor = 'agDateStringCellEditor';\r\n                colDef.keyCreator = formatValue;\r\n                break;\r\n            }\r\n            case 'object': {\r\n                colDef.cellEditorParams = {\r\n                    useFormatter: true,\r\n                };\r\n                colDef.comparator = (a: any, b: any) => {\r\n                    const column = this.colModel.getColDefCol(colId);\r\n                    const colDef = column?.getColDef();\r\n                    if (!column || !colDef) {\r\n                        return 0;\r\n                    }\r\n                    const valA = a == null ? '' : formatValue({ column, node: null, value: a });\r\n                    const valB = b == null ? '' : formatValue({ column, node: null, value: b });\r\n                    if (valA === valB) return 0;\r\n                    return valA > valB ? 1 : -1;\r\n                };\r\n                colDef.keyCreator = formatValue;\r\n                break;\r\n            }\r\n        }\r\n        this.beans.filterManager?.setColDefPropertiesForDataType(colDef, dataTypeDefinition, formatValue);\r\n    }\r\n\r\n    private getDefaultDataTypes(): { [key: string]: CoreDataTypeDefinition } {\r\n        const defaultDateFormatMatcher = (value: string) => !!value.match('^\\\\d{4}-\\\\d{2}-\\\\d{2}$');\r\n        const translate = this.getLocaleTextFunc();\r\n        return {\r\n            number: {\r\n                baseDataType: 'number',\r\n                // can be empty space with legacy copy\r\n                valueParser: (params: ValueParserLiteParams<any, number>) =>\r\n                    params.newValue?.trim?.() === '' ? null : Number(params.newValue),\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, number>) => {\r\n                    if (params.value == null) {\r\n                        return '';\r\n                    }\r\n                    if (typeof params.value !== 'number' || isNaN(params.value)) {\r\n                        return translate('invalidNumber', 'Invalid Number');\r\n                    }\r\n                    return String(params.value);\r\n                },\r\n                dataTypeMatcher: (value: any) => typeof value === 'number',\r\n            },\r\n            bigint: {\r\n                baseDataType: 'bigint',\r\n                // can be empty space with legacy copy\r\n                valueParser: (params: ValueParserLiteParams<any, bigint>) => {\r\n                    try {\r\n                        return params.newValue?.trim?.() === '' ? null : BigInt(params.newValue);\r\n                    } catch {\r\n                        return undefined;\r\n                    }\r\n                },\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, bigint>) => {\r\n                    if (params.value == null) {\r\n                        return '';\r\n                    }\r\n                    if (typeof params.value !== 'bigint') {\r\n                        return translate('invalidBigint', 'Invalid Bigint');\r\n                    }\r\n                    return String(params.value);\r\n                },\r\n                dataTypeMatcher: (value: any) => typeof value === 'bigint',\r\n            },\r\n            text: {\r\n                baseDataType: 'text',\r\n                valueParser: (params: ValueParserLiteParams<any, string>) =>\r\n                    params.newValue === '' ? null : _toStringOrNull(params.newValue),\r\n                dataTypeMatcher: (value: any) => typeof value === 'string',\r\n            },\r\n            boolean: {\r\n                baseDataType: 'boolean',\r\n                valueParser: (params: ValueParserLiteParams<any, boolean>) => {\r\n                    if (params.newValue == null) {\r\n                        return params.newValue;\r\n                    }\r\n                    // can be empty space with legacy copy\r\n                    return params.newValue?.trim?.() === '' ? null : String(params.newValue).toLowerCase() === 'true';\r\n                },\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, boolean>) =>\r\n                    params.value == null ? '' : String(params.value),\r\n                dataTypeMatcher: (value: any) => typeof value === 'boolean',\r\n            },\r\n            date: {\r\n                baseDataType: 'date',\r\n                valueParser: (params: ValueParserLiteParams<any, Date>) =>\r\n                    _parseDateTimeFromString(params.newValue == null ? null : String(params.newValue)),\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, Date>) => {\r\n                    if (params.value == null) {\r\n                        return '';\r\n                    }\r\n                    if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {\r\n                        return translate('invalidDate', 'Invalid Date');\r\n                    }\r\n                    return _serialiseDate(params.value, false) ?? '';\r\n                },\r\n                dataTypeMatcher: (value: any) => value instanceof Date,\r\n            },\r\n            dateString: {\r\n                baseDataType: 'dateString',\r\n                dateParser: (value: string | undefined) => _parseDateTimeFromString(value) ?? undefined,\r\n                dateFormatter: (value: Date | undefined) => _serialiseDate(value ?? null, false) ?? undefined,\r\n                valueParser: (params: ValueParserLiteParams<any, string>) =>\r\n                    defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null,\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, string>) =>\r\n                    defaultDateFormatMatcher(String(params.value)) ? params.value! : '',\r\n                dataTypeMatcher: (value: any) => typeof value === 'string' && defaultDateFormatMatcher(value),\r\n            },\r\n            object: {\r\n                baseDataType: 'object',\r\n                valueParser: () => null,\r\n                valueFormatter: (params: ValueFormatterLiteParams<any, any>) => _toStringOrNull(params.value) ?? '',\r\n            },\r\n        };\r\n    }\r\n\r\n    private destroyColumnStateUpdateListeners(): void {\r\n        this.columnStateUpdateListenerDestroyFuncs.forEach((destroyFunc) => destroyFunc());\r\n        this.columnStateUpdateListenerDestroyFuncs = [];\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.dataTypeDefinitions = {};\r\n        this.dataTypeMatchers = {};\r\n        this.formatValueFuncs = {};\r\n        this.columnStateUpdatesPendingInference = {};\r\n        this.destroyColumnStateUpdateListeners();\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nfunction mergeDataTypeDefinitions(\r\n    parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\r\n    childDataTypeDefinition: DataTypeDefinition\r\n): DataTypeDefinition {\r\n    const mergedDataTypeDefinition = {\r\n        ...parentDataTypeDefinition,\r\n        ...childDataTypeDefinition,\r\n    } as DataTypeDefinition;\r\n    if (\r\n        parentDataTypeDefinition.columnTypes &&\r\n        childDataTypeDefinition.columnTypes &&\r\n        (childDataTypeDefinition as any).appendColumnTypes\r\n    ) {\r\n        mergedDataTypeDefinition.columnTypes = [\r\n            ...convertColumnTypes(parentDataTypeDefinition.columnTypes),\r\n            ...convertColumnTypes(childDataTypeDefinition.columnTypes),\r\n        ];\r\n    }\r\n    return mergedDataTypeDefinition;\r\n}\r\n\r\nfunction validateDataTypeDefinition(\r\n    dataTypeDefinition: DataTypeDefinition,\r\n    parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\r\n    parentCellDataType: string\r\n): boolean {\r\n    if (!parentDataTypeDefinition) {\r\n        _warn(45, { parentCellDataType });\r\n        return false;\r\n    }\r\n    if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {\r\n        _warn(46);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction createGroupSafeValueFormatter(\r\n    dataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\r\n    gos: GridOptionsService\r\n): ValueFormatterFunc | undefined {\r\n    if (!dataTypeDefinition.valueFormatter) {\r\n        return undefined;\r\n    }\r\n    return (params: ValueFormatterParams) => {\r\n        if (params.node?.group) {\r\n            const aggFunc = (params.colDef.pivotValueColumn ?? params.column).getAggFunc();\r\n            if (aggFunc) {\r\n                // the resulting type of these will be the same, so we call valueFormatter anyway\r\n                if (aggFunc === 'first' || aggFunc === 'last') {\r\n                    return dataTypeDefinition.valueFormatter!(params);\r\n                }\r\n\r\n                if (dataTypeDefinition.baseDataType === 'number' && aggFunc !== 'count') {\r\n                    if (typeof params.value === 'number') {\r\n                        return dataTypeDefinition.valueFormatter!(params);\r\n                    }\r\n\r\n                    if (typeof params.value === 'object') {\r\n                        if (!params.value) {\r\n                            return undefined;\r\n                        }\r\n\r\n                        if ('toNumber' in params.value) {\r\n                            return dataTypeDefinition.valueFormatter!({\r\n                                ...params,\r\n                                value: params.value.toNumber(),\r\n                            });\r\n                        }\r\n\r\n                        if ('value' in params.value) {\r\n                            return dataTypeDefinition.valueFormatter!({\r\n                                ...params,\r\n                                value: params.value.value,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // by default don't use value formatter for agg func as type may have changed\r\n                return undefined as any;\r\n            }\r\n\r\n            // `groupRows` use the key as the value\r\n            if (gos.get('groupDisplayType') === 'groupRows' && !gos.get('treeData')) {\r\n                // we don't want to double format the value\r\n                // as this is already formatted by using the valueFormatter as the keyCreator\r\n                return undefined as any;\r\n            }\r\n        } else if (gos.get('groupHideOpenParents') && params.column.isRowGroupActive()) {\r\n            // `groupHideOpenParents` passes leaf values in the group column, so need to format still.\r\n            // If it's not a string, we know it hasn't been formatted. Otherwise check the data type matcher.\r\n            if (typeof params.value === 'string' && !dataTypeDefinition.dataTypeMatcher?.(params.value)) {\r\n                return undefined as any;\r\n            }\r\n        }\r\n        return dataTypeDefinition.valueFormatter!(params);\r\n    };\r\n}\r\n\r\nfunction doesColDefPropPreventInference(\r\n    colDef: ColDef,\r\n    checkProps: { [key in keyof ColDef]: boolean },\r\n    prop: keyof ColDef,\r\n    comparisonValue?: any\r\n): boolean {\r\n    if (!checkProps[prop]) {\r\n        return false;\r\n    }\r\n    const value = colDef[prop];\r\n    if (value === null) {\r\n        checkProps[prop] = false;\r\n        return false;\r\n    } else {\r\n        return comparisonValue === undefined ? !!value : value === comparisonValue;\r\n    }\r\n}\r\n\r\nfunction doColDefPropsPreventInference(\r\n    colDef: ColDef,\r\n    propsToCheckForInference: { [key in keyof ColDef]: boolean }\r\n): boolean {\r\n    return [\r\n        ['cellRenderer', 'agSparklineCellRenderer'],\r\n        ['valueGetter', undefined],\r\n        ['valueParser', undefined],\r\n        ['refData', undefined],\r\n    ].some(([prop, comparisonValue]: [keyof ColDef, any]) =>\r\n        doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue)\r\n    );\r\n}\r\n\r\nfunction getUpdatedColumnState(column: AgColumn, columnStateUpdates: Set<keyof ColumnStateParams>): ColumnState {\r\n    const columnState = getColumnStateFromColDef(column);\r\n    columnStateUpdates.forEach((key) => {\r\n        // if the column state has been updated, don't update again\r\n        delete columnState[key];\r\n        if (key === 'rowGroup') {\r\n            delete columnState.rowGroupIndex;\r\n        } else if (key === 'pivot') {\r\n            delete columnState.pivotIndex;\r\n        }\r\n    });\r\n    return columnState;\r\n}\r\n", "import type { _ColumnGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { CheckboxCellRendererModule } from '../rendering/cellRenderers/cellRendererModule';\r\nimport { VERSION } from '../version';\r\nimport {\r\n    applyColumnState,\r\n    getAllDisplayedColumns,\r\n    getAllDisplayedVirtualColumns,\r\n    getAllGridColumns,\r\n    getColumn,\r\n    getColumnDef,\r\n    getColumnDefs,\r\n    getColumnState,\r\n    getColumns,\r\n    getDisplayNameForColumn,\r\n    getDisplayedCenterColumns,\r\n    getDisplayedColAfter,\r\n    getDisplayedColBefore,\r\n    getDisplayedLeftColumns,\r\n    getDisplayedRightColumns,\r\n    isPinning,\r\n    isPinningLeft,\r\n    isPinningRight,\r\n    resetColumnState,\r\n    setColumnsPinned,\r\n    setColumnsVisible,\r\n} from './columnApi';\r\nimport { ColumnDefFactory } from './columnDefFactory';\r\nimport { ColumnFlexService } from './columnFlexService';\r\nimport { DataTypeService } from './dataTypeService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const DataTypeModule: _ModuleWithoutApi = {\r\n    moduleName: 'DataType',\r\n    version: VERSION,\r\n    beans: [DataTypeService],\r\n    dependsOn: [CheckboxCellRendererModule],\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const ColumnFlexModule: _ModuleWithoutApi = {\r\n    moduleName: 'ColumnFlex',\r\n    version: VERSION,\r\n    beans: [ColumnFlexService],\r\n};\r\n\r\n/**\r\n * @feature Columns\r\n */\r\nexport const ColumnApiModule: _ModuleWithApi<_ColumnGridApi<any>> = {\r\n    moduleName: 'ColumnApi',\r\n    version: VERSION,\r\n    beans: [ColumnDefFactory],\r\n    apiFunctions: {\r\n        getColumnDef,\r\n        getDisplayNameForColumn,\r\n        getColumn,\r\n        getColumns,\r\n        applyColumnState,\r\n        getColumnState,\r\n        resetColumnState,\r\n        isPinning,\r\n        isPinningLeft,\r\n        isPinningRight,\r\n        getDisplayedColAfter,\r\n        getDisplayedColBefore,\r\n        setColumnsVisible,\r\n        setColumnsPinned,\r\n        getAllGridColumns,\r\n        getDisplayedLeftColumns,\r\n        getDisplayedCenterColumns,\r\n        getDisplayedRightColumns,\r\n        getAllDisplayedColumns,\r\n        getAllDisplayedVirtualColumns,\r\n        getColumnDefs,\r\n    },\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type { AbstractColDef, ColDef, HeaderLocation, HeaderValueGetterParams } from '../entities/colDef';\r\n\r\n/**\r\n * Converts a camelCase string into startCase\r\n * @param {string} camelCase\r\n * @return {string}\r\n */\r\nexport function _camelCaseToHumanText(camelCase: string | undefined): string | null {\r\n    if (!camelCase || camelCase == null) {\r\n        return null;\r\n    }\r\n\r\n    // either split on a lowercase followed by uppercase ie  asHereTo -> as Here To\r\n    const rex = /([a-z])([A-Z])/g;\r\n    // or starts with uppercase and we take all expect the last which is assumed to be part of next word if followed by lowercase HEREToThere -> HERE To There\r\n    const rexCaps = /([A-Z]+)([A-Z])([a-z])/g;\r\n    const words: string[] = camelCase.replace(rex, '$1 $2').replace(rexCaps, '$1 $2$3').replace(/\\./g, ' ').split(' ');\r\n\r\n    return words\r\n        .map((word) => word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : ''))\r\n        .join(' ');\r\n}\r\n\r\nexport class ColumnNameService extends BeanStub implements NamedBean {\r\n    beanName = 'colNames' as const;\r\n\r\n    public getDisplayNameForColumn(\r\n        column: AgColumn | null,\r\n        location: HeaderLocation,\r\n        includeAggFunc = false\r\n    ): string | null {\r\n        if (!column) {\r\n            return null;\r\n        }\r\n\r\n        const headerName: string | null = this.getHeaderName(column.getColDef(), column, null, null, location);\r\n\r\n        const { aggColNameSvc } = this.beans;\r\n        if (includeAggFunc && aggColNameSvc) {\r\n            return aggColNameSvc.getHeaderName(column, headerName);\r\n        }\r\n\r\n        return headerName;\r\n    }\r\n\r\n    public getDisplayNameForProvidedColumnGroup(\r\n        columnGroup: AgColumnGroup | null,\r\n        providedColumnGroup: AgProvidedColumnGroup | null,\r\n        location: HeaderLocation\r\n    ): string | null {\r\n        const colGroupDef = providedColumnGroup?.getColGroupDef();\r\n\r\n        if (colGroupDef) {\r\n            return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getDisplayNameForColumnGroup(columnGroup: AgColumnGroup, location: HeaderLocation): string | null {\r\n        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);\r\n    }\r\n\r\n    // location is where the column is going to appear, ie who is calling us\r\n    private getHeaderName(\r\n        colDef: AbstractColDef,\r\n        column: AgColumn | null,\r\n        columnGroup: AgColumnGroup | null,\r\n        providedColumnGroup: AgProvidedColumnGroup | null,\r\n        location: HeaderLocation\r\n    ): string | null {\r\n        const headerValueGetter = colDef.headerValueGetter;\r\n\r\n        if (headerValueGetter) {\r\n            const params: HeaderValueGetterParams = this.gos.addGridCommonParams({\r\n                colDef: colDef,\r\n                column: column,\r\n                columnGroup: columnGroup,\r\n                providedColumnGroup: providedColumnGroup,\r\n                location: location,\r\n            });\r\n\r\n            if (typeof headerValueGetter === 'function') {\r\n                // valueGetter is a function, so just call it\r\n                return headerValueGetter(params);\r\n            } else if (typeof headerValueGetter === 'string') {\r\n                // valueGetter is an expression, so execute the expression\r\n                return this.beans.expressionSvc?.evaluate(headerValueGetter, params) ?? null;\r\n            }\r\n            return '';\r\n        } else if (colDef.headerName != null) {\r\n            return colDef.headerName;\r\n        } else if ((colDef as ColDef).field) {\r\n            return _camelCaseToHumanText((colDef as ColDef).field);\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { isColumn } from '../entities/agColumn';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport { _exists } from '../utils/generic';\r\nimport type { ColumnModel } from './columnModel';\r\nimport type { VisibleColsService } from './visibleColsService';\r\n\r\nexport class ColumnViewportService extends BeanStub implements NamedBean {\r\n    beanName = 'colViewport' as const;\r\n\r\n    private visibleCols: VisibleColsService;\r\n    private colModel: ColumnModel;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.visibleCols = beans.visibleCols;\r\n        this.colModel = beans.colModel;\r\n    }\r\n\r\n    // cols in center that are in the viewport\r\n    private colsWithinViewport: AgColumn[] = [];\r\n    // same as colsWithinViewport, except we always include columns with headerAutoHeight\r\n    private headerColsWithinViewport: AgColumn[] = [];\r\n\r\n    // A hash key to keep track of changes in viewport columns\r\n    private colsWithinViewportHash: string = '';\r\n\r\n    // all columns & groups to be rendered, index by row.\r\n    // used by header rows to get all items to render for that row.\r\n    private rowsOfHeadersToRenderLeft: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\r\n    private rowsOfHeadersToRenderRight: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\r\n    private rowsOfHeadersToRenderCenter: { [row: number]: (AgColumn | AgColumnGroup)[] } = {};\r\n\r\n    private scrollWidth: number;\r\n    private scrollPosition: number;\r\n\r\n    private viewportLeft: number; // same as scrollPosition, except when doing RTL\r\n    private viewportRight: number;\r\n\r\n    private suppressColumnVirtualisation: boolean;\r\n\r\n    public postConstruct(): void {\r\n        this.suppressColumnVirtualisation = this.gos.get('suppressColumnVirtualisation');\r\n    }\r\n\r\n    public setScrollPosition(scrollWidth: number, scrollPosition: number, afterScroll: boolean = false): void {\r\n        const { visibleCols } = this;\r\n        const bodyWidthDirty = visibleCols.isBodyWidthDirty;\r\n\r\n        const noChange = scrollWidth === this.scrollWidth && scrollPosition === this.scrollPosition && !bodyWidthDirty;\r\n        if (noChange) {\r\n            return;\r\n        }\r\n\r\n        this.scrollWidth = scrollWidth;\r\n        this.scrollPosition = scrollPosition;\r\n        // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,\r\n        // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the\r\n        // virtual columns again\r\n        visibleCols.isBodyWidthDirty = true;\r\n\r\n        if (this.gos.get('enableRtl')) {\r\n            const bodyWidth = visibleCols.bodyWidth;\r\n            this.viewportLeft = bodyWidth - scrollPosition - scrollWidth;\r\n            this.viewportRight = bodyWidth - scrollPosition;\r\n        } else {\r\n            this.viewportLeft = scrollPosition;\r\n            this.viewportRight = scrollWidth + scrollPosition;\r\n        }\r\n\r\n        if (this.colModel.ready) {\r\n            this.checkViewportColumns(afterScroll);\r\n        }\r\n    }\r\n\r\n    public getHeadersToRender(type: ColumnPinnedType, dept: number): (AgColumn | AgColumnGroup)[] {\r\n        let result: (AgColumn | AgColumnGroup)[];\r\n\r\n        switch (type) {\r\n            case 'left':\r\n                result = this.rowsOfHeadersToRenderLeft[dept];\r\n                break;\r\n            case 'right':\r\n                result = this.rowsOfHeadersToRenderRight[dept];\r\n                break;\r\n            default:\r\n                result = this.rowsOfHeadersToRenderCenter[dept];\r\n                break;\r\n        }\r\n\r\n        return result || [];\r\n    }\r\n\r\n    private extractViewportColumns(): void {\r\n        const displayedColumnsCenter = this.visibleCols.centerCols;\r\n        if (this.isColumnVirtualisationSuppressed()) {\r\n            // no virtualisation, so don't filter\r\n            this.colsWithinViewport = displayedColumnsCenter;\r\n            this.headerColsWithinViewport = displayedColumnsCenter;\r\n        } else {\r\n            // filter out what should be visible\r\n            this.colsWithinViewport = displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));\r\n            this.headerColsWithinViewport = displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));\r\n        }\r\n    }\r\n\r\n    private isColumnVirtualisationSuppressed() {\r\n        // When running within jsdom the viewportRight is always 0, so we need to return true to allow\r\n        // tests to validate all the columns.\r\n        return this.suppressColumnVirtualisation || this.viewportRight === 0;\r\n    }\r\n\r\n    public clear(suppressHashClear?: boolean): void {\r\n        this.rowsOfHeadersToRenderLeft = {};\r\n        this.rowsOfHeadersToRenderRight = {};\r\n        this.rowsOfHeadersToRenderCenter = {};\r\n        if (!suppressHashClear) {\r\n            this.colsWithinViewportHash = '';\r\n        }\r\n    }\r\n\r\n    private isColumnInHeaderViewport(col: AgColumn): boolean {\r\n        // for headers, we never filter out autoHeaderHeight columns, if calculating\r\n        if (col.isAutoHeaderHeight() || isAnyParentAutoHeaderHeight(col)) {\r\n            return true;\r\n        }\r\n\r\n        return this.isColumnInRowViewport(col);\r\n    }\r\n\r\n    private isColumnInRowViewport(col: AgColumn): boolean {\r\n        // we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height\r\n        if (col.isAutoHeight()) {\r\n            return true;\r\n        }\r\n\r\n        const columnLeft = col.getLeft() || 0;\r\n        const columnRight = columnLeft + col.getActualWidth();\r\n\r\n        // adding 200 for buffer size, so some cols off viewport are rendered.\r\n        // this helps horizontal scrolling so user rarely sees white space (unless\r\n        // they scroll horizontally fast). however we are conservative, as the more\r\n        // buffer the slower the vertical redraw speed\r\n        const leftBounds = this.viewportLeft - 200;\r\n        const rightBounds = this.viewportRight + 200;\r\n\r\n        const columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;\r\n        const columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;\r\n\r\n        return !columnToMuchLeft && !columnToMuchRight;\r\n    }\r\n\r\n    // used by Grid API only\r\n    public getViewportColumns(): AgColumn[] {\r\n        const { leftCols, rightCols } = this.visibleCols;\r\n        const res = this.colsWithinViewport.concat(leftCols).concat(rightCols);\r\n        return res;\r\n    }\r\n\r\n    // + rowRenderer\r\n    // if we are not column spanning, this just returns back the virtual centre columns,\r\n    // however if we are column spanning, then different rows can have different virtual\r\n    // columns, so we have to work out the list for each individual row.\r\n    public getColsWithinViewport(rowNode: RowNode): AgColumn[] {\r\n        if (!this.colModel.colSpanActive) {\r\n            return this.colsWithinViewport;\r\n        }\r\n\r\n        const emptySpaceBeforeColumn = (col: AgColumn) => {\r\n            const left = col.getLeft();\r\n\r\n            return _exists(left) && left > this.viewportLeft;\r\n        };\r\n\r\n        // if doing column virtualisation, then we filter based on the viewport.\r\n        const inViewportCallback = this.isColumnVirtualisationSuppressed()\r\n            ? undefined\r\n            : this.isColumnInRowViewport.bind(this);\r\n        const { visibleCols } = this;\r\n        const displayedColumnsCenter = visibleCols.centerCols;\r\n\r\n        return visibleCols.getColsForRow(rowNode, displayedColumnsCenter, inViewportCallback, emptySpaceBeforeColumn);\r\n    }\r\n\r\n    // checks what columns are currently displayed due to column virtualisation. dispatches an event\r\n    // if the list of columns has changed.\r\n    // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()\r\n    public checkViewportColumns(afterScroll: boolean = false): void {\r\n        const viewportColumnsChanged = this.extractViewport();\r\n        if (viewportColumnsChanged) {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'virtualColumnsChanged',\r\n                afterScroll,\r\n            });\r\n        }\r\n    }\r\n\r\n    private calculateHeaderRows(): void {\r\n        // go through each group, see if any of it's cols are displayed, and if yes,\r\n        // then this group is included\r\n        this.clear(true);\r\n\r\n        // for easy lookup when building the groups.\r\n        const renderedColIds: { [key: string]: boolean } = {};\r\n\r\n        const { leftCols, rightCols, treeLeft, treeRight, treeCenter } = this.visibleCols;\r\n        const allRenderedCols = this.headerColsWithinViewport.concat(leftCols).concat(rightCols);\r\n\r\n        allRenderedCols.forEach((col) => (renderedColIds[col.getId()] = true));\r\n\r\n        const testGroup = (\r\n            children: (AgColumn | AgColumnGroup)[],\r\n            result: { [row: number]: (AgColumn | AgColumnGroup)[] },\r\n            dept: number\r\n        ): boolean => {\r\n            let returnValue = false;\r\n\r\n            for (let i = 0; i < children.length; i++) {\r\n                // see if this item is within viewport\r\n                const child = children[i];\r\n                let addThisItem = false;\r\n\r\n                if (isColumn(child)) {\r\n                    // for column, test if column is included\r\n                    addThisItem = renderedColIds[child.getId()] === true;\r\n                } else {\r\n                    // if group, base decision on children\r\n                    const columnGroup = child as AgColumnGroup;\r\n                    const displayedChildren = columnGroup.getDisplayedChildren();\r\n\r\n                    if (displayedChildren) {\r\n                        addThisItem = testGroup(displayedChildren, result, dept + 1);\r\n                    }\r\n                }\r\n\r\n                if (addThisItem) {\r\n                    returnValue = true;\r\n                    if (!result[dept]) {\r\n                        result[dept] = [];\r\n                    }\r\n                    result[dept].push(child);\r\n                }\r\n            }\r\n            return returnValue;\r\n        };\r\n\r\n        testGroup(treeLeft, this.rowsOfHeadersToRenderLeft, 0);\r\n        testGroup(treeRight, this.rowsOfHeadersToRenderRight, 0);\r\n        testGroup(treeCenter, this.rowsOfHeadersToRenderCenter, 0);\r\n    }\r\n\r\n    private extractViewport(): boolean {\r\n        const hashColumn = (c: AgColumn) => `${c.getId()}-${c.getPinned() || 'normal'}`;\r\n\r\n        this.extractViewportColumns();\r\n        const newHash = this.getViewportColumns().map(hashColumn).join('#');\r\n        const changed = this.colsWithinViewportHash !== newHash;\r\n\r\n        if (changed) {\r\n            this.colsWithinViewportHash = newHash;\r\n            this.calculateHeaderRows();\r\n        }\r\n\r\n        return changed;\r\n    }\r\n}\r\n\r\nfunction isAnyParentAutoHeaderHeight(col: AgColumn | AgColumnGroup | null): boolean {\r\n    while (col) {\r\n        if (col.isAutoHeaderHeight()) {\r\n            return true;\r\n        }\r\n        col = col.getParent();\r\n    }\r\n\r\n    return false;\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { ComponentType } from '../../interfaces/iUserCompDetails';\r\nimport type { ICellRendererComp, ICellRendererParams } from '../../rendering/cellRenderers/iCellRenderer';\r\nimport { _loadTemplate } from '../../utils/dom';\r\n\r\nexport class AgComponentUtils extends BeanStub implements NamedBean {\r\n    beanName = 'agCompUtils' as const;\r\n\r\n    public adaptFunction(type: ComponentType, jsCompFunc: any): any {\r\n        if (!type.cellRenderer) {\r\n            return null;\r\n        }\r\n\r\n        class Adapter implements ICellRendererComp {\r\n            private eGui: HTMLElement;\r\n\r\n            refresh(): boolean {\r\n                return false;\r\n            }\r\n\r\n            getGui(): HTMLElement {\r\n                return this.eGui;\r\n            }\r\n\r\n            init?(params: ICellRendererParams): void {\r\n                const callbackResult: string | HTMLElement = jsCompFunc(params);\r\n                const type = typeof callbackResult;\r\n                if (type === 'string' || type === 'number' || type === 'boolean') {\r\n                    this.eGui = _loadTemplate('<span>' + callbackResult + '</span>');\r\n                    return;\r\n                }\r\n                if (callbackResult == null) {\r\n                    this.eGui = _loadTemplate('<span></span>');\r\n                    return;\r\n                }\r\n                this.eGui = callbackResult as HTMLElement;\r\n            }\r\n        }\r\n\r\n        return Adapter;\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { AgComponentUtils } from './agComponentUtils';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const CellRendererFunctionModule: _ModuleWithoutApi = {\r\n    moduleName: 'CellRendererFunction',\r\n    version: VERSION,\r\n    beans: [AgComponentUtils],\r\n};\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { DynamicBeanName, UserComponentName } from '../../context/context';\r\nimport type { Module } from '../../interfaces/iModule';\r\nimport type { IconName, IconValue } from '../../utils/icon';\r\nimport { _errMsg } from '../../validation/logging';\r\nimport type { AgComponentSelector, ComponentSelector } from '../../widgets/component';\r\n\r\nexport class Registry extends BeanStub implements NamedBean {\r\n    beanName = 'registry' as const;\r\n\r\n    private agGridDefaults: { [key in UserComponentName]?: any } = {};\r\n\r\n    private agGridDefaultParams: { [key in UserComponentName]?: any } = {};\r\n\r\n    private jsComps: { [key: string]: any } = {};\r\n\r\n    private dynamicBeans: { [K in DynamicBeanName]?: new (args?: any[]) => object } = {};\r\n\r\n    private selectors: { [name in AgComponentSelector]?: ComponentSelector } = {};\r\n\r\n    private icons: { [K in IconName]?: IconValue } = {};\r\n\r\n    public postConstruct(): void {\r\n        const comps = this.gos.get('components');\r\n        if (comps != null) {\r\n            Object.entries(comps).forEach(([key, component]) => {\r\n                this.jsComps[key] = component;\r\n            });\r\n        }\r\n    }\r\n\r\n    public registerModule(module: Module): void {\r\n        const { icons, userComponents, dynamicBeans, selectors } = module;\r\n\r\n        if (userComponents) {\r\n            const registerUserComponent = (name: UserComponentName, component: any, params?: any) => {\r\n                this.agGridDefaults[name] = component;\r\n                if (params) {\r\n                    this.agGridDefaultParams[name] = params;\r\n                }\r\n            };\r\n            for (const name of Object.keys(userComponents) as UserComponentName[]) {\r\n                const comp = userComponents[name];\r\n                if (typeof comp === 'object') {\r\n                    registerUserComponent(name, comp.classImp, comp.params);\r\n                } else {\r\n                    registerUserComponent(name, comp);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (dynamicBeans) {\r\n            for (const name of Object.keys(dynamicBeans) as DynamicBeanName[]) {\r\n                this.dynamicBeans[name] = dynamicBeans[name];\r\n            }\r\n        }\r\n\r\n        selectors?.forEach((selector) => {\r\n            this.selectors[selector.selector] = selector;\r\n        });\r\n\r\n        if (icons) {\r\n            for (const name of Object.keys(icons) as IconName[]) {\r\n                this.icons[name] = icons[name];\r\n            }\r\n        }\r\n    }\r\n\r\n    public getUserComponent(\r\n        propertyName: string,\r\n        name: string\r\n    ): { componentFromFramework: boolean; component: any; params?: any } | null {\r\n        const createResult = (component: any, componentFromFramework: boolean, params?: any) => ({\r\n            componentFromFramework,\r\n            component,\r\n            params,\r\n        });\r\n\r\n        const { frameworkOverrides } = this.beans;\r\n\r\n        // FrameworkOverrides.frameworkComponent() is used in two locations:\r\n        // 1) for Vue, user provided components get registered via a framework specific way.\r\n        // 2) for React, it's how the React UI provides alternative default components (eg GroupCellRenderer and DetailCellRenderer)\r\n        const registeredViaFrameworkComp = frameworkOverrides.frameworkComponent(name, this.gos.get('components'));\r\n        if (registeredViaFrameworkComp != null) {\r\n            return createResult(registeredViaFrameworkComp, true);\r\n        }\r\n\r\n        const jsComponent = this.jsComps[name];\r\n        if (jsComponent) {\r\n            const isFwkComp = frameworkOverrides.isFrameworkComponent(jsComponent);\r\n            return createResult(jsComponent, isFwkComp);\r\n        }\r\n\r\n        const defaultComponent = this.agGridDefaults[name as UserComponentName];\r\n        if (defaultComponent) {\r\n            return createResult(defaultComponent, false, this.agGridDefaultParams[name as UserComponentName]);\r\n        }\r\n\r\n        this.beans.validation?.missingUserComponent(propertyName, name, this.agGridDefaults, this.jsComps);\r\n\r\n        return null;\r\n    }\r\n\r\n    public createDynamicBean<T>(name: DynamicBeanName, mandatory: boolean, ...args: any[]): T | undefined {\r\n        const BeanClass = this.dynamicBeans[name];\r\n\r\n        if (BeanClass == null) {\r\n            if (mandatory) {\r\n                throw new Error(_errMsg(256));\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        return new BeanClass(...args) as any;\r\n    }\r\n\r\n    public getSelector(name: AgComponentSelector): ComponentSelector | undefined {\r\n        return this.selectors[name];\r\n    }\r\n\r\n    public getIcon(name: IconName): IconValue | undefined {\r\n        return this.icons[name];\r\n    }\r\n}\r\n", "import type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { FakeHScrollComp } from './gridBodyComp/fakeHScrollComp';\r\nimport type { FakeVScrollComp } from './gridBodyComp/fakeVScrollComp';\r\nimport type { GridBodyCtrl } from './gridBodyComp/gridBodyCtrl';\r\nimport type { GridBodyScrollFeature } from './gridBodyComp/gridBodyScrollFeature';\r\nimport type { RowContainerCtrl } from './gridBodyComp/rowContainer/rowContainerCtrl';\r\nimport type { GridCtrl } from './gridComp/gridCtrl';\r\nimport type { GridHeaderCtrl } from './headerRendering/gridHeaderCtrl';\r\nimport type { HeaderRowContainerCtrl } from './headerRendering/rowContainer/headerRowContainerCtrl';\r\nimport type { ColumnPinnedType } from './interfaces/iColumn';\r\n\r\n/** If adding or removing a control, update `NUM_CTRLS` below. */\r\ninterface ReadyParams {\r\n    gridCtrl: GridCtrl;\r\n    gridBodyCtrl: GridBodyCtrl;\r\n\r\n    center: RowContainerCtrl;\r\n    left: RowContainerCtrl;\r\n    right: RowContainerCtrl;\r\n\r\n    bottomCenter: RowContainerCtrl;\r\n    bottomLeft: RowContainerCtrl;\r\n    bottomRight: RowContainerCtrl;\r\n\r\n    topCenter: RowContainerCtrl;\r\n    topLeft: RowContainerCtrl;\r\n    topRight: RowContainerCtrl;\r\n\r\n    stickyTopCenter: RowContainerCtrl;\r\n    stickyTopLeft: RowContainerCtrl;\r\n    stickyTopRight: RowContainerCtrl;\r\n\r\n    stickyBottomCenter: RowContainerCtrl;\r\n    stickyBottomLeft: RowContainerCtrl;\r\n    stickyBottomRight: RowContainerCtrl;\r\n\r\n    fakeHScrollComp: FakeHScrollComp;\r\n    fakeVScrollComp: FakeVScrollComp;\r\n    gridHeaderCtrl: GridHeaderCtrl;\r\n\r\n    centerHeader: HeaderRowContainerCtrl;\r\n    leftHeader: HeaderRowContainerCtrl;\r\n    rightHeader: HeaderRowContainerCtrl;\r\n}\r\n\r\n/**\r\n * This is the number of controls defined above in `ReadyParams`.\r\n * This allows us to quickly know when all controls have been registered.\r\n */\r\nconst NUM_CTRLS = 23;\r\n\r\ntype CtrlType = keyof ReadyParams;\r\n\r\ntype BeanDestroyFunc = Pick<BeanStub<any>, 'addDestroyFunc'>;\r\n\r\n// for all controllers that are singletons, they can register here so other parts\r\n// of the application can access them.\r\nexport class CtrlsService extends BeanStub<'ready'> implements NamedBean {\r\n    beanName = 'ctrlsSvc' as const;\r\n\r\n    private params: ReadyParams = {} as any;\r\n    private ready = false;\r\n    private readyCallbacks: ((p: ReadyParams) => void)[] = [];\r\n\r\n    public postConstruct() {\r\n        // With React 19 StrictMode, ctrlService can be ready twice.\r\n        // The first time after the first render cycle, and the second time after the second render cycle which is only done in StrictMode.\r\n        // By making the local events async, we effectively debounce the first ready event until after the second render cycle has completed.\r\n        // This means that the ready logic across the grid will run against the currently rendered components and controllers.\r\n        // We make this async only for React 19 as StrictMode in React 19 double fires ref callbacks whereas previous versions of React do not.\r\n        this.addEventListener(\r\n            'ready',\r\n            () => {\r\n                this.updateReady();\r\n                if (this.ready) {\r\n                    this.readyCallbacks.forEach((c) => c(this.params));\r\n                    this.readyCallbacks.length = 0;\r\n                }\r\n            },\r\n            this.beans.frameworkOverrides.runWhenReadyAsync?.() ?? false\r\n        );\r\n    }\r\n    private updateReady(): void {\r\n        const values = Object.values(this.params);\r\n        // ready when all ctrls have been registered and are alive\r\n        this.ready =\r\n            values.length === NUM_CTRLS &&\r\n            values.every((ctrl: BeanStub<any> | undefined) => {\r\n                return ctrl?.isAlive() ?? false;\r\n            });\r\n    }\r\n\r\n    public whenReady(caller: BeanDestroyFunc, callback: (p: ReadyParams) => void): void {\r\n        if (this.ready) {\r\n            callback(this.params);\r\n        } else {\r\n            this.readyCallbacks.push(callback);\r\n        }\r\n        caller.addDestroyFunc(() => {\r\n            // remove the callback if the caller is destroyed so that we don't call it against a destroyed component\r\n            const index = this.readyCallbacks.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.readyCallbacks.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    public register<K extends CtrlType, T extends ReadyParams[K]>(ctrlType: K, ctrl: T): void {\r\n        this.params[ctrlType] = ctrl;\r\n        this.updateReady();\r\n        if (this.ready) {\r\n            this.dispatchLocalEvent({ type: 'ready' });\r\n        }\r\n\r\n        ctrl.addDestroyFunc(() => {\r\n            // Ensure ready is false when a controller is destroyed\r\n            // We do not clear them as a lot of code still runs during destroy logic which may need access to the controllers\r\n            // NOTE: This is not ideal and we should look to stop logic using controllers during destroy\r\n            this.updateReady();\r\n        });\r\n    }\r\n\r\n    public get<K extends CtrlType>(ctrlType: K): ReadyParams[K] {\r\n        return this.params[ctrlType];\r\n    }\r\n\r\n    public getGridBodyCtrl(): GridBodyCtrl {\r\n        return this.params.gridBodyCtrl;\r\n    }\r\n\r\n    public getHeaderRowContainerCtrls(): HeaderRowContainerCtrl[] {\r\n        const { leftHeader, centerHeader, rightHeader } = this.params;\r\n        return [leftHeader, rightHeader, centerHeader];\r\n    }\r\n\r\n    public getHeaderRowContainerCtrl(pinned?: ColumnPinnedType): HeaderRowContainerCtrl | undefined {\r\n        const params = this.params;\r\n        switch (pinned) {\r\n            case 'left':\r\n                return params.leftHeader;\r\n            case 'right':\r\n                return params.rightHeader;\r\n            default:\r\n                return params.centerHeader;\r\n        }\r\n    }\r\n\r\n    public getScrollFeature(): GridBodyScrollFeature {\r\n        return this.getGridBodyCtrl().scrollFeature;\r\n    }\r\n}\r\n", "export const coreCSS = /*css*/ `:where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart),:where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart) :where([class^=ag-]){box-sizing:border-box;&:after,&:before{box-sizing:border-box}&:where(div,span,label):focus-visible{box-shadow:inset var(--ag-focus-shadow);outline:none}}:where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart) :where([class^=ag-]) ::-ms-clear{display:none}.ag-aria-description-container{border:0;z-index:9999;clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ag-hidden{display:none!important}.ag-invisible{visibility:hidden!important}.ag-unselectable{-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-selectable{-webkit-user-select:text;-moz-user-select:text;user-select:text}.ag-tab-guard{display:block;height:0;position:absolute;width:0}:where(.ag-virtual-list-viewport) .ag-tab-guard{position:sticky}.ag-tab-guard-top{top:1px}.ag-tab-guard-bottom{bottom:1px}.ag-shake-left-to-right{animation-direction:alternate;animation-duration:.2s;animation-iteration-count:infinite;animation-name:ag-shake-left-to-right}@keyframes ag-shake-left-to-right{0%{padding-left:6px;padding-right:2px}to{padding-left:2px;padding-right:6px}}.ag-body-horizontal-scroll-viewport,.ag-body-vertical-scroll-viewport,.ag-body-viewport,.ag-center-cols-viewport,.ag-floating-bottom-viewport,.ag-floating-top-viewport,.ag-header-viewport,.ag-sticky-bottom-viewport,.ag-sticky-top-viewport,.ag-virtual-list-viewport{flex:1 1 auto;height:100%;min-width:0;overflow:hidden;position:relative}.ag-body-viewport,.ag-center-cols-viewport,.ag-floating-bottom-viewport,.ag-floating-top-viewport,.ag-header-viewport,.ag-sticky-bottom-viewport,.ag-sticky-top-viewport{overflow-x:auto;-ms-overflow-style:none!important;scrollbar-width:none!important;&::-webkit-scrollbar{display:none!important}}.ag-body-viewport{display:flex;overflow-x:hidden;&:where(.ag-layout-normal){overflow-y:auto;-webkit-overflow-scrolling:touch}}.ag-sticky-bottom-container,.ag-sticky-top-container{min-height:1px}.ag-center-cols-viewport{min-height:100%;width:100%}.ag-body-horizontal-scroll-viewport{overflow-x:scroll}.ag-body-vertical-scroll-viewport{overflow-y:scroll}.ag-virtual-list-viewport{overflow:auto;width:100%}.ag-body-container,.ag-body-horizontal-scroll-container,.ag-body-vertical-scroll-container,.ag-center-cols-container,.ag-floating-bottom-container,.ag-floating-bottom-full-width-container,.ag-floating-top-container,.ag-full-width-container,.ag-header-container,.ag-pinned-left-cols-container,.ag-pinned-right-cols-container,.ag-sticky-bottom-container,.ag-sticky-top-container,.ag-virtual-list-container{position:relative}.ag-floating-bottom-container,.ag-floating-top-container,.ag-header-container,.ag-sticky-bottom-container,.ag-sticky-top-container{height:100%;white-space:nowrap}.ag-center-cols-container,.ag-pinned-right-cols-container{display:block}.ag-body-horizontal-scroll-container{height:100%}.ag-body-vertical-scroll-container{width:100%}.ag-floating-bottom-full-width-container,.ag-floating-top-full-width-container,.ag-full-width-container,.ag-sticky-bottom-full-width-container,.ag-sticky-top-full-width-container{pointer-events:none;position:absolute;top:0}:where(.ag-ltr) .ag-floating-bottom-full-width-container,:where(.ag-ltr) .ag-floating-top-full-width-container,:where(.ag-ltr) .ag-full-width-container,:where(.ag-ltr) .ag-sticky-bottom-full-width-container,:where(.ag-ltr) .ag-sticky-top-full-width-container{left:0}:where(.ag-rtl) .ag-floating-bottom-full-width-container,:where(.ag-rtl) .ag-floating-top-full-width-container,:where(.ag-rtl) .ag-full-width-container,:where(.ag-rtl) .ag-sticky-bottom-full-width-container,:where(.ag-rtl) .ag-sticky-top-full-width-container{right:0}.ag-full-width-container{width:100%}.ag-floating-bottom-full-width-container,.ag-floating-top-full-width-container{display:inline-block;height:100%;overflow:hidden;width:100%}.ag-virtual-list-container{overflow:hidden}.ag-body{display:flex;flex:1 1 auto;flex-direction:row!important;min-height:0;position:relative}.ag-body-horizontal-scroll,.ag-body-vertical-scroll{display:flex;min-height:0;min-width:0;position:relative;&:where(.ag-scrollbar-invisible){bottom:0;position:absolute;&:where(.ag-apple-scrollbar){opacity:0;transition:opacity .4s;visibility:hidden;&:where(.ag-scrollbar-scrolling,.ag-scrollbar-active){opacity:1;visibility:visible}}}}.ag-body-horizontal-scroll{width:100%;&:where(.ag-scrollbar-invisible){left:0;right:0}}.ag-body-vertical-scroll{height:100%;&:where(.ag-scrollbar-invisible){top:0;z-index:10}}:where(.ag-ltr) .ag-body-vertical-scroll{&:where(.ag-scrollbar-invisible){right:0}}:where(.ag-rtl) .ag-body-vertical-scroll{&:where(.ag-scrollbar-invisible){left:0}}.ag-force-vertical-scroll{overflow-y:scroll!important}.ag-horizontal-left-spacer,.ag-horizontal-right-spacer{height:100%;min-width:0;overflow-x:scroll;&:where(.ag-scroller-corner){overflow-x:hidden}}:where(.ag-row-animation) .ag-row{transition:transform .4s,top .4s,opacity .2s;&:where(.ag-after-created){transition:transform .4s,top .4s,height .4s,opacity .2s}}:where(.ag-row-no-animation) .ag-row{transition:none}.ag-row-loading{align-items:center;display:flex}.ag-row-position-absolute{position:absolute}.ag-row-position-relative{position:relative}.ag-full-width-row{overflow:hidden;pointer-events:all}.ag-row-inline-editing{z-index:1}.ag-row-dragging{z-index:2}.ag-stub-cell{align-items:center;display:flex}.ag-cell{display:inline-block;height:100%;position:absolute;white-space:nowrap;&:focus-visible{box-shadow:none}}.ag-cell-value{flex:1 1 auto}.ag-cell-value,.ag-group-value{overflow:hidden;text-overflow:ellipsis}.ag-cell-wrap-text{white-space:normal;word-break:break-word}:where(.ag-cell) .ag-icon{display:inline-block;vertical-align:middle}.ag-floating-top{border-bottom:var(--ag-pinned-row-border)}.ag-floating-bottom,.ag-floating-top{display:flex;overflow:hidden;position:relative;white-space:nowrap;width:100%}.ag-floating-bottom{border-top:var(--ag-pinned-row-border)}.ag-sticky-bottom,.ag-sticky-top{background-color:var(--ag-background-color);display:flex;height:0;overflow:hidden;position:absolute;width:100%}.ag-opacity-zero{opacity:0!important}.ag-cell-label-container{align-items:center;display:flex;flex-direction:row-reverse;height:100%;justify-content:space-between;width:100%}:where(.ag-right-aligned-header){.ag-cell-label-container{flex-direction:row}.ag-header-cell-text{text-align:end}}.ag-column-group-icons{display:block;>*{cursor:pointer}}:where(.ag-ltr){direction:ltr;.ag-body,.ag-body-horizontal-scroll,.ag-body-viewport,.ag-floating-bottom,.ag-floating-top,.ag-header,.ag-sticky-bottom,.ag-sticky-top{flex-direction:row}}:where(.ag-rtl){direction:rtl;text-align:right;.ag-body,.ag-body-horizontal-scroll,.ag-body-viewport,.ag-floating-bottom,.ag-floating-top,.ag-header,.ag-sticky-bottom,.ag-sticky-top{flex-direction:row-reverse}.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{display:block}}:where(.ag-rtl){.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{transform:rotate(180deg)}}:where(.ag-rtl){.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{transform:rotate(-180deg)}}.ag-measurement-container{height:0;overflow:hidden;visibility:hidden;width:0}.ag-measurement-element-border{display:inline-block;&:before{border-left:var(--ag-internal-measurement-border);content:\"\";display:block}}.ag-group{position:relative;width:100%}.ag-group-title-bar{align-items:center;display:flex;padding:var(--ag-spacing)}.ag-group-title{display:inline;min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:where(.ag-group-title-bar) .ag-group-title{cursor:default}.ag-group-toolbar{align-items:center;display:flex;padding:var(--ag-spacing)}.ag-group-container{display:flex}.ag-disabled .ag-group-container{pointer-events:none}.ag-disabled-group-container,.ag-disabled-group-title-bar{opacity:.5}.ag-group-container-horizontal{flex-flow:row wrap}.ag-group-container-vertical{flex-direction:column}.ag-group-title-bar-icon{cursor:pointer;flex:none}:where(.ag-ltr) .ag-group-title-bar-icon{margin-right:var(--ag-spacing)}:where(.ag-rtl) .ag-group-title-bar-icon{margin-left:var(--ag-spacing)}:where(.ag-group-item-alignment-stretch) .ag-group-item{align-items:stretch}:where(.ag-group-item-alignment-start) .ag-group-item{align-items:flex-start}:where(.ag-group-item-alignment-end) .ag-group-item{align-items:flex-end}.ag-popup-child{top:0;z-index:5;&:where(:not(.ag-tooltip-custom)){box-shadow:var(--ag-popup-shadow)}}.ag-popup-editor{position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-large-text-input{display:block}:where(.ag-ltr) .ag-row:not(.ag-row-level-0) .ag-pivot-leaf-group{margin-left:var(--ag-row-group-indent-size)}:where(.ag-rtl) .ag-row:not(.ag-row-level-0) .ag-pivot-leaf-group{margin-right:var(--ag-row-group-indent-size)}:where(.ag-ltr) .ag-row-group-leaf-indent{margin-left:calc(var(--ag-cell-widget-spacing) + var(--ag-icon-size))}:where(.ag-rtl) .ag-row-group-leaf-indent{margin-right:calc(var(--ag-cell-widget-spacing) + var(--ag-icon-size))}.ag-value-change-delta{padding:0 2px}.ag-value-change-delta-up{color:var(--ag-value-change-delta-up-color)}.ag-value-change-delta-down{color:var(--ag-value-change-delta-down-color)}.ag-value-change-value{background-color:transparent;border-radius:1px;padding-left:1px;padding-right:1px;transition:background-color 1s}.ag-value-change-value-highlight{background-color:var(--ag-value-change-value-highlight-background-color);transition:background-color .1s}.ag-cell-data-changed{background-color:var(--ag-value-change-value-highlight-background-color)!important}.ag-cell-data-changed-animation{background-color:transparent}.ag-cell-highlight{background-color:var(--ag-range-selection-highlight-color)!important}.ag-row{background-color:var(--ag-background-color);border-bottom:var(--ag-row-border);color:var(--ag-cell-text-color);font-family:var(--ag-cell-font-family);font-size:var(--ag-data-font-size);height:var(--ag-row-height);white-space:nowrap;width:100%;--ag-internal-content-line-height:calc(min(var(--ag-row-height), var(--ag-line-height, 1000px)) - var(--ag-internal-row-border-width, 1px))}:where(.ag-body-vertical-content-no-gap>div>div>div,.ag-body-vertical-content-no-gap>div>div>div>div)>.ag-row-last{border-bottom-color:transparent}.ag-sticky-bottom{border-top:var(--ag-row-border);box-sizing:content-box!important}.ag-group-contracted,.ag-group-expanded{cursor:pointer}.ag-cell,.ag-full-width-row .ag-cell-wrapper.ag-row-group{border:1px solid transparent;line-height:var(--ag-internal-content-line-height);-webkit-font-smoothing:subpixel-antialiased}:where(.ag-ltr) .ag-cell{border-right:var(--ag-column-border)}:where(.ag-rtl) .ag-cell{border-left:var(--ag-column-border)}:where(.ag-ltr) :where(.ag-body-horizontal-content-no-gap) .ag-column-last{border-right-color:transparent}:where(.ag-rtl) :where(.ag-body-horizontal-content-no-gap) .ag-column-last{border-left-color:transparent}.ag-cell-wrapper{align-items:center;display:flex;>:where(:not(.ag-cell-value,.ag-group-value)){align-items:center;display:flex;height:var(--ag-internal-content-line-height)}&:where(.ag-row-group){align-items:flex-start}:where(.ag-full-width-row) &:where(.ag-row-group){align-items:center;height:100%}}:where(.ag-ltr) .ag-cell-wrapper{padding-left:calc(var(--ag-indentation-level)*var(--ag-row-group-indent-size))}:where(.ag-rtl) .ag-cell-wrapper{padding-right:calc(var(--ag-indentation-level)*var(--ag-row-group-indent-size))}:where(.ag-ltr) .ag-row>.ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}:where(.ag-rtl) .ag-row>.ag-cell-wrapper.ag-row-group{padding-right:calc(var(--ag-cell-horizontal-padding) + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}.ag-cell-focus:not(.ag-cell-range-selected):focus-within,.ag-cell-range-single-cell,.ag-cell-range-single-cell.ag-cell-range-handle,.ag-context-menu-open .ag-cell-focus:not(.ag-cell-range-selected),.ag-full-width-row.ag-row-focus:focus .ag-cell-wrapper.ag-row-group{border:1px solid;border-color:var(--ag-range-selection-border-color);border-style:var(--ag-range-selection-border-style);outline:initial}:where(.ag-ltr) .ag-group-contracted,:where(.ag-ltr) .ag-group-expanded,:where(.ag-ltr) .ag-row-drag,:where(.ag-ltr) .ag-selection-checkbox{margin-right:var(--ag-cell-widget-spacing)}:where(.ag-rtl) .ag-group-contracted,:where(.ag-rtl) .ag-group-expanded,:where(.ag-rtl) .ag-row-drag,:where(.ag-rtl) .ag-selection-checkbox{margin-left:var(--ag-cell-widget-spacing)}:where(.ag-ltr) .ag-group-child-count{margin-left:3px}:where(.ag-rtl) .ag-group-child-count{margin-right:3px}.ag-row-highlight-above:after,.ag-row-highlight-below:after{background-color:var(--ag-range-selection-border-color);content:\"\";height:1px;position:absolute;width:calc(100% - 1px)}:where(.ag-ltr) .ag-row-highlight-above:after,:where(.ag-ltr) .ag-row-highlight-below:after{left:1px}:where(.ag-rtl) .ag-row-highlight-above:after,:where(.ag-rtl) .ag-row-highlight-below:after{right:1px}.ag-row-highlight-above:after{top:0}.ag-row-highlight-below:after{bottom:0}.ag-row-odd{background-color:var(--ag-odd-row-background-color)}.ag-row-selected:before{background-color:var(--ag-selected-row-background-color);content:\"\";display:block;inset:0;pointer-events:none;position:absolute}.ag-row-hover.ag-full-width-row.ag-row-group:before,.ag-row-hover:not(.ag-full-width-row):before{background-color:var(--ag-row-hover-color);content:\"\";display:block;inset:0;pointer-events:none;position:absolute}.ag-row-hover.ag-row-selected:before{background-color:var(--ag-row-hover-color);background-image:linear-gradient(var(--ag-selected-row-background-color),var(--ag-selected-row-background-color))}.ag-row-hover.ag-full-width-row.ag-row-group>*{position:relative}.ag-column-hover{background-color:var(--ag-column-hover-color)}.ag-right-aligned-cell{font-variant-numeric:tabular-nums}:where(.ag-ltr) .ag-right-aligned-cell{text-align:right}:where(.ag-rtl) .ag-right-aligned-cell{text-align:left}.ag-right-aligned-cell .ag-cell-value,.ag-right-aligned-cell .ag-group-value{margin-left:auto}:where(.ag-ltr) .ag-cell:not(.ag-cell-inline-editing),:where(.ag-ltr) .ag-full-width-row .ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px + var(--ag-row-group-indent-size)*var(--ag-indentation-level));padding-right:calc(var(--ag-cell-horizontal-padding) - 1px)}:where(.ag-rtl) .ag-cell:not(.ag-cell-inline-editing),:where(.ag-rtl) .ag-full-width-row .ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px);padding-right:calc(var(--ag-cell-horizontal-padding) - 1px + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}.ag-row>.ag-cell-wrapper{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px);padding-right:calc(var(--ag-cell-horizontal-padding) - 1px)}.ag-row-dragging{cursor:move;opacity:.5}.ag-details-row{background-color:var(--ag-background-color);padding:calc(var(--ag-spacing)*3.75)}.ag-layout-auto-height,.ag-layout-print{.ag-center-cols-container,.ag-center-cols-viewport{min-height:150px}}.ag-overlay-loading-wrapper{background-color:var(--ag-modal-overlay-background-color)}.ag-skeleton-container{align-content:center;height:100%;width:100%}.ag-skeleton-effect{animation:ag-skeleton-loading 1.5s ease-in-out .5s infinite;background-color:var(--ag-row-loading-skeleton-effect-color);border-radius:.25rem;height:1em;width:100%}:where(.ag-ltr) .ag-right-aligned-cell .ag-skeleton-effect{margin-left:auto}:where(.ag-rtl) .ag-right-aligned-cell .ag-skeleton-effect{margin-right:auto}@keyframes ag-skeleton-loading{0%{opacity:1}50%{opacity:.4}to{opacity:1}}.ag-loading{align-items:center;display:flex;height:100%}:where(.ag-ltr) .ag-loading{padding-left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-loading{padding-right:var(--ag-cell-horizontal-padding)}:where(.ag-ltr) .ag-loading-icon{padding-right:var(--ag-cell-widget-spacing)}:where(.ag-rtl) .ag-loading-icon{padding-left:var(--ag-cell-widget-spacing)}.ag-icon-loading{animation-duration:1s;animation-iteration-count:infinite;animation-name:spin;animation-timing-function:linear}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.ag-input-wrapper,.ag-picker-field-wrapper{align-items:center;display:flex;flex:1 1 auto;line-height:normal;position:relative}.ag-input-field{align-items:center;display:flex;flex-direction:row}.ag-input-field-input:where(:not([type=checkbox],[type=radio])){flex:1 1 auto;min-width:0;width:100%}.ag-header{background-color:var(--ag-header-background-color);border-bottom:var(--ag-header-row-border);color:var(--ag-header-text-color);display:flex;font-family:var(--ag-header-font-family);font-size:var(--ag-header-font-size);font-weight:var(--ag-header-font-weight);overflow:hidden;white-space:nowrap;width:100%}.ag-header-row{height:var(--ag-header-height);position:absolute}.ag-floating-filter-button-button,.ag-header-cell-filter-button,.ag-header-cell-menu-button,.ag-header-expand-icon,.ag-panel-title-bar-button,:where(.ag-header-cell-sortable) .ag-header-cell-label{cursor:pointer}:where(.ag-ltr) .ag-header-expand-icon{margin-left:4px}:where(.ag-rtl) .ag-header-expand-icon{margin-right:4px}.ag-header-row:where(:not(:first-child)){:where(.ag-header-cell:not(.ag-header-span-height.ag-header-span-total,.ag-header-parent-hidden),.ag-header-group-cell.ag-header-group-cell-with-group){border-top:var(--ag-header-row-border)}}.ag-header-row:where(:not(.ag-header-row-column-group)){overflow:hidden}:where(.ag-header.ag-header-allow-overflow) .ag-header-row{overflow:visible}.ag-header-cell{display:inline-flex;overflow:hidden}.ag-header-group-cell{display:flex}.ag-header-cell,.ag-header-group-cell{align-items:center;gap:var(--ag-cell-widget-spacing);height:100%;padding:0 var(--ag-cell-horizontal-padding);position:absolute}@property --ag-internal-moving-color{syntax:\"<color>\";inherits:false;initial-value:transparent}@property --ag-internal-hover-color{syntax:\"<color>\";inherits:false;initial-value:transparent}.ag-header-cell:where(:not(.ag-floating-filter)),.ag-header-group-cell{&:before{background-image:linear-gradient(var(--ag-internal-hover-color),var(--ag-internal-hover-color)),linear-gradient(var(--ag-internal-moving-color),var(--ag-internal-moving-color));content:\"\";inset:0;position:absolute;--ag-internal-moving-color:transparent;--ag-internal-hover-color:transparent;transition:--ag-internal-moving-color var(--ag-header-cell-background-transition-duration),--ag-internal-hover-color var(--ag-header-cell-background-transition-duration)}&:where(:hover):before{--ag-internal-hover-color:var(--ag-header-cell-hover-background-color)}&:where(.ag-header-cell-moving):before{--ag-internal-moving-color:var(--ag-header-cell-moving-background-color);--ag-internal-hover-color:var(--ag-header-cell-hover-background-color)}}:where(.ag-header-cell:not(.ag-floating-filter) *,.ag-header-group-cell *){position:relative;z-index:1}.ag-header-cell-menu-button:where(:not(.ag-header-menu-always-show)){opacity:0;transition:opacity .2s}.ag-header-cell-filter-button,:where(.ag-header-cell.ag-header-active) .ag-header-cell-menu-button{opacity:1}.ag-header-cell-label,.ag-header-group-cell-label{align-items:center;align-self:stretch;display:flex;flex:1 1 auto;overflow:hidden;padding:5px 0}:where(.ag-ltr) .ag-sort-indicator-icon{padding-left:var(--ag-spacing)}:where(.ag-rtl) .ag-sort-indicator-icon{padding-right:var(--ag-spacing)}.ag-header-cell-label{text-overflow:ellipsis}.ag-header-group-cell-label.ag-sticky-label{flex:none;max-width:100%;overflow:visible;position:sticky}:where(.ag-ltr) .ag-header-group-cell-label.ag-sticky-label{left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-header-group-cell-label.ag-sticky-label{right:var(--ag-cell-horizontal-padding)}.ag-header-cell-text,.ag-header-group-text{overflow:hidden;text-overflow:ellipsis}.ag-header-cell-text{word-break:break-word}.ag-header-cell-comp-wrapper{width:100%}:where(.ag-header-group-cell) .ag-header-cell-comp-wrapper{display:flex}:where(.ag-header-cell:not(.ag-header-cell-auto-height)) .ag-header-cell-comp-wrapper{align-items:center;display:flex;height:100%}.ag-header-cell-wrap-text .ag-header-cell-comp-wrapper{white-space:normal}.ag-header-cell-comp-wrapper-limited-height>*{overflow:hidden}:where(.ag-right-aligned-header) .ag-header-cell-label{flex-direction:row-reverse}:where(.ag-ltr) :where(.ag-header-cell:not(.ag-right-aligned-header)){.ag-header-label-icon,.ag-header-menu-icon{margin-left:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-header-cell:not(.ag-right-aligned-header)){.ag-header-label-icon,.ag-header-menu-icon{margin-right:var(--ag-spacing)}}:where(.ag-ltr) :where(.ag-header-cell.ag-right-aligned-header){.ag-header-label-icon,.ag-header-menu-icon{margin-right:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-header-cell.ag-right-aligned-header){.ag-header-label-icon,.ag-header-menu-icon{margin-left:var(--ag-spacing)}}.ag-header-cell:after,.ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{content:\"\";height:var(--ag-header-column-border-height);position:absolute;top:calc(50% - var(--ag-header-column-border-height)*.5);z-index:1}:where(.ag-ltr) .ag-header-cell:after,:where(.ag-ltr) .ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{border-right:var(--ag-header-column-border);right:0}:where(.ag-rtl) .ag-header-cell:after,:where(.ag-rtl) .ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{border-left:var(--ag-header-column-border);left:0}.ag-header-highlight-after:after,.ag-header-highlight-before:after{background-color:var(--ag-accent-color);content:\"\";height:100%;position:absolute;width:1px}:where(.ag-ltr) .ag-header-highlight-before:after{left:0}:where(.ag-rtl) .ag-header-highlight-before:after{right:0}:where(.ag-ltr) .ag-header-highlight-after:after{right:0;:where(.ag-pinned-left-header) &{right:1px}}:where(.ag-rtl) .ag-header-highlight-after:after{left:0;:where(.ag-pinned-left-header) &{left:1px}}.ag-header-cell-resize{align-items:center;cursor:ew-resize;display:flex;height:100%;position:absolute;top:0;width:8px;z-index:2;&:after{background-color:var(--ag-header-column-resize-handle-color);content:\"\";height:var(--ag-header-column-resize-handle-height);position:absolute;top:calc(50% - var(--ag-header-column-resize-handle-height)*.5);width:var(--ag-header-column-resize-handle-width);z-index:1}}:where(.ag-ltr) .ag-header-cell-resize{right:-3px;&:after{left:calc(50% - var(--ag-header-column-resize-handle-width))}}:where(.ag-rtl) .ag-header-cell-resize{left:-3px;&:after{right:calc(50% - var(--ag-header-column-resize-handle-width))}}:where(.ag-header-cell.ag-header-span-height) .ag-header-cell-resize:after{height:calc(100% - var(--ag-spacing)*4);top:calc(var(--ag-spacing)*2)}.ag-header-group-cell-no-group:where(.ag-header-span-height){display:none}.ag-sort-indicator-container{display:flex;gap:var(--ag-spacing)}.ag-layout-print{&.ag-body{display:block;height:unset}&.ag-root-wrapper{display:inline-block}.ag-body-horizontal-scroll,.ag-body-vertical-scroll{display:none}&.ag-force-vertical-scroll{overflow-y:visible!important}}@media print{.ag-root-wrapper.ag-layout-print{display:table;.ag-body-horizontal-scroll-viewport,.ag-body-viewport,.ag-center-cols-container,.ag-center-cols-viewport,.ag-root,.ag-root-wrapper-body,.ag-virtual-list-viewport{display:block!important;height:auto!important;overflow:hidden!important}.ag-cell,.ag-row{-moz-column-break-inside:avoid;break-inside:avoid}}}ag-grid,ag-grid-angular{display:block}.ag-chart,.ag-dnd-ghost,.ag-popup,.ag-root-wrapper{cursor:default;line-height:normal;white-space:normal;-webkit-font-smoothing:antialiased;background-color:var(--ag-background-color);color:var(--ag-text-color);color-scheme:var(--ag-browser-color-scheme);font-family:var(--ag-font-family);font-size:var(--ag-font-size);--ag-indentation-level:0}.ag-root-wrapper{border:var(--ag-wrapper-border);border-radius:var(--ag-wrapper-border-radius);display:flex;flex-direction:column;overflow:hidden;position:relative;&.ag-layout-normal{height:100%}}.ag-root-wrapper-body{display:flex;flex-direction:row;&.ag-layout-normal{flex:1 1 auto;height:0;min-height:0}}.ag-root{display:flex;flex-direction:column;position:relative;&.ag-layout-auto-height,&.ag-layout-normal{flex:1 1 auto;overflow:hidden;width:0}&.ag-layout-normal{height:100%}}:where(.ag-button){background:none;border:none;color:inherit;cursor:pointer;font-family:inherit;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0;text-indent:inherit;text-shadow:inherit;text-transform:inherit;word-spacing:inherit;&:focus-visible{box-shadow:var(--ag-focus-shadow);outline:none}}.ag-standard-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--ag-background-color);border:var(--ag-input-border);border-radius:var(--ag-border-radius);cursor:pointer;font-family:inherit;padding:var(--ag-spacing) calc(var(--ag-spacing)*2);&:hover{background-color:var(--ag-row-hover-color)}&:active{border-color:var(--ag-accent-color)}&:disabled{background-color:var(--ag-input-disabled-background-color);border:var(--ag-input-disabled-border);color:var(--ag-input-disabled-text-color)}}.ag-drag-handle{color:var(--ag-drag-handle-color);cursor:grab}.ag-list-item,.ag-virtual-list-item{height:var(--ag-list-item-height)}.ag-virtual-list-item{position:absolute;width:100%}.ag-select-list{background-color:var(--ag-background-color);border:var(--ag-input-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-dropdown-shadow);overflow:hidden auto}.ag-list-item{align-items:center;display:flex;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&.ag-active-item{background-color:var(--ag-row-hover-color)}}.ag-select-list-item{cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;:where(span){overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}:where(.ag-ltr) .ag-select-list-item{padding-left:calc(var(--ag-cell-horizontal-padding)/2)}:where(.ag-rtl) .ag-select-list-item{padding-right:calc(var(--ag-cell-horizontal-padding)/2)}.ag-list-item-hovered:after{background-color:var(--ag-accent-color);content:\"\";height:1px;left:0;position:absolute;right:0}.ag-item-highlight-top:after{top:0}.ag-item-highlight-bottom:after{bottom:0}.ag-column-select-column-group-readonly,.ag-column-select-column-readonly,.ag-disabled,[disabled]{.ag-icon{opacity:.5}&.ag-icon-grip{opacity:.35}}.ag-column-select-column-readonly{&.ag-icon-grip,.ag-icon-grip{opacity:.35}}.ag-chart-menu-icon,.ag-chart-settings-next,.ag-chart-settings-prev,.ag-column-group-icons,.ag-column-select-header-icon,.ag-filter-toolpanel-expand,.ag-floating-filter-button-button,.ag-group-title-bar-icon,.ag-header-cell-filter-button,.ag-header-cell-menu-button,.ag-header-expand-icon,.ag-panel-title-bar-button,.ag-panel-title-bar-button-icon,.ag-set-filter-group-icons,:where(.ag-group-contracted) .ag-icon,:where(.ag-group-expanded) .ag-icon{&:hover{background-color:var(--ag-icon-button-hover-color);border-radius:1px;box-shadow:0 0 0 4px var(--ag-icon-button-hover-color)}}.ag-filter-active{--ag-icon-button-hover-color:color-mix(in srgb,transparent,var(--ag-accent-color) 28%);background-color:color-mix(in srgb,transparent,var(--ag-accent-color) 14%);border-radius:1px;outline:solid 4px color-mix(in srgb,transparent,var(--ag-accent-color) 14%);position:relative;&:after{background-color:var(--ag-accent-color);border-radius:50%;content:\"\";height:6px;position:absolute;top:-1px;width:6px}:where(.ag-icon-filter){clip-path:path(\"M8,0C8,4.415 11.585,8 16,8L16,16L0,16L0,0L8,0Z\")}}:where(.ag-ltr) .ag-filter-active{&:after{right:-1px}}:where(.ag-rtl) .ag-filter-active{&:after{left:-1px}}.ag-menu{background-color:var(--ag-menu-background-color);border:var(--ag-menu-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-menu-shadow);color:var(--ag-menu-text-color);max-height:100%;overflow-y:auto}.ag-menu,.ag-resizer{position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-resizer{pointer-events:none;z-index:1}:where(.ag-resizer){&.ag-resizer-topLeft{height:5px;left:0;top:0;width:5px}&.ag-resizer-top{cursor:ns-resize;height:5px;left:5px;right:5px;top:0}&.ag-resizer-topRight{height:5px;right:0;top:0;width:5px}&.ag-resizer-right{bottom:5px;cursor:ew-resize;right:0;top:5px;width:5px}&.ag-resizer-bottomRight{bottom:0;height:5px;right:0;width:5px}&.ag-resizer-bottom{bottom:0;cursor:ns-resize;height:5px;left:5px;right:5px}&.ag-resizer-bottomLeft{bottom:0;height:5px;left:0;width:5px}&.ag-resizer-left{bottom:5px;cursor:ew-resize;left:0;top:5px;width:5px}}:where(.ag-ltr) :where(.ag-resizer){&.ag-resizer-topLeft{cursor:nwse-resize}&.ag-resizer-topRight{cursor:nesw-resize}&.ag-resizer-bottomRight{cursor:nwse-resize}&.ag-resizer-bottomLeft{cursor:nesw-resize}}:where(.ag-rtl) :where(.ag-resizer){&.ag-resizer-topLeft{cursor:nesw-resize}&.ag-resizer-topRight{cursor:nwse-resize}&.ag-resizer-bottomRight{cursor:nesw-resize}&.ag-resizer-bottomLeft{cursor:nwse-resize}}`;\n", "import type { Environment } from '../environment';\r\nimport { _getAllRegisteredModules } from '../modules/moduleRegistry';\r\nimport { coreCSS } from './core/core.css-GENERATED';\r\n\r\nexport const IS_SSR = typeof window !== 'object' || !window?.document?.fonts?.forEach;\r\n\r\ntype Injection = {\r\n    css: Set<string>;\r\n    last?: HTMLStyleElement;\r\n};\r\n\r\nlet injections = new WeakMap<HTMLElement, Injection>();\r\n\r\nexport const _injectGlobalCSS = (css: string, container: HTMLElement, debugId: string) => {\r\n    if (IS_SSR) return;\r\n\r\n    // if the container is attached to the main document, inject into the head\r\n    // (only one instance of each stylesheet created per document). Otherwise\r\n    // (and this happens for grids in the shadow root and grids detached form\r\n    // the DOM) inject into the container itself.\r\n    const root = container.getRootNode() === document ? document.head : container;\r\n\r\n    let injection = injections.get(root);\r\n    if (!injection) {\r\n        injection = { css: new Set() };\r\n        injections.set(root, injection);\r\n    }\r\n    if (injection.css.has(css)) return;\r\n\r\n    const style = document.createElement('style');\r\n    style.dataset.agGlobalCss = debugId;\r\n    style.textContent = css;\r\n\r\n    if (injection.last) {\r\n        injection.last.insertAdjacentElement('afterend', style);\r\n    } else {\r\n        root.insertBefore(style, root.querySelector(':not(title, meta)'));\r\n    }\r\n\r\n    injection.css.add(css);\r\n    injection.last = style;\r\n};\r\n\r\nexport const _injectCoreAndModuleCSS = (container: HTMLElement) => {\r\n    _injectGlobalCSS(coreCSS, container, 'core');\r\n    Array.from(_getAllRegisteredModules())\r\n        .sort((a, b) => a.moduleName.localeCompare(b.moduleName))\r\n        .forEach((module) =>\r\n            module.css?.forEach((css) => _injectGlobalCSS(css, container, `module-${module.moduleName}`))\r\n        );\r\n};\r\n\r\nconst gridsUsingThemingAPI = new Set<object>();\r\n\r\nexport const _registerGridUsingThemingAPI = (environment: Environment) => {\r\n    gridsUsingThemingAPI.add(environment);\r\n};\r\nexport const _unregisterGridUsingThemingAPI = (environment: Environment) => {\r\n    gridsUsingThemingAPI.delete(environment);\r\n    if (gridsUsingThemingAPI.size === 0) {\r\n        injections = new WeakMap();\r\n        for (const style of document.head.querySelectorAll('style[data-ag-global-css]')) {\r\n            style.remove();\r\n        }\r\n    }\r\n};\r\n", "import { _injectGlobalCSS } from './inject';\r\nimport type { Feature, WithParamTypes } from './theme-types';\r\n\r\n/**\r\n * A collection of CSS styles and default parameter values that can be added to\r\n * a theme. Parts are created with the createPart helper function.\r\n */\r\nexport type Part<TParams = unknown> = {\r\n    readonly feature?: string;\r\n    readonly modeParams: Record<string, TParams>;\r\n    readonly css?: string | (() => string) | undefined;\r\n};\r\n\r\n// string & {} used to preserve auto-complete from string union but allow any string\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype AnyString = string & {};\r\n\r\n// This utility type is a no-op (Expand<T> === T) but it changes the display of\r\n// the type in the IDE so that it shows something like Part<{myColor: ColorValue}>\r\n// instead of something like Part<WithParamTypes<InputStyleParams>>\r\nexport type ExpandTypeKeys<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;\r\n\r\ntype CreatePartArgs<T> = {\r\n    /**\r\n     * A string feature, e.g. 'iconSet'. Adding a part to a theme will remove\r\n     * any existing part with the same feature.\r\n     */\r\n    feature?: Feature | AnyString;\r\n\r\n    /**\r\n     * Default parameters for the part.\r\n     */\r\n    params?: WithParamTypes<T>;\r\n\r\n    /**\r\n     * Parameters for different theme modes, e.g. 'dark' or 'light'. Setting\r\n     * `modeParams: {myMode: {myColor: 'red'}}` on a theme part is the equivalent\r\n     * of `theme.withParams({myColor: 'red'}, 'myMode')`.\r\n     */\r\n    modeParams?: Record<string, WithParamTypes<T>>;\r\n\r\n    /**\r\n     * CSS styles associated with this part. The CSS will be injected into the\r\n     * page when the theme is used by a grid.\r\n     *\r\n     * The grid uses CSS nested to wrap this CSS in a selector that ensures it\r\n     * only applies to grids that are using a theme containing this part.\r\n     */\r\n    css?: string | (() => string);\r\n\r\n    /**\r\n     * URLs of CSS files to import before the part's CSS.\r\n     */\r\n    cssImports?: string[];\r\n};\r\n\r\n/**\r\n * Create a new empty part.\r\n *\r\n * @param feature an The part feature, e.g. 'iconSet'. Adding a part to a theme will remove any existing part with the same feature.\r\n * @param variant an optional identifier for debugging, if omitted one will be generated\r\n */\r\nexport const createPart = <T = unknown>(args: CreatePartArgs<T>): Part<ExpandTypeKeys<WithParamTypes<T>>> =>\r\n    new PartImpl(args) as any;\r\n\r\nexport const defaultModeName = '$default';\r\n\r\nlet partCounter = 0;\r\nexport class PartImpl implements Part {\r\n    feature?: string | undefined;\r\n    modeParams: Record<string, Record<string, unknown>>;\r\n    css?: string | (() => string) | undefined;\r\n    cssImports?: string[];\r\n\r\n    _inject?: { css: string; class: string } | false;\r\n\r\n    constructor({ feature, params, modeParams = {}, css, cssImports }: CreatePartArgs<unknown>) {\r\n        this.feature = feature;\r\n        this.css = css;\r\n        this.cssImports = cssImports;\r\n        this.modeParams = {\r\n            // NOTE: it's important that default is defined first, putting it\r\n            // first in iteration order, because when merging params the default\r\n            // params override any prior modal params, so modal params in this\r\n            // part need to come after default params to prevent them from being\r\n            // immediately overridden.\r\n            [defaultModeName]: {\r\n                ...(modeParams[defaultModeName] ?? {}),\r\n                ...(params ?? {}),\r\n            },\r\n            ...modeParams,\r\n        };\r\n    }\r\n\r\n    use(container?: HTMLElement): string | false {\r\n        let inject = this._inject;\r\n        if (inject == null) {\r\n            let { css } = this;\r\n            if (css) {\r\n                const className = `ag-theme-${this.feature ?? 'part'}-${++partCounter}`;\r\n                if (typeof css === 'function') css = css();\r\n                css = `:where(.${className}) {\\n${css}\\n}\\n`;\r\n                for (const cssImport of this.cssImports ?? []) {\r\n                    css = `@import url(${JSON.stringify(cssImport)});\\n${css}`;\r\n                }\r\n                inject = { css, class: className };\r\n            } else {\r\n                inject = false;\r\n            }\r\n            this._inject = inject;\r\n        }\r\n        if (inject && container) {\r\n            _injectGlobalCSS(inject.css, container, inject.class);\r\n        }\r\n        return inject ? inject.class : false;\r\n    }\r\n}\r\n", "import type { ColorValue } from './theme-types';\r\n\r\nexport const kebabCase = (str: string) => str.replace(/[A-Z]/g, (m) => `-${m}`).toLowerCase();\r\n\r\nexport const paramToVariableName = (paramName: string) => `--ag-${kebabCase(paramName)}`;\r\n\r\nexport const paramToVariableExpression = (paramName: string) => `var(${paramToVariableName(paramName)})`;\r\n\r\nexport const clamp = (value: number, min: number, max: number) => Math.max(min, Math.min(max, value));\r\n\r\nexport const logErrorMessage = (message: unknown, error?: unknown) => {\r\n    if (error) {\r\n        // eslint-disable-next-line no-console\r\n        console.error(message, error);\r\n    } else {\r\n        // eslint-disable-next-line no-console\r\n        console.error(message);\r\n    }\r\n};\r\n\r\nexport const memoize = <R, A = void>(fn: (arg: A) => R): ((arg: A) => R) => {\r\n    const values = new Map<A, R>();\r\n    return (a) => {\r\n        const key = a;\r\n        if (!values.has(key)) {\r\n            values.set(key, fn(a));\r\n        }\r\n        return values.get(key)!;\r\n    };\r\n};\r\n\r\nexport const accentMix = (mix: number): ColorValue => ({ ref: 'accentColor', mix });\r\nexport const foregroundMix = (mix: number): ColorValue => ({ ref: 'foregroundColor', mix });\r\nexport const foregroundBackgroundMix = (mix: number): ColorValue => ({\r\n    ref: 'foregroundColor',\r\n    mix,\r\n    onto: 'backgroundColor',\r\n});\r\nexport const foregroundColor: ColorValue = { ref: 'foregroundColor' };\r\nexport const accentColor: ColorValue = { ref: 'accentColor' };\r\n", "import type { ExpandTypeKeys } from '../Part';\r\nimport type { WithParamTypes } from '../theme-types';\r\nimport { accentColor, accentMix, foregroundBackgroundMix, foregroundColor, foregroundMix } from '../theme-utils';\r\n\r\nexport { coreCSS } from './core.css-GENERATED';\r\n\r\n/**\r\n * All possible theme param types - the actual params available will be a subset of this type depending on the parts in use by the theme.\r\n */\r\ntype CoreParamsDefinitions = {\r\n    /**\r\n     * The 'brand color' for the grid, used wherever a non-neutral color is required. Selections, focus outlines and checkboxes use the accent color by default.\r\n     */\r\n    accentColor: 'infer';\r\n\r\n    /**\r\n     * Color of the dividing line above the buttons in the advanced filter builder\r\n     */\r\n    advancedFilterBuilderButtonBarBorder: 'infer';\r\n\r\n    /**\r\n     * Color of the column pills in the Advanced Filter Builder\r\n     */\r\n    advancedFilterBuilderColumnPillColor: 'infer';\r\n\r\n    /**\r\n     * Amount that each level of the nesting in the advanced filter builder is indented by\r\n     */\r\n    advancedFilterBuilderIndentSize: 'infer';\r\n\r\n    /**\r\n     * Color of the join operator pills in the Advanced Filter Builder\r\n     */\r\n    advancedFilterBuilderJoinPillColor: 'infer';\r\n\r\n    /**\r\n     * Color of the filter option pills in the Advanced Filter Builder\r\n     */\r\n    advancedFilterBuilderOptionPillColor: 'infer';\r\n\r\n    /**\r\n     * Color of the value pills in the Advanced Filter Builder\r\n     */\r\n    advancedFilterBuilderValuePillColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the grid. Many UI elements are semi-transparent, so their color blends with the background color.\r\n     */\r\n    backgroundColor: 'infer';\r\n\r\n    /**\r\n     * Default color for borders.\r\n     */\r\n    borderColor: 'infer';\r\n\r\n    /**\r\n     * Default corner radius for many UI elements such as menus, dialogs and form widgets.\r\n     */\r\n    borderRadius: 'infer';\r\n\r\n    /**\r\n     * The CSS color-scheme to apply to the grid, which affects the default appearance of browser scrollbars form inputs unless these have been styled with CSS.\r\n     */\r\n    browserColorScheme: 'infer';\r\n\r\n    /**\r\n     * Padding at the start and end of grid cells and header cells.\r\n     */\r\n    cellHorizontalPadding: 'infer';\r\n\r\n    /**\r\n     * Multiply the cell horizontal padding by a number, e.g. 1.5 to increase by 50%\r\n     */\r\n    cellHorizontalPaddingScale: 'infer';\r\n\r\n    /**\r\n     * Color of text in grid cells.\r\n     */\r\n    cellTextColor: 'infer';\r\n\r\n    /**\r\n     * Horizontal spacing between widgets inside cells (e.g. row group expand buttons and row selection checkboxes).\r\n     */\r\n    cellWidgetSpacing: 'infer';\r\n\r\n    /**\r\n     * Color of form field labels within the chart editing panel for integrated charts\r\n     */\r\n    chartMenuLabelColor: 'infer';\r\n\r\n    /**\r\n     * Width of the chart editing panel for integrated charts\r\n     */\r\n    chartMenuPanelWidth: 'infer';\r\n\r\n    /**\r\n     * Background color for non-data areas of the grid. Headers, tool panels and menus use this color by default.\r\n     */\r\n    chromeBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Vertical borders between columns within the grid only, excluding headers.\r\n     */\r\n    columnBorder: 'infer';\r\n\r\n    /**\r\n     * Background color of the pill shape representing columns in the column drop component\r\n     */\r\n    columnDropCellBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Text color for the pill shape representing columns in the column drop component\r\n     */\r\n    columnDropCellTextColor: 'infer';\r\n\r\n    /**\r\n     * Color of the drag grip icon in the pill shape representing columns in the column drop component\r\n     */\r\n    columnDropCellDragHandleColor: 'infer';\r\n\r\n    /**\r\n     * Border for the pill shape representing columns in the column drop component\r\n     */\r\n    columnDropCellBorder: 'infer';\r\n\r\n    /**\r\n     * Background color when hovering over columns in the grid. This is not visible unless enabled in the grid options.\r\n     */\r\n    columnHoverColor: 'infer';\r\n\r\n    /**\r\n     * Amount of indentation for each level of children when selecting grouped columns in the column select widget.\r\n     */\r\n    columnSelectIndentSize: 'infer';\r\n\r\n    /**\r\n     * Border color popup dialogs such as the integrated charts and the advanced filter builder.\r\n     */\r\n    dialogBorder: 'infer';\r\n\r\n    /**\r\n     * Shadow for popup dialogs such as the integrated charts and the advanced filter builder.\r\n     */\r\n    dialogShadow: 'infer';\r\n\r\n    /**\r\n     * Border around cells being edited\r\n     */\r\n    cellEditingBorder: 'infer';\r\n\r\n    /**\r\n     * Shadow for cells being edited\r\n     */\r\n    cellEditingShadow: 'infer';\r\n\r\n    /**\r\n     * Background color of the drag and drop image component element when dragging columns\r\n     */\r\n    dragAndDropImageBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border color of the drag and drop image component element when dragging columns\r\n     */\r\n    dragAndDropImageBorder: 'infer';\r\n\r\n    /**\r\n     * Shadow for the drag and drop image component element when dragging columns\r\n     */\r\n    dragAndDropImageShadow: 'infer';\r\n\r\n    /**\r\n     * Color of the drag handle on draggable rows and column markers\r\n     */\r\n    dragHandleColor: 'infer';\r\n\r\n    /**\r\n     * Default shadow for dropdown menus\r\n     */\r\n    dropdownShadow: 'infer';\r\n\r\n    /**\r\n     * How much to indent child columns in the filters tool panel relative to their parent\r\n     */\r\n    filterToolPanelGroupIndent: 'infer';\r\n\r\n    /**\r\n     * Shadow around UI controls that have focus e.g. text inputs and buttons. The value must a valid CSS box-shadow.\r\n     */\r\n    focusShadow: 'infer';\r\n\r\n    /**\r\n     * Default font family for all text. Can be overridden by more specific parameters like `headerFontFamily`\r\n     */\r\n    fontFamily: 'infer';\r\n\r\n    /**\r\n     * Default font size for text throughout the grid UI\r\n     */\r\n    fontSize: 'infer';\r\n\r\n    /**\r\n     * Font size for data in grid rows\r\n     */\r\n    dataFontSize: 'infer';\r\n\r\n    /**\r\n     * Horizontal borders above footer components like the pagination and status bars\r\n     */\r\n    footerRowBorder: 'infer';\r\n\r\n    /**\r\n     * Default color for neutral UI elements. Most text, borders and backgrounds are defined as semi-transparent versions of this color, resulting in a blend between the background and foreground colours.\r\n     */\r\n    foregroundColor: 'infer';\r\n\r\n    /**\r\n     * Amount of spacing around and inside UI elements. All padding and margins in the grid are defined as a multiple of this value.\r\n     */\r\n    spacing: 'infer';\r\n\r\n    /**\r\n     * Background color for header and header-like.\r\n     */\r\n    headerBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Duration in seconds of the background color transition if headerCellHoverBackgroundColor or headerCellMovingBackgroundColor is set.\r\n     */\r\n    headerCellBackgroundTransitionDuration: 'infer';\r\n\r\n    /**\r\n     * Background color of a header cell when hovering over it, or `transparent` for no change.\r\n     */\r\n    headerCellHoverBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color of a header cell when dragging to reposition it, or `transparent` for no change.\r\n     */\r\n    headerCellMovingBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Vertical borders between columns within headers.\r\n     */\r\n    headerColumnBorder: 'infer';\r\n\r\n    /**\r\n     * Height of the vertical border between column headers. Percentage values are relative to the header height.\r\n     */\r\n    headerColumnBorderHeight: 'infer';\r\n\r\n    /**\r\n     * Color of the drag handle on resizable header columns. Set this to transparent to hide the resize handle.\r\n     */\r\n    headerColumnResizeHandleColor: 'infer';\r\n\r\n    /**\r\n     * Height of the drag handle on resizable header columns. Percentage values are relative to the header height.\r\n     */\r\n    headerColumnResizeHandleHeight: 'infer';\r\n\r\n    /**\r\n     * Width of the drag handle on resizable header columns.\r\n     */\r\n    headerColumnResizeHandleWidth: 'infer';\r\n\r\n    /**\r\n     * Font family of text in the header\r\n     */\r\n    headerFontFamily: 'infer';\r\n\r\n    /**\r\n     * Font family of text in grid cells\r\n     */\r\n    cellFontFamily: 'infer';\r\n\r\n    /**\r\n     * Size of text in the header\r\n     */\r\n    headerFontSize: 'infer';\r\n\r\n    /**\r\n     * Font weight of text in the header\r\n     */\r\n    headerFontWeight: 'infer';\r\n\r\n    /**\r\n     * Height of header rows. NOTE: by default this value is calculated to leave enough room for text, icons and padding. Most applications should leave it as is and use rowVerticalPaddingScale to change padding.\r\n     */\r\n    headerHeight: 'infer';\r\n\r\n    /**\r\n     * Borders between and below header rows.\r\n     */\r\n    headerRowBorder: 'infer';\r\n\r\n    /**\r\n     * Color of text in the header\r\n     */\r\n    headerTextColor: 'infer';\r\n\r\n    /**\r\n     * Multiply the header vertical padding by a number, e.g. 1.5 to increase by 50%\r\n     */\r\n    headerVerticalPaddingScale: 'infer';\r\n\r\n    /**\r\n     * Background color of clickable icons when hovered\r\n     */\r\n    iconButtonHoverBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Hover color for clickable icons\r\n     */\r\n    iconButtonHoverColor: 'infer';\r\n\r\n    /**\r\n     * The size of square icons and icon-buttons\r\n     */\r\n    iconSize: 'infer';\r\n\r\n    /**\r\n     * The color for inputs and UI controls in an invalid state.\r\n     */\r\n    invalidColor: 'infer';\r\n\r\n    /**\r\n     * Height of items in scrolling lists e.g. dropdown select inputs and column menu set filters.\r\n     */\r\n    listItemHeight: 'infer';\r\n\r\n    /**\r\n     * Background color for menus e.g. column menu and right-click context menu\r\n     */\r\n    menuBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border around menus e.g. column menu and right-click context menu\r\n     */\r\n    menuBorder: 'infer';\r\n\r\n    /**\r\n     * Color of the dividing line between sections of menus e.g. column menu and right-click context menu\r\n     */\r\n    menuSeparatorColor: 'infer';\r\n\r\n    /**\r\n     * Shadow for menus e.g. column menu and right-click context menu\r\n     */\r\n    menuShadow: 'infer';\r\n\r\n    /**\r\n     * Text color for menus e.g. column menu and right-click context menu\r\n     */\r\n    menuTextColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the overlay shown over the grid e.g. a data loading indicator.\r\n     */\r\n    modalOverlayBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color applied to every other row\r\n     */\r\n    oddRowBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color for panels and dialogs such as the integrated charts and the advanced filter builder.\r\n     */\r\n    panelBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color for the title bar of panels and dialogs such as the integrated charts and the advanced filter builder.\r\n     */\r\n    panelTitleBarBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border below the title bar of panels and dialogs such as the integrated charts and the advanced filter builder.\r\n     */\r\n    panelTitleBarBorder: 'infer';\r\n\r\n    /**\r\n     * Vertical borders between columns that are pinned to the left or right and the rest of the grid\r\n     */\r\n    pinnedColumnBorder: 'infer';\r\n\r\n    /**\r\n     * Horizontal borders between the grid and rows that are pinned to the top or bottom and the rest of the grid\r\n     */\r\n    pinnedRowBorder: 'infer';\r\n\r\n    /**\r\n     * Default shadow for elements that float above the grid and are intended to appear separated from it e.g. dialogs and menus\r\n     */\r\n    popupShadow: 'infer';\r\n\r\n    /**\r\n     * Default shadow for elements that float above the grid and are intended to appear elevated byt still attached e.g. dropdowns and cell editors\r\n     */\r\n    cardShadow: 'infer';\r\n\r\n    /**\r\n     * Background color of selected cell ranges. Choosing a semi-transparent color ensure that multiple overlapping ranges look correct.\r\n     */\r\n    rangeSelectionBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * The color used for borders around range selections. The selection background defaults to a semi-transparent version of this color.\r\n     */\r\n    rangeSelectionBorderColor: 'infer';\r\n\r\n    /**\r\n     * Border style around range selections.\r\n     */\r\n    rangeSelectionBorderStyle: 'infer';\r\n\r\n    /**\r\n     * Background color for cells that provide data to the current range chart\r\n     */\r\n    rangeSelectionChartBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color for cells that provide categories to the current range chart\r\n     */\r\n    rangeSelectionChartCategoryBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color to briefly apply to a cell range when the user copies from or pastes into it.\r\n     */\r\n    rangeSelectionHighlightColor: 'infer';\r\n\r\n    /**\r\n     * Horizontal borders between rows.\r\n     */\r\n    rowBorder: 'infer';\r\n\r\n    /**\r\n     * The size of indentation applied to each level of row grouping - deep rows are indented by a multiple of this value.\r\n     */\r\n    rowGroupIndentSize: 'infer';\r\n\r\n    /**\r\n     * Height of grid rows. NOTE: by default this value is calculated to leave enough room for text, icons and padding. Most applications should leave it as is and use rowVerticalPaddingScale to change padding.\r\n     */\r\n    rowHeight: 'infer';\r\n\r\n    /**\r\n     * Background color when hovering over rows in the grid and in dropdown menus. Set to `transparent` to disable the hover effect. Note: if you want a hover effect on one but not the other, use CSS selectors instead of this property.\r\n     */\r\n    rowHoverColor: 'infer';\r\n\r\n    /**\r\n     * Color of the skeleton loading effect used when loading row data with the Server-side Row Model\r\n     */\r\n    rowLoadingSkeletonEffectColor: 'infer';\r\n\r\n    /**\r\n     * Multiply the row vertical padding by a number, e.g. 1.5 to increase by 50%. Has no effect if rowHeight is set.\r\n     */\r\n    rowVerticalPaddingScale: 'infer';\r\n\r\n    /**\r\n     * Background color for selected items within the multiple select widget\r\n     */\r\n    selectCellBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border for selected items within the multiple select widget\r\n     */\r\n    selectCellBorder: 'infer';\r\n\r\n    /**\r\n     * Background color of selected rows in the grid and in dropdown menus.\r\n     */\r\n    selectedRowBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Amount of indentation for each level of child items in the Set Filter list when filtering tree data.\r\n     */\r\n    setFilterIndentSize: 'infer';\r\n\r\n    /**\r\n     * Background color of the sidebar that contains the columns and filters tool panels\r\n     */\r\n    sideBarBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the row of tab buttons at the edge of the sidebar\r\n     */\r\n    sideButtonBarBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Default width of the sidebar that contains the columns and filters tool panels\r\n     */\r\n    sideBarPanelWidth: 'infer';\r\n\r\n    /**\r\n     * Borders between the grid and side panels including the column and filter tool bars, and chart settings\r\n     */\r\n    sidePanelBorder: 'infer';\r\n\r\n    /**\r\n     * Spacing between the topmost side button and the top of the sidebar\r\n     */\r\n    sideButtonBarTopPadding: 'infer';\r\n\r\n    /**\r\n     * Width of the underline below the selected tab in the sidebar\r\n     */\r\n    sideButtonSelectedUnderlineWidth: 'infer';\r\n\r\n    /**\r\n     * Color of the underline below the selected tab in the sidebar, or 'transparent' to disable the underline effect\r\n     */\r\n    sideButtonSelectedUnderlineColor: 'infer';\r\n\r\n    /**\r\n     * Duration of the transition effect for the underline below the selected tab in the sidebar\r\n     */\r\n    sideButtonSelectedUnderlineTransitionDuration: 'infer';\r\n\r\n    /**\r\n     * Background color of the tab buttons in the sidebar\r\n     */\r\n    sideButtonBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Text color of the tab buttons in the sidebar\r\n     */\r\n    sideButtonTextColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the tab buttons in the sidebar when hovered\r\n     */\r\n    sideButtonHoverBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Text color of the tab buttons in the sidebar when hovered\r\n     */\r\n    sideButtonHoverTextColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the selected tab button in the sidebar\r\n     */\r\n    sideButtonSelectedBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Text color of the selected tab button in the sidebar\r\n     */\r\n    sideButtonSelectedTextColor: 'infer';\r\n\r\n    /**\r\n     * Color of the border drawn above and below the selected tab button in the\r\n     * sidebar, or 'transparent' to disable the border on the selected tab\r\n     */\r\n    sideButtonSelectedBorder: 'infer';\r\n\r\n    /**\r\n     * Padding to the left of the text in tab buttons in the sidebar (this is always the padding on the inward facing side of the button, so in right-to-left layout it will be on the right)\r\n     */\r\n    sideButtonLeftPadding: 'infer';\r\n\r\n    /**\r\n     * Padding to the right of the text in tab buttons in the sidebar (this is always the padding on the outward facing side of the button, so in right-to-left layout it will be on the left)\r\n     */\r\n    sideButtonRightPadding: 'infer';\r\n\r\n    /**\r\n     * Padding above and below the text in tab buttons in the sidebar\r\n     */\r\n    sideButtonVerticalPadding: 'infer';\r\n\r\n    /**\r\n     * Color of text and UI elements that should stand out less than the default.\r\n     */\r\n    subtleTextColor: 'infer';\r\n\r\n    /**\r\n     * Default color for all text\r\n     */\r\n    textColor: 'infer';\r\n\r\n    /**\r\n     * Width of the whole toggle button component\r\n     */\r\n    toggleButtonWidth: 'infer';\r\n\r\n    /**\r\n     * Height of the whole toggle button component\r\n     */\r\n    toggleButtonHeight: 'infer';\r\n\r\n    /**\r\n     * Color of the toggle button background in its 'off' state\r\n     */\r\n    toggleButtonOffBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Color of the toggle button background in its 'on' state\r\n     */\r\n    toggleButtonOnBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the toggle button switch (the bit that slides from left to right)\r\n     */\r\n    toggleButtonSwitchBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * The amount that the toggle switch is inset from the edge of the button\r\n     */\r\n    toggleButtonSwitchInset: 'infer';\r\n\r\n    /**\r\n     * The dividing line between sections of menus e.g. column menu and right-click context menu\r\n     */\r\n    toolPanelSeparatorBorder: 'infer';\r\n\r\n    /**\r\n     * Background color for tooltips\r\n     */\r\n    tooltipBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border for tooltips\r\n     */\r\n    tooltipBorder: 'infer';\r\n\r\n    /**\r\n     * Text color for tooltips\r\n     */\r\n    tooltipTextColor: 'infer';\r\n\r\n    /**\r\n     * Color to temporarily apply to cell data when its value decreases in an agAnimateShowChangeCellRenderer cell\r\n     */\r\n    valueChangeDeltaDownColor: 'infer';\r\n\r\n    /**\r\n     * Color to temporarily apply to cell data when its value increases in an agAnimateShowChangeCellRenderer cell\r\n     */\r\n    valueChangeDeltaUpColor: 'infer';\r\n\r\n    /**\r\n     * Background color to apply when a cell value changes and enableCellChangeFlash is enabled\r\n     */\r\n    valueChangeValueHighlightBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * The horizontal padding of containers that contain stacked widgets, such as menus and tool panels\r\n     */\r\n    widgetContainerHorizontalPadding: 'infer';\r\n\r\n    /**\r\n     * The vertical padding of containers that contain stacked widgets, such as menus and tool panels\r\n     */\r\n    widgetContainerVerticalPadding: 'infer';\r\n\r\n    /**\r\n     * The spacing between widgets in containers arrange widgets horizontally\r\n     */\r\n    widgetHorizontalSpacing: 'infer';\r\n\r\n    /**\r\n     * The spacing between widgets in containers arrange widgets vertically\r\n     */\r\n    widgetVerticalSpacing: 'infer';\r\n\r\n    /**\r\n     * Borders around the outside of the grid\r\n     */\r\n    wrapperBorder: 'infer';\r\n\r\n    /**\r\n     * Corner radius of the outermost container around the grid.\r\n     */\r\n    wrapperBorderRadius: 'infer';\r\n};\r\n\r\nexport type CoreParams = ExpandTypeKeys<WithParamTypes<CoreParamsDefinitions>>;\r\n\r\nexport const defaultLightColorSchemeParams = {\r\n    backgroundColor: '#fff',\r\n    foregroundColor: '#181d1f',\r\n    borderColor: foregroundMix(0.15),\r\n    chromeBackgroundColor: foregroundBackgroundMix(0.02),\r\n    browserColorScheme: 'light',\r\n} as const;\r\n\r\nexport const coreDefaults: Readonly<CoreParams> = {\r\n    ...defaultLightColorSchemeParams,\r\n    textColor: foregroundColor,\r\n    accentColor: '#2196f3',\r\n    invalidColor: '#e02525',\r\n    wrapperBorder: true,\r\n    rowBorder: true,\r\n    headerRowBorder: true,\r\n    footerRowBorder: {\r\n        ref: 'rowBorder',\r\n    },\r\n    columnBorder: {\r\n        style: 'solid',\r\n        width: 1,\r\n        color: 'transparent',\r\n    },\r\n    headerColumnBorder: false,\r\n    headerColumnBorderHeight: '100%',\r\n    pinnedColumnBorder: true,\r\n    pinnedRowBorder: true,\r\n    sidePanelBorder: true,\r\n    sideBarPanelWidth: 250,\r\n    sideBarBackgroundColor: {\r\n        ref: 'chromeBackgroundColor',\r\n    },\r\n    sideButtonBarBackgroundColor: {\r\n        ref: 'sideBarBackgroundColor',\r\n    },\r\n    sideButtonBarTopPadding: 0,\r\n    sideButtonSelectedUnderlineWidth: 2,\r\n    sideButtonSelectedUnderlineColor: 'transparent',\r\n    sideButtonSelectedUnderlineTransitionDuration: 0,\r\n    sideButtonBackgroundColor: 'transparent',\r\n    sideButtonTextColor: { ref: 'textColor' },\r\n    sideButtonHoverBackgroundColor: { ref: 'sideButtonBackgroundColor' },\r\n    sideButtonHoverTextColor: { ref: 'sideButtonTextColor' },\r\n    sideButtonSelectedBackgroundColor: { ref: 'backgroundColor' },\r\n    sideButtonSelectedTextColor: { ref: 'sideButtonTextColor' },\r\n    sideButtonSelectedBorder: true,\r\n    sideButtonLeftPadding: { ref: 'spacing' },\r\n    sideButtonRightPadding: { ref: 'spacing' },\r\n    sideButtonVerticalPadding: { calc: 'spacing * 3' },\r\n    fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        'Segoe UI',\r\n        'Roboto',\r\n        'Oxygen-Sans',\r\n        'Ubuntu',\r\n        'Cantarell',\r\n        'Helvetica Neue',\r\n        'sans-serif',\r\n    ],\r\n    headerBackgroundColor: {\r\n        ref: 'chromeBackgroundColor',\r\n    },\r\n    headerFontFamily: {\r\n        ref: 'fontFamily',\r\n    },\r\n    cellFontFamily: {\r\n        ref: 'fontFamily',\r\n    },\r\n    headerFontWeight: 500,\r\n    headerFontSize: {\r\n        ref: 'fontSize',\r\n    },\r\n    dataFontSize: {\r\n        ref: 'fontSize',\r\n    },\r\n    headerTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    headerCellHoverBackgroundColor: 'transparent',\r\n    headerCellMovingBackgroundColor: { ref: 'backgroundColor' },\r\n    headerCellBackgroundTransitionDuration: '0.2s',\r\n    cellTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    subtleTextColor: {\r\n        ref: 'textColor',\r\n        mix: 0.5,\r\n    },\r\n    rangeSelectionBorderStyle: 'solid',\r\n    rangeSelectionBorderColor: accentColor,\r\n    rangeSelectionBackgroundColor: accentMix(0.2),\r\n    rangeSelectionChartBackgroundColor: '#0058FF1A',\r\n    rangeSelectionChartCategoryBackgroundColor: '#00FF841A',\r\n    rangeSelectionHighlightColor: accentMix(0.5),\r\n    rowHoverColor: accentMix(0.08),\r\n    columnHoverColor: accentMix(0.05),\r\n    selectedRowBackgroundColor: accentMix(0.12),\r\n    modalOverlayBackgroundColor: {\r\n        ref: 'backgroundColor',\r\n        mix: 0.66,\r\n    },\r\n    oddRowBackgroundColor: {\r\n        ref: 'backgroundColor',\r\n    },\r\n    borderRadius: 4,\r\n    wrapperBorderRadius: 8,\r\n    cellHorizontalPadding: {\r\n        calc: 'spacing * 2 * cellHorizontalPaddingScale',\r\n    },\r\n    cellWidgetSpacing: {\r\n        calc: 'spacing * 1.5',\r\n    },\r\n    cellHorizontalPaddingScale: 1,\r\n    rowGroupIndentSize: {\r\n        calc: 'cellWidgetSpacing + iconSize',\r\n    },\r\n    valueChangeDeltaUpColor: '#43a047',\r\n    valueChangeDeltaDownColor: '#e53935',\r\n    valueChangeValueHighlightBackgroundColor: '#16a08580',\r\n    spacing: 8,\r\n    fontSize: 14,\r\n    rowHeight: {\r\n        calc: 'max(iconSize, dataFontSize) + spacing * 3.25 * rowVerticalPaddingScale',\r\n    },\r\n    rowVerticalPaddingScale: 1,\r\n    headerHeight: {\r\n        calc: 'max(iconSize, dataFontSize) + spacing * 4 * headerVerticalPaddingScale',\r\n    },\r\n    headerVerticalPaddingScale: 1,\r\n    popupShadow: '0 0 16px #00000026',\r\n    cardShadow: '0 1px 4px 1px #00000018',\r\n    dropdownShadow: { ref: 'cardShadow' },\r\n    dragAndDropImageBackgroundColor: {\r\n        ref: 'backgroundColor',\r\n    },\r\n    dragAndDropImageBorder: true,\r\n    dragAndDropImageShadow: {\r\n        ref: 'popupShadow',\r\n    },\r\n    dragHandleColor: foregroundMix(0.7),\r\n    focusShadow: {\r\n        spread: 3,\r\n        color: accentMix(0.5),\r\n    },\r\n    headerColumnResizeHandleHeight: '30%',\r\n    headerColumnResizeHandleWidth: 2,\r\n    headerColumnResizeHandleColor: {\r\n        ref: 'borderColor',\r\n    },\r\n    widgetContainerHorizontalPadding: {\r\n        calc: 'spacing * 1.5',\r\n    },\r\n    widgetContainerVerticalPadding: {\r\n        calc: 'spacing * 1.5',\r\n    },\r\n    widgetHorizontalSpacing: {\r\n        calc: 'spacing * 1.5',\r\n    },\r\n    widgetVerticalSpacing: {\r\n        ref: 'spacing',\r\n    },\r\n    listItemHeight: {\r\n        calc: 'iconSize + widgetVerticalSpacing',\r\n    },\r\n    iconSize: 16,\r\n    toggleButtonWidth: 28,\r\n    toggleButtonHeight: 18,\r\n    toggleButtonOnBackgroundColor: accentColor,\r\n    toggleButtonOffBackgroundColor: foregroundBackgroundMix(0.3),\r\n    toggleButtonSwitchBackgroundColor: {\r\n        ref: 'backgroundColor',\r\n    },\r\n    toggleButtonSwitchInset: 2,\r\n    menuBorder: {\r\n        color: foregroundMix(0.2),\r\n    },\r\n    menuBackgroundColor: foregroundBackgroundMix(0.03),\r\n    menuTextColor: foregroundBackgroundMix(0.95),\r\n    menuShadow: {\r\n        ref: 'popupShadow',\r\n    },\r\n    menuSeparatorColor: {\r\n        ref: 'borderColor',\r\n    },\r\n    setFilterIndentSize: {\r\n        ref: 'iconSize',\r\n    },\r\n    chartMenuPanelWidth: 260,\r\n    chartMenuLabelColor: foregroundMix(0.8),\r\n    iconButtonHoverColor: foregroundMix(0.1),\r\n    dialogShadow: {\r\n        ref: 'popupShadow',\r\n    },\r\n    cellEditingBorder: {\r\n        color: accentColor,\r\n    },\r\n    cellEditingShadow: { ref: 'cardShadow' },\r\n    dialogBorder: {\r\n        color: foregroundMix(0.2),\r\n    },\r\n    panelBackgroundColor: {\r\n        ref: 'backgroundColor',\r\n    },\r\n    panelTitleBarBackgroundColor: {\r\n        ref: 'headerBackgroundColor',\r\n    },\r\n    panelTitleBarBorder: true,\r\n    columnSelectIndentSize: {\r\n        ref: 'iconSize',\r\n    },\r\n    toolPanelSeparatorBorder: true,\r\n    tooltipBackgroundColor: {\r\n        ref: 'chromeBackgroundColor',\r\n    },\r\n    tooltipTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    tooltipBorder: true,\r\n    columnDropCellBackgroundColor: foregroundMix(0.07),\r\n    columnDropCellTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    columnDropCellDragHandleColor: {\r\n        ref: 'textColor',\r\n    },\r\n    columnDropCellBorder: {\r\n        color: foregroundMix(0.13),\r\n    },\r\n    selectCellBackgroundColor: foregroundMix(0.07),\r\n    selectCellBorder: {\r\n        color: foregroundMix(0.13),\r\n    },\r\n    advancedFilterBuilderButtonBarBorder: true,\r\n    advancedFilterBuilderIndentSize: {\r\n        calc: 'spacing * 2 + iconSize',\r\n    },\r\n    advancedFilterBuilderJoinPillColor: '#f08e8d',\r\n    advancedFilterBuilderColumnPillColor: '#a6e194',\r\n    advancedFilterBuilderOptionPillColor: '#f3c08b',\r\n    advancedFilterBuilderValuePillColor: '#85c0e4',\r\n    filterToolPanelGroupIndent: {\r\n        ref: 'spacing',\r\n    },\r\n    iconButtonHoverBackgroundColor: foregroundMix(0.1),\r\n    rowLoadingSkeletonEffectColor: foregroundMix(0.15),\r\n};\r\n", "import { _error } from '../validation/logging';\r\nimport { clamp, memoize, paramToVariableExpression } from './theme-utils';\r\n\r\nexport type Feature = 'colorScheme' | 'iconSet' | 'checkboxStyle' | 'inputStyle' | 'tabStyle';\r\n\r\nconst paramTypes = [\r\n    'colorScheme',\r\n    'color',\r\n    'length',\r\n    'scale',\r\n    'borderStyle',\r\n    'border',\r\n    'shadow',\r\n    'image',\r\n    'fontFamily',\r\n    'fontWeight',\r\n    'duration',\r\n] as const;\r\n\r\nexport type ParamType = (typeof paramTypes)[number];\r\n/**\r\n * Return the ParamType for a given param name,\r\n */\r\nexport const getParamType = memoize((param: string): ParamType => {\r\n    param = param.toLowerCase();\r\n    return paramTypes.find((type) => param.endsWith(type.toLowerCase())) ?? 'length';\r\n});\r\n\r\nexport type WithParamTypes<T> = {\r\n    [K in keyof T]: K extends string ? ParamTypeForLowercaseKey<Lowercase<K>> : LengthValue;\r\n};\r\n\r\n// prettier-ignore\r\ntype ParamTypeForLowercaseKey<K extends string> = K extends `${string}color`\r\n    ? ColorValue\r\n    : K extends `${string}colorscheme` ? ColorSchemeValue\r\n    : K extends `${string}color` ? ColorValue\r\n    : K extends `${string}scale` ? ScaleValue\r\n    : K extends `${string}borderstyle` ? BorderStyleValue\r\n    : K extends `${string}border` ? BorderValue\r\n    : K extends `${string}shadow` ? ShadowValue\r\n    : K extends `${string}image` ? ImageValue\r\n    : K extends `${string}fontfamily` ? FontFamilyValue\r\n    : K extends `${string}fontweight` ? FontWeightValue\r\n    : K extends `${string}duration` ? DurationValue\r\n    : LengthValue;\r\n\r\nconst literalToCSS = (value: string | number): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (typeof value === 'number') return String(value);\r\n    return false;\r\n};\r\n\r\n// string & {} used to preserve auto-complete from string union but allow any string\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype AnyString = string & {};\r\n\r\n/**\r\n * The 'brand color' for the grid, used wherever a non-neutral color is\r\n * required. Selections, focus outlines and checkboxes use the accent color by\r\n * default.\r\n */\r\nexport type ColorValue =\r\n    | string\r\n    | {\r\n          /**\r\n           * The name of the color parameter to reference\r\n           */\r\n          ref: string;\r\n          /**\r\n           * Enable color mixing. Provide a value between 0 and 1 determining the amount of the referenced color used in the mix.\r\n           *\r\n           * By default, the referenced color will be mixed with `transparent` so 0 = fully transparent and 1 = fully opaque.\r\n           */\r\n          mix?: number;\r\n          /**\r\n           * Provide a second color reference to mix with instead of `transparent`. This has no effect if `mix` is unspecified.\r\n           */\r\n          onto?: string;\r\n          /**\r\n           * Provide a CSS color value to mix with instead of `transparent`.\r\n           * This has no effect if `mix` is unspecified. This is an alternative\r\n           * to `onto`, if both are provided then `onto` will be take precedence.\r\n           */\r\n          ontoColor?: string;\r\n      };\r\n\r\nexport const colorValueToCss = (value: ColorValue): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (value && 'ref' in value) {\r\n        const colorExpr: string = paramToVariableExpression(value.ref);\r\n        if (value.mix == null) {\r\n            return colorExpr;\r\n        }\r\n        const backgroundExpr = value.onto ? paramToVariableExpression(value.onto) : 'transparent';\r\n        return `color-mix(in srgb, ${backgroundExpr}, ${colorExpr} ${clamp(value.mix * 100, 0, 100)}%)`;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * A CSS color-scheme value, e.g. \"light\", \"dark\", or \"inherit\" to use the\r\n * same setting as the parent application\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\r\n */\r\nexport type ColorSchemeValue = 'light' | 'dark' | 'inherit' | 'normal' | AnyString;\r\n\r\nexport const colorSchemeValueToCss = literalToCSS;\r\n\r\n/**\r\n * A CSS dimension value with length units, e.g. \"1px\" or \"2em\". Alternatively:\r\n *\r\n * - `4` -> \"4px\" (a plain JavaScript number will be given pixel units)\r\n * - `{ref: \"foo\"}` -> use the same value as the `foo` param (`ref` must be a valid param name)\r\n * - `{calc: \"foo + bar * 2\"}` -> Use a dynamically calculated expression. You can use param names like spacing and fontSize in the expression, as well as built-in CSS math functions like `min(spacing, fontSize)`\r\n */\r\nexport type LengthValue =\r\n    | number\r\n    | string\r\n    | {\r\n          /**\r\n           * An expression that can include param names and maths, e.g.\r\n           * \"spacing * 2\". NOTE: In CSS the `-` character is valid in variable\r\n           * names, so leave a space around it.\r\n           */\r\n          calc: string;\r\n      }\r\n    | {\r\n          ref: string;\r\n      };\r\n\r\nexport const lengthValueToCss = (value: LengthValue): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (typeof value === 'number') return `${value}px`;\r\n    if (value && 'calc' in value) {\r\n        // ensure a space around operators other than `-` (which can be part of an identifier)\r\n        const valueWithSpaces = value.calc.replace(/ ?[*/+] ?/g, ' $& ');\r\n        // convert param names to variable expressions, e.g. \"fooBar\" -> \"var(--ag-foo-bar)\",\r\n        // ignoring words that are part of function names \"fooBar()\" or variables \"--fooBar\"\r\n        return `calc(${valueWithSpaces.replace(/-?[a-z][a-z0-9]*\\b(?![-(])/gi, (p) => (p[0] === '-' ? p : ` ${paramToVariableExpression(p)} `))})`;\r\n    }\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    return false;\r\n};\r\n\r\n/**\r\n * A number without units.\r\n */\r\nexport type ScaleValue = number;\r\n\r\nexport const scaleValueToCss = literalToCSS;\r\n\r\n/**\r\n * A CSS border value e.g. \"solid 1px red\". Alternatively an object containing optional properties:\r\n *\r\n * - `style` -> a CSS border-style, default `\"solid\"`\r\n * - `width` -> a width in pixels, default `1`\r\n * - `color` -> a ColorValue as you would pass to any color param, default `{ref: \"borderColor\"}`\r\n *\r\n * Or a reference:\r\n * - `{ref: \"foo\"}` -> use the same value as the `foo` param (`ref` must be a valid param name)\r\n *\r\n * Or boolean value\r\n * - `true` -> `{}` (the default border style, equivalent to `{style: \"solid\", width: 1, color: {ref: \"borderColor\"}`)\r\n * - `false` -> `\"none\"` (no border).\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/border\r\n */\r\nexport type BorderValue =\r\n    | string\r\n    | boolean\r\n    | {\r\n          style?: BorderStyleValue;\r\n          width?: LengthValue;\r\n          color?: ColorValue;\r\n      }\r\n    | { ref: string };\r\n\r\nexport const borderValueToCss = (value: BorderValue, param: string) => {\r\n    if (typeof value === 'string') return value;\r\n    if (value === true) return 'solid 1px var(--ag-border-color)';\r\n    if (value === false) return param === 'columnBorder' ? 'solid 1px transparent' : 'none';\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    return (\r\n        borderStyleValueToCss(value.style ?? 'solid') +\r\n        ' ' +\r\n        lengthValueToCss(value.width ?? 1) +\r\n        ' ' +\r\n        colorValueToCss(value.color ?? { ref: 'borderColor' })\r\n    );\r\n};\r\n\r\n/**\r\n * A CSS box shadow value e.g. \"10px 5px 5px red;\". Alternatively an object containing optional properties:\r\n *\r\n * - `offsetX` -> number of pixels to move the shadow to the right, or a negative value to move left, default 0\r\n * - `offsetY` -> number of pixels to move the shadow downwards, or a negative value to move up, default 0\r\n * - `radius` -> softness of the shadow. 0 = hard edge, 10 = 10px wide blur\r\n * - `spread` -> size of the shadow. 0 = same size as the shadow-casting element. 10 = 10px wider in all directions.\r\n * - `color` -> color of the shadow e.g. `\"red\"`. Default `{ref: \"foregroundColor\"}`\r\n *\r\n * Or a reference:\r\n * - `{ref: \"foo\"}` -> use the same value as the `foo` param (`ref` must be a valid param name)\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n */\r\nexport type ShadowValue =\r\n    | string\r\n    | false\r\n    | {\r\n          /**\r\n           * Positive values move the shadow to the right, negative values move left\r\n           *\r\n           * @default 0\r\n           * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n           */\r\n          offsetX?: LengthValue;\r\n          /**\r\n           * Positive values move the shadow downwards, negative values move up\r\n           *\r\n           * @default 0\r\n           * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n           */\r\n          offsetY?: LengthValue;\r\n          /**\r\n           * Softness of the shadow. 0 = hard edge, 10 = 10px wide blur.\r\n           *\r\n           * @default 0\r\n           * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n           */\r\n          radius?: LengthValue;\r\n          /**\r\n           * Size of the shadow. 0 = same size as the shadow-casting element. 10 = 10px wider in all directions.\r\n           *\r\n           * @default 0\r\n           * @see https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n           */\r\n          spread?: LengthValue;\r\n          /**\r\n           * Shadow color. Can accept any value that is valid for a color parameter, e.g. 'red' or {ref: 'accentColor'}\r\n           *\r\n           * @default {ref: 'foregroundColor'}\r\n           */\r\n          color?: ColorValue;\r\n      }\r\n    | { ref: string };\r\n\r\nexport const shadowValueToCss = (value: ShadowValue): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (value === false) return 'none';\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    return [\r\n        lengthValueToCss(value.offsetX ?? 0),\r\n        lengthValueToCss(value.offsetY ?? 0),\r\n        lengthValueToCss(value.radius ?? 0),\r\n        lengthValueToCss(value.spread ?? 0),\r\n        colorValueToCss(value.color ?? { ref: 'foregroundColor' }),\r\n    ].join(' ');\r\n};\r\n\r\n/**\r\n * A CSS line-style value e.g. \"solid\" or \"dashed\".\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-style\r\n */\r\nexport type BorderStyleValue = 'none' | 'solid' | 'dotted' | 'dashed';\r\n\r\nexport const borderStyleValueToCss = literalToCSS;\r\n\r\n/**\r\n * A CSS font-family value consisting of a font name or comma-separated list of fonts in order of preference e.g. `\"Roboto, -apple-system, 'Segoe UI', sans-serif\"`. Alternatively:\r\n *\r\n * - `[\"Roboto\", \"-apple-system\", \"Segoe UI\", \"sans-serif\"]` -> an array of font names in order of preference\r\n * - `[\"Dave's Font\"]` -> when passing an array, special characters in font names will automatically be escaped\r\n * - `{ref: \"foo\"}` -> use the same value as `foo` which must be a valid font family param name\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\r\n */\r\nexport type FontFamilyValue =\r\n    | string\r\n    | { googleFont: string }\r\n    | Array<string | { googleFont: string }>\r\n    | { ref: string };\r\n\r\nexport const fontFamilyValueToCss = (value: FontFamilyValue): string | false => {\r\n    if (typeof value === 'string') return quoteUnsafeChars(value);\r\n    if (value && 'googleFont' in value) return fontFamilyValueToCss(value.googleFont);\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    if (Array.isArray(value)) {\r\n        return value\r\n            .map((font) => {\r\n                if (typeof font === 'object' && 'googleFont' in font) {\r\n                    font = font.googleFont;\r\n                }\r\n                return quoteUnsafeChars(font);\r\n            })\r\n            .join(', ');\r\n    }\r\n    return false;\r\n};\r\n\r\nconst quoteUnsafeChars = (font: string) =>\r\n    // don't quote safe identifier names, so that people can specify fonts\r\n    // like sans-serif which are keywords not strings\r\n    /^[\\w-]+$/.test(font) ? font : JSON.stringify(font);\r\n\r\n/**\r\n * A CSS font-weight value e.g. `500` or `\"bold\"`\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\n */\r\nexport type FontWeightValue = 'normal' | 'bold' | AnyString | number;\r\n\r\nexport const fontWeightValueToCss = literalToCSS;\r\n\r\n/**\r\n * A CSS image value e.g. `\"url(...image-url...)\"`. Alternatively:\r\n *\r\n * - `{svg: \"...XML source of SVG image...\"}` -> embed an SVG as a data: uri\r\n * - `{url: \"https://...\"}` -> a URL to load an image asset from. Can be a HTTPS URL, or image assets such as PNGs can be converted to data: URLs\r\n * - `{ref: \"foo\"}` -> use the same value as the `foo` param (`ref` must be a valid param name)\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/image\r\n */\r\nexport type ImageValue =\r\n    | string\r\n    | {\r\n          /**\r\n           * The URL of an image. data: URLs can be used embed assets.\r\n           */\r\n          url: string;\r\n      }\r\n    | {\r\n          /**\r\n           * The XML text of an SVG file\r\n           */\r\n          svg: string;\r\n      }\r\n    | { ref: string };\r\n\r\nexport const imageValueToCss = (value: ImageValue): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (value && 'url' in value) return `url(${JSON.stringify(value.url)})`;\r\n    if (value && 'svg' in value) return imageValueToCss({ url: `data:image/svg+xml,${encodeURIComponent(value.svg)}` });\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    return false;\r\n};\r\n\r\n/**\r\n * A CSS time value with second or millisecond units e.g. `\"0.3s\"` or `\"300ms\"`. Alternatively:\r\n *\r\n * - `0.4` -> \"0.4s\" (a plain JavaScript number is assumed to be a number of seconds.\r\n * - `{ref: \"foo\"}` -> use the same value as the `foo` param (`ref` must be a valid param name)\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration\r\n */\r\nexport type DurationValue = number | string | { ref: string };\r\n\r\nexport const durationValueToCss = (value: DurationValue, param: string): string | false => {\r\n    if (typeof value === 'string') return value;\r\n    if (typeof value === 'number') {\r\n        if (value >= 10) {\r\n            _error(104, { value, param });\r\n        }\r\n        return `${value}s`;\r\n    }\r\n    if (value && 'ref' in value) return paramToVariableExpression(value.ref);\r\n    return false;\r\n};\r\n\r\nconst paramValidators: Record<ParamType, (value: unknown, param: string) => string | false> = {\r\n    color: colorValueToCss,\r\n    colorScheme: colorSchemeValueToCss,\r\n    length: lengthValueToCss,\r\n    scale: scaleValueToCss,\r\n    border: borderValueToCss,\r\n    borderStyle: borderStyleValueToCss,\r\n    shadow: shadowValueToCss,\r\n    image: imageValueToCss,\r\n    fontFamily: fontFamilyValueToCss,\r\n    fontWeight: fontWeightValueToCss,\r\n    duration: durationValueToCss,\r\n};\r\n\r\nexport const paramValueToCss = (param: string, value: unknown): string | false => {\r\n    const type = getParamType(param);\r\n    return paramValidators[type](value, param);\r\n};\r\n", "import { _error, _logPreInitErr, _warn } from '../validation/logging';\r\nimport type { Part } from './Part';\r\nimport { PartImpl, createPart, defaultModeName } from './Part';\r\nimport type { CoreParams } from './core/core-css';\r\nimport { coreDefaults } from './core/core-css';\r\nimport { IS_SSR, _injectCoreAndModuleCSS, _injectGlobalCSS } from './inject';\r\nimport type { WithParamTypes } from './theme-types';\r\nimport { paramValueToCss } from './theme-types';\r\nimport { paramToVariableName } from './theme-utils';\r\n\r\nexport type Theme<TParams = unknown> = {\r\n    /**\r\n     * Return a new theme that uses an theme part. The part will replace any\r\n     * existing part of the same feature\r\n     *\r\n     * @param part a part, or a no-arg function that returns a part\r\n     */\r\n    withPart<TPartParams>(part: Part<TPartParams> | (() => Part<TPartParams>)): Theme<TParams & TPartParams>;\r\n\r\n    /**\r\n     * Return a new theme removes any existing part with a feature.\r\n     *\r\n     * @param feature the name of the part to remove, e.g. 'checkboxStyle'\r\n     */\r\n    withoutPart(feature: string): Theme<TParams>;\r\n\r\n    /**\r\n     * Return a new theme with different default values for the specified\r\n     * params.\r\n     *\r\n     * @param defaults an object containing params e.g. {spacing: 10}\r\n     */\r\n    withParams(defaults: Partial<TParams>, mode?: string): Theme<TParams>;\r\n};\r\n\r\nexport const _asThemeImpl = <TParams>(theme: Theme<TParams>): ThemeImpl => {\r\n    if (!(theme instanceof ThemeImpl)) {\r\n        throw new Error('theme is not an object created by createTheme');\r\n    }\r\n    return theme;\r\n};\r\n\r\n/**\r\n * Create a custom theme containing core grid styles but no parts.\r\n */\r\nexport const createTheme = (): Theme<CoreParams> => new ThemeImpl();\r\n\r\ntype GridThemeUseArgs = {\r\n    loadThemeGoogleFonts: boolean | undefined;\r\n    container: HTMLElement;\r\n};\r\n\r\nexport class ThemeImpl {\r\n    constructor(readonly parts: PartImpl[] = []) {}\r\n\r\n    withPart(part: Part | (() => Part)): ThemeImpl {\r\n        if (typeof part === 'function') part = part();\r\n        if (!(part instanceof PartImpl)) {\r\n            // Can't use validation service as this is API is designed to be used before modules are registered\r\n            _logPreInitErr(259, { part }, 'Invalid part');\r\n            return this;\r\n        }\r\n        return new ThemeImpl([...this.parts, part]);\r\n    }\r\n\r\n    withoutPart(feature: string): ThemeImpl {\r\n        return this.withPart(createPart({ feature }));\r\n    }\r\n\r\n    withParams(params: WithParamTypes<unknown>, mode = defaultModeName): ThemeImpl {\r\n        return this.withPart(\r\n            createPart({\r\n                modeParams: { [mode]: params },\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Called by a grid instance when it starts using the theme. This installs\r\n     * the theme's parts into document head, or the shadow DOM if the provided\r\n     * container is within a shadow root.\r\n     */\r\n    _startUse({ container, loadThemeGoogleFonts }: GridThemeUseArgs): void {\r\n        if (IS_SSR) return;\r\n\r\n        uninstallLegacyCSS();\r\n\r\n        _injectCoreAndModuleCSS(container);\r\n\r\n        const googleFontsUsed = getGoogleFontsUsed(this);\r\n        if (googleFontsUsed.length > 0) {\r\n            for (const googleFont of googleFontsUsed) {\r\n                if (loadThemeGoogleFonts) {\r\n                    loadGoogleFont(googleFont);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const part of this.parts) {\r\n            part.use(container);\r\n        }\r\n    }\r\n\r\n    private _cssClassCache?: string;\r\n    /**\r\n     * Return CSS that that applies the params of this theme to elements with\r\n     * the provided class name\r\n     */\r\n    _getCssClass(this: ThemeImpl): string {\r\n        return (this._cssClassCache ??= deduplicatePartsByFeature(this.parts)\r\n            .map((part) => part.use())\r\n            .filter(Boolean)\r\n            .join(' '));\r\n    }\r\n\r\n    private _paramsCache?: ModalParamValues;\r\n    _getModeParams(): ModalParamValues {\r\n        let paramsCache = this._paramsCache;\r\n        if (!paramsCache) {\r\n            const mergedModeParams: ModalParamValues = {\r\n                // NOTE: defining the default mode here is important, it ensures\r\n                // that the default mode is first in iteration order, which puts\r\n                // it first in outputted CSS, allowing other modes to override it\r\n                [defaultModeName]: { ...coreDefaults },\r\n            };\r\n            for (const part of deduplicatePartsByFeature(this.parts)) {\r\n                for (const [partMode, partParams] of Object.entries(part.modeParams)) {\r\n                    if (partParams) {\r\n                        const mergedParams = (mergedModeParams[partMode] ??= {});\r\n                        const partParamNames = new Set<string>();\r\n                        for (const [partParamName, partParamValue] of Object.entries(partParams)) {\r\n                            if (partParamValue !== undefined) {\r\n                                mergedParams[partParamName] = partParamValue;\r\n                                partParamNames.add(partParamName);\r\n                            }\r\n                        }\r\n                        // If a later part has added default mode params, remove any non-default mode\r\n                        // values for the same param. We need to do this because the last value set\r\n                        // for a param should always take precedence. Consider this:\r\n                        // const redInDarkMode = themeQuartz.withParams({accentColor: 'red'}, 'dark');\r\n                        // const alwaysBlue = redInDarkMode.withParams({accentColor: 'blue'});\r\n                        // Setting theme.withParams({accentColor: 'blue'}) is expected to produce a theme\r\n                        // whose accent color is always blue, end of story. So we remove the accentColor\r\n                        // value from the `dark` mode params otherwise it would override the default\r\n                        // accent color.\r\n                        if (partMode === defaultModeName) {\r\n                            for (const [mergedMode, mergedParams] of Object.entries(mergedModeParams)) {\r\n                                if (mergedMode !== defaultModeName) {\r\n                                    for (const partParamName of partParamNames) {\r\n                                        delete mergedParams[partParamName];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this._paramsCache = paramsCache = mergedModeParams;\r\n        }\r\n        return paramsCache;\r\n    }\r\n\r\n    private _paramsCssCache?: string;\r\n    /**\r\n     * Return the CSS chunk that is inserted into the grid DOM, and will\r\n     * therefore be removed automatically when the grid is destroyed or it\r\n     * starts to use a new theme.\r\n     *\r\n     * @param className a unique class name on the grid wrapper used to scope the returned CSS to the grid instance\r\n     */\r\n    _getPerGridCss(className: string): string {\r\n        const selectorPlaceholder = '##SELECTOR##';\r\n        let innerParamsCss = this._paramsCssCache;\r\n        if (!innerParamsCss) {\r\n            // Ensure that every variable has a value set on root elements (\"root\"\r\n            // elements are those containing grid UI, e.g. ag-root-wrapper and\r\n            // ag-popup)\r\n            //\r\n            // Simply setting .ag-root-wrapper { --ag-foo: default-value } is not\r\n            // appropriate because it will override any values set on parent\r\n            // elements. An application should be able to set `--ag-spacing: 4px`\r\n            // on the document body and have it picked up by all grids on the page.\r\n            //\r\n            // To allow this we capture the application-provided value of --ag-foo\r\n            // into --ag-inherited-foo on the *parent* element of the root, and then\r\n            // use --ag-inherited-foo as the value for --ag-foo on the root element,\r\n            // applying our own default if it is unset.\r\n            let variablesCss = '';\r\n            let inheritanceCss = '';\r\n\r\n            for (const [mode, params] of Object.entries(this._getModeParams())) {\r\n                if (mode !== defaultModeName) {\r\n                    const escapedMode = typeof CSS === 'object' ? CSS.escape(mode) : mode; // check for CSS global in case we're running in tests\r\n                    const wrapPrefix = `:where([data-ag-theme-mode=\"${escapedMode}\"]) & {\\n`;\r\n                    variablesCss += wrapPrefix;\r\n                    inheritanceCss += wrapPrefix;\r\n                }\r\n                for (const [key, value] of Object.entries(params)) {\r\n                    const cssValue = paramValueToCss(key, value);\r\n                    if (cssValue === false) {\r\n                        _error(107, { key, value });\r\n                    } else {\r\n                        const cssName = paramToVariableName(key);\r\n                        const inheritedName = cssName.replace('--ag-', '--ag-inherited-');\r\n                        variablesCss += `\\t${cssName}: var(${inheritedName}, ${cssValue});\\n`;\r\n                        inheritanceCss += `\\t${inheritedName}: var(${cssName});\\n`;\r\n                    }\r\n                }\r\n                if (mode !== defaultModeName) {\r\n                    variablesCss += '}\\n';\r\n                    inheritanceCss += '}\\n';\r\n                }\r\n            }\r\n            let css = `${selectorPlaceholder} {\\n${variablesCss}}\\n`;\r\n            // Create --ag-inherited-foo variable values on the parent element, unless\r\n            // the parent is itself a root (which can happen if popupParent is\r\n            // ag-root-wrapper)\r\n            css += `:has(> ${selectorPlaceholder}):not(${selectorPlaceholder}) {\\n${inheritanceCss}}\\n`;\r\n            this._paramsCssCache = innerParamsCss = css;\r\n        }\r\n        return innerParamsCss.replaceAll(selectorPlaceholder, `:where(.${className})`);\r\n    }\r\n}\r\n\r\ntype ParamValues = Record<string, unknown>;\r\n\r\ntype ModalParamValues = {\r\n    [mode: string]: ParamValues;\r\n};\r\n\r\n// Remove parts with the same feature, keeping only the last one\r\nconst deduplicatePartsByFeature = (parts: readonly PartImpl[]): PartImpl[] => {\r\n    const lastPartByFeature = new Map<string | undefined, PartImpl>();\r\n    for (const part of parts) {\r\n        lastPartByFeature.set(part.feature, part);\r\n    }\r\n    const result: PartImpl[] = [];\r\n    for (const part of parts) {\r\n        if (!part.feature || lastPartByFeature.get(part.feature) === part) {\r\n            result.push(part);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nconst getGoogleFontsUsed = (theme: ThemeImpl): string[] => {\r\n    const googleFontsUsed = new Set<string>();\r\n    const visitParamValue = (paramValue: any) => {\r\n        // font value can be a font object or array of font objects\r\n        if (Array.isArray(paramValue)) {\r\n            paramValue.forEach(visitParamValue);\r\n        } else {\r\n            const googleFont = paramValue?.googleFont;\r\n            if (typeof googleFont === 'string') {\r\n                googleFontsUsed.add(googleFont);\r\n            }\r\n        }\r\n    };\r\n    const allModeValues = Object.values(theme._getModeParams());\r\n    const allValues = allModeValues.flatMap((mv) => Object.values(mv));\r\n    allValues.forEach(visitParamValue);\r\n    return Array.from(googleFontsUsed).sort();\r\n};\r\n\r\nlet uninstalledLegacyCSS = false;\r\n// Remove the CSS from @ag-grid-community/styles that is automatically injected\r\n// by the UMD bundle\r\nconst uninstallLegacyCSS = () => {\r\n    if (uninstalledLegacyCSS) return;\r\n    uninstalledLegacyCSS = true;\r\n    for (const style of Array.from(document.head.querySelectorAll('style[data-ag-scope=\"legacy\"]'))) {\r\n        style.remove();\r\n    }\r\n};\r\n\r\nconst googleFontsLoaded = new Set<string>();\r\n\r\nconst loadGoogleFont = async (font: string) => {\r\n    googleFontsLoaded.add(font);\r\n    const css = `@import url('https://${googleFontsDomain}/css2?family=${encodeURIComponent(font)}:wght@100;200;300;400;500;600;700;800;900&display=swap');\\n`;\r\n    // fonts are always installed in the document head, they are inherited in\r\n    // shadow DOM without the need for separate installation\r\n    _injectGlobalCSS(css, document.head, `googleFont:${font}`);\r\n};\r\n\r\nconst googleFontsDomain = 'fonts.googleapis.com';\r\n", "export const checkboxStyleDefaultCSS = /*css*/ `.ag-checkbox-input-wrapper,.ag-radio-button-input-wrapper{background-color:var(--ag-checkbox-unchecked-background-color);border:solid var(--ag-checkbox-border-width) var(--ag-checkbox-unchecked-border-color);flex:none;height:var(--ag-icon-size);position:relative;width:var(--ag-icon-size);:where(input){-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;display:block;height:var(--ag-icon-size);margin:0;opacity:0;width:var(--ag-icon-size)}&:after{content:\"\";display:block;inset:0;-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;pointer-events:none;position:absolute}&:where(.ag-checked){background-color:var(--ag-checkbox-checked-background-color);border-color:var(--ag-checkbox-checked-border-color);&:after{background-color:var(--ag-checkbox-checked-shape-color)}}&:where(:focus-within,:active){box-shadow:var(--ag-focus-shadow)}&:where(.ag-disabled){filter:grayscale();opacity:.5}}.ag-checkbox-input-wrapper{border-radius:var(--ag-checkbox-border-radius);&:where(.ag-checked):after{-webkit-mask-image:var(--ag-checkbox-checked-shape-image);mask-image:var(--ag-checkbox-checked-shape-image)}&:where(.ag-indeterminate){background-color:var(--ag-checkbox-indeterminate-background-color);border-color:var(--ag-checkbox-indeterminate-border-color);&:after{background-color:var(--ag-checkbox-indeterminate-shape-color);-webkit-mask-image:var(--ag-checkbox-indeterminate-shape-image);mask-image:var(--ag-checkbox-indeterminate-shape-image)}}}.ag-radio-button-input-wrapper{border-radius:100%;&:where(.ag-checked):after{-webkit-mask-image:var(--ag-radio-checked-shape-image);mask-image:var(--ag-radio-checked-shape-image)}}`;\n", "import { createPart } from '../../Part';\r\nimport { accentColor, foregroundBackgroundMix } from '../../theme-utils';\r\nimport { checkboxStyleDefaultCSS } from './checkbox-style-default.css-GENERATED';\r\n\r\ntype CheckboxStyleDefaultParams = {\r\n    /**\r\n     * Border radius for checkboxes\r\n     */\r\n    checkboxBorderRadius: never;\r\n\r\n    /**\r\n     * Border width for checkboxes\r\n     */\r\n    checkboxBorderWidth: never;\r\n\r\n    /**\r\n     * Background color of a checked checkbox\r\n     */\r\n    checkboxCheckedBackgroundColor: never;\r\n\r\n    /**\r\n     * Border color of a checked checkbox\r\n     */\r\n    checkboxCheckedBorderColor: never;\r\n\r\n    /**\r\n     * The color of the check mark on checked checkboxes.\r\n     */\r\n    checkboxCheckedShapeColor: never;\r\n\r\n    /**\r\n     * An image defining the shape of the check mark on checked checkboxes.\r\n     */\r\n    checkboxCheckedShapeImage: never;\r\n\r\n    /**\r\n     * Background color of an indeterminate checkbox\r\n     */\r\n    checkboxIndeterminateBackgroundColor: never;\r\n\r\n    /**\r\n     * Border color of an indeterminate checkbox\r\n     */\r\n    checkboxIndeterminateBorderColor: never;\r\n\r\n    /**\r\n     * The color of the dash mark on indeterminate checkboxes\r\n     */\r\n    checkboxIndeterminateShapeColor: never;\r\n\r\n    /**\r\n     * An image defining the shape of the dash mark on indeterminate checkboxes\r\n     */\r\n    checkboxIndeterminateShapeImage: never;\r\n\r\n    /**\r\n     * Background color of an unchecked checkbox\r\n     */\r\n    checkboxUncheckedBackgroundColor: never;\r\n\r\n    /**\r\n     * Border color of an unchecked checkbox\r\n     */\r\n    checkboxUncheckedBorderColor: never;\r\n\r\n    /**\r\n     * An image defining the shape of the mark on checked radio buttons\r\n     */\r\n    radioCheckedShapeImage: never;\r\n};\r\n\r\nexport const checkboxStyleDefault = createPart<CheckboxStyleDefaultParams>({\r\n    feature: 'checkboxStyle',\r\n    params: {\r\n        checkboxBorderWidth: 1,\r\n        checkboxBorderRadius: {\r\n            ref: 'borderRadius',\r\n        },\r\n        checkboxUncheckedBackgroundColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n        checkboxUncheckedBorderColor: foregroundBackgroundMix(0.3),\r\n        checkboxCheckedBackgroundColor: accentColor,\r\n        checkboxCheckedBorderColor: accentColor,\r\n        checkboxCheckedShapeImage: {\r\n            svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"7\" fill=\"none\"><path stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.75\" d=\"M1 3.5 3.5 6l5-5\"/></svg>',\r\n        },\r\n        checkboxCheckedShapeColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n        checkboxIndeterminateBackgroundColor: foregroundBackgroundMix(0.3),\r\n        checkboxIndeterminateBorderColor: foregroundBackgroundMix(0.3),\r\n        checkboxIndeterminateShapeImage: {\r\n            svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"2\" fill=\"none\"><rect width=\"10\" height=\"2\" fill=\"#000\" rx=\"1\"/></svg>',\r\n        },\r\n        checkboxIndeterminateShapeColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n        radioCheckedShapeImage: {\r\n            svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"6\" height=\"6\" fill=\"none\"><circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#000\"/></svg>',\r\n        },\r\n    },\r\n    css: checkboxStyleDefaultCSS,\r\n});\r\n", "import { createPart } from '../../Part';\r\nimport { defaultLightColorSchemeParams } from '../../core/core-css';\r\nimport { accentMix, foregroundBackgroundMix } from '../../theme-utils';\r\n\r\nexport const colorSchemeLight = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: defaultLightColorSchemeParams,\r\n});\r\n\r\nexport const colorSchemeLightWarm = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: {\r\n        ...defaultLightColorSchemeParams,\r\n        foregroundColor: '#000000de',\r\n        borderColor: '#60300026',\r\n        chromeBackgroundColor: '#60300005',\r\n    },\r\n});\r\n\r\nexport const colorSchemeLightCold = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: {\r\n        ...defaultLightColorSchemeParams,\r\n        foregroundColor: '#000',\r\n        chromeBackgroundColor: '#f3f8f8',\r\n    },\r\n});\r\n\r\nconst darkParams = {\r\n    ...defaultLightColorSchemeParams,\r\n    backgroundColor: 'hsl(217, 0%, 17%)',\r\n    foregroundColor: '#FFF',\r\n    chromeBackgroundColor: foregroundBackgroundMix(0.05),\r\n    rowHoverColor: accentMix(0.15),\r\n    selectedRowBackgroundColor: accentMix(0.2),\r\n    menuBackgroundColor: foregroundBackgroundMix(0.1),\r\n    browserColorScheme: 'dark',\r\n    popupShadow: '0 0px 20px #000A',\r\n    cardShadow: '0 1px 4px 1px #000A',\r\n    advancedFilterBuilderJoinPillColor: '#7a3a37',\r\n    advancedFilterBuilderColumnPillColor: '#355f2d',\r\n    advancedFilterBuilderOptionPillColor: '#5a3168',\r\n    advancedFilterBuilderValuePillColor: '#374c86',\r\n    checkboxUncheckedBorderColor: foregroundBackgroundMix(0.4),\r\n    toggleButtonOffBackgroundColor: foregroundBackgroundMix(0.4),\r\n} as const;\r\n\r\nexport const colorSchemeDark = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: darkParams,\r\n});\r\n\r\nexport const colorSchemeDarkWarm = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: {\r\n        backgroundColor: 'hsl(29, 10%, 17%)',\r\n        foregroundColor: '#FFF',\r\n        browserColorScheme: 'dark',\r\n    },\r\n});\r\n\r\nconst darkBlueParams = {\r\n    ...darkParams,\r\n    backgroundColor: '#1f2836',\r\n} as const;\r\n\r\nexport const colorSchemeDarkBlue = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: darkBlueParams,\r\n});\r\n\r\nexport const colorSchemeVariable = /*#__PURE__*/ createPart({\r\n    feature: 'colorScheme',\r\n    params: defaultLightColorSchemeParams,\r\n    modeParams: {\r\n        light: defaultLightColorSchemeParams,\r\n        dark: darkParams,\r\n        'dark-blue': darkBlueParams,\r\n    },\r\n});\r\n", "export const sharedIconStylesCSS = /*css*/ `:where(.ag-icon):before{align-items:center;background-color:currentcolor;color:inherit;content:\"\";display:flex;font-family:inherit;font-size:var(--ag-icon-size);font-style:normal;font-variant:normal;height:var(--ag-icon-size);justify-content:center;line-height:var(--ag-icon-size);-webkit-mask-size:contain;mask-size:contain;text-transform:none;width:var(--ag-icon-size)}.ag-icon{background-position:50%;background-repeat:no-repeat;background-size:contain;display:block;height:var(--ag-icon-size);position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:var(--ag-icon-size)}`;\n", "export const iconSetAlpineCSS = /*css*/ `.ag-icon-aggregation:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M24 6H8v2l8 8-8 8v2h16v-2H11l8-8-8-8h13z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-arrows:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M7.515 11.171 2.687 16l4.828 4.829-1.414 1.414L-.142 16l6.243-6.243zm16.97 0 1.414-1.414L32.142 16l-6.243 6.243-1.414-1.414L29.313 16zM16.028 13.2l2.829 2.828-2.829 2.829-2.828-2.829zm-4.857 11.285L16 29.313l4.829-4.828 1.414 1.414L16 32.142l-6.243-6.243zm0-16.97L9.757 6.101 16-.142l6.243 6.243-1.414 1.414L16 2.687z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-asc:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m5.333 16 1.88 1.88 7.453-7.44v16.227h2.667V10.44l7.44 7.453L26.666 16 15.999 5.333 5.332 16z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-cancel:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M16 2.667A13.32 13.32 0 0 0 2.667 16c0 7.373 5.96 13.333 13.333 13.333S29.333 23.373 29.333 16 23.373 2.667 16 2.667m6.667 18.12-1.88 1.88L16 17.88l-4.787 4.787-1.88-1.88L14.12 16l-4.787-4.787 1.88-1.88L16 14.12l4.787-4.787 1.88 1.88L17.88 16z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-chart:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Echart%3C/title%3E%3Cg fill='%23000' fill-rule='nonzero'%3E%3Cpath d='M14 7h4v18h-4zM8 17h4v8H8zM20 13h4v12h-4z'/%3E%3C/g%3E%3C/svg%3E\")}.ag-icon-color-picker:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M23.907 17.587 10.574 4.254l-1.88 1.88 3.173 3.173-8.28 8.28 10.16 10.16zm-16.547 0 6.387-6.387 6.387 6.387zm18.387 2s-2.667 2.893-2.667 4.667c0 1.467 1.2 2.667 2.667 2.667s2.667-1.2 2.667-2.667c0-1.773-2.667-4.667-2.667-4.667' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-columns:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M26 25H6V7h20zM12 11H8v12h4zm6 0h-4v12h4zm6 12V11h-4v12z' style='fill-rule:nonzero' transform='translate(0 -1)'/%3E%3C/svg%3E\")}.ag-icon-contracted:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m12 6 10 10-10 10-2-2 8-8-8-8z'/%3E%3C/svg%3E\")}.ag-icon-copy:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M22 1.333H6A2.675 2.675 0 0 0 3.333 4v18.667H6V4h16zm4 5.334H11.333a2.675 2.675 0 0 0-2.667 2.667v18.667c0 1.467 1.2 2.667 2.667 2.667H26c1.467 0 2.667-1.2 2.667-2.667V9.334c0-1.467-1.2-2.667-2.667-2.667M26 28H11.333V9.333H26z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-cross:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M15.984 13.894 27.05 2.828l2.122 2.122-11.066 11.066 11.066 11.066-2.122 2.12-11.066-11.066L4.918 29.202l-2.12-2.12 11.066-11.066L2.798 4.95l2.12-2.122z'/%3E%3C/svg%3E\")}.ag-icon-csv:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M384 131.9c-7.753-8.433-110.425-128.473-114.9-133L48-.1C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48zm-35.9 2.1H257V27.9zM30 479V27h200l1 105c0 13.3-1.3 29 12 29h111l1 318z' style='fill-rule:nonzero' transform='matrix(.06285 0 0 .06285 3.934 -.054)'/%3E%3Cpath d='M.688-.226a.2.2 0 0 1-.017.074.28.28 0 0 1-.145.14.412.412 0 0 1-.234.013.28.28 0 0 1-.202-.168.468.468 0 0 1-.04-.19q0-.086.025-.155a.319.319 0 0 1 .182-.191.4.4 0 0 1 .134-.025q.087 0 .155.035a.3.3 0 0 1 .104.085.17.17 0 0 1 .036.097.06.06 0 0 1-.018.044.06.06 0 0 1-.042.019.06.06 0 0 1-.042-.013.2.2 0 0 1-.031-.046.2.2 0 0 0-.066-.079.16.16 0 0 0-.095-.027.17.17 0 0 0-.142.068.3.3 0 0 0-.053.193.4.4 0 0 0 .023.139.2.2 0 0 0 .067.083.2.2 0 0 0 .1.027q.063 0 .106-.031a.2.2 0 0 0 .065-.091.2.2 0 0 1 .023-.046q.014-.018.044-.018a.06.06 0 0 1 .044.018.06.06 0 0 1 .019.045' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 7.122 25.977)'/%3E%3Cpath d='M.622-.215a.2.2 0 0 1-.033.117.23.23 0 0 1-.098.081.4.4 0 0 1-.153.029.34.34 0 0 1-.175-.04.23.23 0 0 1-.079-.077.17.17 0 0 1-.031-.093q0-.027.019-.045a.06.06 0 0 1 .046-.019.06.06 0 0 1 .039.014.1.1 0 0 1 .027.044.3.3 0 0 0 .03.057q.015.023.044.038.03.015.076.015.065 0 .105-.03a.09.09 0 0 0 .04-.075.08.08 0 0 0-.022-.058.14.14 0 0 0-.056-.034 1 1 0 0 0-.092-.025.7.7 0 0 1-.129-.042.2.2 0 0 1-.083-.066.17.17 0 0 1-.03-.104q0-.058.032-.105a.2.2 0 0 1 .093-.07.4.4 0 0 1 .144-.025q.066 0 .114.016a.3.3 0 0 1 .08.044.2.2 0 0 1 .046.057q.015.03.015.058a.07.07 0 0 1-.018.046.06.06 0 0 1-.046.021q-.025 0-.038-.012a.2.2 0 0 1-.028-.041.2.2 0 0 0-.047-.063Q.387-.625.326-.625a.15.15 0 0 0-.09.025q-.035.024-.035.059 0 .021.012.037a.1.1 0 0 0 .032.027.4.4 0 0 0 .111.036q.06.015.11.031.048.018.083.042a.2.2 0 0 1 .054.062.2.2 0 0 1 .019.091' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 13.339 25.977)'/%3E%3Cpath d='m.184-.633.162.48.163-.483q.013-.038.019-.053a.062.062 0 0 1 .061-.039q.018 0 .034.009a.1.1 0 0 1 .025.025q.009.015.009.031L.654-.64l-.007.025-.009.024-.173.468-.019.051a.2.2 0 0 1-.021.042.1.1 0 0 1-.033.03.1.1 0 0 1-.049.012.1.1 0 0 1-.05-.011A.1.1 0 0 1 .26-.03a.2.2 0 0 1-.021-.042L.22-.123.05-.587.041-.612.033-.638.03-.662q0-.025.02-.046a.07.07 0 0 1 .05-.02q.037 0 .053.023.015.023.031.072' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 18.94 25.977)'/%3E%3C/svg%3E\")}.ag-icon-cut:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M13.775 15.198 3.835 2.945a1.501 1.501 0 0 1 2.33-1.89l14.997 18.488A6.003 6.003 0 0 1 29.657 25c0 3.311-2.688 6-6 6s-6-2.689-6-6c0-1.335.437-2.569 1.176-3.566l-3.127-3.855-3.001 3.7A5.97 5.97 0 0 1 14 25c0 3.311-2.689 6-6 6s-6-2.689-6-6a6.003 6.003 0 0 1 8.315-5.536zm9.882 6.702a3.1 3.1 0 0 0-3.1 3.1c0 1.711 1.389 3.1 3.1 3.1s3.1-1.389 3.1-3.1-1.389-3.1-3.1-3.1M8 21.95a3.05 3.05 0 1 0 .001 6.101A3.05 3.05 0 0 0 8 21.95m9.63-11.505 1.932 2.381 8.015-9.881a1.5 1.5 0 0 0-2.329-1.89z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-desc:before,.ag-icon-down:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m26.667 16-1.88-1.88-7.453 7.44V5.333h-2.667V21.56l-7.44-7.453L5.334 16l10.667 10.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-excel:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M384 131.9c-7.753-8.433-110.425-128.473-114.9-133L48-.1C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48zm-35.9 2.1H257V27.9zM30 479V27h200l1 105c0 13.3-1.3 29 12 29h111l1 318z' style='fill-rule:nonzero' transform='matrix(.06285 0 0 .06285 3.934 -.054)'/%3E%3Cpath d='m.052-.139.16-.234-.135-.208a.4.4 0 0 1-.028-.052.1.1 0 0 1-.01-.042.05.05 0 0 1 .018-.037.07.07 0 0 1 .045-.016q.03 0 .047.018a1 1 0 0 1 .047.066l.107.174.115-.174.024-.038.019-.026.021-.015a.1.1 0 0 1 .027-.005.06.06 0 0 1 .044.016.05.05 0 0 1 .018.039q0 .033-.038.089l-.141.211.152.234a.3.3 0 0 1 .03.051.1.1 0 0 1 .009.038.1.1 0 0 1-.008.031.1.1 0 0 1-.024.023.1.1 0 0 1-.034.008.1.1 0 0 1-.035-.008.1.1 0 0 1-.023-.022L.427-.067.301-.265l-.134.204-.022.034-.016.019a.1.1 0 0 1-.022.015.1.1 0 0 1-.03.005.06.06 0 0 1-.044-.016.06.06 0 0 1-.017-.047q0-.036.036-.088' style='fill-rule:nonzero' transform='matrix(17.82892 0 0 16.50777 10.371 25.928)'/%3E%3C/svg%3E\")}.ag-icon-expanded:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M20 26 10 16 20 6l2 2-8 8 8 8z'/%3E%3C/svg%3E\")}.ag-icon-eye-slash:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eeye-slash%3C/title%3E%3Cpath fill='%23000' fill-rule='nonzero' d='M8.95 10.364 7 8.414 8.414 7l2.32 2.32A13.2 13.2 0 0 1 16.5 8c5.608 0 10.542 3.515 12.381 8.667L29 17l-.119.333a13 13 0 0 1-4.255 5.879l1.466 1.466-1.414 1.414-1.754-1.753A13.2 13.2 0 0 1 16.5 26c-5.608 0-10.542-3.515-12.381-8.667L4 17l.119-.333a13 13 0 0 1 4.83-6.303m1.445 1.445A11.02 11.02 0 0 0 6.148 17c1.646 4.177 5.728 7 10.352 7 1.76 0 3.441-.409 4.94-1.146l-1.878-1.878A5.06 5.06 0 0 1 16.5 22c-2.789 0-5.05-2.239-5.05-5 0-1.158.398-2.223 1.065-3.07zm1.855-.974 1.794 1.795A5.07 5.07 0 0 1 16.5 12c2.789 0 5.05 2.239 5.05 5 0 .9-.24 1.745-.661 2.474l2.305 2.306A11 11 0 0 0 26.852 17c-1.646-4.177-5.728-7-10.352-7-1.495 0-2.933.295-4.25.835'/%3E%3C/svg%3E\")}.ag-icon-eye:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M16.5 23c4.624 0 8.706-2.823 10.352-7-1.646-4.177-5.728-7-10.352-7s-8.706 2.823-10.352 7c1.646 4.177 5.728 7 10.352 7M4.119 15.667C5.958 10.515 10.892 7 16.5 7s10.542 3.515 12.381 8.667L29 16l-.119.333C27.042 21.485 22.108 25 16.5 25S5.958 21.485 4.119 16.333L4 16zM16.5 21c2.789 0 5.049-2.239 5.049-5s-2.26-5-5.049-5-5.049 2.239-5.049 5 2.26 5 5.049 5' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-filter:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m28 8-8 8v5l-6 6V16L6 8V6h22zM9 8l7 7v7l2-2v-5l7-7z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-first:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M24.273 22.12 18.153 16l6.12-6.12L22.393 8l-8 8 8 8zM7.727 8h2.667v16H7.727z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-group:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M14 7v1H9V7zm0-3v1H5.001V4zm-7 7H5v-1h2zm0-3H5V7h2zM3 5H1V4h2zm11 5v1H9v-1zm-7 4H5v-1h2zm7-1v1H9v-1z' style='fill-rule:nonzero' transform='matrix(2 0 0 2 0 -2)'/%3E%3C/svg%3E\")}.ag-icon-last:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m7.727 9.88 6.12 6.12-6.12 6.12L9.607 24l8-8-8-8zM21.607 8h2.667v16h-2.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-left:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M26.667 14.667H10.44l7.453-7.453L16 5.334 5.333 16.001 16 26.668l1.88-1.88-7.44-7.453h16.227z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-linked:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M5.2 16a4.136 4.136 0 0 1 4.133-4.133h5.333V9.334H9.333a6.67 6.67 0 0 0-6.667 6.667 6.67 6.67 0 0 0 6.667 6.667h5.333v-2.533H9.333A4.136 4.136 0 0 1 5.2 16.002zm5.467 1.333h10.667v-2.667H10.667zm12-8h-5.333v2.533h5.333a4.136 4.136 0 0 1 4.133 4.133 4.136 4.136 0 0 1-4.133 4.133h-5.333v2.533h5.333a6.67 6.67 0 0 0 6.667-6.667 6.67 6.67 0 0 0-6.667-6.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-loading:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M17 29h-2v-8h2zm-3.586-9L7 26.414 5.586 25 12 18.586zm13 5L25 26.414 18.586 20 20 18.586zM29 17h-8v-2h8zm-18 0H3v-2h8zm2.414-5L12 13.414 5.586 7 7 5.586zm13-5L20 13.414 18.586 12 25 5.586zM17 11h-2V3h2z' style='fill-rule:nonzero' transform='translate(-3.692 -3.692)scale(1.23077)'/%3E%3C/svg%3E\")}.ag-icon-maximize:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M14 30H2V18h2.828v7.05l8.254-8.252 2.12 2.12-8.252 8.254H14zm4-28h12v12h-2.828V6.95l-8.254 8.252-2.12-2.12 8.252-8.254H18z'/%3E%3C/svg%3E\")}.ag-icon-menu:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M20 13H0v-2h20zm0-6H0V5h20zm0-6H0v-2h20z' style='fill-rule:nonzero' transform='translate(6 9)'/%3E%3C/svg%3E\")}.ag-icon-menu-alt:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='none' viewBox='0 0 32 32'%3E%3Cpath fill='%23000' d='M16 19a3 3 0 1 0 0-6 3 3 0 0 0 0 6M16 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6M16 27a3 3 0 1 0 0-6 3 3 0 0 0 0 6'/%3E%3C/svg%3E\")}.ag-icon-minimize:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M2 18h12v12h-2.828v-7.05l-8.254 8.252-2.12-2.12 8.252-8.254H2zm28-4H18V2h2.828v7.05L29.082.798l2.12 2.12-8.252 8.254H30z'/%3E%3C/svg%3E\")}.ag-icon-minus:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M6.572 6.572a13.32 13.32 0 0 0 0 18.856 13.32 13.32 0 0 0 18.856 0 13.32 13.32 0 0 0 0-18.856 13.32 13.32 0 0 0-18.856 0m17.527 8.099v2.658H7.901v-2.658z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-next:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M10.94 6 9.06 7.88 17.167 16 9.06 24.12 10.94 26l10-10z' style='fill-rule:nonzero' transform='translate(1)'/%3E%3C/svg%3E\")}.ag-icon-none:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Enone%3C/title%3E%3Cg fill='%23000' fill-rule='nonzero'%3E%3Cpath d='M23.708 14.645 16 6.939l-7.708 7.706 1.416 1.416L16 9.767l6.292 6.294zM23.708 20.355 16 28.061l-7.708-7.706 1.416-1.416L16 25.233l6.292-6.294z'/%3E%3C/g%3E%3C/svg%3E\")}.ag-icon-not-allowed:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M16 2.667C8.64 2.667 2.667 8.64 2.667 16S8.64 29.333 16 29.333 29.333 23.36 29.333 16 23.36 2.667 16 2.667M5.333 16c0-5.893 4.773-10.667 10.667-10.667 2.467 0 4.733.84 6.533 2.253L7.586 22.533A10.54 10.54 0 0 1 5.333 16M16 26.667c-2.467 0-4.733-.84-6.533-2.253L24.414 9.467A10.54 10.54 0 0 1 26.667 16c0 5.893-4.773 10.667-10.667 10.667' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-paste:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M25.334 4H19.76C19.2 2.453 17.733 1.333 16 1.333S12.8 2.453 12.24 4H6.667A2.675 2.675 0 0 0 4 6.667V28c0 1.467 1.2 2.667 2.667 2.667h18.667c1.467 0 2.667-1.2 2.667-2.667V6.667C28.001 5.2 26.801 4 25.334 4M16 4c.733 0 1.333.6 1.333 1.333s-.6 1.333-1.333 1.333-1.333-.6-1.333-1.333S15.267 4 16 4m9.333 24H6.666V6.667h2.667v4h13.333v-4h2.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-pin:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m10.78 19.777-4.668-4.666s.032-1 .67-1.87c1.366-1.86 4.052-1.96 6.056-1.572l3.158-3.108c-.7-2.342 3.352-5.046 3.352-5.046l9.166 9.168q-.334.447-.67.894c-1.074 1.426-2.538 2.63-4.272 2.338l-3.32 3.218c.046.344.042.03.118 1.152.144 2.13-.64 4.324-2.632 5.34l-.746.364-4.798-4.798-7.292 7.294-1.416-1.416zm8.24-13.672c-.688.568-1.416 1.45-1.024 2.072l.49.722-4.986 4.988c-1.988-.506-4.346-.636-5.156.614l9.02 9.032q.14-.099.272-.21c1.226-1.08.764-3.04.498-4.9l4.79-4.79s1.47.938 2.936-.776l-6.79-6.79q-.026.019-.05.038' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-pivot:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M25.128 2.002c2.56.096 4.772 2.292 4.87 4.87a712 712 0 0 1 0 18.256c-.096 2.56-2.292 4.772-4.87 4.87a712 712 0 0 1-18.256 0c-2.558-.096-4.772-2.29-4.87-4.87a712 712 0 0 1 0-18.256c.096-2.56 2.292-4.772 4.87-4.87a712 712 0 0 1 18.256 0m2.966 7.954H9.892v18.136c5.086.13 10.18.098 15.264-.096 1.48-.094 2.746-1.35 2.84-2.84.192-5.064.226-10.134.098-15.2M3.968 24.1q.015.528.036 1.056c.094 1.484 1.354 2.746 2.84 2.84l1.012.036V24.1zM22 15.414l-.292.294-1.416-1.416L23 11.586l2.708 2.706-1.416 1.416-.292-.294v3.592c-.032 2.604-2.246 4.892-4.872 4.992L15.414 24l.294.292-1.416 1.416L11.586 23l2.706-2.708 1.416 1.416-.322.32c3.372.03 6.578-.164 6.614-3.034zM3.88 18.038c.002 1.346.012 2.694.038 4.04h3.938v-4.04zm.05-6.062a681 681 0 0 0-.044 4.042h3.97v-4.042zm5.962-7.99Q8.449 3.999 7.006 4c-1.57.02-2.946 1.348-3.004 2.922q-.02 1.517-.042 3.034h3.896v-2.02h2.036zm14.244-.016v3.966h3.898q-.017-.546-.038-1.092c-.094-1.48-1.35-2.746-2.84-2.84q-.51-.019-1.02-.034m-8.14-.054q-2.035.022-4.07.048v3.972h4.07zm6.106.008a213 213 0 0 0-4.07-.022v4.034h4.07z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-plus:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M6.572 6.572a13.32 13.32 0 0 0 0 18.856 13.32 13.32 0 0 0 18.856 0 13.32 13.32 0 0 0 0-18.856 13.32 13.32 0 0 0-18.856 0m17.527 8.099v2.658h-6.77v6.77h-2.658v-6.77h-6.77v-2.658h6.77v-6.77h2.658v6.77z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-previous:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M21.94 7.88 20.06 6l-10 10 10 10 1.88-1.88L13.833 16z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-right:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m16 5.333-1.88 1.88 7.44 7.453H5.333v2.667H21.56l-7.44 7.453 1.88 1.88 10.667-10.667L16 5.332z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-save:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M15.708 2.355 8 10.061.292 2.355 1.708.939 8 7.233 14.292.939z' style='fill-rule:nonzero' transform='translate(8 14)'/%3E%3Cpath d='M5 26h22v2H5zM15 4h2v18h-2z'/%3E%3C/svg%3E\")}.ag-icon-small-down:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M7.334 10.667 16 21.334l8.667-10.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-small-left:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M21.333 7.334 10.666 16l10.667 8.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-small-right:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M10.667 24.666 21.334 16 10.667 7.333z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-small-up:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M7.334 21.333 16 10.666l8.667 10.667z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-tick:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M11.586 22.96 27.718 6.828 29.84 8.95 11.586 27.202 2.4 18.016l2.12-2.122z'/%3E%3C/svg%3E\")}.ag-icon-tree-closed:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m11.94 6-1.88 1.88L18.167 16l-8.107 8.12L11.94 26l10-10z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-tree-indeterminate:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M6 13.5h20v3H6z'/%3E%3C/svg%3E\")}.ag-icon-tree-open:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M24.12 9.06 16 17.167 7.88 9.06 6 10.94l10 10 10-10z' style='fill-rule:nonzero' transform='translate(0 1)'/%3E%3C/svg%3E\")}.ag-icon-unlinked:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M22.667 9.333h-5.333v2.533h5.333a4.136 4.136 0 0 1 4.133 4.133c0 1.907-1.307 3.507-3.08 3.973l1.947 1.947c2.173-1.107 3.667-3.32 3.667-5.92a6.67 6.67 0 0 0-6.667-6.667zm-1.334 5.334h-2.92l2.667 2.667h.253zM2.667 5.693 6.814 9.84A6.65 6.65 0 0 0 2.667 16a6.67 6.67 0 0 0 6.667 6.667h5.333v-2.533H9.334a4.136 4.136 0 0 1-4.133-4.133c0-2.12 1.613-3.867 3.68-4.093l2.76 2.76h-.973v2.667h3.64l3.027 3.027v2.307h2.307l5.347 5.333 1.68-1.68L4.362 4.002 2.669 5.695z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-up:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m5.333 16 1.88 1.88 7.453-7.44v16.227h2.667V10.44l7.44 7.453L26.666 16 15.999 5.333 5.332 16z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-grip:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M8 24H6v-4h2zm6 0h-2v-4h2zm6 0h-2v-4h2zm6 0h-2v-4h2zM8 18H6v-4h2zm6 0h-2v-4h2zm6 0h-2v-4h2zm6 0h-2v-4h2zM8 12H6V8h2zm6 0h-2V8h2zm6 0h-2V8h2zm6 0h-2V8h2z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-settings:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='none' viewBox='0 0 32 32'%3E%3Cpath fill='%23000' d='M30 8h-4.1c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2v2h14.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30zm-9 4c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3M2 24h4.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30v-2H15.9c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2zm9-4c1.7 0 3 1.3 3 3s-1.3 3-3 3-3-1.3-3-3 1.3-3 3-3'/%3E%3C/svg%3E\")}`;\n", "import { createPart } from '../../../Part';\r\nimport { sharedIconStylesCSS } from '../shared-icon-styles.css-GENERATED';\r\nimport { iconSetAlpineCSS } from './icon-set-alpine.css-GENERATED';\r\n\r\nexport const iconSetAlpine = /*#__PURE__*/ createPart({\r\n    feature: 'iconSet',\r\n    css: () => sharedIconStylesCSS + iconSetAlpineCSS,\r\n});\r\n", "export const iconSetMaterialCSS = /*css*/ `.ag-icon-aggregation:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eaggregation%3C/title%3E%3Cpath d='M24 5.333H8V8l8.667 8L8 24v2.667h16v-4h-9.333L21.334 16l-6.667-6.667H24z'/%3E%3C/svg%3E\")}.ag-icon-arrows:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Earrows%3C/title%3E%3Cpath d='M13.333 11.556h5.333V8h3.556L16 1.778 9.778 8h3.556zm-1.777 1.777H8V9.777l-6.222 6.222L8 22.221v-3.556h3.556zM30.222 16 24 9.778v3.556h-3.556v5.333H24v3.556l6.222-6.222zm-11.555 4.444h-5.333V24H9.778L16 30.222 22.222 24h-3.556z'/%3E%3C/svg%3E\")}.ag-icon-asc:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Easc%3C/title%3E%3Cpath d='m5.333 16 1.88 1.88 7.453-7.44v16.227h2.667V10.44l7.44 7.453L26.666 16 15.999 5.333z'/%3E%3C/svg%3E\")}.ag-icon-cancel:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Ecancel%3C/title%3E%3Cpath d='M16 2.667C8.627 2.667 2.667 8.627 2.667 16S8.627 29.333 16 29.333 29.333 23.373 29.333 16 23.373 2.667 16 2.667m6.667 18.12-1.88 1.88L16 17.88l-4.787 4.787-1.88-1.88L14.12 16l-4.787-4.787 1.88-1.88L16 14.12l4.787-4.787 1.88 1.88L17.88 16z'/%3E%3C/svg%3E\")}.ag-icon-chart:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Echart%3C/title%3E%3Cpath d='M6.667 12.267h4v13.067h-4zm7.466-5.6h3.733v18.667h-3.733zM21.6 17.333h3.733v8H21.6z'/%3E%3C/svg%3E\")}.ag-icon-color-picker:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Ecolor-picker%3C/title%3E%3Cpath d='M23.907 17.587 10.574 4.254l-1.88 1.88 3.173 3.173-8.28 8.28 10.16 10.16zm-16.547 0 6.387-6.387 6.387 6.387H7.361zm18.387 2s-2.667 2.893-2.667 4.667c0 1.467 1.2 2.667 2.667 2.667s2.667-1.2 2.667-2.667c0-1.773-2.667-4.667-2.667-4.667'/%3E%3C/svg%3E\")}.ag-icon-columns:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Ecolumns%3C/title%3E%3Cpath d='M5.333 10.667h5.333V5.334H5.333zm8 16h5.333v-5.333h-5.333zm-8 0h5.333v-5.333H5.333zm0-8h5.333v-5.333H5.333zm8 0h5.333v-5.333h-5.333zm8-13.334v5.333h5.333V5.333zm-8 5.334h5.333V5.334h-5.333zm8 8h5.333v-5.333h-5.333zm0 8h5.333v-5.333h-5.333z'/%3E%3C/svg%3E\")}.ag-icon-contracted:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Econtracted%3C/title%3E%3Cpath d='m12.94 8-1.88 1.88L17.167 16l-6.107 6.12L12.94 24l8-8z'/%3E%3C/svg%3E\")}.ag-icon-copy:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Ecopy%3C/title%3E%3Cpath d='M22 1.333H6A2.675 2.675 0 0 0 3.333 4v18.667H6V4h16zm4 5.334H11.333a2.675 2.675 0 0 0-2.667 2.667v18.667c0 1.467 1.2 2.667 2.667 2.667H26c1.467 0 2.667-1.2 2.667-2.667V9.334c0-1.467-1.2-2.667-2.667-2.667M26 28H11.333V9.333H26z'/%3E%3C/svg%3E\")}.ag-icon-cross:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Ecross%3C/title%3E%3Cpath d='m25.333 8.547-1.88-1.88L16 14.12 8.547 6.667l-1.88 1.88L14.12 16l-7.453 7.453 1.88 1.88L16 17.88l7.453 7.453 1.88-1.88L17.88 16z'/%3E%3C/svg%3E\")}.ag-icon-csv:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M384 131.9c-7.753-8.433-110.425-128.473-114.9-133L48-.1C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48zm-35.9 2.1H257V27.9zM30 479V27h200l1 105c0 13.3-1.3 29 12 29h111l1 318z' style='fill-rule:nonzero' transform='matrix(.06285 0 0 .06285 3.934 -.054)'/%3E%3Cpath d='M.688-.226a.2.2 0 0 1-.017.074.28.28 0 0 1-.145.14.412.412 0 0 1-.234.013.28.28 0 0 1-.202-.168.468.468 0 0 1-.04-.19q0-.086.025-.155a.319.319 0 0 1 .182-.191.4.4 0 0 1 .134-.025q.087 0 .155.035a.3.3 0 0 1 .104.085.17.17 0 0 1 .036.097.06.06 0 0 1-.018.044.06.06 0 0 1-.042.019.06.06 0 0 1-.042-.013.2.2 0 0 1-.031-.046.2.2 0 0 0-.066-.079.16.16 0 0 0-.095-.027.17.17 0 0 0-.142.068.3.3 0 0 0-.053.193.4.4 0 0 0 .023.139.2.2 0 0 0 .067.083.2.2 0 0 0 .1.027q.063 0 .106-.031a.2.2 0 0 0 .065-.091.2.2 0 0 1 .023-.046q.014-.018.044-.018a.06.06 0 0 1 .044.018.06.06 0 0 1 .019.045' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 7.122 25.977)'/%3E%3Cpath d='M.622-.215a.2.2 0 0 1-.033.117.23.23 0 0 1-.098.081.4.4 0 0 1-.153.029.34.34 0 0 1-.175-.04.23.23 0 0 1-.079-.077.17.17 0 0 1-.031-.093q0-.027.019-.045a.06.06 0 0 1 .046-.019.06.06 0 0 1 .039.014.1.1 0 0 1 .027.044.3.3 0 0 0 .03.057q.015.023.044.038.03.015.076.015.065 0 .105-.03a.09.09 0 0 0 .04-.075.08.08 0 0 0-.022-.058.14.14 0 0 0-.056-.034 1 1 0 0 0-.092-.025.7.7 0 0 1-.129-.042.2.2 0 0 1-.083-.066.17.17 0 0 1-.03-.104q0-.058.032-.105a.2.2 0 0 1 .093-.07.4.4 0 0 1 .144-.025q.066 0 .114.016a.3.3 0 0 1 .08.044.2.2 0 0 1 .046.057q.015.03.015.058a.07.07 0 0 1-.018.046.06.06 0 0 1-.046.021q-.025 0-.038-.012a.2.2 0 0 1-.028-.041.2.2 0 0 0-.047-.063Q.387-.625.326-.625a.15.15 0 0 0-.09.025q-.035.024-.035.059 0 .021.012.037a.1.1 0 0 0 .032.027.4.4 0 0 0 .111.036q.06.015.11.031.048.018.083.042a.2.2 0 0 1 .054.062.2.2 0 0 1 .019.091' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 13.339 25.977)'/%3E%3Cpath d='m.184-.633.162.48.163-.483q.013-.038.019-.053a.062.062 0 0 1 .061-.039q.018 0 .034.009a.1.1 0 0 1 .025.025q.009.015.009.031L.654-.64l-.007.025-.009.024-.173.468-.019.051a.2.2 0 0 1-.021.042.1.1 0 0 1-.033.03.1.1 0 0 1-.049.012.1.1 0 0 1-.05-.011A.1.1 0 0 1 .26-.03a.2.2 0 0 1-.021-.042L.22-.123.05-.587.041-.612.033-.638.03-.662q0-.025.02-.046a.07.07 0 0 1 .05-.02q.037 0 .053.023.015.023.031.072' style='fill-rule:nonzero' transform='matrix(8.39799 0 0 12.455 18.94 25.977)'/%3E%3C/svg%3E\")}.ag-icon-cut:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='m19 3-6 6 2 2 7-7V3m-10 9.5a.503.503 0 0 1-.5-.5c0-.274.226-.5.5-.5s.5.226.5.5-.226.5-.5.5M6 20c-1.097 0-2-.903-2-2a2 2 0 0 1 2-2c1.097 0 2 .903 2 2a2 2 0 0 1-2 2M6 8c-1.097 0-2-.903-2-2a2 2 0 0 1 2-2c1.097 0 2 .903 2 2a2 2 0 0 1-2 2m3.64-.36c.23-.5.36-1.05.36-1.64 0-2.194-1.806-4-4-4S2 3.806 2 6s1.806 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.194 0-4 1.806-4 4s1.806 4 4 4 4-1.806 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1z' style='fill-rule:nonzero' transform='translate(4 4)'/%3E%3C/svg%3E\")}.ag-icon-desc:before,.ag-icon-down:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Edesc%3C/title%3E%3Cpath d='m26.667 16-1.88-1.88-7.453 7.44V5.333h-2.667V21.56l-7.44-7.453L5.334 16l10.667 10.667L26.668 16z'/%3E%3C/svg%3E\")}.ag-icon-excel:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M384 131.9c-7.753-8.433-110.425-128.473-114.9-133L48-.1C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48zm-35.9 2.1H257V27.9zM30 479V27h200l1 105c0 13.3-1.3 29 12 29h111l1 318z' style='fill-rule:nonzero' transform='matrix(.06285 0 0 .06285 3.934 -.054)'/%3E%3Cpath d='m.052-.139.16-.234-.135-.208a.4.4 0 0 1-.028-.052.1.1 0 0 1-.01-.042.05.05 0 0 1 .018-.037.07.07 0 0 1 .045-.016q.03 0 .047.018a1 1 0 0 1 .047.066l.107.174.115-.174.024-.038.019-.026.021-.015a.1.1 0 0 1 .027-.005.06.06 0 0 1 .044.016.05.05 0 0 1 .018.039q0 .033-.038.089l-.141.211.152.234a.3.3 0 0 1 .03.051.1.1 0 0 1 .009.038.1.1 0 0 1-.008.031.1.1 0 0 1-.024.023.1.1 0 0 1-.034.008.1.1 0 0 1-.035-.008.1.1 0 0 1-.023-.022L.427-.067.301-.265l-.134.204-.022.034-.016.019a.1.1 0 0 1-.022.015.1.1 0 0 1-.03.005.06.06 0 0 1-.044-.016.06.06 0 0 1-.017-.047q0-.036.036-.088' style='fill-rule:nonzero' transform='matrix(17.82892 0 0 16.50777 10.371 25.928)'/%3E%3C/svg%3E\")}.ag-icon-expanded:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eexpanded%3C/title%3E%3Cpath d='M20.94 9.88 19.06 8l-8 8 8 8 1.88-1.88L14.833 16z'/%3E%3C/svg%3E\")}.ag-icon-eye-slash:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eeye-slash%3C/title%3E%3Cpath d='M21.106 15.088A5.19 5.19 0 0 0 16 10.814a5.17 5.17 0 0 0-3.668 1.522L9.866 9.868a12.2 12.2 0 0 1 6.133-1.646c5.186 0 9.614 3.225 11.408 7.778a12.34 12.34 0 0 1-5.276 6.133l-2.468-2.466a5.17 5.17 0 0 0 1.449-2.802h-2.123c-.148.508-.42.964-.782 1.33l-1.33-1.33h-2.514l2.196 2.196q-.272.049-.56.05a3.11 3.11 0 0 1-2.99-2.245h-2.123a5.19 5.19 0 0 0 7.3 3.836l2.247 2.247a12.2 12.2 0 0 1-4.434.828c-5.186 0-9.614-3.225-11.408-7.778a12.3 12.3 0 0 1 3.781-5.111l2.924 2.924a5.1 5.1 0 0 0-.404 1.275h4.206l-1.296-1.296a3.1 3.1 0 0 1 2.196-.903c1.404 0 2.587.924 2.976 2.199h2.13z'/%3E%3C/svg%3E\")}.ag-icon-eye:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eeye%3C/title%3E%3Cpath d='M16 8.222c-5.186 0-9.614 3.225-11.408 7.778 1.794 4.553 6.222 7.778 11.408 7.778S25.614 20.553 27.408 16C25.614 11.447 21.186 8.222 16 8.222m0 12.964c-2.862 0-5.186-2.324-5.186-5.186s2.324-5.186 5.186-5.186 5.186 2.324 5.186 5.186-2.324 5.186-5.186 5.186m0-8.297c-1.721 0-3.111 1.39-3.111 3.111s1.39 3.111 3.111 3.111 3.111-1.39 3.111-3.111-1.39-3.111-3.111-3.111'/%3E%3C/svg%3E\")}.ag-icon-filter:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Efilter%3C/title%3E%3Cpath d='M13.333 24h5.333v-2.667h-5.333zM4 8v2.667h24V8zm4 9.333h16v-2.667H8z'/%3E%3C/svg%3E\")}.ag-icon-first:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Efirst%3C/title%3E%3Cpath d='M24.273 22.12 18.153 16l6.12-6.12L22.393 8l-8 8 8 8zM7.727 8h2.667v16H7.727z'/%3E%3C/svg%3E\")}.ag-icon-group:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Egroup%3C/title%3E%3Cpath d='M18.667 21.333h8.889A3.555 3.555 0 0 1 24 24.889h-5.333zm8.888-7.111v3.556h-8.889v-3.556zM24 7.111a3.555 3.555 0 0 1 3.556 3.556h-16V7.111zm-8.889 17.778h-3.556v-3.556h3.556zm0-7.111h-3.556v-3.556h3.556zM8 10.667H4.444A3.555 3.555 0 0 1 8 7.111z'/%3E%3C/svg%3E\")}.ag-icon-last:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Elast%3C/title%3E%3Cpath d='m7.727 9.88 6.12 6.12-6.12 6.12L9.607 24l8-8-8-8zM21.607 8h2.667v16h-2.667z'/%3E%3C/svg%3E\")}.ag-icon-left:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eleft%3C/title%3E%3Cpath d='M26.667 14.667H10.44l7.453-7.453L16 5.334 5.333 16.001 16 26.668l1.88-1.88-7.44-7.453h16.227v-2.667z'/%3E%3C/svg%3E\")}.ag-icon-linked:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Elinked%3C/title%3E%3Cpath d='M5.2 16a4.136 4.136 0 0 1 4.133-4.133h5.333V9.334H9.333c-3.68 0-6.667 2.987-6.667 6.667s2.987 6.667 6.667 6.667h5.333v-2.533H9.333A4.136 4.136 0 0 1 5.2 16.002zm5.467 1.333h10.667v-2.667H10.667zm12-8h-5.333v2.533h5.333c2.28 0 4.133 1.853 4.133 4.133s-1.853 4.133-4.133 4.133h-5.333v2.533h5.333c3.68 0 6.667-2.987 6.667-6.667s-2.987-6.667-6.667-6.667z'/%3E%3C/svg%3E\")}.ag-icon-loading:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eloading%3C/title%3E%3Cpath d='m17.778 11.708 3.25-3.251 2.516 2.516-3.251 3.25h4.597v3.556h-4.597l3.251 3.25-2.516 2.516-3.25-3.251v4.597h-3.556v-4.597l-3.25 3.251-2.516-2.516 3.251-3.25H7.11v-3.556h4.597l-3.251-3.25 2.516-2.516 3.25 3.251V7.111h3.556zm-3.251 7.847h2.944l2.084-2.084v-2.944l-2.084-2.084h-2.944l-2.084 2.084v2.944z'/%3E%3C/svg%3E\")}.ag-icon-maximize:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Emaximize%3C/title%3E%3Cpath d='M4 4h24v2.667H4z'/%3E%3C/svg%3E\")}.ag-icon-menu:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Emenu%3C/title%3E%3Cpath d='M4 24h24v-2.667H4zm0-6.667h24v-2.667H4zM4 8v2.667h24V8z'/%3E%3C/svg%3E\")}.ag-icon-menu-alt:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='none' viewBox='0 0 32 32'%3E%3Cpath fill='%23000' d='M16 26.667a2.57 2.57 0 0 1-1.883-.784A2.57 2.57 0 0 1 13.333 24q0-1.1.784-1.883A2.57 2.57 0 0 1 16 21.333q1.1 0 1.883.784.784.783.784 1.883t-.784 1.883a2.57 2.57 0 0 1-1.883.784m0-8a2.57 2.57 0 0 1-1.883-.784A2.57 2.57 0 0 1 13.333 16q0-1.1.784-1.883A2.57 2.57 0 0 1 16 13.333q1.1 0 1.883.784.784.783.784 1.883t-.784 1.883a2.57 2.57 0 0 1-1.883.784m0-8a2.57 2.57 0 0 1-1.883-.784A2.57 2.57 0 0 1 13.333 8q0-1.1.784-1.883A2.57 2.57 0 0 1 16 5.333q1.1 0 1.883.784.784.783.784 1.883t-.784 1.883a2.57 2.57 0 0 1-1.883.784'/%3E%3C/svg%3E\")}.ag-icon-minimize:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eminimize%3C/title%3E%3Cpath d='M8 25.333h16V28H8z'/%3E%3C/svg%3E\")}.ag-icon-minus:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M6.572 6.572a13.32 13.32 0 0 0 0 18.856 13.32 13.32 0 0 0 18.856 0 13.32 13.32 0 0 0 0-18.856 13.32 13.32 0 0 0-18.856 0m17.527 8.099v2.658H7.901v-2.658z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-next:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Enext%3C/title%3E%3Cpath d='m12.94 8-1.88 1.88L17.167 16l-6.107 6.12L12.94 24l8-8z'/%3E%3C/svg%3E\")}.ag-icon-none:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Enone%3C/title%3E%3Cpath d='M4 24h16v-2.667H4zM4 8v2.667h24V8zm0 9.333h24v-2.667H4z'/%3E%3C/svg%3E\")}.ag-icon-not-allowed:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Enot-allowed%3C/title%3E%3Cpath d='M16 2.667C8.64 2.667 2.667 8.64 2.667 16S8.64 29.333 16 29.333 29.333 23.36 29.333 16 23.36 2.667 16 2.667M5.333 16c0-5.893 4.773-10.667 10.667-10.667 2.467 0 4.733.84 6.533 2.253L7.586 22.533A10.54 10.54 0 0 1 5.333 16M16 26.667c-2.467 0-4.733-.84-6.533-2.253L24.414 9.467A10.54 10.54 0 0 1 26.667 16c0 5.893-4.773 10.667-10.667 10.667'/%3E%3C/svg%3E\")}.ag-icon-paste:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Epaste%3C/title%3E%3Cpath d='M25.333 4H19.76C19.2 2.453 17.733 1.333 16 1.333S12.8 2.453 12.24 4H6.667A2.675 2.675 0 0 0 4 6.667V28c0 1.467 1.2 2.667 2.667 2.667h18.667c1.467 0 2.667-1.2 2.667-2.667V6.667C28.001 5.2 26.801 4 25.334 4zM16 4c.733 0 1.333.6 1.333 1.333s-.6 1.333-1.333 1.333-1.333-.6-1.333-1.333S15.267 4 16 4m9.333 24H6.666V6.667h2.667v4h13.333v-4h2.667z'/%3E%3C/svg%3E\")}.ag-icon-pin:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Epin%3C/title%3E%3Cpath d='m11.106 22.093-4.444 4.444-1.259-1.259 4.444-4.444zm5.872-16.63 9.618 9.62-.962.962-.962-.962-7.694 3.847 1.924 1.924-2.74 2.74-7.696-7.696 2.741-2.74 1.924 1.925 3.847-7.696-.962-.962z'/%3E%3C/svg%3E\")}.ag-icon-pivot:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Epivot%3C/title%3E%3Cpath d='M26.667 30.223H5.334a3.556 3.556 0 0 1-3.556-3.556V5.334a3.556 3.556 0 0 1 3.556-3.556h21.333a3.556 3.556 0 0 1 3.556 3.556v21.333a3.556 3.556 0 0 1-3.556 3.556m-16-8.89H5.334v5.333h5.333zm16-7.11H12.444v12.444h14.223zm-9.15 6.85-2.039 2.037 2.039 2.039-1.257 1.257-3.295-3.296 3.295-3.295q.63.628 1.257 1.257zm-6.85-6.85H5.334v5.333h5.333zm15.74 3.816-1.257 1.256-2.039-2.037-2.037 2.037-1.257-1.256 3.295-3.296zM10.667 5.333H5.334v5.333h5.333zm8.889 0h-7.112v5.333h7.112zm7.111 0h-5.333v5.333h5.333z'/%3E%3C/svg%3E\")}.ag-icon-plus:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' xml:space='preserve' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2' viewBox='0 0 32 32'%3E%3Cpath d='M6.572 6.572a13.32 13.32 0 0 0 0 18.856 13.32 13.32 0 0 0 18.856 0 13.32 13.32 0 0 0 0-18.856 13.32 13.32 0 0 0-18.856 0m17.527 8.099v2.658h-6.77v6.77h-2.658v-6.77h-6.77v-2.658h6.77v-6.77h2.658v6.77z' style='fill-rule:nonzero'/%3E%3C/svg%3E\")}.ag-icon-previous:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eprevious%3C/title%3E%3Cpath d='M20.94 9.88 19.06 8l-8 8 8 8 1.88-1.88L14.833 16z'/%3E%3C/svg%3E\")}.ag-icon-right:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eright%3C/title%3E%3Cpath d='m16 5.333-1.88 1.88 7.44 7.453H5.333v2.667H21.56l-7.44 7.453 1.88 1.88 10.667-10.667L16 5.332z'/%3E%3C/svg%3E\")}.ag-icon-save:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Esave%3C/title%3E%3Cpath d='M25.333 16v9.333H6.666V16H3.999v9.333C3.999 26.8 5.199 28 6.666 28h18.667C26.8 28 28 26.8 28 25.333V16zm-8 .893 3.453-3.44 1.88 1.88L15.999 22l-6.667-6.667 1.88-1.88 3.453 3.44V4h2.667v12.893z'/%3E%3C/svg%3E\")}.ag-icon-small-down:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Esmall-down%3C/title%3E%3Cpath d='M9.333 12.667 16 19.334l6.667-6.667H9.334z'/%3E%3C/svg%3E\")}.ag-icon-small-left:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Esmall-left%3C/title%3E%3Cpath d='M19.333 9.333 12.666 16l6.667 6.667V9.334z'/%3E%3C/svg%3E\")}.ag-icon-small-right:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Esmall-right%3C/title%3E%3Cpath d='M12.667 22.667 19.334 16l-6.667-6.667v13.333z'/%3E%3C/svg%3E\")}.ag-icon-small-up:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Esmall-up%3C/title%3E%3Cpath d='M9.333 19.333 16 12.666l6.667 6.667H9.334z'/%3E%3C/svg%3E\")}.ag-icon-tick:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Etick%3C/title%3E%3Cpath d='m11.727 21.167-5.56-5.56-1.893 1.88 7.453 7.453 16-16-1.88-1.88z'/%3E%3C/svg%3E\")}.ag-icon-tree-closed:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Etree-closed%3C/title%3E%3Cpath d='m12.94 8-1.88 1.88L17.167 16l-6.107 6.12L12.94 24l8-8z'/%3E%3C/svg%3E\")}.ag-icon-tree-indeterminate:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Etree-indeterminate%3C/title%3E%3Cpath d='M6.667 14.667h18.667v2.667H6.667z'/%3E%3C/svg%3E\")}.ag-icon-tree-open:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Etree-open%3C/title%3E%3Cpath d='M22.12 11.06 16 17.167 9.88 11.06 8 12.94l8 8 8-8z'/%3E%3C/svg%3E\")}.ag-icon-unlinked:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Eunlinked%3C/title%3E%3Cpath d='M22.667 9.333h-5.333v2.533h5.333a4.136 4.136 0 0 1 4.133 4.133c0 1.907-1.307 3.507-3.08 3.973l1.947 1.947c2.173-1.107 3.667-3.32 3.667-5.92a6.67 6.67 0 0 0-6.667-6.667zm-1.334 5.334h-2.92l2.667 2.667h.253zM2.667 5.693 6.814 9.84A6.65 6.65 0 0 0 2.667 16a6.67 6.67 0 0 0 6.667 6.667h5.333v-2.533H9.334a4.136 4.136 0 0 1-4.133-4.133c0-2.12 1.613-3.867 3.68-4.093l2.76 2.76h-.973v2.667h3.64l3.027 3.027v2.307h2.307l5.347 5.333 1.68-1.68L4.362 4.002 2.669 5.695z'/%3E%3C/svg%3E\")}.ag-icon-up:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Easc%3C/title%3E%3Cpath d='m5.333 16 1.88 1.88 7.453-7.44v16.227h2.667V10.44l7.44 7.453L26.666 16 15.999 5.333z'/%3E%3C/svg%3E\")}.ag-icon-grip:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Ctitle%3Egrip%3C/title%3E%3Cpath d='M26.667 12H5.334v2.667h21.333zM5.333 20h21.333v-2.667H5.333z'/%3E%3C/svg%3E\")}.ag-icon-settings:before{mask-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='none' viewBox='0 0 32 32'%3E%3Cpath fill='%23000' d='M30 8h-4.1c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2v2h14.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30zm-9 4c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3M2 24h4.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30v-2H15.9c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2zm9-4c1.7 0 3 1.3 3 3s-1.3 3-3 3-3-1.3-3-3 1.3-3 3-3'/%3E%3C/svg%3E\")}`;\n", "import { createPart } from '../../../Part';\r\nimport { sharedIconStylesCSS } from '../shared-icon-styles.css-GENERATED';\r\nimport { iconSetMaterialCSS } from './icon-set-material.css-GENERATED';\r\n\r\nexport const iconSetMaterial = /*#__PURE__*/ createPart({\r\n    feature: 'iconSet',\r\n    css: () => sharedIconStylesCSS + iconSetMaterialCSS,\r\n});\r\n", "import { createPart } from '../../../Part';\r\nimport { colorValueToCss, fontFamilyValueToCss, fontWeightValueToCss, imageValueToCss } from '../../../theme-types';\r\nimport type { ColorValue, FontFamilyValue, FontWeightValue, ImageValue } from '../../../theme-types';\r\nimport { sharedIconStylesCSS } from '../shared-icon-styles.css-GENERATED';\r\n\r\ntype IconSetOverridesImage = {\r\n    type: 'image';\r\n    mask?: boolean;\r\n    cssImports?: string[];\r\n    icons: {\r\n        [key: string]: ImageValue;\r\n    };\r\n};\r\n\r\ntype IconSetOverridesFont = {\r\n    type: 'font';\r\n    weight?: FontWeightValue;\r\n    family?: FontFamilyValue;\r\n    color?: ColorValue;\r\n    cssImports?: string[];\r\n    icons: {\r\n        [key: string]: string;\r\n    };\r\n};\r\n\r\ntype IconSetOverridesArgs = IconSetOverridesImage | IconSetOverridesFont;\r\n\r\nexport const iconOverrides = (args: IconSetOverridesArgs) => {\r\n    const cssParts = [sharedIconStylesCSS];\r\n    if (args.type === 'image') {\r\n        const { icons, mask } = args;\r\n        for (const [key, value] of Object.entries(icons)) {\r\n            const imageCssValue = imageValueToCss(value);\r\n            if (mask) {\r\n                cssParts.push(`.ag-icon-${key}::before { mask-image: ${imageCssValue}; }`);\r\n            } else {\r\n                cssParts.push(`.ag-icon-${key}::before { background-image: ${imageCssValue}; ${unsetMaskIcon} }`);\r\n            }\r\n        }\r\n    }\r\n    if (args.type === 'font') {\r\n        const { family, weight, color, icons } = args;\r\n        let properties = unsetMaskIcon;\r\n        if (family) {\r\n            properties += ` font-family: ${fontFamilyValueToCss(family)};`;\r\n        }\r\n        if (weight) {\r\n            properties += ` font-weight: ${fontWeightValueToCss(weight)};`;\r\n        }\r\n        if (color) {\r\n            properties += ` color: ${colorValueToCss(color)};`;\r\n        }\r\n        for (const [key, value] of Object.entries(icons)) {\r\n            cssParts.push(`.ag-icon-${key}::before { content: ${JSON.stringify(value)}; ${properties} }`);\r\n        }\r\n    }\r\n    return createPart({\r\n        css: cssParts.join(';\\n'),\r\n        cssImports: args.cssImports,\r\n    });\r\n};\r\n\r\nconst unsetMaskIcon = `background-color: unset; mask-image: unset; -webkit-mask-image: unset;`;\r\n", "import { sharedIconStylesCSS } from '../shared-icon-styles.css-GENERATED';\r\n\r\nconst iconNameToSvgFragment: Record<string, string | undefined> = {\r\n    aggregation: '<path d=\"M18 7V4H6l6 8-6 8h12v-3\"/>',\r\n    arrows: '<polyline points=\"5 9 2 12 5 15\"/><polyline points=\"9 5 12 2 15 5\"/><polyline points=\"15 19 12 22 9 19\"/><polyline points=\"19 9 22 12 19 15\"/><line x1=\"2\" x2=\"22\" y1=\"12\" y2=\"12\"/><line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"22\"/>',\r\n    asc: '<path d=\"m5 12 7-7 7 7\"/><path d=\"M12 19V5\"/>',\r\n    cancel: '<path d=\"m18 6-12 12\"/><path d=\"m6 6 12 12\"/>',\r\n    chart: '<line x1=\"18\" x2=\"18\" y1=\"20\" y2=\"10\"/><line x1=\"12\" x2=\"12\" y1=\"20\" y2=\"4\"/><line x1=\"6\" x2=\"6\" y1=\"20\" y2=\"14\"/>',\r\n    'color-picker':\r\n        '<path d=\"m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z\"/><path d=\"m5 2 5 5\"/><path d=\"M2 13h15\"/><path d=\"M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z\"/>',\r\n    columns:\r\n        '<path d=\"M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18\"/>',\r\n    contracted: '<path d=\"m9 18 6-6-6-6\"/>',\r\n    copy: '<rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/>',\r\n    cross: '<path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/>',\r\n    csv: '<path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/><polyline points=\"14 2 14 8 20 8\"/><path d=\"M8 13h2\"/><path d=\"M8 17h2\"/><path d=\"M14 13h2\"/><path d=\"M14 17h2\"/>',\r\n    cut: '<circle cx=\"6\" cy=\"6\" r=\"3\"/><path d=\"M8.12 8.12 12 12\"/><path d=\"M20 4 8.12 15.88\"/><circle cx=\"6\" cy=\"18\" r=\"3\"/><path d=\"M14.8 14.8 20 20\"/>',\r\n    desc: '<path d=\"M12 5v14\"/><path d=\"m19 12-7 7-7-7\"/>',\r\n    down: '<path d=\"M12 5v14\"/><path d=\"m19 12-7 7-7-7\"/>',\r\n    excel: '<path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/><polyline points=\"14 2 14 8 20 8\"/><path d=\"M8 13h2\"/><path d=\"M8 17h2\"/><path d=\"M14 13h2\"/><path d=\"M14 17h2\"/>',\r\n    expanded: '<path d=\"m15 18-6-6 6-6\"/>',\r\n    'eye-slash':\r\n        '<path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\"/><path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\"/><path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\"/><line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\"/>',\r\n    eye: '<path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/>',\r\n    filter: '<path d=\"M3 6h18\"/><path d=\"M7 12h10\"/><path d=\"M10 18h4\"/>',\r\n    first: '<path d=\"m17 18-6-6 6-6\"/><path d=\"M7 6v12\"/>',\r\n    group: '<path d=\"M16 12H3\"/><path d=\"M16 18H3\"/><path d=\"M10 6H3\"/><path d=\"M21 18V8a2 2 0 0 0-2-2h-5\"/><path d=\"m16 8-2-2 2-2\"/>',\r\n    last: '<path d=\"m7 18 6-6-6-6\"/><path d=\"M17 6v12\"/>',\r\n    left: '<path d=\"m12 19-7-7 7-7\"/><path d=\"M19 12H5\"/>',\r\n    linked: '<path d=\"M9 17H7A5 5 0 0 1 7 7h2\"/><path d=\"M15 7h2a5 5 0 1 1 0 10h-2\"/><line x1=\"8\" x2=\"16\" y1=\"12\" y2=\"12\"/>',\r\n    loading:\r\n        '<line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"6\"/><line x1=\"12\" x2=\"12\" y1=\"18\" y2=\"22\"/><line x1=\"4.93\" x2=\"7.76\" y1=\"4.93\" y2=\"7.76\"/><line x1=\"16.24\" x2=\"19.07\" y1=\"16.24\" y2=\"19.07\"/><line x1=\"2\" x2=\"6\" y1=\"12\" y2=\"12\"/><line x1=\"18\" x2=\"22\" y1=\"12\" y2=\"12\"/><line x1=\"4.93\" x2=\"7.76\" y1=\"19.07\" y2=\"16.24\"/><line x1=\"16.24\" x2=\"19.07\" y1=\"7.76\" y2=\"4.93\"/>',\r\n    maximize:\r\n        '<polyline points=\"15 3 21 3 21 9\"/><polyline points=\"9 21 3 21 3 15\"/><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"/><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"/>',\r\n    menu: '<line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"/><line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"/><line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"/>',\r\n    'menu-alt':\r\n        '<circle cx=\"12\" cy=\"5\" r=\"0.75\" fill=\"#D9D9D9\"/><circle cx=\"12\" cy=\"12\" r=\"0.75\" fill=\"#D9D9D9\"/><circle cx=\"12\" cy=\"19\" r=\"0.75\" fill=\"#D9D9D9\"/>',\r\n    minimize:\r\n        '<polyline points=\"4 14 10 14 10 20\"/><polyline points=\"20 10 14 10 14 4\"/><line x1=\"14\" x2=\"21\" y1=\"10\" y2=\"3\"/><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"/>',\r\n    minus: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M8 12h8\"/>',\r\n    next: '<path d=\"m9 18 6-6-6-6\"/>',\r\n    none: '<path d=\"m7 15 5 5 5-5\"/><path d=\"m7 9 5-5 5 5\"/>',\r\n    'not-allowed': '<circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"m4.9 4.9 14.2 14.2\"/>',\r\n    paste: '<path d=\"M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z\"/><path d=\"M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10\"/><path d=\"m17 10 4 4-4 4\"/>',\r\n    pin: '<line x1=\"12\" x2=\"12\" y1=\"17\" y2=\"22\"/><path d=\"M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z\"/>',\r\n    pivot: '<path d=\"M15 3v18\"/><rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\"/><path d=\"M21 9H3\"/><path d=\"M21 15H3\"/>',\r\n    plus: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M8 12h8\"/><path d=\"M12 8v8\"/>',\r\n    previous: '<path d=\"m15 18-6-6 6-6\"/>',\r\n    right: '<path d=\"M5 12h14\"/><path d=\"m12 5 7 7-7 7\"/>',\r\n    save: '<path d=\"M12 17V3\"/><path d=\"m6 11 6 6 6-6\"/><path d=\"M19 21H5\"/>',\r\n    'small-left': '<path d=\"m15 18-6-6 6-6\"/>',\r\n    'small-right': '<path d=\"m9 18 6-6-6-6\"/>',\r\n    tick: '<path d=\"M20 6 9 17l-5-5\"/>',\r\n    'tree-closed': '<path d=\"m9 18 6-6-6-6\"/>',\r\n    'tree-indeterminate': '<path d=\"M5 12h14\"/>',\r\n    'tree-open': '<path d=\"m6 9 6 6 6-6\"/>',\r\n    unlinked:\r\n        '<path d=\"M9 17H7A5 5 0 0 1 7 7\"/><path d=\"M15 7h2a5 5 0 0 1 4 8\"/><line x1=\"8\" x2=\"12\" y1=\"12\" y2=\"12\"/><line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\"/>',\r\n    up: '<path d=\"m5 12 7-7 7 7\"/><path d=\"M12 19V5\"/>',\r\n    grip:\r\n        '<circle cx=\"5\" cy=\"8\" r=\"0.5\"/><circle cx=\"12\" cy=\"8\" r=\"0.5\"/><circle cx=\"19\" cy=\"8\" r=\"0.5\"/><circle cx=\"5\" cy=\"16\" r=\"0.5\"/><circle cx=\"12\" cy=\"16\" r=\"0.5\"/><circle cx=\"19\" cy=\"16\" r=\"0.5\"/>' +\r\n        '<g stroke=\"none\" fill=\"currentColor\"><circle cx=\"5\" cy=\"8\" r=\"1\"/><circle cx=\"12\" cy=\"8\" r=\"1\"/><circle cx=\"19\" cy=\"8\" r=\"1\"/><circle cx=\"5\" cy=\"16\" r=\"1\"/><circle cx=\"12\" cy=\"16\" r=\"1\"/><circle cx=\"19\" cy=\"16\" r=\"1\"/></g>',\r\n    settings: '<path d=\"M20 7h-9\"/><path d=\"M14 17H5\"/><circle cx=\"17\" cy=\"17\" r=\"3\"/><circle cx=\"7\" cy=\"7\" r=\"3\"/>',\r\n};\r\n\r\nconst iconNameToFullSvg: Record<string, string | undefined> = {\r\n    'small-down':\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ag-icon\" fill=\"black\" stroke=\"none\" viewBox=\"0 0 32 32\"><path d=\"M7.334 10.667 16 21.334l8.667-10.667H7.334Z\"/></svg>',\r\n    'small-up':\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ag-icon\" fill=\"black\" stroke=\"none\" viewBox=\"0 0 32 32\"><path d=\"M7.334 21.333 16 10.666l8.667 10.667H7.334Z\"/></svg>',\r\n};\r\n\r\nexport const getQuartzIconsCss = (args: { strokeWidth?: number } = {}) => {\r\n    let result = sharedIconStylesCSS;\r\n    for (const iconName of [...Object.keys(iconNameToSvgFragment), ...Object.keys(iconNameToFullSvg)]) {\r\n        const iconSvg = quartzIconSvg(iconName, args.strokeWidth);\r\n        result += `.ag-icon-${iconName}::before { mask-image: url('data:image/svg+xml,${encodeURIComponent(iconSvg)}'); }\\n`;\r\n    }\r\n    return result;\r\n};\r\n\r\nconst quartzIconSvg = (name: string, strokeWidth = 1.5): string => {\r\n    const fullSVG = iconNameToFullSvg[name];\r\n    if (fullSVG) return fullSVG;\r\n    const svgFragment = iconNameToSvgFragment[name];\r\n    if (!svgFragment) throw new Error(`Missing icon data for ${name}`);\r\n    return (\r\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ag-icon\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"black\" stroke-width=\"${strokeWidth}\" viewBox=\"0 0 24 24\">` +\r\n        '<style>* { vector-effect: non-scaling-stroke; }</style>' +\r\n        svgFragment +\r\n        '</svg>'\r\n    );\r\n};\r\n", "import type { Part } from '../../../Part';\r\nimport { createPart } from '../../../Part';\r\nimport { getQuartzIconsCss } from './quartz-icon-data';\r\n\r\nexport const iconSetQuartz = (args: { strokeWidth?: number } = {}): Part<unknown> => {\r\n    return createPart({\r\n        feature: 'iconSet',\r\n        css: () => getQuartzIconsCss(args),\r\n    });\r\n};\r\n\r\nexport const iconSetQuartzLight = /*#__PURE__*/ iconSetQuartz({ strokeWidth: 1 });\r\n\r\nexport const iconSetQuartzRegular = /*#__PURE__*/ iconSetQuartz();\r\n\r\nexport const iconSetQuartzBold = /*#__PURE__*/ iconSetQuartz({ strokeWidth: 2 });\r\n", "export const inputStyleBaseCSS = /*css*/ `:where(.ag-input-field-input[type=number]:not(.ag-number-field-input-stepper)){-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield;&::-webkit-inner-spin-button,&::-webkit-outer-spin-button{-webkit-appearance:none;appearance:none;margin:0}}:where(input.ag-input-field-input:not([type]),input.ag-input-field-input[type=text],input.ag-input-field-input[type=number],input.ag-input-field-input[type=tel],input.ag-input-field-input[type=date],input.ag-input-field-input[type=datetime-local],textarea.ag-input-field-input){background-color:var(--ag-input-background-color);border:var(--ag-input-border);border-radius:var(--ag-input-border-radius);color:var(--ag-input-text-color);font-family:inherit;font-size:inherit;line-height:inherit;margin:0;min-height:var(--ag-input-height);padding:0;&:where(:disabled){background-color:var(--ag-input-disabled-background-color);border:var(--ag-input-disabled-border);color:var(--ag-input-disabled-text-color)}&:where(:focus){background-color:var(--ag-input-focus-background-color);border:var(--ag-input-focus-border);box-shadow:var(--ag-input-focus-shadow);color:var(--ag-input-focus-text-color);outline:none}&:where(:invalid){background-color:var(--ag-input-invalid-background-color);border:var(--ag-input-invalid-border);color:var(--ag-input-invalid-text-color)}&:where(.invalid){background-color:var(--ag-input-invalid-background-color);border:var(--ag-input-invalid-border);color:var(--ag-input-invalid-text-color)}&::-moz-placeholder{color:var(--ag-input-placeholder-text-color)}&::placeholder{color:var(--ag-input-placeholder-text-color)}}:where(.ag-ltr) :where(input.ag-input-field-input:not([type]),input.ag-input-field-input[type=text],input.ag-input-field-input[type=number],input.ag-input-field-input[type=tel],input.ag-input-field-input[type=date],input.ag-input-field-input[type=datetime-local],textarea.ag-input-field-input){padding-left:var(--ag-input-padding-start)}:where(.ag-rtl) :where(input.ag-input-field-input:not([type]),input.ag-input-field-input[type=text],input.ag-input-field-input[type=number],input.ag-input-field-input[type=tel],input.ag-input-field-input[type=date],input.ag-input-field-input[type=datetime-local],textarea.ag-input-field-input){padding-right:var(--ag-input-padding-start)}:where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter){.ag-input-wrapper:before{background-color:currentcolor;color:var(--ag-input-icon-color);content:\"\";display:block;height:12px;-webkit-mask-image:url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSIxMiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMS41Ij48cGF0aCBkPSJNNS4zIDlhMy43IDMuNyAwIDEgMCAwLTcuNSAzLjcgMy43IDAgMCAwIDAgNy41Wk0xMC41IDEwLjUgOC4zIDguMiIvPjwvc3ZnPg==\");mask-image:url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSIxMiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMS41Ij48cGF0aCBkPSJNNS4zIDlhMy43IDMuNyAwIDEgMCAwLTcuNSAzLjcgMy43IDAgMCAwIDAgNy41Wk0xMC41IDEwLjUgOC4zIDguMiIvPjwvc3ZnPg==\");-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;opacity:.5;position:absolute;width:12px}}:where(.ag-ltr) :where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter){.ag-input-wrapper:before{margin-left:var(--ag-spacing)}.ag-number-field-input,.ag-text-field-input{padding-left:calc(var(--ag-spacing)*1.5 + 12px)}}:where(.ag-rtl) :where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter){.ag-input-wrapper:before{margin-right:var(--ag-spacing)}.ag-number-field-input,.ag-text-field-input{padding-right:calc(var(--ag-spacing)*1.5 + 12px)}}`;\n", "export const inputStyleBorderedCSS = /*css*/ `:where(input.ag-input-field-input:not([type]),input.ag-input-field-input[type=text],input.ag-input-field-input[type=number],input.ag-input-field-input[type=tel],input.ag-input-field-input[type=date],input.ag-input-field-input[type=datetime-local],textarea.ag-input-field-input){&:focus{box-shadow:var(--ag-focus-shadow)}}`;\n", "export const inputStyleUnderlinedCSS = /*css*/ `:where(input.ag-input-field-input:not([type]),input.ag-input-field-input[type=text],input.ag-input-field-input[type=number],input.ag-input-field-input[type=tel],input.ag-input-field-input[type=date],input.ag-input-field-input[type=datetime-local],textarea.ag-input-field-input){border-left:none;border-right:none;border-top:none}`;\n", "import { createPart } from '../../Part';\r\nimport type { WithParamTypes } from '../../theme-types';\r\nimport { accentColor, foregroundBackgroundMix, foregroundMix } from '../../theme-utils';\r\nimport { inputStyleBaseCSS } from './input-style-base.css-GENERATED';\r\nimport { inputStyleBorderedCSS } from './input-style-bordered.css-GENERATED';\r\nimport { inputStyleUnderlinedCSS } from './input-style-underlined.css-GENERATED';\r\n\r\nexport type InputStyleParams = {\r\n    /**\r\n     * Background color for text inputs\r\n     */\r\n    inputBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border around text inputs (or underneath, if using the underlined input style)\r\n     */\r\n    inputBorder: 'infer';\r\n\r\n    /**\r\n     * Corner radius of text inputs\r\n     */\r\n    inputBorderRadius: 'infer';\r\n\r\n    /**\r\n     * Background color for disabled text inputs\r\n     */\r\n    inputDisabledBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border around disabled text inputs (or underneath, if using the underlined input style)\r\n     */\r\n    inputDisabledBorder: 'infer';\r\n\r\n    /**\r\n     * Color of text within disabled text inputs\r\n     */\r\n    inputDisabledTextColor: 'infer';\r\n\r\n    /**\r\n     * Background color for focussed text inputs\r\n     */\r\n    inputFocusBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border around focussed text inputs (or underneath, if using the underlined input style)\r\n     */\r\n    inputFocusBorder: 'infer';\r\n\r\n    /**\r\n     * Shadow around focussed text inputs\r\n     */\r\n    inputFocusShadow: 'infer';\r\n\r\n    /**\r\n     * Color of text within focussed text inputs\r\n     */\r\n    inputFocusTextColor: 'infer';\r\n\r\n    /**\r\n     * Minimum height of text inputs\r\n     */\r\n    inputHeight: 'infer';\r\n\r\n    /**\r\n     * Background color for text inputs in an invalid state\r\n     */\r\n    inputInvalidBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border around text inputs in an invalid state (or underneath, if using the underlined input style)\r\n     */\r\n    inputInvalidBorder: 'infer';\r\n\r\n    /**\r\n     * Color of text within text inputs in an invalid state\r\n     */\r\n    inputInvalidTextColor: 'infer';\r\n\r\n    /**\r\n     * Padding at the start of text in text inputs\r\n     */\r\n    inputPaddingStart: 'infer';\r\n\r\n    /**\r\n     * Color of text within text inputs\r\n     */\r\n    inputTextColor: 'infer';\r\n\r\n    /**\r\n     * Color of placeholder text in empty inputs describing the purpose of the input e.g. \"Search...\"\r\n     */\r\n    inputPlaceholderTextColor: 'infer';\r\n\r\n    /**\r\n     * Color of search icon within search text inputs\r\n     */\r\n    inputIconColor: 'infer';\r\n};\r\n\r\nconst baseParams: WithParamTypes<InputStyleParams> = {\r\n    inputBackgroundColor: 'transparent',\r\n    inputBorder: false,\r\n    inputBorderRadius: 0,\r\n    inputTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    inputPlaceholderTextColor: {\r\n        ref: 'inputTextColor',\r\n        mix: 0.5,\r\n    },\r\n    inputPaddingStart: 0,\r\n    inputHeight: {\r\n        calc: 'max(iconSize, fontSize) + spacing * 2',\r\n    },\r\n    inputFocusBackgroundColor: {\r\n        ref: 'inputBackgroundColor',\r\n    },\r\n    inputFocusBorder: {\r\n        ref: 'inputBorder',\r\n    },\r\n    inputFocusShadow: 'none',\r\n    inputFocusTextColor: {\r\n        ref: 'inputTextColor',\r\n    },\r\n    inputDisabledBackgroundColor: {\r\n        ref: 'inputBackgroundColor',\r\n    },\r\n    inputDisabledBorder: {\r\n        ref: 'inputBorder',\r\n    },\r\n    inputDisabledTextColor: {\r\n        ref: 'inputTextColor',\r\n    },\r\n    inputInvalidBackgroundColor: {\r\n        ref: 'inputBackgroundColor',\r\n    },\r\n    inputInvalidBorder: {\r\n        ref: 'inputBorder',\r\n    },\r\n    inputInvalidTextColor: {\r\n        ref: 'inputTextColor',\r\n    },\r\n    inputIconColor: {\r\n        ref: 'inputTextColor',\r\n    },\r\n};\r\n\r\nexport const inputStyleBase = createPart<InputStyleParams>({\r\n    feature: 'inputStyle',\r\n    params: baseParams,\r\n    css: inputStyleBaseCSS,\r\n});\r\n\r\nexport const inputStyleBordered = /*#__PURE__*/ createPart({\r\n    feature: 'inputStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        inputBackgroundColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n        inputBorder: true,\r\n        inputBorderRadius: {\r\n            ref: 'borderRadius',\r\n        },\r\n        inputPaddingStart: {\r\n            ref: 'spacing',\r\n        },\r\n        inputFocusBorder: {\r\n            color: accentColor,\r\n        },\r\n        inputFocusShadow: {\r\n            ref: 'focusShadow',\r\n        },\r\n        inputDisabledBackgroundColor: foregroundBackgroundMix(0.06),\r\n        inputDisabledTextColor: {\r\n            ref: 'textColor',\r\n            mix: 0.5,\r\n        },\r\n        inputInvalidBorder: {\r\n            color: { ref: 'invalidColor' },\r\n        },\r\n    },\r\n    css: () => inputStyleBaseCSS + inputStyleBorderedCSS,\r\n});\r\n\r\nexport const inputStyleUnderlined = /*#__PURE__*/ createPart({\r\n    feature: 'inputStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        inputBorder: {\r\n            width: 2,\r\n            color: foregroundMix(0.3),\r\n        },\r\n        inputPaddingStart: {\r\n            ref: 'spacing',\r\n        },\r\n        inputFocusBorder: 'solid 2px var(--ag-accent-color)',\r\n        inputDisabledTextColor: {\r\n            ref: 'textColor',\r\n            mix: 0.5,\r\n        },\r\n        inputDisabledBorder: 'solid 1px var(--ag-border-color)',\r\n        inputInvalidBorder: {\r\n            width: 2,\r\n            color: {\r\n                ref: 'invalidColor',\r\n                mix: 0.3,\r\n            },\r\n        },\r\n    },\r\n    css: () => inputStyleBaseCSS + inputStyleUnderlinedCSS,\r\n});\r\n", "export const tabStyleBaseCSS = /*css*/ `.ag-tabs-header{background-color:var(--ag-tab-bar-background-color);border-bottom:var(--ag-tab-bar-border);display:flex;flex:1;gap:var(--ag-tab-spacing);padding:var(--ag-tab-bar-top-padding) var(--ag-tab-bar-horizontal-padding) 0}.ag-tabs-header-wrapper{display:flex}.ag-tabs-close-button-wrapper{align-items:center;border:0;display:flex;padding:var(--ag-spacing)}:where(.ag-ltr) .ag-tabs-close-button-wrapper{border-right:1px solid var(--ag-border-color)}:where(.ag-rtl) .ag-tabs-close-button-wrapper{border-left:1px solid var(--ag-border-color)}.ag-tabs-close-button{background-color:unset;border:0;cursor:pointer;padding:0}.ag-tab{align-items:center;background-color:var(--ag-tab-background-color);border-left:var(--ag-tab-selected-border-width) solid transparent;border-right:var(--ag-tab-selected-border-width) solid transparent;color:var(--ag-tab-text-color);cursor:pointer;display:flex;flex:1;justify-content:center;padding:var(--ag-tab-top-padding) var(--ag-tab-horizontal-padding) var(--ag-tab-bottom-padding);position:relative;&:hover{background-color:var(--ag-tab-hover-background-color);color:var(--ag-tab-hover-text-color)}&.ag-tab-selected{background-color:var(--ag-tab-selected-background-color);color:var(--ag-tab-selected-text-color)}&:after{background-color:var(--ag-tab-selected-underline-color);bottom:0;content:\"\";display:block;height:var(--ag-tab-selected-underline-width);left:0;opacity:0;position:absolute;right:0;transition:opacity var(--ag-tab-selected-underline-transition-duration)}&.ag-tab-selected:after{opacity:1}}:where(.ag-ltr) .ag-tab{&.ag-tab-selected{&:where(:not(:first-of-type)){border-left-color:var(--ag-tab-selected-border-color)}&:where(:not(:last-of-type)){border-right-color:var(--ag-tab-selected-border-color)}}}:where(.ag-rtl) .ag-tab{&.ag-tab-selected{&:where(:not(:first-of-type)){border-right-color:var(--ag-tab-selected-border-color)}&:where(:not(:last-of-type)){border-left-color:var(--ag-tab-selected-border-color)}}}`;\n", "export const tabStyleRolodexCSS = /*css*/ `.ag-tab{border-left:var(--ag-tab-selected-border-width) solid transparent;border-right:var(--ag-tab-selected-border-width) solid transparent;border-top:var(--ag-tab-selected-border-width) solid transparent;flex:0;&.ag-tab-selected{border-left-color:var(--ag-tab-selected-border-color);border-right-color:var(--ag-tab-selected-border-color);border-top-color:var(--ag-tab-selected-border-color);margin-bottom:-1px;padding-bottom:calc(var(--ag-tab-bottom-padding) + 1px)}}`;\n", "import { createPart } from '../../Part';\r\nimport type { WithParamTypes } from '../../theme-types';\r\nimport { accentColor, foregroundMix } from '../../theme-utils';\r\nimport { tabStyleBaseCSS } from './tab-style-base.css-GENERATED';\r\nimport { tabStyleRolodexCSS } from './tab-style-rolodex.css-GENERATED';\r\n\r\nexport type TabStyleParams = {\r\n    /**\r\n     * Background color of tabs\r\n     */\r\n    tabBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Background color of the container for tabs\r\n     */\r\n    tabBarBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Border below the container for tabs\r\n     */\r\n    tabBarBorder: 'infer';\r\n\r\n    /**\r\n     * Padding at the left and right of the container for tabs\r\n     */\r\n    tabBarHorizontalPadding: 'infer';\r\n\r\n    /**\r\n     * Padding at the top of the container for tabs\r\n     */\r\n    tabBarTopPadding: 'infer';\r\n\r\n    /**\r\n     * Padding at the bottom of the container for tabs\r\n     */\r\n    tabBottomPadding: 'infer';\r\n\r\n    /**\r\n     * Padding inside the top and bottom sides of the container for tabs\r\n     */\r\n    tabHorizontalPadding: 'infer';\r\n\r\n    /**\r\n     * Background color of tabs when hovered over\r\n     */\r\n    tabHoverBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Color of text within tabs when hovered over\r\n     */\r\n    tabHoverTextColor: 'infer';\r\n\r\n    /**\r\n     * Background color of selected tabs\r\n     */\r\n    tabSelectedBackgroundColor: 'infer';\r\n\r\n    /**\r\n     * Color of the border around selected tabs\r\n     */\r\n    tabSelectedBorderColor: 'infer';\r\n\r\n    /**\r\n     * Width of the border around selected tabs\r\n     */\r\n    tabSelectedBorderWidth: 'infer';\r\n\r\n    /**\r\n     * Color of text within the selected tabs\r\n     */\r\n    tabSelectedTextColor: 'infer';\r\n\r\n    /**\r\n     * Color of line drawn under selected tabs\r\n     */\r\n    tabSelectedUnderlineColor: 'infer';\r\n\r\n    /**\r\n     * Duration in seconds of the fade in/out transition for the line drawn under selected tabs\r\n     */\r\n    tabSelectedUnderlineTransitionDuration: 'infer';\r\n\r\n    /**\r\n     * Width of line drawn under selected tabs\r\n     */\r\n    tabSelectedUnderlineWidth: 'infer';\r\n\r\n    /**\r\n     * Spacing between tabs\r\n     */\r\n    tabSpacing: 'infer';\r\n\r\n    /**\r\n     * Color of text within tabs\r\n     */\r\n    tabTextColor: 'infer';\r\n\r\n    /**\r\n     * Padding at the top of the container for tabs\r\n     */\r\n    tabTopPadding: 'infer';\r\n};\r\n\r\nconst baseParams: WithParamTypes<TabStyleParams> = {\r\n    tabBarBackgroundColor: 'transparent',\r\n    tabBarHorizontalPadding: 0,\r\n    tabBarTopPadding: 0,\r\n\r\n    tabBackgroundColor: 'transparent',\r\n    tabTextColor: {\r\n        ref: 'textColor',\r\n    },\r\n    tabHorizontalPadding: {\r\n        ref: 'spacing',\r\n    },\r\n    tabTopPadding: {\r\n        ref: 'spacing',\r\n    },\r\n    tabBottomPadding: {\r\n        ref: 'spacing',\r\n    },\r\n    tabSpacing: '0',\r\n\r\n    tabHoverBackgroundColor: {\r\n        ref: 'tabBackgroundColor',\r\n    },\r\n    tabHoverTextColor: {\r\n        ref: 'tabTextColor',\r\n    },\r\n\r\n    tabSelectedBackgroundColor: {\r\n        ref: 'tabBackgroundColor',\r\n    },\r\n    tabSelectedTextColor: {\r\n        ref: 'tabTextColor',\r\n    },\r\n    tabSelectedBorderWidth: 1,\r\n    tabSelectedBorderColor: 'transparent',\r\n    tabSelectedUnderlineColor: 'transparent',\r\n    tabSelectedUnderlineWidth: 0,\r\n    tabSelectedUnderlineTransitionDuration: 0,\r\n    tabBarBorder: false,\r\n};\r\n\r\n/**\r\n * This base tab style adds no visual styling, it provides a base upon which a\r\n * tab style can be built by setting the tab-related params\r\n */\r\nexport const tabStyleBase = createPart<TabStyleParams>({\r\n    feature: 'tabStyle',\r\n    params: baseParams,\r\n    css: tabStyleBaseCSS,\r\n});\r\n\r\n/**\r\n * Tabs styled for the Quartz theme\r\n */\r\nexport const tabStyleQuartz = /*#__PURE__*/ createPart({\r\n    feature: 'tabStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        tabBarBorder: true,\r\n        tabBarBackgroundColor: foregroundMix(0.05),\r\n        tabTextColor: {\r\n            ref: 'textColor',\r\n            mix: 0.7,\r\n        },\r\n        tabSelectedTextColor: {\r\n            ref: 'textColor',\r\n        },\r\n        tabHoverTextColor: {\r\n            ref: 'textColor',\r\n        },\r\n        tabSelectedBorderColor: {\r\n            ref: 'borderColor',\r\n        },\r\n        tabSelectedBackgroundColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n    },\r\n    css: tabStyleBaseCSS,\r\n});\r\n\r\n/**\r\n * Tabs styled for the Material theme\r\n */\r\nexport const tabStyleMaterial = /*#__PURE__*/ createPart({\r\n    feature: 'tabStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        tabBarBackgroundColor: {\r\n            ref: 'chromeBackgroundColor',\r\n        },\r\n        tabSelectedUnderlineColor: {\r\n            ref: 'primaryColor',\r\n        },\r\n        tabSelectedUnderlineWidth: 2,\r\n        tabSelectedUnderlineTransitionDuration: 0,\r\n    },\r\n    css: tabStyleBaseCSS,\r\n});\r\n\r\n/**\r\n * Tabs styled for the Alpine theme\r\n */\r\nexport const tabStyleAlpine = /*#__PURE__*/ createPart({\r\n    feature: 'tabStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        tabBarBorder: true,\r\n        tabBarBackgroundColor: {\r\n            ref: 'chromeBackgroundColor',\r\n        },\r\n        tabHoverTextColor: accentColor,\r\n        tabSelectedTextColor: accentColor,\r\n        tabSelectedUnderlineColor: accentColor,\r\n        tabSelectedUnderlineWidth: 2,\r\n        tabSelectedUnderlineTransitionDuration: '0.3s',\r\n    },\r\n    css: tabStyleBaseCSS,\r\n});\r\n\r\n/**\r\n * Tabs where the selected tab appears raised and attached the the active\r\n * content, like a rolodex or operating system tabs.\r\n */\r\nexport const tabStyleRolodex = /*#__PURE__*/ createPart({\r\n    feature: 'tabStyle',\r\n    params: {\r\n        ...baseParams,\r\n\r\n        tabBarBackgroundColor: {\r\n            ref: 'chromeBackgroundColor',\r\n        },\r\n        tabBarHorizontalPadding: {\r\n            ref: 'spacing',\r\n        },\r\n        tabBarTopPadding: {\r\n            ref: 'spacing',\r\n        },\r\n        tabBarBorder: true,\r\n        tabHorizontalPadding: { calc: 'spacing * 2' },\r\n        tabTopPadding: {\r\n            ref: 'spacing',\r\n        },\r\n        tabBottomPadding: {\r\n            ref: 'spacing',\r\n        },\r\n        tabSpacing: {\r\n            ref: 'spacing',\r\n        },\r\n        tabSelectedBorderColor: {\r\n            ref: 'borderColor',\r\n        },\r\n        tabSelectedBackgroundColor: {\r\n            ref: 'backgroundColor',\r\n        },\r\n    },\r\n    css: () => tabStyleBaseCSS + tabStyleRolodexCSS,\r\n});\r\n", "import { createTheme } from '../../Theme';\r\nimport { accentColor, accentMix, foregroundMix } from '../../theme-utils';\r\nimport { checkboxStyleDefault } from '../checkbox-style/checkbox-styles';\r\nimport { colorSchemeVariable } from '../color-scheme/color-schemes';\r\nimport { iconSetAlpine, iconSetQuartzRegular } from '../icon-set/icon-sets';\r\nimport { inputStyleBordered } from '../input-style/input-styles';\r\nimport { tabStyleAlpine, tabStyleQuartz, tabStyleRolodex } from '../tab-style/tab-styles';\r\n\r\nexport const themeQuartz =\r\n    /*#__PURE__*/\r\n    createTheme()\r\n        .withPart(checkboxStyleDefault)\r\n        .withPart(colorSchemeVariable)\r\n        .withPart(iconSetQuartzRegular)\r\n        .withPart(tabStyleQuartz)\r\n        .withPart(() => inputStyleBordered)\r\n        .withParams({\r\n            fontFamily: [\r\n                { googleFont: 'IBM Plex Sans' },\r\n                '-apple-system',\r\n                'BlinkMacSystemFont',\r\n                'Segoe UI',\r\n                'Roboto',\r\n                'Oxygen-Sans',\r\n                'Ubuntu',\r\n            ],\r\n        });\r\n\r\nexport const themeAlpine =\r\n    /*#__PURE__*/\r\n    createTheme()\r\n        .withPart(checkboxStyleDefault)\r\n        .withPart(colorSchemeVariable)\r\n        .withPart(iconSetAlpine)\r\n        .withPart(tabStyleAlpine)\r\n        .withPart(inputStyleBordered)\r\n        .withParams({\r\n            accentColor: '#2196f3',\r\n            selectedRowBackgroundColor: accentMix(0.3),\r\n            inputFocusBorder: {\r\n                color: accentMix(0.4),\r\n            },\r\n            fontSize: 13,\r\n            dataFontSize: 14,\r\n            headerFontWeight: 700,\r\n            borderRadius: 3,\r\n            wrapperBorderRadius: 3,\r\n            tabSelectedUnderlineColor: accentColor,\r\n            tabSelectedBorderWidth: 2,\r\n            tabSelectedUnderlineTransitionDuration: 0.3,\r\n        });\r\n\r\nexport const themeBalham =\r\n    /*#__PURE__*/\r\n    createTheme()\r\n        .withPart(checkboxStyleDefault)\r\n        .withPart(colorSchemeVariable)\r\n        .withPart(iconSetAlpine)\r\n        .withPart(tabStyleRolodex)\r\n        .withPart(inputStyleBordered)\r\n        .withParams({\r\n            spacing: 4,\r\n            borderRadius: 2,\r\n            wrapperBorderRadius: 2,\r\n            headerColumnResizeHandleColor: 'transparent',\r\n            headerColumnBorder: true,\r\n            headerColumnBorderHeight: '50%',\r\n            oddRowBackgroundColor: {\r\n                ref: 'chromeBackgroundColor',\r\n                mix: 0.5,\r\n            },\r\n            headerTextColor: foregroundMix(0.5),\r\n            fontSize: 12,\r\n            headerFontWeight: 'bold',\r\n        });\r\n\r\n// export const themeMaterial =\r\n//     /*#__PURE__*/\r\n//     createThemeWithDefaultWidgets('material')\r\n//         .withPart(iconSetMaterial)\r\n//         .withPart(tabStyleMaterial)\r\n//         .withPart(inputStyleUnderlined)\r\n//         .withParams({\r\n//             spacing: 9,\r\n//             iconSize: 18,\r\n//             borderRadius: 0,\r\n//             wrapperBorderRadius: 0,\r\n//             wrapperBorder: false,\r\n//             sidePanelBorder: false,\r\n//             sideButtonSelectedBorder: false,\r\n//             headerColumnResizeHandleColor: 'none',\r\n//             headerBackgroundColor: {\r\n//                 ref: 'backgroundColor',\r\n//             },\r\n//             rangeSelectionBackgroundColor: {\r\n//                 ref: 'primaryColor',\r\n//                 mix: 0.2,\r\n//             },\r\n//             rangeSelectionBorderColor: {\r\n//                 ref: 'primaryColor',\r\n//             },\r\n//             fontFamily: [\r\n//                 { googleFont: 'Roboto' },\r\n//                 '-apple-system',\r\n//                 'BlinkMacSystemFont',\r\n//                 'Segoe UI',\r\n//                 'Oxygen-Sans',\r\n//                 'Ubuntu',\r\n//                 'Cantarell',\r\n//                 'Helvetica Neue',\r\n//                 'sans-serif',\r\n//             ],\r\n//             inputFocusBorder: {\r\n//                 style: 'solid',\r\n//                 width: 2,\r\n//                 color: { ref: 'primaryColor' },\r\n//             },\r\n//             headerFontWeight: 600,\r\n//         })\r\n//         .withCSS(\r\n//             `\r\n//             .ag-filter-toolpanel-group-level-0-header, .ag-column-drop-horizontal {\r\n//                 background-color: color-mix(in srgb, transparent, var(--ag-foreground-color) 7%);\r\n//             }\r\n//         `\r\n//         );\r\n", "import type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { BeanCollection } from './context/context';\r\nimport { ThemeImpl } from './theming/Theme';\r\nimport {\r\n    IS_SSR,\r\n    _injectCoreAndModuleCSS,\r\n    _injectGlobalCSS,\r\n    _registerGridUsingThemingAPI,\r\n    _unregisterGridUsingThemingAPI,\r\n} from './theming/inject';\r\nimport { themeQuartz } from './theming/parts/theme/themes';\r\nimport { _observeResize } from './utils/dom';\r\nimport { _error, _warn } from './validation/logging';\r\n\r\nconst ROW_HEIGHT: Variable = {\r\n    cssName: '--ag-row-height',\r\n    changeKey: 'rowHeightChanged',\r\n    defaultValue: 42,\r\n};\r\nconst HEADER_HEIGHT: Variable = {\r\n    cssName: '--ag-header-height',\r\n    changeKey: 'headerHeightChanged',\r\n    defaultValue: 48,\r\n};\r\nconst LIST_ITEM_HEIGHT: Variable = {\r\n    cssName: '--ag-list-item-height',\r\n    changeKey: 'listItemHeightChanged',\r\n    defaultValue: 24,\r\n};\r\nconst ROW_BORDER_WIDTH: Variable = {\r\n    cssName: '--ag-row-border',\r\n    changeKey: 'rowBorderWidthChanged',\r\n    defaultValue: 1,\r\n    border: true,\r\n};\r\n\r\nlet paramsId = 0;\r\n\r\nexport class Environment extends BeanStub implements NamedBean {\r\n    beanName = 'environment' as const;\r\n\r\n    private eGridDiv: HTMLElement;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.eGridDiv = beans.eGridDiv;\r\n    }\r\n\r\n    private sizeEls = new Map<Variable, HTMLElement>();\r\n    private lastKnownValues = new Map<Variable, number>();\r\n    private eMeasurementContainer: HTMLElement | undefined;\r\n    public sizesMeasured = false;\r\n\r\n    private paramsClass = `ag-theme-params-${++paramsId}`;\r\n    private gridTheme: ThemeImpl | undefined;\r\n    private eParamsStyle: HTMLStyleElement | undefined;\r\n    private globalCSS: [string, string][] = [];\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedPropertyListener('theme', () => this.handleThemeGridOptionChange());\r\n        this.handleThemeGridOptionChange();\r\n\r\n        this.addManagedPropertyListener('rowHeight', () => this.refreshRowHeightVariable());\r\n        this.getSizeEl(ROW_HEIGHT);\r\n        this.getSizeEl(HEADER_HEIGHT);\r\n        this.getSizeEl(LIST_ITEM_HEIGHT);\r\n        this.getSizeEl(ROW_BORDER_WIDTH);\r\n        this.refreshRowBorderWidthVariable();\r\n\r\n        this.addDestroyFunc(() => _unregisterGridUsingThemingAPI(this));\r\n    }\r\n\r\n    public getDefaultRowHeight(): number {\r\n        return this.getCSSVariablePixelValue(ROW_HEIGHT);\r\n    }\r\n\r\n    public getDefaultHeaderHeight(): number {\r\n        return this.getCSSVariablePixelValue(HEADER_HEIGHT);\r\n    }\r\n\r\n    public getDefaultColumnMinWidth(): number {\r\n        // This replaces a table of hard-coded defaults for each theme, and is a\r\n        // reasonable default that somewhat approximates the old table. This\r\n        // value only needs to be a non-insane default - Applications are\r\n        // expected to set column-specific defaults based on the icons and\r\n        // header cell text they need to display\r\n        return Math.min(36, this.getDefaultRowHeight());\r\n    }\r\n\r\n    public getDefaultListItemHeight(): number {\r\n        return this.getCSSVariablePixelValue(LIST_ITEM_HEIGHT);\r\n    }\r\n\r\n    public getRowBorderWidth(): number {\r\n        return this.getCSSVariablePixelValue(ROW_BORDER_WIDTH);\r\n    }\r\n\r\n    public applyThemeClasses(el: HTMLElement) {\r\n        const { gridTheme } = this;\r\n        let themeClass = '';\r\n        if (gridTheme) {\r\n            // theming API mode\r\n            themeClass = `${this.paramsClass} ${gridTheme._getCssClass()}`;\r\n        } else {\r\n            // legacy mode\r\n            let node: HTMLElement | null = this.eGridDiv;\r\n            while (node) {\r\n                for (const className of Array.from(node.classList)) {\r\n                    if (className.startsWith('ag-theme-')) {\r\n                        themeClass = themeClass ? `${themeClass} ${className}` : className;\r\n                    }\r\n                }\r\n                node = node.parentElement;\r\n            }\r\n        }\r\n\r\n        for (const className of Array.from(el.classList)) {\r\n            if (className.startsWith('ag-theme-')) {\r\n                el.classList.remove(className);\r\n            }\r\n        }\r\n        if (themeClass) {\r\n            const oldClass = el.className;\r\n            el.className = oldClass + (oldClass ? ' ' : '') + themeClass;\r\n        }\r\n    }\r\n\r\n    public refreshRowHeightVariable(): number {\r\n        const { eGridDiv } = this;\r\n        const oldRowHeight = eGridDiv.style.getPropertyValue('--ag-line-height').trim();\r\n        const height = this.gos.get('rowHeight');\r\n\r\n        if (height == null || isNaN(height) || !isFinite(height)) {\r\n            if (oldRowHeight !== null) {\r\n                eGridDiv.style.setProperty('--ag-line-height', null);\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        const newRowHeight = `${height}px`;\r\n\r\n        if (oldRowHeight != newRowHeight) {\r\n            eGridDiv.style.setProperty('--ag-line-height', newRowHeight);\r\n            return height;\r\n        }\r\n\r\n        return oldRowHeight != '' ? parseFloat(oldRowHeight) : -1;\r\n    }\r\n\r\n    public addGlobalCSS(css: string, debugId: string): void {\r\n        if (this.gridTheme) {\r\n            _injectGlobalCSS(css, this.eGridDiv, debugId);\r\n        } else {\r\n            this.globalCSS.push([css, debugId]);\r\n        }\r\n    }\r\n\r\n    private getCSSVariablePixelValue(variable: Variable): number {\r\n        const cached = this.lastKnownValues.get(variable);\r\n        if (cached != null) {\r\n            return cached;\r\n        }\r\n        const measurement = this.measureSizeEl(variable);\r\n        if (measurement === 'detached' || measurement === 'no-styles') {\r\n            return variable.defaultValue;\r\n        }\r\n        this.lastKnownValues.set(variable, measurement);\r\n        return measurement;\r\n    }\r\n\r\n    private measureSizeEl(variable: Variable): number | 'detached' | 'no-styles' {\r\n        const sizeEl = this.getSizeEl(variable)!;\r\n        if (sizeEl.offsetParent == null) {\r\n            return 'detached';\r\n        }\r\n        const newSize = sizeEl.offsetWidth;\r\n        if (newSize === NO_VALUE_SENTINEL) return 'no-styles';\r\n        this.sizesMeasured = true;\r\n        return newSize;\r\n    }\r\n\r\n    private getMeasurementContainer(): HTMLElement {\r\n        let container = this.eMeasurementContainer;\r\n        if (!container) {\r\n            container = this.eMeasurementContainer = document.createElement('div');\r\n            container.className = 'ag-measurement-container';\r\n            this.eGridDiv.appendChild(container);\r\n        }\r\n        return container;\r\n    }\r\n\r\n    private getSizeEl(variable: Variable): HTMLElement {\r\n        let sizeEl = this.sizeEls.get(variable);\r\n        if (sizeEl) {\r\n            return sizeEl;\r\n        }\r\n        const container = this.getMeasurementContainer();\r\n\r\n        sizeEl = document.createElement('div');\r\n        const { border } = variable;\r\n        if (border) {\r\n            sizeEl.className = 'ag-measurement-element-border';\r\n            sizeEl.style.setProperty(\r\n                '--ag-internal-measurement-border',\r\n                `var(${variable.cssName}, solid ${NO_VALUE_SENTINEL}px`\r\n            );\r\n        } else {\r\n            sizeEl.style.width = `var(${variable.cssName}, ${NO_VALUE_SENTINEL}px)`;\r\n        }\r\n        container.appendChild(sizeEl);\r\n        this.sizeEls.set(variable, sizeEl);\r\n\r\n        let lastMeasurement = this.measureSizeEl(variable);\r\n\r\n        if (lastMeasurement === 'no-styles') {\r\n            // No value for the variable\r\n            _warn(9, { variable });\r\n        }\r\n\r\n        const unsubscribe = _observeResize(this.beans, sizeEl, () => {\r\n            const newMeasurement = this.measureSizeEl(variable);\r\n            if (newMeasurement === 'detached' || newMeasurement === 'no-styles') {\r\n                return;\r\n            }\r\n            this.lastKnownValues.set(variable, newMeasurement);\r\n            if (newMeasurement !== lastMeasurement) {\r\n                lastMeasurement = newMeasurement;\r\n                this.fireGridStylesChangedEvent(variable.changeKey);\r\n            }\r\n        });\r\n        this.addDestroyFunc(() => unsubscribe());\r\n\r\n        return sizeEl;\r\n    }\r\n\r\n    private fireGridStylesChangedEvent(change: ChangeKey): void {\r\n        if (change === 'rowBorderWidthChanged') {\r\n            this.refreshRowBorderWidthVariable();\r\n        }\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'gridStylesChanged',\r\n            [change]: true,\r\n        });\r\n    }\r\n\r\n    private refreshRowBorderWidthVariable(): void {\r\n        const width = this.getCSSVariablePixelValue(ROW_BORDER_WIDTH);\r\n        this.eGridDiv.style.setProperty('--ag-internal-row-border-width', `${width}px`);\r\n    }\r\n\r\n    private handleThemeGridOptionChange(): void {\r\n        const { gos, eGridDiv, globalCSS, gridTheme: oldGridTheme } = this;\r\n        const themeGridOption = gos.get('theme');\r\n        let newGridTheme: ThemeImpl | undefined;\r\n        if (themeGridOption === 'legacy') {\r\n            newGridTheme = undefined;\r\n        } else {\r\n            const themeOrDefault = themeGridOption ?? themeQuartz;\r\n            if (themeOrDefault instanceof ThemeImpl) {\r\n                newGridTheme = themeOrDefault;\r\n            } else {\r\n                _error(240, { theme: themeOrDefault });\r\n            }\r\n        }\r\n        if (newGridTheme !== oldGridTheme) {\r\n            if (newGridTheme) {\r\n                _registerGridUsingThemingAPI(this);\r\n                _injectCoreAndModuleCSS(eGridDiv);\r\n                for (const [css, debugId] of globalCSS) {\r\n                    _injectGlobalCSS(css, eGridDiv, debugId);\r\n                }\r\n                globalCSS.length = 0;\r\n            }\r\n            this.gridTheme = newGridTheme;\r\n            newGridTheme?._startUse({\r\n                loadThemeGoogleFonts: gos.get('loadThemeGoogleFonts'),\r\n                container: eGridDiv,\r\n            });\r\n            let eParamsStyle = this.eParamsStyle;\r\n            if (!eParamsStyle) {\r\n                eParamsStyle = this.eParamsStyle = document.createElement('style');\r\n                eGridDiv.appendChild(eParamsStyle);\r\n            }\r\n            if (!IS_SSR) {\r\n                eParamsStyle.textContent = newGridTheme?._getPerGridCss(this.paramsClass) || '';\r\n            }\r\n\r\n            this.applyThemeClasses(eGridDiv);\r\n            this.fireGridStylesChangedEvent('themeChanged');\r\n        }\r\n        // --ag-legacy-styles-loaded is defined on .ag-measurement-container by the\r\n        // legacy themes which shouldn't be used at the same time as Theming API\r\n        if (\r\n            newGridTheme &&\r\n            getComputedStyle(this.getMeasurementContainer()).getPropertyValue('--ag-legacy-styles-loaded')\r\n        ) {\r\n            if (themeGridOption) {\r\n                _error(106);\r\n            } else {\r\n                _error(239);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ntype Variable = {\r\n    cssName: string;\r\n    changeKey: ChangeKey;\r\n    defaultValue: number;\r\n    border?: boolean;\r\n};\r\n\r\ntype ChangeKey =\r\n    | 'themeChanged'\r\n    | 'headerHeightChanged'\r\n    | 'rowHeightChanged'\r\n    | 'listItemHeightChanged'\r\n    | 'rowBorderWidthChanged';\r\n\r\nconst NO_VALUE_SENTINEL = 15538;\r\n", "import type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { AgEventType } from './eventTypes';\r\nimport type { AgEventListener, AgGlobalEventListener, AllEventsWithoutGridCommon } from './events';\r\nimport type { IEventEmitter } from './interfaces/iEventEmitter';\r\nimport { LocalEventService } from './localEventService';\r\n\r\nexport class EventService extends BeanStub<AgEventType> implements NamedBean, IEventEmitter<AgEventType> {\r\n    beanName = 'eventSvc' as const;\r\n\r\n    private readonly globalEventService: LocalEventService<AgEventType> = new LocalEventService();\r\n\r\n    public postConstruct(): void {\r\n        const { globalListener, globalSyncListener } = this.beans;\r\n        if (globalListener) {\r\n            this.addGlobalListener(globalListener, true);\r\n        }\r\n\r\n        if (globalSyncListener) {\r\n            this.addGlobalListener(globalSyncListener, false);\r\n        }\r\n    }\r\n\r\n    public override addEventListener<TEventType extends AgEventType>(\r\n        eventType: TEventType,\r\n        listener: AgEventListener<any, any, TEventType>,\r\n        async?: boolean\r\n    ): void {\r\n        this.globalEventService.addEventListener(eventType, listener as any, async);\r\n    }\r\n\r\n    public override removeEventListener<TEventType extends AgEventType>(\r\n        eventType: TEventType,\r\n        listener: AgEventListener<any, any, TEventType>,\r\n        async?: boolean\r\n    ): void {\r\n        this.globalEventService.removeEventListener(eventType, listener as any, async);\r\n    }\r\n\r\n    public addGlobalListener(listener: AgGlobalEventListener, async = false): void {\r\n        this.globalEventService.addGlobalListener(listener, async);\r\n    }\r\n\r\n    public removeGlobalListener(listener: AgGlobalEventListener, async = false): void {\r\n        this.globalEventService.removeGlobalListener(listener, async);\r\n    }\r\n\r\n    /** @deprecated DO NOT FIRE LOCAL EVENTS OFF THE EVENT SERVICE */\r\n    public override dispatchLocalEvent(): void {\r\n        // only the destroy event from BeanStub should flow through here\r\n    }\r\n\r\n    public dispatchEvent(event: AllEventsWithoutGridCommon): void {\r\n        this.globalEventService.dispatchEvent(this.gos.addGridCommonParams<any>(event));\r\n    }\r\n\r\n    public dispatchEventOnce(event: AllEventsWithoutGridCommon): void {\r\n        this.globalEventService.dispatchEventOnce(this.gos.addGridCommonParams<any>(event));\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport { isColumnGroup } from '../entities/agColumnGroup';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport { _getDocument } from '../gridOptionsUtils';\r\nimport { getFocusHeaderRowCount } from '../headerRendering/headerUtils';\r\nimport type { HeaderRowType } from '../headerRendering/row/headerRowComp';\r\nimport type { Column, ColumnGroup } from '../interfaces/iColumn';\r\nimport type { HeaderPosition } from '../interfaces/iHeaderPosition';\r\nimport { _last } from '../utils/array';\r\n\r\nexport type HeaderNavigationDirection = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\r\n\r\ninterface HeaderFuturePosition extends HeaderPosition {\r\n    headerRowIndexWithoutSpan?: number;\r\n}\r\n\r\nfunction isAnyChildSpanningHeaderHeight(columnGroup: AgColumnGroup | null): boolean {\r\n    if (!columnGroup) {\r\n        return false;\r\n    }\r\n    return columnGroup.getLeafColumns().some((col) => col.isSpanHeaderHeight());\r\n}\r\n\r\nexport function getHeaderIndexToFocus(column: AgColumn | AgColumnGroup, currentIndex: number): HeaderPosition {\r\n    let nextColumn: AgColumn | undefined;\r\n\r\n    if (isColumnGroup(column) && isAnyChildSpanningHeaderHeight(column) && column.isPadding()) {\r\n        const targetColumn: AgColumnGroup = column;\r\n        nextColumn = targetColumn.getLeafColumns()[0];\r\n        let col: AgColumn | AgColumnGroup = nextColumn;\r\n        while (col !== targetColumn) {\r\n            currentIndex++;\r\n            col = col.getParent()!;\r\n        }\r\n    }\r\n\r\n    return {\r\n        column: nextColumn || column,\r\n        headerRowIndex: currentIndex,\r\n    };\r\n}\r\n\r\nexport class HeaderNavigationService extends BeanStub implements NamedBean {\r\n    beanName = 'headerNavigation' as const;\r\n\r\n    private gridBodyCon: GridBodyCtrl;\r\n    public currentHeaderRowWithoutSpan: number = -1;\r\n\r\n    public postConstruct(): void {\r\n        const beans = this.beans;\r\n        beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCon = p.gridBodyCtrl;\r\n        });\r\n\r\n        const eDocument = _getDocument(beans);\r\n        this.addManagedElementListeners(eDocument, {\r\n            mousedown: () => {\r\n                this.currentHeaderRowWithoutSpan = -1;\r\n            },\r\n        });\r\n    }\r\n\r\n    public getHeaderPositionForColumn(\r\n        colKey: string | Column | ColumnGroup,\r\n        floatingFilter: boolean\r\n    ): HeaderPosition | null {\r\n        let column: AgColumn | AgColumnGroup | null;\r\n\r\n        const { colModel, colGroupSvc, ctrlsSvc } = this.beans;\r\n\r\n        if (typeof colKey === 'string') {\r\n            column = colModel.getCol(colKey);\r\n            if (!column) {\r\n                column = colGroupSvc?.getColumnGroup(colKey) ?? null;\r\n            }\r\n        } else {\r\n            column = colKey as AgColumn | AgColumnGroup;\r\n        }\r\n\r\n        if (!column) {\r\n            return null;\r\n        }\r\n\r\n        const centerHeaderContainer = ctrlsSvc.getHeaderRowContainerCtrl();\r\n        const allCtrls = centerHeaderContainer?.getAllCtrls();\r\n        const isFloatingFilterVisible = _last(allCtrls || []).type === 'filter';\r\n        const headerRowCount = getFocusHeaderRowCount(this.beans) - 1;\r\n\r\n        let row = -1;\r\n        let col: AgColumn | AgColumnGroup | null = column;\r\n\r\n        while (col) {\r\n            row++;\r\n            col = col.getParent();\r\n        }\r\n\r\n        let headerRowIndex = row;\r\n\r\n        if (floatingFilter && isFloatingFilterVisible && headerRowIndex === headerRowCount - 1) {\r\n            headerRowIndex++;\r\n        }\r\n\r\n        return headerRowIndex === -1\r\n            ? null\r\n            : {\r\n                  headerRowIndex,\r\n                  column,\r\n              };\r\n    }\r\n\r\n    /*\r\n     * This method navigates grid header vertically\r\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\r\n     */\r\n    public navigateVertically(\r\n        direction: HeaderNavigationDirection,\r\n        fromHeader: HeaderPosition | null,\r\n        event: KeyboardEvent\r\n    ): boolean {\r\n        const focusSvc = this.beans.focusSvc;\r\n        if (!fromHeader) {\r\n            fromHeader = focusSvc.focusedHeader;\r\n        }\r\n\r\n        if (!fromHeader) {\r\n            return false;\r\n        }\r\n\r\n        const { headerRowIndex } = fromHeader;\r\n        const column = fromHeader.column as AgColumn;\r\n        const rowLen = getFocusHeaderRowCount(this.beans);\r\n        const isUp = direction === 'UP';\r\n\r\n        const currentRowType = this.getHeaderRowType(headerRowIndex);\r\n\r\n        let {\r\n            headerRowIndex: nextRow,\r\n            column: nextFocusColumn,\r\n            headerRowIndexWithoutSpan,\r\n        } = isUp\r\n            ? getColumnVisibleParent(currentRowType, column, headerRowIndex)\r\n            : getColumnVisibleChild(currentRowType, column, headerRowIndex);\r\n\r\n        let skipColumn = false;\r\n\r\n        if (nextRow < 0) {\r\n            nextRow = 0;\r\n            nextFocusColumn = column;\r\n            skipColumn = true;\r\n        }\r\n\r\n        if (nextRow >= rowLen) {\r\n            nextRow = -1; // -1 indicates the focus should move to grid rows.\r\n            this.currentHeaderRowWithoutSpan = -1;\r\n        } else if (headerRowIndexWithoutSpan !== undefined) {\r\n            this.currentHeaderRowWithoutSpan = headerRowIndexWithoutSpan;\r\n        }\r\n\r\n        if (!skipColumn && !nextFocusColumn) {\r\n            return false;\r\n        }\r\n\r\n        return focusSvc.focusHeaderPosition({\r\n            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn! },\r\n            allowUserOverride: true,\r\n            event,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * This method navigates grid header horizontally\r\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\r\n     */\r\n    public navigateHorizontally(\r\n        direction: HeaderNavigationDirection,\r\n        fromTab: boolean = false,\r\n        event: KeyboardEvent\r\n    ): boolean {\r\n        const { focusSvc, gos } = this.beans;\r\n        const focusedHeader = focusSvc.focusedHeader!;\r\n        let nextHeader: HeaderPosition;\r\n        let normalisedDirection: 'Before' | 'After';\r\n\r\n        // either navigating to the left or isRtl (cannot be both)\r\n        if (this.currentHeaderRowWithoutSpan !== -1) {\r\n            focusedHeader.headerRowIndex = this.currentHeaderRowWithoutSpan;\r\n        } else {\r\n            this.currentHeaderRowWithoutSpan = focusedHeader.headerRowIndex;\r\n        }\r\n\r\n        if ((direction === 'LEFT') !== gos.get('enableRtl')) {\r\n            normalisedDirection = 'Before';\r\n            nextHeader = this.findHeader(focusedHeader, normalisedDirection)!;\r\n        } else {\r\n            normalisedDirection = 'After';\r\n            nextHeader = this.findHeader(focusedHeader, normalisedDirection)!;\r\n        }\r\n\r\n        if (nextHeader || !fromTab) {\r\n            return focusSvc.focusHeaderPosition({\r\n                headerPosition: nextHeader,\r\n                direction: normalisedDirection,\r\n                fromTab,\r\n                allowUserOverride: true,\r\n                event,\r\n            });\r\n        } else if (fromTab) {\r\n            const userFunc = gos.getCallback('tabToNextHeader');\r\n            if (userFunc) {\r\n                return focusSvc.focusHeaderPositionFromUserFunc({\r\n                    userFunc,\r\n                    headerPosition: nextHeader,\r\n                    direction: normalisedDirection,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);\r\n    }\r\n\r\n    private focusNextHeaderRow(\r\n        focusedHeader: HeaderPosition,\r\n        direction: 'Before' | 'After',\r\n        event: KeyboardEvent\r\n    ): boolean {\r\n        const currentIndex = focusedHeader.headerRowIndex;\r\n        let nextPosition: HeaderPosition | null = null;\r\n        let nextRowIndex: number;\r\n        const beans = this.beans;\r\n\r\n        if (direction === 'Before') {\r\n            if (currentIndex > 0) {\r\n                nextRowIndex = currentIndex - 1;\r\n                this.currentHeaderRowWithoutSpan -= 1;\r\n                nextPosition = this.findColAtEdgeForHeaderRow(nextRowIndex, 'end')!;\r\n            }\r\n        } else {\r\n            nextRowIndex = currentIndex + 1;\r\n            if (this.currentHeaderRowWithoutSpan < getFocusHeaderRowCount(beans)) {\r\n                this.currentHeaderRowWithoutSpan += 1;\r\n            } else {\r\n                this.currentHeaderRowWithoutSpan = -1;\r\n            }\r\n            nextPosition = this.findColAtEdgeForHeaderRow(nextRowIndex, 'start')!;\r\n        }\r\n\r\n        if (!nextPosition) {\r\n            return false;\r\n        }\r\n\r\n        const { column, headerRowIndex } = getHeaderIndexToFocus(\r\n            nextPosition.column as AgColumn,\r\n            nextPosition?.headerRowIndex\r\n        );\r\n\r\n        return beans.focusSvc.focusHeaderPosition({\r\n            headerPosition: { column, headerRowIndex },\r\n            direction,\r\n            fromTab: true,\r\n            allowUserOverride: true,\r\n            event,\r\n        });\r\n    }\r\n\r\n    public scrollToColumn(column: AgColumn | AgColumnGroup, direction: 'Before' | 'After' | null = 'After'): void {\r\n        if (column.getPinned()) {\r\n            return;\r\n        }\r\n\r\n        let columnToScrollTo: AgColumn;\r\n\r\n        if (isColumnGroup(column)) {\r\n            const columns = column.getDisplayedLeafColumns();\r\n            columnToScrollTo = direction === 'Before' ? _last(columns) : columns[0];\r\n        } else {\r\n            columnToScrollTo = column;\r\n        }\r\n\r\n        this.gridBodyCon.scrollFeature.ensureColumnVisible(columnToScrollTo);\r\n    }\r\n\r\n    private findHeader(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): HeaderPosition | undefined {\r\n        let nextColumn: AgColumn | AgColumnGroup | undefined;\r\n        let getColMethod: 'getColBefore' | 'getColAfter';\r\n        const { colGroupSvc, visibleCols } = this.beans;\r\n\r\n        if (isColumnGroup(focusedHeader.column)) {\r\n            nextColumn = colGroupSvc?.getGroupAtDirection(focusedHeader.column, direction) ?? undefined;\r\n        } else {\r\n            getColMethod = `getCol${direction}` as any;\r\n            nextColumn = visibleCols[getColMethod](focusedHeader.column as AgColumn)!;\r\n        }\r\n\r\n        if (!nextColumn) {\r\n            return;\r\n        }\r\n\r\n        const { headerRowIndex } = focusedHeader;\r\n\r\n        if (this.getHeaderRowType(headerRowIndex) !== 'filter') {\r\n            const columnsInPath: (AgColumn | AgColumnGroup)[] = [nextColumn];\r\n\r\n            while (nextColumn.getParent()) {\r\n                nextColumn = nextColumn.getParent()!;\r\n                columnsInPath.push(nextColumn);\r\n            }\r\n\r\n            nextColumn = columnsInPath[Math.max(0, columnsInPath.length - 1 - headerRowIndex)];\r\n        }\r\n\r\n        const { column, headerRowIndex: indexToFocus } = getHeaderIndexToFocus(nextColumn, headerRowIndex);\r\n\r\n        return {\r\n            column,\r\n            headerRowIndex: indexToFocus,\r\n        };\r\n    }\r\n\r\n    private getHeaderRowType(rowIndex: number): HeaderRowType | undefined {\r\n        const centerHeaderContainer = this.beans.ctrlsSvc.getHeaderRowContainerCtrl();\r\n        if (centerHeaderContainer) {\r\n            return centerHeaderContainer.getRowType(rowIndex);\r\n        }\r\n    }\r\n\r\n    private findColAtEdgeForHeaderRow(level: number, position: 'start' | 'end'): HeaderPosition | undefined {\r\n        const { visibleCols, ctrlsSvc, colGroupSvc } = this.beans;\r\n        const displayedColumns = visibleCols.allCols;\r\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\r\n\r\n        if (!column) {\r\n            return;\r\n        }\r\n\r\n        const childContainer = ctrlsSvc.getHeaderRowContainerCtrl(column.getPinned());\r\n        const type = childContainer?.getRowType(level);\r\n\r\n        if (type == 'group') {\r\n            const columnGroup = colGroupSvc?.getColGroupAtLevel(column, level);\r\n            return {\r\n                headerRowIndex: level,\r\n                column: columnGroup!,\r\n            };\r\n        }\r\n\r\n        return {\r\n            // if type==null, means the header level didn't exist\r\n            headerRowIndex: type == null ? -1 : level,\r\n            column,\r\n        };\r\n    }\r\n}\r\n\r\nfunction getColumnVisibleParent(\r\n    currentRowType: HeaderRowType | undefined,\r\n    currentColumn: AgColumn | AgColumnGroup,\r\n    currentIndex: number\r\n): HeaderFuturePosition {\r\n    const isFloatingFilter = currentRowType === 'filter';\r\n    const isColumn = currentRowType === 'column';\r\n\r\n    let nextFocusColumn: AgColumn | AgColumnGroup | null = isFloatingFilter ? currentColumn : currentColumn.getParent();\r\n    let nextRow = currentIndex - 1;\r\n    let headerRowIndexWithoutSpan: number | undefined = nextRow;\r\n\r\n    if (isColumn && isAnyChildSpanningHeaderHeight((currentColumn as AgColumn).getParent())) {\r\n        while (nextFocusColumn && (nextFocusColumn as AgColumnGroup).isPadding()) {\r\n            nextFocusColumn = nextFocusColumn.getParent();\r\n            nextRow--;\r\n        }\r\n\r\n        headerRowIndexWithoutSpan = nextRow;\r\n        if (nextRow < 0) {\r\n            nextFocusColumn = currentColumn;\r\n            nextRow = currentIndex;\r\n            headerRowIndexWithoutSpan = undefined;\r\n        }\r\n    }\r\n\r\n    return { column: nextFocusColumn!, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\r\n}\r\n\r\nfunction getColumnVisibleChild(\r\n    currentRowType: HeaderRowType | undefined,\r\n    column: AgColumn | AgColumnGroup,\r\n    currentIndex: number,\r\n    direction: 'Before' | 'After' = 'After'\r\n): HeaderFuturePosition {\r\n    let nextFocusColumn: AgColumn | AgColumnGroup | null = column;\r\n    let nextRow = currentIndex + 1;\r\n    const headerRowIndexWithoutSpan = nextRow;\r\n\r\n    if (currentRowType === 'group') {\r\n        const leafColumns = (column as AgColumnGroup).getDisplayedLeafColumns();\r\n        const leafColumn = direction === 'After' ? leafColumns[0] : _last(leafColumns);\r\n        const columnsInTheWay: AgColumnGroup[] = [];\r\n\r\n        let currentColumn: AgColumn | AgColumnGroup = leafColumn;\r\n        while (currentColumn.getParent() !== column) {\r\n            currentColumn = currentColumn.getParent()!;\r\n            columnsInTheWay.push(currentColumn);\r\n        }\r\n\r\n        nextFocusColumn = leafColumn;\r\n        if (leafColumn.isSpanHeaderHeight()) {\r\n            for (let i = columnsInTheWay.length - 1; i >= 0; i--) {\r\n                const colToFocus = columnsInTheWay[i];\r\n                if (!colToFocus.isPadding()) {\r\n                    nextFocusColumn = colToFocus;\r\n                    break;\r\n                }\r\n                nextRow++;\r\n            }\r\n        } else {\r\n            nextFocusColumn = _last(columnsInTheWay);\r\n            if (!nextFocusColumn) {\r\n                nextFocusColumn = leafColumn;\r\n            }\r\n        }\r\n    }\r\n\r\n    return { column: nextFocusColumn, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\r\n}\r\n", "import type { ColumnModel } from './columns/columnModel';\r\nimport type { VisibleColsService } from './columns/visibleColsService';\r\nimport type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { BeanCollection } from './context/context';\r\nimport type { AgColumn } from './entities/agColumn';\r\nimport type { AgColumnGroup } from './entities/agColumnGroup';\r\nimport { _areCellsEqual, _getFirstRow, _getLastRow } from './entities/positionUtils';\r\nimport type { RowNode } from './entities/rowNode';\r\nimport type { CellFocusedParams, CommonCellFocusParams } from './events';\r\nimport type { FilterManager } from './filter/filterManager';\r\nimport { _getActiveDomElement, _getDomData } from './gridOptionsUtils';\r\nimport { DOM_DATA_KEY_HEADER_CTRL } from './headerRendering/cells/abstractCell/abstractHeaderCellCtrl';\r\nimport type { HeaderCellCtrl } from './headerRendering/cells/column/headerCellCtrl';\r\nimport { getFocusHeaderRowCount } from './headerRendering/headerUtils';\r\nimport type { NavigateToNextHeaderParams, TabToNextHeaderParams } from './interfaces/iCallbackParams';\r\nimport type { CellPosition } from './interfaces/iCellPosition';\r\nimport type { WithoutGridCommon } from './interfaces/iCommon';\r\nimport type { HeaderPosition } from './interfaces/iHeaderPosition';\r\nimport type { RowPinnedType } from './interfaces/iRowNode';\r\nimport { getHeaderIndexToFocus } from './navigation/headerNavigationService';\r\nimport type { NavigationService } from './navigation/navigationService';\r\nimport type { OverlayService } from './rendering/overlays/overlayService';\r\nimport { DOM_DATA_KEY_ROW_CTRL } from './rendering/row/rowCtrl';\r\nimport type { RowRenderer } from './rendering/rowRenderer';\r\nimport { _last } from './utils/array';\r\nimport {\r\n    _focusInto,\r\n    _focusNextGridCoreContainer,\r\n    _isCellFocusSuppressed,\r\n    _isHeaderFocusSuppressed,\r\n    _registerKeyboardFocusEvents,\r\n} from './utils/focus';\r\nimport { _makeNull } from './utils/generic';\r\n\r\nexport class FocusService extends BeanStub implements NamedBean {\r\n    beanName = 'focusSvc' as const;\r\n\r\n    private colModel: ColumnModel;\r\n    private visibleCols: VisibleColsService;\r\n    private rowRenderer: RowRenderer;\r\n    private navigation?: NavigationService;\r\n    private filterManager?: FilterManager;\r\n    private overlays?: OverlayService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.colModel = beans.colModel;\r\n        this.visibleCols = beans.visibleCols;\r\n        this.rowRenderer = beans.rowRenderer;\r\n        this.navigation = beans.navigation;\r\n        this.filterManager = beans.filterManager;\r\n        this.overlays = beans.overlays;\r\n    }\r\n\r\n    private focusedCell: CellPosition | null;\r\n    private restoredFocusedCell: CellPosition | null;\r\n    public focusedHeader: HeaderPosition | null;\r\n    /** the column that had focus before it moved into the advanced filter */\r\n    private advFilterFocusColumn: AgColumn | undefined;\r\n\r\n    private awaitRestoreFocusedCell: boolean;\r\n\r\n    public postConstruct(): void {\r\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\r\n\r\n        this.addManagedEventListeners({\r\n            columnPivotModeChanged: clearFocusedCellListener,\r\n            newColumnsLoaded: this.onColumnEverythingChanged.bind(this),\r\n            columnGroupOpened: clearFocusedCellListener,\r\n            columnRowGroupChanged: clearFocusedCellListener,\r\n        });\r\n\r\n        this.addDestroyFunc(_registerKeyboardFocusEvents(this.beans));\r\n    }\r\n\r\n    public onColumnEverythingChanged(): void {\r\n        // if the columns change, check and see if this column still exists. if it does, then\r\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\r\n        if (!this.focusedCell) {\r\n            return;\r\n        }\r\n\r\n        const col = this.focusedCell.column;\r\n        const colFromColumnModel = this.colModel.getCol(col.getId());\r\n\r\n        if (col !== colFromColumnModel) {\r\n            this.clearFocusedCell();\r\n        }\r\n    }\r\n\r\n    // we check if the browser is focusing something, and if it is, and\r\n    // it's the cell we think is focused, then return the cell. so this\r\n    // methods returns the cell if a) we think it has focus and b) the\r\n    // browser thinks it has focus. this then returns nothing if we\r\n    // first focus a cell, then second click outside the grid, as then the\r\n    // grid cell will still be focused as far as the grid is concerned,\r\n    // however the browser focus will have moved somewhere else.\r\n    public getFocusCellToUseAfterRefresh(): CellPosition | null {\r\n        if (this.gos.get('suppressFocusAfterRefresh') || !this.focusedCell) {\r\n            return null;\r\n        }\r\n\r\n        // we check that the browser is actually focusing on the grid, if it is not, then\r\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\r\n        // and Cells (covers cells as cells live in rows)\r\n        if (this.isDomDataMissingInHierarchy(_getActiveDomElement(this.beans), DOM_DATA_KEY_ROW_CTRL)) {\r\n            return null;\r\n        }\r\n\r\n        return this.focusedCell;\r\n    }\r\n\r\n    public getFocusHeaderToUseAfterRefresh(): HeaderPosition | null {\r\n        if (this.gos.get('suppressFocusAfterRefresh') || !this.focusedHeader) {\r\n            return null;\r\n        }\r\n\r\n        // we check that the browser is actually focusing on the grid, if it is not, then\r\n        // we have nothing to worry about\r\n        if (this.isDomDataMissingInHierarchy(_getActiveDomElement(this.beans), DOM_DATA_KEY_HEADER_CTRL)) {\r\n            return null;\r\n        }\r\n\r\n        return this.focusedHeader;\r\n    }\r\n\r\n    private isDomDataMissingInHierarchy(eBrowserCell: Node | null, key: string): boolean {\r\n        let ePointer = eBrowserCell;\r\n\r\n        while (ePointer) {\r\n            const data = _getDomData(this.gos, ePointer, key);\r\n\r\n            if (data) {\r\n                return false;\r\n            }\r\n\r\n            ePointer = ePointer.parentNode;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getFocusedCell(): CellPosition | null {\r\n        return this.focusedCell;\r\n    }\r\n\r\n    public shouldRestoreFocus(cell: CellPosition): boolean {\r\n        if (this.isCellRestoreFocused(cell)) {\r\n            setTimeout(() => {\r\n                // Clear the restore focused cell position after the timeout to avoid\r\n                // the cell being focused again and stealing focus from another part of the app.\r\n                this.restoredFocusedCell = null;\r\n            }, 0);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public clearRestoreFocus(): void {\r\n        this.restoredFocusedCell = null;\r\n        this.awaitRestoreFocusedCell = false;\r\n    }\r\n\r\n    public restoreFocusedCell(cellPosition: CellPosition, setFocusCallback: () => void): void {\r\n        this.awaitRestoreFocusedCell = true;\r\n\r\n        // this should be done asynchronously to work with React Renderers.\r\n        setTimeout(() => {\r\n            // if the cell has lost focus (react events are async), we don't want to restore\r\n            if (!this.awaitRestoreFocusedCell) {\r\n                return;\r\n            }\r\n            this.setRestoreFocusedCell(cellPosition);\r\n\r\n            setFocusCallback();\r\n        });\r\n    }\r\n\r\n    private isCellRestoreFocused(cellPosition: CellPosition): boolean {\r\n        if (this.restoredFocusedCell == null) {\r\n            return false;\r\n        }\r\n\r\n        return _areCellsEqual(cellPosition, this.restoredFocusedCell);\r\n    }\r\n\r\n    public setRestoreFocusedCell(cellPosition: CellPosition): void {\r\n        if (this.beans.frameworkOverrides.renderingEngine === 'react') {\r\n            // The restoredFocusedCellPosition is used in the React Rendering engine as we have to be able\r\n            // to support restoring focus after an async rendering.\r\n            this.restoredFocusedCell = cellPosition;\r\n        }\r\n    }\r\n\r\n    private getFocusEventParams(focusedCellPosition: CellPosition): CommonCellFocusParams {\r\n        const { rowIndex, rowPinned, column } = focusedCellPosition;\r\n\r\n        const params: CommonCellFocusParams = {\r\n            rowIndex: rowIndex,\r\n            rowPinned: rowPinned,\r\n            column: column,\r\n            isFullWidthCell: false,\r\n        };\r\n\r\n        const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\r\n\r\n        if (rowCtrl) {\r\n            params.isFullWidthCell = rowCtrl.isFullWidth();\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    public clearFocusedCell(): void {\r\n        this.restoredFocusedCell = null;\r\n        if (this.focusedCell == null) {\r\n            return;\r\n        }\r\n\r\n        const focusEventParams = this.getFocusEventParams(this.focusedCell);\r\n\r\n        this.focusedCell = null;\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'cellFocusCleared',\r\n            ...focusEventParams,\r\n        });\r\n    }\r\n\r\n    public setFocusedCell(params: CellFocusedParams): void {\r\n        const { column, rowIndex, rowPinned, forceBrowserFocus = false, preventScrollOnBrowserFocus = false } = params;\r\n\r\n        const gridColumn = this.colModel.getCol(column!);\r\n\r\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\r\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\r\n        // to re-focus the focused cell.\r\n        if (!gridColumn) {\r\n            this.focusedCell = null;\r\n            return;\r\n        }\r\n\r\n        this.focusedCell = {\r\n            rowIndex: rowIndex!,\r\n            rowPinned: _makeNull(rowPinned),\r\n            column: gridColumn,\r\n        };\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'cellFocused',\r\n            ...this.getFocusEventParams(this.focusedCell),\r\n            forceBrowserFocus,\r\n            preventScrollOnBrowserFocus,\r\n        });\r\n    }\r\n\r\n    public isCellFocused(cellPosition: CellPosition): boolean {\r\n        if (this.focusedCell == null) {\r\n            return false;\r\n        }\r\n\r\n        return _areCellsEqual(cellPosition, this.focusedCell);\r\n    }\r\n\r\n    public isRowNodeFocused(rowNode: RowNode): boolean {\r\n        return this.isRowFocused(rowNode.rowIndex!, rowNode.rowPinned);\r\n    }\r\n\r\n    public isHeaderWrapperFocused(headerCtrl: HeaderCellCtrl): boolean {\r\n        if (this.focusedHeader == null) {\r\n            return false;\r\n        }\r\n\r\n        const {\r\n            column,\r\n            rowCtrl: { rowIndex: headerRowIndex, pinned },\r\n        } = headerCtrl;\r\n\r\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeader;\r\n\r\n        return (\r\n            column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned()\r\n        );\r\n    }\r\n\r\n    public focusHeaderPosition(params: {\r\n        headerPosition: HeaderPosition | null;\r\n        direction?: 'Before' | 'After' | null;\r\n        fromTab?: boolean;\r\n        allowUserOverride?: boolean;\r\n        event?: KeyboardEvent;\r\n        fromCell?: boolean;\r\n        rowWithoutSpanValue?: number;\r\n    }): boolean {\r\n        if (_isHeaderFocusSuppressed(this.beans)) {\r\n            return false;\r\n        }\r\n\r\n        const { direction, fromTab, allowUserOverride, event, fromCell, rowWithoutSpanValue } = params;\r\n        let { headerPosition } = params;\r\n\r\n        if (fromCell && this.filterManager?.isAdvFilterHeaderActive()) {\r\n            return this.focusAdvancedFilter(headerPosition);\r\n        }\r\n\r\n        if (allowUserOverride) {\r\n            const currentPosition = this.focusedHeader;\r\n            const headerRowCount = getFocusHeaderRowCount(this.beans);\r\n\r\n            if (fromTab) {\r\n                const userFunc = this.gos.getCallback('tabToNextHeader');\r\n                if (userFunc) {\r\n                    headerPosition = this.getHeaderPositionFromUserFunc({\r\n                        userFunc,\r\n                        direction,\r\n                        currentPosition,\r\n                        headerPosition,\r\n                        headerRowCount,\r\n                    });\r\n                }\r\n            } else {\r\n                const userFunc = this.gos.getCallback('navigateToNextHeader');\r\n                if (userFunc && event) {\r\n                    const params: WithoutGridCommon<NavigateToNextHeaderParams> = {\r\n                        key: event.key,\r\n                        previousHeaderPosition: currentPosition,\r\n                        nextHeaderPosition: headerPosition,\r\n                        headerRowCount,\r\n                        event,\r\n                    };\r\n                    headerPosition = userFunc(params);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!headerPosition) {\r\n            return false;\r\n        }\r\n\r\n        return this.focusProvidedHeaderPosition({\r\n            headerPosition,\r\n            direction,\r\n            event,\r\n            fromCell,\r\n            rowWithoutSpanValue,\r\n        });\r\n    }\r\n\r\n    public focusHeaderPositionFromUserFunc(params: {\r\n        userFunc: (params: WithoutGridCommon<TabToNextHeaderParams>) => boolean | HeaderPosition;\r\n        headerPosition: HeaderPosition | null;\r\n        direction?: 'Before' | 'After' | null;\r\n        event?: KeyboardEvent;\r\n    }): boolean {\r\n        if (_isHeaderFocusSuppressed(this.beans)) {\r\n            return false;\r\n        }\r\n        const { userFunc, headerPosition, direction, event } = params;\r\n        const currentPosition = this.focusedHeader;\r\n        const headerRowCount = getFocusHeaderRowCount(this.beans);\r\n        const newHeaderPosition = this.getHeaderPositionFromUserFunc({\r\n            userFunc,\r\n            direction,\r\n            currentPosition,\r\n            headerPosition,\r\n            headerRowCount,\r\n        });\r\n        return (\r\n            !!newHeaderPosition &&\r\n            this.focusProvidedHeaderPosition({\r\n                headerPosition: newHeaderPosition,\r\n                direction,\r\n                event,\r\n            })\r\n        );\r\n    }\r\n\r\n    private getHeaderPositionFromUserFunc(params: {\r\n        userFunc: (params: WithoutGridCommon<TabToNextHeaderParams>) => boolean | HeaderPosition;\r\n        direction?: 'Before' | 'After' | null;\r\n        currentPosition: HeaderPosition | null;\r\n        headerPosition: HeaderPosition | null;\r\n        headerRowCount: number;\r\n    }): HeaderPosition | null {\r\n        const { userFunc, direction, currentPosition, headerPosition, headerRowCount } = params;\r\n        const userFuncParams: WithoutGridCommon<TabToNextHeaderParams> = {\r\n            backwards: direction === 'Before',\r\n            previousHeaderPosition: currentPosition,\r\n            nextHeaderPosition: headerPosition,\r\n            headerRowCount,\r\n        };\r\n        const userResult = userFunc(userFuncParams);\r\n        if (userResult === true) {\r\n            return currentPosition;\r\n        }\r\n        if (userResult === false) {\r\n            return null;\r\n        }\r\n        return userResult;\r\n    }\r\n\r\n    private focusProvidedHeaderPosition(params: {\r\n        headerPosition: HeaderPosition;\r\n        direction?: 'Before' | 'After' | null;\r\n        event?: KeyboardEvent;\r\n        fromCell?: boolean;\r\n        rowWithoutSpanValue?: number;\r\n    }): boolean {\r\n        const { headerPosition, direction, fromCell, rowWithoutSpanValue, event } = params;\r\n        const { column, headerRowIndex } = headerPosition;\r\n        const { filterManager, ctrlsSvc, headerNavigation } = this.beans;\r\n\r\n        if (headerRowIndex === -1) {\r\n            if (filterManager?.isAdvFilterHeaderActive()) {\r\n                return this.focusAdvancedFilter(headerPosition);\r\n            }\r\n            return this.focusGridView(column as AgColumn);\r\n        }\r\n\r\n        headerNavigation?.scrollToColumn(column as AgColumn, direction);\r\n\r\n        const headerRowContainerCtrl = ctrlsSvc.getHeaderRowContainerCtrl(column.getPinned());\r\n\r\n        // this will automatically set the focused header\r\n        const focusSuccess =\r\n            headerRowContainerCtrl?.focusHeader(headerPosition.headerRowIndex, column as AgColumn, event) || false;\r\n\r\n        if (headerNavigation && focusSuccess && (rowWithoutSpanValue != null || fromCell)) {\r\n            headerNavigation.currentHeaderRowWithoutSpan = rowWithoutSpanValue ?? -1;\r\n        }\r\n\r\n        return focusSuccess;\r\n    }\r\n\r\n    public focusFirstHeader(): boolean {\r\n        if (this.overlays?.isExclusive() && this.focusOverlay()) {\r\n            return true;\r\n        }\r\n\r\n        let firstColumn: AgColumn | AgColumnGroup = this.visibleCols.allCols[0];\r\n        if (!firstColumn) {\r\n            return false;\r\n        }\r\n\r\n        const { colGroupSvc } = this.beans;\r\n        if (colGroupSvc && firstColumn.getParent()) {\r\n            firstColumn = colGroupSvc.getColGroupAtLevel(firstColumn, 0)!;\r\n        }\r\n\r\n        const headerPosition = getHeaderIndexToFocus(firstColumn, 0);\r\n\r\n        return this.focusHeaderPosition({\r\n            headerPosition,\r\n            rowWithoutSpanValue: 0,\r\n        });\r\n    }\r\n\r\n    public focusLastHeader(event?: KeyboardEvent): boolean {\r\n        if (this.overlays?.isExclusive() && this.focusOverlay(true)) {\r\n            return true;\r\n        }\r\n\r\n        const headerRowIndex = getFocusHeaderRowCount(this.beans) - 1;\r\n        const column = _last(this.visibleCols.allCols);\r\n\r\n        return this.focusHeaderPosition({\r\n            headerPosition: { headerRowIndex, column },\r\n            rowWithoutSpanValue: -1,\r\n            event,\r\n        });\r\n    }\r\n\r\n    public focusPreviousFromFirstCell(event?: KeyboardEvent): boolean {\r\n        if (this.filterManager?.isAdvFilterHeaderActive()) {\r\n            return this.focusAdvancedFilter(null);\r\n        }\r\n        return this.focusLastHeader(event);\r\n    }\r\n\r\n    public isAnyCellFocused(): boolean {\r\n        return !!this.focusedCell;\r\n    }\r\n\r\n    public isRowFocused(rowIndex: number, rowPinnedType: RowPinnedType): boolean {\r\n        if (this.focusedCell == null) {\r\n            return false;\r\n        }\r\n\r\n        return this.focusedCell.rowIndex === rowIndex && this.focusedCell.rowPinned === _makeNull(rowPinnedType);\r\n    }\r\n\r\n    public focusOverlay(backwards?: boolean): boolean {\r\n        const overlayGui = this.overlays?.isVisible() && this.overlays.eWrapper?.getGui();\r\n        return !!overlayGui && _focusInto(overlayGui, backwards);\r\n    }\r\n\r\n    public focusGridView(column?: AgColumn, backwards: boolean = false, canFocusOverlay = true): boolean {\r\n        if (this.overlays?.isExclusive()) {\r\n            return canFocusOverlay && this.focusOverlay(backwards);\r\n        }\r\n\r\n        // if suppressCellFocus is `true`, it means the user does not want to\r\n        // navigate between the cells using tab. Instead, we put focus on either\r\n        // the header or after the grid, depending on whether tab or shift-tab was pressed.\r\n        if (_isCellFocusSuppressed(this.beans)) {\r\n            if (backwards) {\r\n                if (!_isHeaderFocusSuppressed(this.beans)) {\r\n                    return this.focusLastHeader();\r\n                }\r\n            }\r\n\r\n            if (canFocusOverlay && this.focusOverlay(backwards)) {\r\n                return true;\r\n            }\r\n\r\n            return _focusNextGridCoreContainer(this.beans, false);\r\n        }\r\n\r\n        const nextRow = backwards ? _getLastRow(this.beans) : _getFirstRow(this.beans);\r\n\r\n        if (nextRow) {\r\n            const { rowIndex, rowPinned } = nextRow;\r\n            column ??= this.focusedHeader?.column as AgColumn;\r\n            if (column && rowIndex !== undefined && rowIndex !== null) {\r\n                this.navigation?.ensureCellVisible({ rowIndex, column, rowPinned });\r\n\r\n                if (backwards) {\r\n                    // if full width we need to focus into the full width cell in the correct direction\r\n                    const rowCtrl = this.rowRenderer.getRowByPosition(nextRow);\r\n                    if (rowCtrl?.isFullWidth() && this.navigation?.tryToFocusFullWidthRow(nextRow, backwards)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                this.setFocusedCell({\r\n                    rowIndex,\r\n                    column,\r\n                    rowPinned: _makeNull(rowPinned),\r\n                    forceBrowserFocus: true,\r\n                });\r\n\r\n                this.beans.rangeSvc?.setRangeToCell({ rowIndex, rowPinned, column });\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (canFocusOverlay && this.focusOverlay(backwards)) {\r\n            return true;\r\n        }\r\n\r\n        if (backwards && this.focusLastHeader()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private focusAdvancedFilter(position: HeaderPosition | null): boolean {\r\n        this.advFilterFocusColumn = position?.column as AgColumn | undefined;\r\n        return this.beans.advancedFilter?.getCtrl().focusHeaderComp() ?? false;\r\n    }\r\n\r\n    public focusNextFromAdvancedFilter(backwards?: boolean, forceFirstColumn?: boolean): boolean {\r\n        const column = (forceFirstColumn ? undefined : this.advFilterFocusColumn) ?? this.visibleCols.allCols?.[0];\r\n        if (backwards) {\r\n            return this.focusHeaderPosition({\r\n                headerPosition: {\r\n                    column: column,\r\n                    headerRowIndex: getFocusHeaderRowCount(this.beans) - 1,\r\n                },\r\n            });\r\n        } else {\r\n            return this.focusGridView(column);\r\n        }\r\n    }\r\n\r\n    public clearAdvancedFilterColumn(): void {\r\n        this.advFilterFocusColumn = undefined;\r\n    }\r\n}\r\n", "import type { ColumnAnimationService } from '../columnMove/columnAnimationService';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport { _getScrollbarWidth } from '../utils/browser';\r\n\r\nexport interface SetScrollsVisibleParams {\r\n    horizontalScrollShowing: boolean;\r\n    verticalScrollShowing: boolean;\r\n}\r\n\r\nexport class ScrollVisibleService extends BeanStub implements NamedBean {\r\n    beanName = 'scrollVisibleSvc' as const;\r\n\r\n    private ctrlsSvc: CtrlsService;\r\n    private colAnimation?: ColumnAnimationService;\r\n\r\n    // we store this locally, so we are not calling getScrollWidth() multiple times as it's an expensive operation\r\n    private scrollbarWidth: number;\r\n\r\n    public wireBeans(beans: BeanCollection) {\r\n        this.ctrlsSvc = beans.ctrlsSvc;\r\n        this.colAnimation = beans.colAnimation;\r\n    }\r\n\r\n    public horizontalScrollShowing: boolean;\r\n    public verticalScrollShowing: boolean;\r\n\r\n    public horizontalScrollGap: boolean;\r\n    public verticalScrollGap: boolean;\r\n\r\n    public postConstruct(): void {\r\n        // sets an initial calculation for the scrollbar width\r\n        this.getScrollbarWidth();\r\n\r\n        this.addManagedEventListeners({\r\n            displayedColumnsChanged: this.updateScrollVisible.bind(this),\r\n            displayedColumnsWidthChanged: this.updateScrollVisible.bind(this),\r\n        });\r\n    }\r\n\r\n    private updateScrollVisible(): void {\r\n        // Because of column animation, if user removes cols anywhere except at the RHS,\r\n        // then the cols on the RHS will animate to the left to fill the gap. This animation\r\n        // means just after the cols are removed, the remaining cols are still in the original\r\n        // location at the start of the animation, so pre animation the H scrollbar is still\r\n        // needed, but post animation it is not. So if animation is active, we only update\r\n        // after the animation has ended.\r\n        const { colAnimation } = this;\r\n        if (colAnimation?.isActive()) {\r\n            colAnimation.executeLaterVMTurn(() => {\r\n                colAnimation!.executeLaterVMTurn(() => this.updateScrollVisibleImpl());\r\n            });\r\n        } else {\r\n            this.updateScrollVisibleImpl();\r\n        }\r\n    }\r\n\r\n    private updateScrollVisibleImpl(): void {\r\n        const centerRowCtrl = this.ctrlsSvc.get('center');\r\n\r\n        if (!centerRowCtrl || this.colAnimation?.isActive()) {\r\n            return;\r\n        }\r\n\r\n        const params: SetScrollsVisibleParams = {\r\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\r\n            verticalScrollShowing: this.verticalScrollShowing,\r\n        };\r\n\r\n        this.setScrollsVisible(params);\r\n        this.updateScrollGap();\r\n    }\r\n\r\n    public updateScrollGap(): void {\r\n        const centerRowCtrl = this.ctrlsSvc.get('center');\r\n        const horizontalGap = centerRowCtrl.hasHorizontalScrollGap();\r\n        const verticalGap = centerRowCtrl.hasVerticalScrollGap();\r\n        const atLeastOneDifferent =\r\n            this.horizontalScrollGap !== horizontalGap || this.verticalScrollGap !== verticalGap;\r\n        if (atLeastOneDifferent) {\r\n            this.horizontalScrollGap = horizontalGap;\r\n            this.verticalScrollGap = verticalGap;\r\n\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'scrollGapChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    public setScrollsVisible(params: SetScrollsVisibleParams): void {\r\n        const atLeastOneDifferent =\r\n            this.horizontalScrollShowing !== params.horizontalScrollShowing ||\r\n            this.verticalScrollShowing !== params.verticalScrollShowing;\r\n\r\n        if (atLeastOneDifferent) {\r\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\r\n            this.verticalScrollShowing = params.verticalScrollShowing;\r\n\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'scrollVisibilityChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero\r\n    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we\r\n    // allow the user to provide the scroll width before we work it out.\r\n    public getScrollbarWidth() {\r\n        if (this.scrollbarWidth == null) {\r\n            const gridOptionsScrollbarWidth = this.gos.get('scrollbarWidth');\r\n            const useGridOptions = typeof gridOptionsScrollbarWidth === 'number' && gridOptionsScrollbarWidth >= 0;\r\n            const scrollbarWidth = useGridOptions ? gridOptionsScrollbarWidth : _getScrollbarWidth();\r\n\r\n            if (scrollbarWidth != null) {\r\n                this.scrollbarWidth = scrollbarWidth;\r\n\r\n                this.eventSvc.dispatchEvent({\r\n                    type: 'scrollbarWidthChanged',\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.scrollbarWidth;\r\n    }\r\n}\r\n", "import type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\n\r\nexport class GridDestroyService extends BeanStub implements NamedBean {\r\n    beanName = 'gridDestroySvc' as const;\r\n\r\n    public destroyCalled = false;\r\n\r\n    public override destroy(): void {\r\n        // prevent infinite loop\r\n        if (this.destroyCalled) {\r\n            return;\r\n        }\r\n\r\n        const { stateSvc, ctrlsSvc, context } = this.beans;\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'gridPreDestroyed',\r\n            state: stateSvc?.getState() ?? {},\r\n        });\r\n\r\n        // Set after pre-destroy so user can still use the api in pre-destroy event and it is not marked as destroyed yet.\r\n        this.destroyCalled = true;\r\n\r\n        // destroy the UI first (as they use the services)\r\n        ctrlsSvc.get('gridCtrl')?.destroyGridUi();\r\n\r\n        // destroy the services\r\n        context.destroy();\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { AgChartThemeOverrides } from 'ag-charts-types';\r\n\r\nimport type { ColDef } from './entities/colDef';\r\nimport type { GridOptions } from './entities/gridOptions';\r\nimport type { AgEventType, AgInternalEventType, AgPublicEventType } from './eventTypes';\r\nimport type { FilterRequestSource } from './filter/iColumnFilter';\r\nimport type { CellRange, CellRangeParams } from './interfaces/IRangeService';\r\nimport type { GridState } from './interfaces/gridState';\r\nimport type { ChartType } from './interfaces/iChartOptions';\r\nimport type { RefreshModelParams } from './interfaces/iClientSideRowModel';\r\nimport type { Column, ColumnEventName, ColumnGroup, ColumnPinnedType, ProvidedColumnGroup } from './interfaces/iColumn';\r\nimport type { AgGridCommon, WithoutGridCommon } from './interfaces/iCommon';\r\nimport type { BuildEventTypeMap } from './interfaces/iEventEmitter';\r\nimport type { IFilterComp } from './interfaces/iFilter';\r\nimport type { IRowNode, RowPinnedType } from './interfaces/iRowNode';\r\nimport type { RowNodeTransaction } from './interfaces/rowNodeTransaction';\r\nimport type { ServerSideTransactionResult } from './interfaces/serverSideTransaction';\r\n\r\nexport const ALWAYS_SYNC_GLOBAL_EVENTS: Set<AgEventType> = new Set(['gridPreDestroyed', 'fillStart', 'pasteStart']);\r\n\r\nexport type AgEventTypeParams<TData = any, TContext = any> = BuildEventTypeMap<\r\n    AgPublicEventType | AgInternalEventType,\r\n    {\r\n        columnEverythingChanged: ColumnEverythingChangedEvent<TData, TContext>;\r\n        newColumnsLoaded: NewColumnsLoadedEvent<TData, TContext>;\r\n        columnPivotModeChanged: ColumnPivotModeChangedEvent<TData, TContext>;\r\n        pivotMaxColumnsExceeded: PivotMaxColumnsExceededEvent<TData, TContext>;\r\n        columnRowGroupChanged: ColumnRowGroupChangedEvent<TData, TContext>;\r\n        expandOrCollapseAll: ExpandOrCollapseAllEvent<TData, TContext>;\r\n        columnPivotChanged: ColumnPivotChangedEvent<TData, TContext>;\r\n        gridColumnsChanged: GridColumnsChangedEvent<TData, TContext>;\r\n        columnValueChanged: ColumnValueChangedEvent<TData, TContext>;\r\n        columnMoved: ColumnMovedEvent<TData, TContext>;\r\n        columnVisible: ColumnVisibleEvent<TData, TContext>;\r\n        columnPinned: ColumnPinnedEvent<TData, TContext>;\r\n        columnGroupOpened: ColumnGroupOpenedEvent<TData, TContext>;\r\n        columnResized: ColumnResizedEvent<TData, TContext>;\r\n        displayedColumnsChanged: DisplayedColumnsChangedEvent<TData, TContext>;\r\n        virtualColumnsChanged: VirtualColumnsChangedEvent<TData, TContext>;\r\n        columnHeaderMouseOver: ColumnHeaderMouseOverEvent<TData, TContext>;\r\n        columnHeaderMouseLeave: ColumnHeaderMouseLeaveEvent<TData, TContext>;\r\n        columnHeaderClicked: ColumnHeaderClickedEvent<TData, TContext>;\r\n        columnHeaderContextMenu: ColumnHeaderContextMenuEvent<TData, TContext>;\r\n        asyncTransactionsFlushed: AsyncTransactionsFlushedEvent<TData, TContext>;\r\n        rowGroupOpened: RowGroupOpenedEvent<TData, TContext>;\r\n        rowDataUpdated: RowDataUpdatedEvent<TData, TContext>;\r\n        pinnedRowDataChanged: PinnedRowDataChangedEvent<TData, TContext>;\r\n        rangeSelectionChanged: RangeSelectionChangedEvent<TData, TContext>;\r\n        cellSelectionChanged: CellSelectionChangedEvent<TData, TContext>;\r\n        chartCreated: ChartCreatedEvent<TData, TContext>;\r\n        chartRangeSelectionChanged: ChartRangeSelectionChangedEvent<TData, TContext>;\r\n        chartOptionsChanged: ChartOptionsChangedEvent<TData, TContext>;\r\n        chartDestroyed: ChartDestroyedEvent<TData, TContext>;\r\n        toolPanelVisibleChanged: ToolPanelVisibleChangedEvent<TData, TContext>;\r\n        toolPanelSizeChanged: ToolPanelSizeChangedEvent<TData, TContext>;\r\n        modelUpdated: ModelUpdatedEvent<TData, TContext>;\r\n        cutStart: CutStartEvent<TData, TContext>;\r\n        cutEnd: CutEndEvent<TData, TContext>;\r\n        pasteStart: PasteStartEvent<TData, TContext>;\r\n        pasteEnd: PasteEndEvent<TData, TContext>;\r\n        fillStart: FillStartEvent<TData, TContext>;\r\n        fillEnd: FillEndEvent<TData, TContext>;\r\n        cellSelectionDeleteStart: CellSelectionDeleteStartEvent<TData, TContext>;\r\n        cellSelectionDeleteEnd: CellSelectionDeleteEndEvent<TData, TContext>;\r\n        rangeDeleteStart: RangeDeleteStartEvent<TData, TContext>;\r\n        rangeDeleteEnd: RangeDeleteEndEvent<TData, TContext>;\r\n        undoStarted: UndoStartedEvent<TData, TContext>;\r\n        undoEnded: UndoEndedEvent<TData, TContext>;\r\n        redoStarted: RedoStartedEvent<TData, TContext>;\r\n        redoEnded: RedoEndedEvent<TData, TContext>;\r\n        cellClicked: CellClickedEvent<TData, TContext>;\r\n        cellDoubleClicked: CellDoubleClickedEvent<TData, TContext>;\r\n        cellMouseDown: CellMouseDownEvent<TData, TContext>;\r\n        cellContextMenu: CellContextMenuEvent<TData, TContext>;\r\n        cellValueChanged: CellValueChangedEvent<TData, TContext>;\r\n        cellEditRequest: CellEditRequestEvent<TData, TContext>;\r\n        rowValueChanged: RowValueChangedEvent<TData, TContext>;\r\n        headerFocused: HeaderFocusedEvent<TData, TContext>;\r\n        cellFocused: CellFocusedEvent<TData, TContext>;\r\n        rowSelected: RowSelectedEvent<TData, TContext>;\r\n        selectionChanged: SelectionChangedEvent<TData, TContext>;\r\n        tooltipShow: TooltipShowEvent<TData, TContext>;\r\n        tooltipHide: TooltipHideEvent<TData, TContext>;\r\n        cellKeyDown: FullWidthCellKeyDownEvent<TData, TContext> | CellKeyDownEvent<TData, TContext>;\r\n        cellMouseOver: CellMouseOverEvent<TData, TContext>;\r\n        cellMouseOut: CellMouseOutEvent<TData, TContext>;\r\n        filterChanged: FilterChangedEvent<TData, TContext>;\r\n        filterModified: FilterModifiedEvent<TData, TContext>;\r\n        filterOpened: FilterOpenedEvent<TData, TContext>;\r\n        advancedFilterBuilderVisibleChanged: AdvancedFilterBuilderVisibleChangedEvent<TData, TContext>;\r\n        sortChanged: SortChangedEvent<TData, TContext>;\r\n        virtualRowRemoved: VirtualRowRemovedEvent<TData, TContext>;\r\n        rowClicked: RowClickedEvent<TData, TContext>;\r\n        rowDoubleClicked: RowDoubleClickedEvent<TData, TContext>;\r\n        gridReady: GridReadyEvent<TData, TContext>;\r\n        gridPreDestroyed: GridPreDestroyedEvent<TData, TContext>;\r\n        gridSizeChanged: GridSizeChangedEvent<TData, TContext>;\r\n        viewportChanged: ViewportChangedEvent<TData, TContext>;\r\n        firstDataRendered: FirstDataRenderedEvent<TData, TContext>;\r\n        dragStarted: DragStartedEvent<TData, TContext>;\r\n        dragStopped: DragStoppedEvent<TData, TContext>;\r\n        dragCancelled: DragCancelledEvent<TData, TContext>;\r\n        rowEditingStarted: RowEditingStartedEvent<TData, TContext>;\r\n        rowEditingStopped: RowEditingStoppedEvent<TData, TContext>;\r\n        cellEditingStarted: CellEditingStartedEvent<TData, TContext>;\r\n        cellEditingStopped: CellEditingStoppedEvent<TData, TContext>;\r\n        bodyScroll: BodyScrollEvent<TData, TContext>;\r\n        bodyScrollEnd: BodyScrollEndEvent<TData, TContext>;\r\n        paginationChanged: PaginationChangedEvent<TData, TContext>;\r\n        componentStateChanged: ComponentStateChangedEvent<TData, TContext>;\r\n        storeRefreshed: StoreRefreshedEvent<TData, TContext>;\r\n        stateUpdated: StateUpdatedEvent<TData, TContext>;\r\n        columnMenuVisibleChanged: ColumnMenuVisibleChangedEvent<TData, TContext>;\r\n        contextMenuVisibleChanged: ContextMenuVisibleChangedEvent<TData, TContext>;\r\n        rowDragEnter: RowDragEnterEvent<TData, TContext>;\r\n        rowDragMove: RowDragMoveEvent<TData, TContext>;\r\n        rowDragLeave: RowDragLeaveEvent<TData, TContext>;\r\n        rowDragEnd: RowDragEndEvent<TData, TContext>;\r\n        rowDragCancel: RowDragCancelEvent<TData, TContext>;\r\n        // Internal events\r\n        beforeRefreshModel: BeforeRefreshModelEvent<TData, TContext>;\r\n        scrollbarWidthChanged: ScrollbarWidthChangedEvent<TData, TContext>;\r\n        keyShortcutChangedCellStart: KeyShortcutChangedCellStartEvent<TData, TContext>;\r\n        keyShortcutChangedCellEnd: KeyShortcutChangedCellEndEvent<TData, TContext>;\r\n        pinnedHeightChanged: PinnedHeightChangedEvent<TData, TContext>;\r\n        cellFocusCleared: CellFocusClearedEvent<TData, TContext>;\r\n        fullWidthRowFocused: FullWidthRowFocusedEvent<TData, TContext>;\r\n        checkboxChanged: CheckboxChangedEvent<TData, TContext>;\r\n        heightScaleChanged: HeightScaleChangedEvent<TData, TContext>;\r\n        suppressMovableColumns: SuppressMovableColumnsEvent<TData, TContext>;\r\n        suppressMenuHide: SuppressMenuHideEvent<TData, TContext>;\r\n        suppressFieldDotNotation: SuppressFieldDotNotationEvent<TData, TContext>;\r\n        columnPanelItemDragStart: ColumnPanelItemDragStartEvent<TData, TContext>;\r\n        columnPanelItemDragEnd: ColumnPanelItemDragEndEvent<TData, TContext>;\r\n        bodyHeightChanged: BodyHeightChangedEvent<TData, TContext>;\r\n        columnContainerWidthChanged: ColumnContainerWidthChangedEvent<TData, TContext>;\r\n        displayedColumnsWidthChanged: DisplayedColumnsWidthChangedEvent<TData, TContext>;\r\n        scrollVisibilityChanged: ScrollVisibilityChangedEvent<TData, TContext>;\r\n        scrollGapChanged: ScrollOverflowChangedEvent<TData, TContext>;\r\n        columnHoverChanged: ColumnHoverChangedEvent<TData, TContext>;\r\n        flashCells: FlashCellsEvent<TData, TContext>;\r\n        paginationPixelOffsetChanged: PaginationPixelOffsetChangedEvent<TData, TContext>;\r\n        displayedRowsChanged: DisplayedRowsChangedEvent<TData, TContext>;\r\n        leftPinnedWidthChanged: LeftPinnedWidthChangedEvent<TData, TContext>;\r\n        rightPinnedWidthChanged: RightPinnedWidthChangedEvent<TData, TContext>;\r\n        rowContainerHeightChanged: RowContainerHeightChangedEvent<TData, TContext>;\r\n        headerHeightChanged: HeaderHeightChangedEvent<TData, TContext>;\r\n        columnGroupHeaderHeightChanged: ColumnGroupHeaderHeightChangedEvent<TData, TContext>;\r\n        columnHeaderHeightChanged: ColumnHeaderHeightChangedEvent<TData, TContext>;\r\n        gridStylesChanged: GridStylesChangedEvent<TData, TContext>;\r\n        storeUpdated: StoreUpdatedEvent<TData, TContext>;\r\n        filterDestroyed: FilterDestroyedEvent<TData, TContext>;\r\n        rowDataUpdateStarted: RowDataUpdateStartedEvent<TData, TContext>;\r\n        rowCountReady: RowCountReadyEvent<TData, TContext>;\r\n        advancedFilterEnabledChanged: AdvancedFilterEnabledChangedEvent<TData, TContext>;\r\n        dataTypesInferred: DataTypesInferredEvent<TData, TContext>;\r\n        fieldValueChanged: FieldValueChangedEvent<TData, TContext>;\r\n        fieldPickerValueSelected: FieldPickerValueSelectedEvent<TData, TContext>;\r\n        richSelectListRowSelected: RichSelectListRowSelectedEvent<TData, TContext>;\r\n        sideBarUpdated: SideBarUpdatedEvent<TData, TContext>;\r\n        alignedGridScroll: AlignedGridScrollEvent<TData, TContext>;\r\n        alignedGridColumn: AlignedGridColumnEvent<TData, TContext>;\r\n        gridOptionsChanged: GridOptionsChangedEvent<TData, TContext>;\r\n        chartTitleEdit: ChartTitleEditEvent<TData, TContext>;\r\n        recalculateRowBounds: RecalculateRowBoundsEvent<TData, TContext>;\r\n        stickyTopOffsetChanged: StickyTopOffsetChangedEvent<TData, TContext>;\r\n        overlayExclusiveChanged: AgEvent<'overlayExclusiveChanged'>;\r\n    }\r\n>;\r\n\r\n/** Internal Interface for AG Grid Events */\r\nexport type AllEventsWithoutGridCommon<TData = any, TContext = any> = {\r\n    [K in keyof AgEventTypeParams<TData, TContext>]: WithoutGridCommon<AgEventTypeParams<TData, TContext>[K]>;\r\n}[keyof AgEventTypeParams];\r\n\r\n/** Union Type of all AG Grid Events */\r\nexport type AllEvents<TData = any, TContext = any> = {\r\n    [K in keyof AgEventTypeParams<TData, TContext>]: AgEventTypeParams<TData, TContext>[K];\r\n}[keyof AgEventTypeParams];\r\n\r\nexport interface AgEvent<TEventType extends string = string> {\r\n    /** Event identifier */\r\n    type: TEventType;\r\n}\r\n\r\nexport interface AgGridEvent<TData = any, TContext = any, TEventType extends string = string>\r\n    extends AgGridCommon<TData, TContext>,\r\n        AgEvent<TEventType> {}\r\n\r\nexport interface AgGlobalEvent<T extends AgEventType, TData = any, TContext = any>\r\n    extends AgGridEvent<TData, TContext, T> {}\r\n\r\nexport type AgEventListener<TData = any, TContext = any, TEventType extends AgEventType = AgEventType> = (\r\n    params: AgEventTypeParams<TData, TContext>[TEventType]\r\n) => void;\r\n\r\nexport type AgGlobalEventListener<TData = any, TContext = any, T extends AgEventType = AgEventType> = (\r\n    eventType: T,\r\n    event: AgEventTypeParams<TData, TContext>[T]\r\n) => void;\r\n\r\nexport interface ModelUpdatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'modelUpdated', TData, TContext> {\r\n    /** If true, the grid will try and animate the rows to the new positions */\r\n    animate: boolean | undefined;\r\n    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise\r\n     * it's the same data but sorted or filtered, in which case this is true, and rows\r\n     * can animate around (eg rowNode id 24 is the same row node as last time). */\r\n    keepRenderedRows: boolean | undefined;\r\n    /** If true, then this update was a result of setRowData() getting called. This\r\n     * gets the grid to scroll to the top again. */\r\n    newData: boolean | undefined;\r\n    /** True when pagination and a new page is navigated to. */\r\n    newPage: boolean;\r\n    /** True when page size changes from the page size selector. */\r\n    newPageSize?: boolean;\r\n    /** true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks */\r\n    keepUndoRedoStack?: boolean;\r\n}\r\n\r\nexport interface PaginationChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'paginationChanged', TData, TContext> {\r\n    /** True if rows were animated to new position */\r\n    animate?: boolean;\r\n    /** True if rows were kept (otherwise complete redraw) */\r\n    keepRenderedRows?: boolean;\r\n    /** True if data was new (i.e user set new data) */\r\n    newData?: boolean;\r\n    /** True if user went to a new page */\r\n    newPage: boolean;\r\n    /** True if user changed the page size */\r\n    newPageSize?: boolean;\r\n}\r\n\r\nexport interface ToolPanelSizeChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'toolPanelSizeChanged', TData, TContext> {\r\n    /** True if this is the first change to the Tool Panel size. */\r\n    started: boolean;\r\n    /** True if this is the last change to the Tool Panel size. */\r\n    ended: boolean;\r\n    /** New width of the ToolPanel component. */\r\n    width: number;\r\n}\r\n\r\nexport interface ColumnPivotModeChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnPivotModeChanged', TData, TContext> {}\r\n\r\nexport interface VirtualColumnsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'virtualColumnsChanged', TData, TContext> {\r\n    afterScroll: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated v32.2 Either use `displayedColumnsChanged` which is fired at the same time,\r\n * or use one of the more specific column events.\r\n */\r\nexport interface ColumnEverythingChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnEverythingChanged', TData, TContext> {\r\n    source: string;\r\n}\r\n\r\nexport interface NewColumnsLoadedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'newColumnsLoaded', TData, TContext> {\r\n    source: ColumnEventType;\r\n}\r\n\r\nexport interface GridColumnsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridColumnsChanged', TData, TContext> {}\r\n\r\nexport interface DisplayedColumnsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'displayedColumnsChanged', TData, TContext> {\r\n    source: ColumnEventType;\r\n}\r\n\r\nexport interface RowDataUpdatedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rowDataUpdated', TData, TContext> {}\r\n\r\n/** Raised by ClientSideRowModel */\r\nexport interface BeforeRefreshModelEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'beforeRefreshModel', TData, TContext> {\r\n    params: RefreshModelParams<TData>;\r\n}\r\n\r\nexport interface RowDataUpdateStartedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rowDataUpdateStarted', TData, TContext> {\r\n    firstRowData: TData | null;\r\n}\r\n\r\nexport interface PinnedRowDataChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'pinnedRowDataChanged', TData, TContext> {}\r\nexport interface PinnedHeightChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'pinnedHeightChanged', TData, TContext> {}\r\n\r\n/**\r\n * - `api` - from API method\r\n * - `apiSelectAll` - from API methods `selectAll`/`deselectAll`\r\n * - `apiSelectAllFiltered` - from API methods `selectAllFiltered`/`deselectAllFiltered`\r\n * - `apiSelectAllCurrentPage` - from API methods `selectAllOnCurrentPage`/`deselectAllOnCurrentPage`\r\n * - `checkboxSelected` - row selection checkbox clicked\r\n * - `rowClicked` - row clicked when row selection enabled\r\n * - `rowDataChanged` - row data updated which triggered selection updates\r\n * - `rowGroupChanged` - grouping changed which updated the selection\r\n * - `selectableChanged`- selectable status of row has changed when `rowSelection.groupSelects` is `'descendants'` or `'filteredDescendants'`\r\n * - `spaceKey` - space key pressed on row\r\n * - `keyboardSelectAll` - select all via keyboard shortcut (CTRL+A)\r\n * - `uiSelectAll` - select all in header clicked\r\n * - `uiSelectAllFiltered` - select all in header clicked when `rowSelection.selectAll = 'filtered'`\r\n * - `uiSelectAllCurrentPage` - select all in header clicked when `rowSelection.selectAll = 'currentPage'`\r\n * - 'gridInitializing' - set as part of initial state while the grid is initializing\r\n */\r\nexport type SelectionEventSourceType =\r\n    | 'api'\r\n    | 'apiSelectAll'\r\n    | 'apiSelectAllFiltered'\r\n    | 'apiSelectAllCurrentPage'\r\n    | 'checkboxSelected'\r\n    | 'rowClicked'\r\n    | 'rowDataChanged'\r\n    | 'rowGroupChanged'\r\n    | 'selectableChanged'\r\n    | 'spaceKey'\r\n    | 'keyboardSelectAll'\r\n    | 'uiSelectAll'\r\n    | 'uiSelectAllFiltered'\r\n    | 'uiSelectAllCurrentPage'\r\n    | 'gridInitializing';\r\n\r\nexport interface SelectionChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'selectionChanged', TData, TContext> {\r\n    source: SelectionEventSourceType;\r\n}\r\n\r\nexport type FilterChangedEventSourceType = 'api' | 'quickFilter' | 'columnFilter' | 'advancedFilter';\r\n\r\nexport interface FilterChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'filterChanged', TData, TContext> {\r\n    /**\r\n     * The source that triggered the filter change event. Can be one of the following:\r\n     * - `api` - triggered by an API call\r\n     * - `quickFilter` - triggered by user filtering from Quick Filter\r\n     * - `columnFilter` - triggered by user filtering from Column Menu\r\n     * - `advancedFilter` - triggered by user filtering from Advanced Filter\r\n     */\r\n    source?: FilterChangedEventSourceType;\r\n    /** True if the filter was changed as a result of data changing */\r\n    afterDataChange?: boolean;\r\n    /** True if filter was changed via floating filter */\r\n    afterFloatingFilter?: boolean;\r\n    /**\r\n     * Columns affected by the filter change. Array contents depend on the source of the event.\r\n     *\r\n     * - Expect 1 element for UI-driven column filter changes.\r\n     * - Expect 0-N elements (all affected columns) for calls to `api.setFilterModel()`.\r\n     * - Expect 0-N elements (removed columns) for calls to `api.setColumnDefs()`.\r\n     * - Expect 0 elements for quick-filters and calls to `api.onFilterChanged()`.\r\n     */\r\n    columns: Column[];\r\n}\r\n\r\nexport interface FilterModifiedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'filterModified', TData, TContext> {\r\n    filterInstance: IFilterComp;\r\n    column: Column;\r\n}\r\n\r\nexport interface FilterOpenedEvent<TData = any, TContext = any> extends AgGlobalEvent<'filterOpened', TData, TContext> {\r\n    /** Column / ProvidedColumnGroup that contains the filter */\r\n    column: Column | ProvidedColumnGroup;\r\n    /** Source of the open request */\r\n    source: FilterRequestSource;\r\n    /** Parent element of the filter */\r\n    eGui: HTMLElement;\r\n}\r\n\r\n// internal event\r\nexport interface FilterDestroyedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'filterDestroyed', TData, TContext> {\r\n    source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated';\r\n    column: Column;\r\n}\r\n\r\nexport interface SortChangedEvent<TData = any, TContext = any> extends AgGlobalEvent<'sortChanged', TData, TContext> {\r\n    /** Source of the sort change. */\r\n    source: string;\r\n    /**\r\n     * The list of columns impacted by the sort change.\r\n     */\r\n    columns?: Column[];\r\n}\r\n\r\nexport interface GridReadyEvent<TData = any, TContext = any> extends AgGlobalEvent<'gridReady', TData, TContext> {}\r\nexport interface GridPreDestroyedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridPreDestroyed', TData, TContext> {\r\n    /** Current state of the grid */\r\n    state: GridState;\r\n}\r\n\r\nexport interface ColumnContainerWidthChanged<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnContainerWidthChanged', TData, TContext> {} // not documented\r\nexport interface DisplayedColumnsWidthChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'displayedColumnsWidthChanged', TData, TContext> {} // not documented\r\nexport interface ColumnHoverChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnHoverChanged', TData, TContext> {} // not documented\r\nexport interface BodyHeightChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'bodyHeightChanged', TData, TContext> {} // not documented\r\n\r\n// this event is 'odd one out' as it should have properties for all the properties\r\n// in gridOptions that can be bound by the framework. for example, the gridOptions\r\n// has 'rowData', so this property should have 'rowData' also, so that when the row\r\n// data changes via the framework bound property, this event has that attribute set.\r\nexport interface ComponentStateChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'componentStateChanged', TData, TContext> {}\r\n\r\nexport interface ColumnPanelItemDragStartEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnPanelItemDragStart', TData, TContext> {\r\n    column: Column | ProvidedColumnGroup;\r\n}\r\n\r\nexport interface ColumnPanelItemDragEndEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnPanelItemDragEnd', TData, TContext> {}\r\n\r\nexport interface AgDragEvent<T extends AgEventType, TData = any, TContext = any>\r\n    extends AgGlobalEvent<T, TData, TContext> {\r\n    /** The DOM element that started the event. */\r\n    target: Element;\r\n}\r\n\r\nexport interface DragStartedEvent<TData = any, TContext = any> extends AgDragEvent<'dragStarted', TData, TContext> {}\r\n\r\nexport interface DragStoppedEvent<TData = any, TContext = any> extends AgDragEvent<'dragStopped', TData, TContext> {}\r\n\r\nexport interface DragCancelledEvent<TData = any, TContext = any>\r\n    extends AgDragEvent<'dragCancelled', TData, TContext> {}\r\n\r\n// For internal use only.\r\n// This event allows us to detect when other inputs in the same named group are changed, so for example we can ensure\r\n// that only one radio button in the same group is selected at any given time.\r\nexport interface CheckboxChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'checkboxChanged', TData, TContext> {\r\n    id: string;\r\n    name: string;\r\n    selected?: boolean;\r\n    previousValue: boolean | undefined;\r\n}\r\n\r\nexport interface GridSizeChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridSizeChanged', TData, TContext> {\r\n    /** The grid's DIV's clientWidth */\r\n    clientWidth: number;\r\n    /** The grid's DIV's clientHeight */\r\n    clientHeight: number;\r\n}\r\n\r\nexport interface PivotMaxColumnsExceededEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'pivotMaxColumnsExceeded', TData, TContext> {\r\n    message: string;\r\n}\r\n\r\nexport interface RowDragEvent<TData = any, TContext = any, T extends AgEventType = any>\r\n    extends AgGlobalEvent<T, TData, TContext> {\r\n    /** The row node getting dragged. Also the node that started the drag when multi-row dragging. */\r\n    node: IRowNode<TData>;\r\n    /** The list of nodes being dragged. */\r\n    nodes: IRowNode<TData>[];\r\n    /** The underlying mouse move event associated with the drag. */\r\n    event: MouseEvent;\r\n    /** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\r\n    eventPath?: EventTarget[];\r\n    /** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */\r\n    vDirection: 'up' | 'down' | null;\r\n    /** The row index the mouse is dragging over or -1 if over no row. */\r\n    overIndex: number;\r\n    /** The row node the mouse is dragging over or undefined if over no row. */\r\n    overNode?: IRowNode<TData>;\r\n    /** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\r\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\r\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\r\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\r\n     */\r\n    y: number;\r\n}\r\n\r\nexport interface RowDragEnterEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragEnter'> {}\r\n\r\nexport interface RowDragEndEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragEnd'> {}\r\n\r\nexport interface RowDragCancelEvent<TData = any, TContext = any>\r\n    extends RowDragEvent<TData, TContext, 'rowDragCancel'> {}\r\n\r\nexport interface RowDragMoveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragMove'> {}\r\n\r\nexport interface RowDragLeaveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext, 'rowDragLeave'> {}\r\n\r\nexport interface CutStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'cutStart', TData, TContext> {\r\n    source: 'api' | 'ui' | 'contextMenu';\r\n}\r\n\r\nexport interface CutEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'cutEnd', TData, TContext> {\r\n    source: 'api' | 'ui' | 'contextMenu';\r\n}\r\n\r\nexport interface PasteStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'pasteStart', TData, TContext> {\r\n    source: string;\r\n}\r\n\r\nexport interface PasteEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'pasteEnd', TData, TContext> {\r\n    source: string;\r\n}\r\n\r\nexport interface FillStartEvent<TData = any, TContext = any> extends AgGlobalEvent<'fillStart', TData, TContext> {}\r\n\r\nexport interface FillEndEvent<TData = any, TContext = any> extends AgGlobalEvent<'fillEnd', TData, TContext> {\r\n    initialRange: CellRange;\r\n    finalRange: CellRange;\r\n}\r\n\r\nexport interface CellSelectionDeleteStartEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'cellSelectionDeleteStart', TData, TContext> {\r\n    source: 'deleteKey';\r\n}\r\n\r\nexport interface CellSelectionDeleteEndEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'cellSelectionDeleteEnd', TData, TContext> {\r\n    source: 'deleteKey';\r\n}\r\n\r\nexport interface RangeDeleteStartEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rangeDeleteStart', TData, TContext> {\r\n    source: 'deleteKey';\r\n}\r\n\r\nexport interface RangeDeleteEndEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rangeDeleteEnd', TData, TContext> {\r\n    source: 'deleteKey';\r\n}\r\n\r\nexport interface UndoStartedEvent<TData = any, TContext = any> extends AgGlobalEvent<'undoStarted', TData, TContext> {\r\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\r\n    source: 'api' | 'ui';\r\n}\r\n\r\nexport interface UndoEndedEvent<TData = any, TContext = any> extends AgGlobalEvent<'undoEnded', TData, TContext> {\r\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\r\n    source: 'api' | 'ui';\r\n    /** `true` if any undo operations were performed. */\r\n    operationPerformed: boolean;\r\n}\r\n\r\nexport interface RedoStartedEvent<TData = any, TContext = any> extends AgGlobalEvent<'redoStarted', TData, TContext> {\r\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\r\n    source: 'api' | 'ui';\r\n}\r\n\r\nexport interface RedoEndedEvent<TData = any, TContext = any> extends AgGlobalEvent<'redoEnded', TData, TContext> {\r\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\r\n    source: 'api' | 'ui';\r\n    /** `true` if any redo operations were performed. */\r\n    operationPerformed: boolean;\r\n}\r\n\r\nexport interface ViewportChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'viewportChanged', TData, TContext> {\r\n    /** Index of the first rendered row */\r\n    firstRow: number;\r\n    /** Index of the last rendered row */\r\n    lastRow: number;\r\n}\r\n\r\nexport interface FirstDataRenderedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'firstDataRendered', TData, TContext> {\r\n    /** Index of the first rendered row */\r\n    firstRow: number;\r\n    /** Index of the last rendered row */\r\n    lastRow: number;\r\n}\r\n\r\nexport interface RangeSelectionChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rangeSelectionChanged', TData, TContext> {\r\n    id?: string;\r\n    /** True for the first change event, otherwise false */\r\n    started: boolean;\r\n    /** True for the last change event, otherwise false */\r\n    finished: boolean;\r\n}\r\n\r\nexport interface CellSelectionChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'cellSelectionChanged', TData, TContext> {\r\n    id?: string;\r\n    /** True for the first change event, otherwise false */\r\n    started: boolean;\r\n    /** True for the last change event, otherwise false */\r\n    finished: boolean;\r\n}\r\n\r\nexport interface ChartCreatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'chartCreated', TData, TContext> {\r\n    /** Id of the created chart. This can later be used to reference the chart via api methods. */\r\n    chartId: string;\r\n}\r\n/** @deprecated v32 Use ChartCreatedEvent instead */\r\nexport interface ChartCreated<TData = any, TContext = any> extends ChartCreatedEvent<TData, TContext> {}\r\n\r\nexport interface ChartRangeSelectionChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'chartRangeSelectionChanged', TData, TContext> {\r\n    /** Id of the effected chart. */\r\n    chartId: string;\r\n    /** Same as `chartId`. */\r\n    id: string;\r\n    /** New cellRange selected. */\r\n    cellRange: CellRangeParams;\r\n}\r\n/** @deprecated v32 Use ChartRangeSelectionChangedEvent instead */\r\nexport interface ChartRangeSelectionChanged<TData = any, TContext = any>\r\n    extends ChartRangeSelectionChangedEvent<TData, TContext> {}\r\n\r\nexport interface ChartOptionsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'chartOptionsChanged', TData, TContext> {\r\n    /** Id of the effected chart. */\r\n    chartId: string;\r\n    /** ChartType */\r\n    chartType: ChartType;\r\n    /** Chart theme name of currently selected theme. */\r\n    chartThemeName: string;\r\n    /** Chart options.  */\r\n    chartOptions: AgChartThemeOverrides;\r\n}\r\n/** @deprecated v32 Use ChartOptionsChangedEvent instead */\r\nexport interface ChartOptionsChanged<TData = any, TContext = any> extends ChartOptionsChangedEvent<TData, TContext> {}\r\n\r\nexport interface ChartDestroyedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'chartDestroyed', TData, TContext> {\r\n    /** Id of the effected chart. */\r\n    chartId: string;\r\n}\r\n\r\n/** @deprecated v32 Use ChartDestroyedEvent instead */\r\nexport interface ChartDestroyed<TData = any, TContext = any> extends ChartDestroyedEvent<TData, TContext> {}\r\n\r\nexport interface ColumnGroupOpenedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnGroupOpened', TData, TContext> {\r\n    columnGroup?: ProvidedColumnGroup;\r\n    columnGroups: ProvidedColumnGroup[];\r\n}\r\n\r\nexport type ScrollDirection = 'horizontal' | 'vertical';\r\n\r\ninterface BaseBodyScrollEvent<T extends AgEventType, TData = any, TContext = any>\r\n    extends AgGlobalEvent<T, TData, TContext> {\r\n    direction: ScrollDirection;\r\n    left: number;\r\n    top: number;\r\n}\r\nexport interface BodyScrollEvent<TData = any, TContext = any>\r\n    extends BaseBodyScrollEvent<'bodyScroll', TData, TContext> {}\r\n\r\nexport interface BodyScrollEndEvent<TData = any, TContext = any>\r\n    extends BaseBodyScrollEvent<'bodyScrollEnd', TData, TContext> {}\r\n\r\ninterface TooltipEvent<T extends 'tooltipShow' | 'tooltipHide', TData = any, TContext = any>\r\n    extends AgGlobalEvent<T, TData, TContext> {\r\n    parentGui: HTMLElement;\r\n}\r\nexport interface TooltipShowEvent<TData = any, TContext = any> extends TooltipEvent<'tooltipShow', TData, TContext> {\r\n    tooltipGui: HTMLElement;\r\n}\r\n\r\nexport interface TooltipHideEvent<TData = any, TContext = any> extends TooltipEvent<'tooltipHide', TData, TContext> {}\r\n\r\nexport interface PaginationPixelOffsetChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'paginationPixelOffsetChanged', TData, TContext> {}\r\n\r\nexport interface StickyTopOffsetChangedEvent extends AgEvent<'stickyTopOffsetChanged'> {\r\n    offset: number;\r\n}\r\n\r\nexport interface CommonCellFocusParams {\r\n    /** Row index of the focused cell */\r\n    rowIndex: number | null;\r\n    /** Column of the focused cell */\r\n    column: Column | string | null;\r\n    /** either 'top', 'bottom' or null / undefined (if not pinned) */\r\n    rowPinned: RowPinnedType;\r\n    /** Whether the cell a full width cell or a regular cell */\r\n    isFullWidthCell?: boolean;\r\n}\r\n\r\nexport interface CellFocusClearedParams extends CommonCellFocusParams {}\r\n\r\nexport interface CellFocusedParams extends CommonCellFocusParams {\r\n    /** Whether browser focus is also set (false when editing) */\r\n    forceBrowserFocus?: boolean;\r\n    /** When `forceBrowserFocus` is `true`, should scroll be prevented */\r\n    preventScrollOnBrowserFocus?: boolean;\r\n}\r\n\r\nexport interface HeaderFocusedParams {\r\n    column: Column | ColumnGroup;\r\n}\r\n\r\nexport interface HeaderFocusedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'headerFocused', TData, TContext>,\r\n        HeaderFocusedParams {}\r\n\r\nexport interface CellFocusClearedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'cellFocusCleared', TData, TContext>,\r\n        CellFocusClearedParams {}\r\n\r\n// this does not extent CellEvent as the focus service doesn't keep a reference to\r\n// the rowNode.\r\nexport interface CellFocusedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'cellFocused', TData, TContext>,\r\n        CellFocusedParams {}\r\n\r\nexport interface FullWidthRowFocusedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'fullWidthRowFocused', TData, TContext>,\r\n        CellFocusedParams {\r\n    fromBelow: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated v32 Please use `ExpandOrCollapseAllEvent` instead.\r\n */\r\nexport interface ExpandCollapseAllEvent<TData = any, TContext = any>\r\n    extends ExpandOrCollapseAllEvent<TData, TContext> {}\r\nexport interface ExpandOrCollapseAllEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'expandOrCollapseAll', TData, TContext> {\r\n    source: string;\r\n}\r\n\r\n/**---------------*/\r\n/** COLUMN EVENTS */\r\n/**---------------*/\r\n\r\nexport type ColumnEventType =\r\n    | 'sizeColumnsToFit'\r\n    | 'autosizeColumns'\r\n    | 'autosizeColumnHeaderHeight'\r\n    | 'alignedGridChanged'\r\n    | 'filterChanged'\r\n    | 'filterDestroyed'\r\n    | 'gridOptionsChanged'\r\n    | 'gridInitializing'\r\n    | 'toolPanelDragAndDrop'\r\n    | 'toolPanelUi'\r\n    | 'uiColumnMoved'\r\n    | 'uiColumnResized'\r\n    | 'uiColumnDragged'\r\n    | 'uiColumnExpanded'\r\n    | 'uiColumnSorted'\r\n    | 'contextMenu'\r\n    | 'columnMenu'\r\n    | 'rowModelUpdated'\r\n    | 'rowDataUpdated'\r\n    | 'api'\r\n    | 'flex'\r\n    | 'pivotChart'\r\n    | 'columnRowGroupChanged'\r\n    | 'cellDataTypeInferred'\r\n    | 'viewportSizeFeature';\r\n\r\nexport interface ColumnEvent<T extends AgEventType | ColumnEventName = any, TData = any, TContext = any>\r\n    extends AgGridEvent<TData, TContext, T> {\r\n    /** The impacted column, only set if action was on one column */\r\n    column: Column | null;\r\n    /** List of all impacted columns */\r\n    columns: Column[] | null;\r\n    /** String describing where the event is coming from */\r\n    source: ColumnEventType;\r\n}\r\n\r\nexport interface ColumnResizedEvent<TData = any, TContext = any> extends ColumnEvent<'columnResized', TData, TContext> {\r\n    /** Set to true for last event in a sequence of move events */\r\n    finished: boolean;\r\n    /** Any columns resized due to flex */\r\n    flexColumns: Column[] | null;\r\n}\r\n\r\nexport interface ColumnPivotChangedEvent<TData = any, TContext = any>\r\n    extends ColumnEvent<'columnPivotChanged', TData, TContext> {}\r\n\r\nexport interface ColumnRowGroupChangedEvent<TData = any, TContext = any>\r\n    extends ColumnEvent<'columnRowGroupChanged', TData, TContext> {}\r\n\r\nexport interface ColumnValueChangedEvent<TData = any, TContext = any>\r\n    extends ColumnEvent<'columnValueChanged', TData, TContext> {}\r\n\r\nexport interface ColumnMovedEvent<TData = any, TContext = any> extends ColumnEvent<'columnMoved', TData, TContext> {\r\n    /** The position the column was moved to */\r\n    toIndex?: number;\r\n    /** `True` when the column has finished moving. */\r\n    finished: boolean;\r\n}\r\n\r\nexport interface ColumnVisibleEvent<TData = any, TContext = any> extends ColumnEvent<'columnVisible', TData, TContext> {\r\n    /** True if column was set to visible, false if set to hide, undefined if in a single call some columns were shown while others hidden */\r\n    visible?: boolean;\r\n}\r\n\r\nexport interface ColumnPinnedEvent<TData = any, TContext = any> extends ColumnEvent<'columnPinned', TData, TContext> {\r\n    /** Either 'left', 'right', or null (it not pinned) */\r\n    pinned: ColumnPinnedType;\r\n}\r\n\r\nexport interface ColumnHeaderMouseOverEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnHeaderMouseOver', TData, TContext> {\r\n    /** Column or column-group related to the header that triggered the event */\r\n    column: Column | ProvidedColumnGroup;\r\n}\r\n\r\nexport interface ColumnHeaderMouseLeaveEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnHeaderMouseLeave', TData, TContext> {\r\n    /** Column or column-group related to the header that triggered the event */\r\n    column: Column | ProvidedColumnGroup;\r\n}\r\n\r\nexport interface ColumnHeaderClickedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnHeaderClicked', TData, TContext> {\r\n    /** Column or column-group related to the header that triggered the event */\r\n    column: Column | ProvidedColumnGroup;\r\n}\r\n\r\nexport interface ColumnHeaderContextMenuEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnHeaderContextMenu', TData, TContext> {\r\n    /** Column or column-group related to the header that triggered the event */\r\n    column: Column | ProvidedColumnGroup;\r\n}\r\n\r\n/**-------------------*/\r\n/** VISIBILITY EVENTS */\r\n/**-------------------*/\r\nexport interface ContextMenuVisibleChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'contextMenuVisibleChanged', TData, TContext> {\r\n    /** True if now visible; false if now hidden. */\r\n    visible: boolean;\r\n    /** Source of the visibility status change. */\r\n    source: 'api' | 'ui';\r\n}\r\n\r\nexport interface AdvancedFilterBuilderVisibleChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'advancedFilterBuilderVisibleChanged', TData, TContext> {\r\n    /** True if now visible; false if now hidden. */\r\n    visible: boolean;\r\n    /** Source of the visibility status change. */\r\n    source: 'api' | 'ui';\r\n}\r\n\r\nexport interface ToolPanelVisibleChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'toolPanelVisibleChanged', TData, TContext> {\r\n    /** True if now visible; false if now hidden. */\r\n    visible: boolean;\r\n    source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api';\r\n    /** Key of tool panel. */\r\n    key: string;\r\n    /** True if switching between tool panels. False if showing/hiding. */\r\n    switchingToolPanel: boolean;\r\n}\r\n\r\nexport interface ColumnMenuVisibleChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnMenuVisibleChanged', TData, TContext> {\r\n    /** True if now visible; false if now hidden. */\r\n    visible: boolean;\r\n    /** True if switching between tabs. False if showing/hiding. Only applies to legacy tabbed menu. */\r\n    switchingTab: boolean;\r\n    /**\r\n     * Currently displayed menu/tab.\r\n     * If filter launched from floating filter, will be `'floatingFilter'`.\r\n     * If using `columnMenu = 'new'` (default behaviour), will be `'columnMenu'` for the column menu,\r\n     * `'columnFilter'` for the column filter, and `'columnChooser'` for the column chooser.\r\n     * If using AG Grid Enterprise and `columnMenu = 'legacy'`,\r\n     * will be the tab `'generalMenuTab'`, `'filterMenuTab'` or `'columnsMenuTab'`.\r\n     * If using AG Grid Community and `columnMenu = 'legacy'`, will be `'columnMenu'`.\r\n     */\r\n    key:\r\n        | 'generalMenuTab'\r\n        | 'filterMenuTab'\r\n        | 'columnsMenuTab'\r\n        | 'columnMenu'\r\n        | 'columnFilter'\r\n        | 'floatingFilter'\r\n        | 'columnChooser';\r\n    /**\r\n     * Column the menu is opened for. Will be `null` if not launched from a column\r\n     * (e.g. column chooser from the API, or column menu via right-click on a column group or empty header).\r\n     */\r\n    column: Column | null;\r\n    /**\r\n     * Column group the menu is opened for if launched from right-click on a column group\r\n     */\r\n    columnGroup?: ProvidedColumnGroup | null;\r\n}\r\n\r\n/**------------*/\r\n/** ROW EVENTS */\r\n/**------------*/\r\ninterface BaseRowEvent<T extends AgEventType, TData, TContext> extends AgGlobalEvent<T, TData, TContext> {\r\n    /** The row node. */\r\n    node: IRowNode<TData>;\r\n    /** The visible row index for the row */\r\n    rowIndex: number | null;\r\n    /** Either 'top', 'bottom' or null / undefined (if not set) */\r\n    rowPinned: RowPinnedType;\r\n    /** If event was due to browser event (eg click), this is the browser event */\r\n    event?: Event | null;\r\n    /** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\r\n    eventPath?: EventTarget[];\r\n}\r\n\r\nexport interface RowEvent<T extends AgEventType, TData = any, TContext = any> extends BaseRowEvent<T, TData, TContext> {\r\n    /** The user provided data for the row. Data is `undefined` for row groups. */\r\n    data: TData | undefined;\r\n}\r\n\r\n/** Base interface for row events that always have data set. */\r\ninterface RowWithDataEvent<T extends AgEventType, TData = any, TContext = any>\r\n    extends BaseRowEvent<T, TData, TContext> {\r\n    /** The user provided data for the row. */\r\n    data: TData;\r\n}\r\n\r\nexport interface RowGroupOpenedEvent<TData = any, TContext = any> extends RowEvent<'rowGroupOpened', TData, TContext> {\r\n    /** True if the group is expanded. */\r\n    expanded: boolean;\r\n}\r\n\r\nexport interface RowValueChangedEvent<TData = any, TContext = any>\r\n    extends RowEvent<'rowValueChanged', TData, TContext> {}\r\n\r\nexport interface RowSelectedEvent<TData = any, TContext = any> extends RowEvent<'rowSelected', TData, TContext> {\r\n    source: SelectionEventSourceType;\r\n}\r\n\r\nexport interface VirtualRowRemovedEvent<TData = any, TContext = any>\r\n    extends RowEvent<'virtualRowRemoved', TData, TContext> {}\r\n\r\nexport interface RowClickedEvent<TData = any, TContext = any> extends RowEvent<'rowClicked', TData, TContext> {}\r\n\r\nexport interface RowDoubleClickedEvent<TData = any, TContext = any>\r\n    extends RowEvent<'rowDoubleClicked', TData, TContext> {}\r\n\r\nexport interface RowEditingStartedEvent<TData = any, TContext = any>\r\n    extends RowEvent<'rowEditingStarted', TData, TContext> {}\r\n\r\nexport interface RowEditingStoppedEvent<TData = any, TContext = any>\r\n    extends RowEvent<'rowEditingStopped', TData, TContext> {}\r\n\r\nexport interface FullWidthCellKeyDownEvent<TData = any, TContext = any>\r\n    extends RowEvent<'cellKeyDown', TData, TContext> {}\r\n\r\n/**------------*/\r\n\r\n/** CELL EVENTS */\r\n/**------------*/\r\nexport interface CellEvent<T extends AgEventType, TData = any, TValue = any> extends RowEvent<T, TData> {\r\n    column: Column<TValue>;\r\n    colDef: ColDef<TData, TValue>;\r\n    /** The value for the cell if available otherwise undefined. */\r\n    value: TValue | null | undefined;\r\n}\r\n\r\n/** Use for cell events that will always have a data property. */\r\ninterface CellWithDataEvent<T extends AgEventType, TData = any, TValue = any> extends RowWithDataEvent<T, TData> {\r\n    column: Column<TValue>;\r\n    colDef: ColDef<TData, TValue>;\r\n    /** The value for the cell */\r\n    value: TValue | null | undefined;\r\n}\r\n\r\nexport interface CellKeyDownEvent<TData = any, TValue = any> extends CellEvent<'cellKeyDown', TData, TValue> {}\r\n\r\nexport interface CellClickedEvent<TData = any, TValue = any> extends CellEvent<'cellClicked', TData, TValue> {}\r\n\r\nexport interface CellMouseDownEvent<TData = any, TValue = any> extends CellEvent<'cellMouseDown', TData, TValue> {}\r\n\r\nexport interface CellDoubleClickedEvent<TData = any, TValue = any>\r\n    extends CellEvent<'cellDoubleClicked', TData, TValue> {}\r\n\r\nexport interface CellMouseOverEvent<TData = any, TValue = any> extends CellEvent<'cellMouseOver', TData, TValue> {}\r\n\r\nexport interface CellMouseOutEvent<TData = any, TValue = any> extends CellEvent<'cellMouseOut', TData, TValue> {}\r\n\r\nexport interface CellContextMenuEvent<TData = any, TValue = any> extends CellEvent<'cellContextMenu', TData, TValue> {}\r\n\r\nexport interface CellEditingStartedEvent<TData = any, TValue = any>\r\n    extends CellEvent<'cellEditingStarted', TData, TValue> {}\r\n\r\nexport interface CellEditingStoppedEvent<TData = any, TValue = any>\r\n    extends CellEvent<'cellEditingStopped', TData, TValue> {\r\n    /** The old value before editing */\r\n    oldValue: TValue | null | undefined;\r\n    /** The new value after editing */\r\n    newValue: TValue | null | undefined;\r\n    /** Property indicating if the value of the editor has changed */\r\n    valueChanged: boolean;\r\n}\r\n\r\nexport interface CellValueChangedEvent<TData = any, TValue = any>\r\n    extends CellWithDataEvent<'cellValueChanged', TData, TValue> {\r\n    oldValue: TValue | null | undefined;\r\n    newValue: TValue | null | undefined;\r\n    source: string | undefined;\r\n}\r\n\r\nexport interface CellEditRequestEvent<TData = any, TValue = any>\r\n    extends CellWithDataEvent<'cellEditRequest', TData, TValue> {\r\n    oldValue: TValue | null | undefined;\r\n    newValue: TValue | null | undefined;\r\n    source: string | undefined;\r\n}\r\n\r\nexport interface AsyncTransactionsFlushedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'asyncTransactionsFlushed', TData, TContext> {\r\n    /**\r\n     * Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\r\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\r\n     */\r\n    results: (RowNodeTransaction<TData> | ServerSideTransactionResult<TData>)[];\r\n}\r\n/** @deprecated v32 Use AsyncTransactionsFlushedEvent */\r\nexport interface AsyncTransactionsFlushed<TData = any, TContext = any>\r\n    extends AsyncTransactionsFlushedEvent<TData, TContext> {}\r\n\r\nexport interface StoreRefreshedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'storeRefreshed', TData, TContext> {\r\n    /** The route of the store which has finished refreshing, undefined if root level */\r\n    route?: string[];\r\n}\r\n\r\nexport interface StateUpdatedEvent<TData = any, TContext = any> extends AgGlobalEvent<'stateUpdated', TData, TContext> {\r\n    /** Which parts of the state triggered the update, or `gridInitializing` when the state has been created during grid initialization */\r\n    sources: (keyof GridState | 'gridInitializing')[];\r\n    /** The updated state */\r\n    state: GridState;\r\n}\r\n\r\nexport interface ScrollVisibilityChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'scrollVisibilityChanged', TData, TContext> {} // not documented\r\n\r\nexport interface ScrollOverflowChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'scrollGapChanged', TData, TContext> {} // not documented\r\n\r\nexport interface StoreUpdatedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'storeUpdated', TData, TContext> {} // not documented\r\n\r\nexport interface LeftPinnedWidthChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'leftPinnedWidthChanged', TData, TContext> {} // not documented\r\nexport interface RightPinnedWidthChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rightPinnedWidthChanged', TData, TContext> {} // not documented\r\n\r\nexport interface RowContainerHeightChanged<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rowContainerHeightChanged', TData, TContext> {} // not documented\r\n\r\n/**-----------------*/\r\n/** Internal EVENTS */\r\n/**-----------------*/\r\n\r\n// not documented\r\nexport interface FlashCellsEvent<TData = any, TContext = any> extends AgGlobalEvent<'flashCells', TData, TContext> {\r\n    cells: any;\r\n}\r\nexport interface DisplayedRowsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'displayedRowsChanged', TData, TContext> {\r\n    afterScroll: boolean;\r\n} // not documented\r\n\r\nexport interface CssVariablesChanged<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridStylesChanged', TData, TContext> {\r\n    themeChanged?: boolean;\r\n    headerHeightChanged?: boolean;\r\n    rowHeightChanged?: boolean;\r\n    listItemHeightChanged?: boolean;\r\n    rowBorderWidthChanged?: boolean;\r\n} // not documented\r\n\r\nexport interface AdvancedFilterEnabledChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'advancedFilterEnabledChanged', TData, TContext> {\r\n    enabled: boolean;\r\n}\r\n\r\nexport interface DataTypesInferredEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'dataTypesInferred', TData, TContext> {}\r\n\r\nexport interface FieldValueEvent<T extends AgEventType = 'fieldValueChanged', TData = any, TContext = any>\r\n    extends AgGlobalEvent<T, TData, TContext> {\r\n    value: any;\r\n}\r\nexport interface FieldPickerValueSelectedEvent<TData = any, TContext = any>\r\n    extends FieldValueEvent<'fieldPickerValueSelected', TData, TContext> {\r\n    fromEnterKey: boolean;\r\n}\r\nexport interface RichSelectListRowSelectedEvent<TData = any, TContext = any>\r\n    extends FieldValueEvent<'richSelectListRowSelected', TData, TContext> {\r\n    fromEnterKey: boolean;\r\n}\r\n\r\nexport interface AlignedGridColumnEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'alignedGridColumn', TData, TContext> {\r\n    event: ColumnEvent<any> | ColumnGroupOpenedEvent;\r\n}\r\n\r\nexport interface AlignedGridScrollEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'alignedGridScroll', TData, TContext> {\r\n    event: BodyScrollEvent;\r\n}\r\n\r\nexport interface GridOptionsChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridOptionsChanged', TData, TContext> {\r\n    options: GridOptions;\r\n}\r\n\r\nexport interface ScrollbarWidthChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'scrollbarWidthChanged', TData, TContext> {}\r\nexport interface KeyShortcutChangedCellStartEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'keyShortcutChangedCellStart', TData, TContext> {}\r\nexport interface KeyShortcutChangedCellEndEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'keyShortcutChangedCellEnd', TData, TContext> {}\r\nexport interface HeightScaleChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'heightScaleChanged', TData, TContext> {}\r\nexport interface SuppressMovableColumnsEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'suppressMovableColumns', TData, TContext> {}\r\nexport interface SuppressMenuHideEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'suppressMenuHide', TData, TContext> {}\r\nexport interface SuppressFieldDotNotationEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'suppressFieldDotNotation', TData, TContext> {}\r\nexport interface ColumnContainerWidthChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnContainerWidthChanged', TData, TContext> {}\r\nexport interface RowContainerHeightChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rowContainerHeightChanged', TData, TContext> {}\r\nexport interface HeaderHeightChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'headerHeightChanged', TData, TContext> {}\r\nexport interface ColumnHeaderHeightChangedEvent<TData = any, TContext = any>\r\n    extends ColumnEvent<'columnHeaderHeightChanged', TData, TContext> {}\r\nexport interface ColumnGroupHeaderHeightChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'columnGroupHeaderHeightChanged', TData, TContext> {\r\n    columnGroup: ColumnGroup | null;\r\n    source: 'autosizeColumnGroupHeaderHeight';\r\n}\r\nexport interface GridStylesChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'gridStylesChanged', TData, TContext> {}\r\nexport interface RowCountReadyEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'rowCountReady', TData, TContext> {}\r\nexport interface FieldValueChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'fieldValueChanged', TData, TContext> {}\r\nexport interface FieldPickerValueSelectedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'fieldPickerValueSelected', TData, TContext> {}\r\nexport interface RichSelectListRowSelectedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'richSelectListRowSelected', TData, TContext> {}\r\nexport interface SideBarUpdatedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'sideBarUpdated', TData, TContext> {}\r\nexport interface ChartTitleEditEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'chartTitleEdit', TData, TContext> {}\r\nexport interface RecalculateRowBoundsEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'recalculateRowBounds', TData, TContext> {}\r\nexport interface StickyTopOffsetChangedEvent<TData = any, TContext = any>\r\n    extends AgGlobalEvent<'stickyTopOffsetChanged', TData, TContext> {}\r\n", "import type { GridOptions } from './entities/gridOptions';\r\n\r\n// Leave untyped. so it can be inferred. Might be possible to type in the future with NoInfer<T>\r\nexport const GRID_OPTION_DEFAULTS = {\r\n    suppressContextMenu: false,\r\n    preventDefaultOnContextMenu: false,\r\n    allowContextMenuWithControlKey: false,\r\n    suppressMenuHide: true,\r\n    enableBrowserTooltips: false,\r\n    tooltipTrigger: 'hover',\r\n    tooltipShowDelay: 2000,\r\n    tooltipHideDelay: 10000,\r\n    tooltipMouseTrack: false,\r\n    tooltipShowMode: 'standard',\r\n    tooltipInteraction: false,\r\n    copyHeadersToClipboard: false,\r\n    copyGroupHeadersToClipboard: false,\r\n    clipboardDelimiter: '\\t',\r\n    suppressCopyRowsToClipboard: false,\r\n    suppressCopySingleCellRanges: false,\r\n    suppressLastEmptyLineOnPaste: false,\r\n    suppressClipboardPaste: false,\r\n    suppressClipboardApi: false,\r\n    suppressCutToClipboard: false,\r\n    maintainColumnOrder: false,\r\n    enableStrictPivotColumnOrder: false,\r\n    suppressFieldDotNotation: false,\r\n    allowDragFromColumnsToolPanel: false,\r\n    suppressMovableColumns: false,\r\n    suppressColumnMoveAnimation: false,\r\n    suppressMoveWhenColumnDragging: false,\r\n    suppressDragLeaveHidesColumns: false,\r\n    suppressRowGroupHidesColumns: false,\r\n    suppressAutoSize: false,\r\n    autoSizePadding: 20,\r\n    skipHeaderOnAutoSize: false,\r\n    singleClickEdit: false,\r\n    suppressClickEdit: false,\r\n    readOnlyEdit: false,\r\n    stopEditingWhenCellsLoseFocus: false,\r\n    enterNavigatesVertically: false,\r\n    enterNavigatesVerticallyAfterEdit: false,\r\n    enableCellEditingOnBackspace: false,\r\n    undoRedoCellEditing: false,\r\n    undoRedoCellEditingLimit: 10,\r\n    suppressCsvExport: false,\r\n    suppressExcelExport: false,\r\n    cacheQuickFilter: false,\r\n    includeHiddenColumnsInQuickFilter: false,\r\n    excludeChildrenWhenTreeDataFiltering: false,\r\n    enableAdvancedFilter: false,\r\n    includeHiddenColumnsInAdvancedFilter: false,\r\n    enableCharts: false,\r\n    masterDetail: false,\r\n    keepDetailRows: false,\r\n    keepDetailRowsCount: 10,\r\n    detailRowAutoHeight: false,\r\n    tabIndex: 0,\r\n    rowBuffer: 10,\r\n    valueCache: false,\r\n    valueCacheNeverExpires: false,\r\n    enableCellExpressions: false,\r\n    suppressTouch: false,\r\n    suppressFocusAfterRefresh: false,\r\n    suppressBrowserResizeObserver: false,\r\n    suppressPropertyNamesCheck: false,\r\n    suppressChangeDetection: false,\r\n    debug: false,\r\n    suppressLoadingOverlay: false,\r\n    suppressNoRowsOverlay: false,\r\n    pagination: false,\r\n    paginationPageSize: 100,\r\n    paginationPageSizeSelector: true,\r\n    paginationAutoPageSize: false,\r\n    paginateChildRows: false,\r\n    suppressPaginationPanel: false,\r\n    pivotMode: false,\r\n    pivotPanelShow: 'never',\r\n    pivotDefaultExpanded: 0,\r\n    pivotSuppressAutoColumn: false,\r\n    suppressExpandablePivotGroups: false,\r\n    functionsReadOnly: false,\r\n    suppressAggFuncInHeader: false,\r\n    alwaysAggregateAtRootLevel: false,\r\n    aggregateOnlyChangedColumns: false,\r\n    suppressAggFilteredOnly: false,\r\n    removePivotHeaderRowWhenSingleValueColumn: false,\r\n    animateRows: true,\r\n    cellFlashDuration: 500,\r\n    cellFadeDuration: 1000,\r\n    allowShowChangeAfterFilter: false,\r\n    domLayout: 'normal',\r\n    ensureDomOrder: false,\r\n    enableRtl: false,\r\n    suppressColumnVirtualisation: false,\r\n    suppressMaxRenderedRowRestriction: false,\r\n    suppressRowVirtualisation: false,\r\n    rowDragManaged: false,\r\n    suppressRowDrag: false,\r\n    suppressMoveWhenRowDragging: false,\r\n    rowDragEntireRow: false,\r\n    rowDragMultiRow: false,\r\n    embedFullWidthRows: false,\r\n    groupDisplayType: 'singleColumn',\r\n    groupDefaultExpanded: 0,\r\n    groupMaintainOrder: false,\r\n    groupSelectsChildren: false,\r\n    groupSuppressBlankHeader: false,\r\n    groupSelectsFiltered: false,\r\n    showOpenedGroup: false,\r\n    groupRemoveSingleChildren: false,\r\n    groupRemoveLowestSingleChildren: false,\r\n    groupHideOpenParents: false,\r\n    groupAllowUnbalanced: false,\r\n    rowGroupPanelShow: 'never',\r\n    suppressMakeColumnVisibleAfterUnGroup: false,\r\n    treeData: false,\r\n    rowGroupPanelSuppressSort: false,\r\n    suppressGroupRowsSticky: false,\r\n    rowModelType: 'clientSide',\r\n    asyncTransactionWaitMillis: 50,\r\n    suppressModelUpdateAfterUpdateTransaction: false,\r\n    cacheOverflowSize: 1,\r\n    infiniteInitialRowCount: 1,\r\n    serverSideInitialRowCount: 1,\r\n    cacheBlockSize: 100,\r\n    maxBlocksInCache: -1,\r\n    maxConcurrentDatasourceRequests: 2,\r\n    blockLoadDebounceMillis: 0,\r\n    purgeClosedRowNodes: false,\r\n    serverSideSortAllLevels: false,\r\n    serverSideOnlyRefreshFilteredGroups: false,\r\n    serverSidePivotResultFieldSeparator: '_',\r\n    viewportRowModelPageSize: 5,\r\n    viewportRowModelBufferSize: 5,\r\n    alwaysShowHorizontalScroll: false,\r\n    alwaysShowVerticalScroll: false,\r\n    debounceVerticalScrollbar: false,\r\n    suppressHorizontalScroll: false,\r\n    suppressScrollOnNewData: false,\r\n    suppressScrollWhenPopupsAreOpen: false,\r\n    suppressAnimationFrame: false,\r\n    suppressMiddleClickScrolls: false,\r\n    suppressPreventDefaultOnMouseWheel: false,\r\n    rowMultiSelectWithClick: false,\r\n    suppressRowDeselection: false,\r\n    suppressRowClickSelection: false,\r\n    suppressCellFocus: false,\r\n    suppressHeaderFocus: false,\r\n    suppressMultiRangeSelection: false,\r\n    enableCellTextSelection: false,\r\n    enableRangeSelection: false,\r\n    enableRangeHandle: false,\r\n    enableFillHandle: false,\r\n    fillHandleDirection: 'xy',\r\n    suppressClearOnFillReduction: false,\r\n    accentedSort: false,\r\n    unSortIcon: false,\r\n    suppressMultiSort: false,\r\n    alwaysMultiSort: false,\r\n    suppressMaintainUnsortedOrder: false,\r\n    suppressRowHoverHighlight: false,\r\n    suppressRowTransform: false,\r\n    columnHoverHighlight: false,\r\n    deltaSort: false,\r\n    enableGroupEdit: false,\r\n    groupLockGroupColumns: 0,\r\n    serverSideEnableClientSideSort: false,\r\n    suppressServerSideFullWidthLoadingRow: false,\r\n    pivotMaxGeneratedColumns: -1,\r\n    columnMenu: 'new',\r\n    reactiveCustomComponents: true,\r\n    suppressSetFilterByDefault: false,\r\n} as const;\r\n/**\r\n * Used simply to type check the default grid options.\r\n * Done here to allow inference of the above type, for gridOptionsService.get to infer where defaults exist.\r\n */\r\ntype AllValidKeys = Exclude<keyof typeof GRID_OPTION_DEFAULTS, keyof GridOptions> extends never ? true : false;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst allValidKeys: AllValidKeys = true;\r\n\r\n// validate each default value is the right type\r\ntype AllTypesValid = {\r\n    [K in keyof typeof GRID_OPTION_DEFAULTS]: (typeof GRID_OPTION_DEFAULTS)[K] extends NonNullable<GridOptions[K]>\r\n        ? 'V'\r\n        : 'X';\r\n}[keyof typeof GRID_OPTION_DEFAULTS];\r\ntype AllTypeValid = Exclude<AllTypesValid, 'V'> extends never ? 'V' : false;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst allValidValues: AllTypeValid = 'V';\r\n\r\nexport type GridOptionOrDefault<K extends keyof GridOptions> = K extends keyof typeof GRID_OPTION_DEFAULTS\r\n    ? NonNullable<GridOptions[K]>\r\n    : GridOptions[K];\r\n", "import type { GridApi } from './api/gridApi';\r\nimport type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { BeanCollection } from './context/context';\r\nimport type { GridOptions } from './entities/gridOptions';\r\nimport type { AgEventType } from './eventTypes';\r\nimport type { AgEvent } from './events';\r\nimport { ALWAYS_SYNC_GLOBAL_EVENTS } from './events';\r\nimport type { GridOptionOrDefault } from './gridOptionsDefault';\r\nimport { GRID_OPTION_DEFAULTS } from './gridOptionsDefault';\r\nimport { _getCallbackForEvent } from './gridOptionsUtils';\r\nimport type { AgGridCommon, WithoutGridCommon } from './interfaces/iCommon';\r\nimport type { ModuleName, ValidationModuleName } from './interfaces/iModule';\r\nimport type { RowModelType } from './interfaces/iRowModel';\r\nimport { LocalEventService } from './localEventService';\r\nimport { _areModulesGridScoped, _isModuleRegistered } from './modules/moduleRegistry';\r\nimport type { AnyGridOptions } from './propertyKeys';\r\nimport { _logIfDebug } from './utils/function';\r\nimport { _exists } from './utils/generic';\r\nimport type { MissingModuleErrors } from './validation/errorMessages/errorText';\r\nimport { _error } from './validation/logging';\r\nimport type { ValidationService } from './validation/validationService';\r\n\r\ntype GetKeys<T, U> = {\r\n    [K in keyof T]: T[K] extends U | undefined ? K : never;\r\n}[keyof T];\r\n\r\n/**\r\n * Get all the GridOption properties that strictly contain the provided type.\r\n * Does not include `any` properties.\r\n */\r\nexport type KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\r\n\r\ntype BooleanProps = Exclude<KeysOfType<boolean>, AnyGridOptions>;\r\ntype NoArgFuncs = KeysOfType<() => any>;\r\ntype AnyArgFuncs = KeysOfType<(arg: 'NO_MATCH') => any>;\r\ntype CallbackProps = Exclude<KeysOfType<(params: AgGridCommon<any, any>) => any>, NoArgFuncs | AnyArgFuncs>;\r\n\r\nexport type ExtractParamsFromCallback<TCallback> = TCallback extends (params: infer PA) => any ? PA : never;\r\nexport type ExtractReturnTypeFromCallback<TCallback> = TCallback extends (params: AgGridCommon<any, any>) => infer RT\r\n    ? RT\r\n    : never;\r\ntype WrappedCallback<K extends CallbackProps, OriginalCallback extends GridOptions[K]> =\r\n    | undefined\r\n    | ((\r\n          params: WithoutGridCommon<ExtractParamsFromCallback<OriginalCallback>>\r\n      ) => ExtractReturnTypeFromCallback<OriginalCallback>);\r\nexport interface PropertyChangeSet {\r\n    /** Unique id which can be used to link changes of multiple properties that were updated together.\r\n     * i.e a user updated multiple properties at the same time.\r\n     */\r\n    id: number;\r\n    /** All the properties that have been updated in this change set */\r\n    properties: (keyof GridOptions)[];\r\n}\r\nexport type PropertyChangedSource = 'api' | 'gridOptionsUpdated';\r\nexport interface PropertyChangedEvent extends AgEvent {\r\n    type: 'gridPropertyChanged';\r\n    changeSet: PropertyChangeSet | undefined;\r\n    source: PropertyChangedSource;\r\n}\r\n\r\n/**\r\n * For boolean properties the changed value will have been coerced to a boolean, so we do not want the type to include the undefined value.\r\n */\r\ntype GridOptionsOrBooleanCoercedValue<K extends keyof GridOptions> = K extends BooleanProps ? boolean : GridOptions[K];\r\n\r\nexport interface PropertyValueChangedEvent<K extends keyof GridOptions> extends AgEvent {\r\n    type: K;\r\n    changeSet: PropertyChangeSet | undefined;\r\n    currentValue: GridOptionsOrBooleanCoercedValue<K>;\r\n    previousValue: GridOptionsOrBooleanCoercedValue<K>;\r\n    source: PropertyChangedSource;\r\n}\r\n\r\nexport type PropertyChangedListener = (event: PropertyChangedEvent) => void;\r\nexport type PropertyValueChangedListener<K extends keyof GridOptions> = (event: PropertyValueChangedEvent<K>) => void;\r\n\r\nlet changeSetId = 0;\r\n\r\n// this is added to the main DOM element\r\nlet gridInstanceSequence = 0;\r\n\r\nexport class GridOptionsService extends BeanStub implements NamedBean {\r\n    beanName = 'gos' as const;\r\n\r\n    private gridOptions: GridOptions;\r\n    private validation?: ValidationService;\r\n    private api: GridApi;\r\n    private gridId: string;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.gridOptions = beans.gridOptions;\r\n        this.validation = beans.validation;\r\n        this.api = beans.gridApi;\r\n        this.gridId = beans.context.getGridId();\r\n    }\r\n    private domDataKey = '__AG_' + Math.random().toString();\r\n\r\n    /** This is only used for the main DOM element */\r\n    public readonly gridInstanceId = gridInstanceSequence++;\r\n\r\n    // This is quicker then having code call gridOptionsService.get('context')\r\n    private get gridOptionsContext() {\r\n        return this.gridOptions['context'];\r\n    }\r\n\r\n    private propEventSvc: LocalEventService<keyof GridOptions> = new LocalEventService();\r\n\r\n    public postConstruct(): void {\r\n        this.eventSvc.addGlobalListener(this.globalEventHandlerFactory().bind(this), true);\r\n        this.eventSvc.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);\r\n\r\n        // Ensure the propertyEventService has framework overrides set so that it can fire events outside of angular\r\n        this.propEventSvc.setFrameworkOverrides(this.beans.frameworkOverrides);\r\n\r\n        this.addManagedEventListeners({\r\n            gridOptionsChanged: ({ options }) => {\r\n                this.updateGridOptions({ options, force: true, source: 'gridOptionsUpdated' });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the raw value of the GridOptions property provided.\r\n     * @param property\r\n     */\r\n    public get<K extends keyof GridOptions>(property: K): GridOptionOrDefault<K> {\r\n        return (\r\n            this.gridOptions[property] ??\r\n            (GRID_OPTION_DEFAULTS[property as keyof typeof GRID_OPTION_DEFAULTS] as GridOptionOrDefault<K>)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the GridOption callback but wrapped so that the common params of api and context are automatically applied to the params.\r\n     * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon\r\n     */\r\n    public getCallback<K extends CallbackProps>(property: K): WrappedCallback<K, GridOptions[K]> {\r\n        return this.mergeGridCommonParams(this.gridOptions[property]);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if a value has been specified for this GridOption.\r\n     * @param property GridOption property\r\n     */\r\n    public exists(property: keyof GridOptions): boolean {\r\n        return _exists(this.gridOptions[property]);\r\n    }\r\n\r\n    /**\r\n     * Wrap the user callback and attach the api and context to the params object on the way through.\r\n     * @param callback User provided callback\r\n     * @returns Wrapped callback where the params object not require api and context\r\n     */\r\n    private mergeGridCommonParams<P extends AgGridCommon<any, any>, T>(\r\n        callback: ((params: P) => T) | undefined\r\n    ): ((params: WithoutGridCommon<P>) => T) | undefined {\r\n        if (callback) {\r\n            const wrapped = (callbackParams: WithoutGridCommon<P>): T => {\r\n                return callback(this.addGridCommonParams(callbackParams));\r\n            };\r\n            return wrapped;\r\n        }\r\n        return callback;\r\n    }\r\n\r\n    public updateGridOptions({\r\n        options,\r\n        force,\r\n        source = 'api',\r\n    }: {\r\n        options: Partial<GridOptions>;\r\n        force?: boolean;\r\n        source?: PropertyChangedSource;\r\n    }): void {\r\n        const changeSet: PropertyChangeSet = { id: changeSetId++, properties: [] };\r\n        // all events are fired after grid options has finished updating.\r\n        const events: PropertyValueChangedEvent<keyof GridOptions>[] = [];\r\n        const { gridOptions, validation } = this;\r\n        Object.entries(options).forEach(([key, value]) => {\r\n            validation?.warnOnInitialPropertyUpdate(source, key);\r\n\r\n            const shouldForce = force || (typeof value === 'object' && source === 'api'); // force objects as they could have been mutated.\r\n\r\n            const previousValue = gridOptions[key as keyof GridOptions];\r\n            if (shouldForce || previousValue !== value) {\r\n                gridOptions[key as keyof GridOptions] = value;\r\n                const event: PropertyValueChangedEvent<keyof GridOptions> = {\r\n                    type: key as keyof GridOptions,\r\n                    currentValue: value,\r\n                    previousValue,\r\n                    changeSet,\r\n                    source,\r\n                };\r\n                events.push(event);\r\n            }\r\n        });\r\n\r\n        validation?.processGridOptions(this.gridOptions);\r\n\r\n        // changeSet should just include the properties that have changed.\r\n        changeSet.properties = events.map((event) => event.type);\r\n\r\n        events.forEach((event) => {\r\n            _logIfDebug(this, `Updated property ${event.type} from`, event.previousValue, ` to `, event.currentValue);\r\n            this.propEventSvc.dispatchEvent(event);\r\n        });\r\n    }\r\n\r\n    addPropertyEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\r\n        this.propEventSvc.addEventListener(key, listener as any);\r\n    }\r\n    removePropertyEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\r\n        this.propEventSvc.removeEventListener(key, listener as any);\r\n    }\r\n\r\n    // responsible for calling the onXXX functions on gridOptions\r\n    // It forces events defined in GridOptionsService.alwaysSyncGlobalEvents to be fired synchronously.\r\n    // This is required for events such as GridPreDestroyed.\r\n    // Other events can be fired asynchronously or synchronously depending on config.\r\n    globalEventHandlerFactory = (restrictToSyncOnly?: boolean) => {\r\n        return (eventName: AgEventType, event?: any) => {\r\n            // prevent events from being fired _after_ the grid has been destroyed\r\n            if (!this.isAlive()) {\r\n                return;\r\n            }\r\n\r\n            const alwaysSync = ALWAYS_SYNC_GLOBAL_EVENTS.has(eventName);\r\n            if ((alwaysSync && !restrictToSyncOnly) || (!alwaysSync && restrictToSyncOnly)) {\r\n                return;\r\n            }\r\n\r\n            const eventHandlerName = _getCallbackForEvent(eventName);\r\n            const eventHandler = (this.gridOptions as any)[eventHandlerName];\r\n            if (typeof eventHandler === 'function') {\r\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\r\n                    eventHandler(event);\r\n                });\r\n            }\r\n        };\r\n    };\r\n\r\n    public getDomDataKey(): string {\r\n        return this.domDataKey;\r\n    }\r\n\r\n    public getGridCommonParams<TData = any, TContext = any>(): AgGridCommon<TData, TContext> {\r\n        return {\r\n            api: this.api,\r\n            context: this.gridOptionsContext,\r\n        };\r\n    }\r\n\r\n    public addGridCommonParams<T extends AgGridCommon<TData, TContext>, TData = any, TContext = any>(\r\n        params: WithoutGridCommon<T>\r\n    ): T {\r\n        const updatedParams = params as T;\r\n        updatedParams.api = this.api;\r\n        updatedParams.context = this.gridOptionsContext;\r\n        return updatedParams;\r\n    }\r\n\r\n    public assertModuleRegistered<\r\n        TId extends keyof MissingModuleErrors,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        TShowMessageAtCallLocation = MissingModuleErrors[TId],\r\n    >(moduleName: ValidationModuleName | ValidationModuleName[], reasonOrId: string | TId): boolean {\r\n        const registered = Array.isArray(moduleName)\r\n            ? moduleName.some((modName) => this.isModuleRegistered(modName))\r\n            : this.isModuleRegistered(moduleName);\r\n        if (!registered) {\r\n            _error(200, {\r\n                ...this.getModuleErrorParams(),\r\n                moduleName,\r\n                reasonOrId,\r\n            });\r\n        }\r\n        return registered;\r\n    }\r\n\r\n    public getModuleErrorParams(): { gridScoped: boolean; gridId: string; rowModelType: RowModelType } {\r\n        return {\r\n            gridId: this.gridId,\r\n            gridScoped: _areModulesGridScoped(),\r\n            rowModelType: this.get('rowModelType'),\r\n        };\r\n    }\r\n\r\n    public isModuleRegistered(moduleName: ModuleName): boolean {\r\n        return _isModuleRegistered(moduleName, this.gridId, this.get('rowModelType'));\r\n    }\r\n}\r\n", "import { _getInnerHeaderCompDetails } from '../../../components/framework/userCompUtils';\r\nimport type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\r\nimport type { AgColumn } from '../../../entities/agColumn';\r\nimport type { SortDirection } from '../../../entities/colDef';\r\nimport { _isLegacyMenuEnabled } from '../../../gridOptionsUtils';\r\nimport type { Column } from '../../../interfaces/iColumn';\r\nimport type { AgGridCommon } from '../../../interfaces/iCommon';\r\nimport type { IComponent } from '../../../interfaces/iComponent';\r\nimport type { SortIndicatorComp } from '../../../sort/sortIndicatorComp';\r\nimport { _removeFromParent, _setDisplayed } from '../../../utils/dom';\r\nimport type { IconName } from '../../../utils/icon';\r\nimport { _createIconNoSpan } from '../../../utils/icon';\r\nimport { _escapeString } from '../../../utils/string';\r\nimport { Component, RefPlaceholder } from '../../../widgets/component';\r\n\r\nexport interface IHeaderParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\r\n    /** The column the header is for. */\r\n    column: Column;\r\n    /**\r\n     * The name to display for the column.\r\n     * If the column is using a headerValueGetter, the displayName will take this into account.\r\n     */\r\n    displayName: string;\r\n    /**\r\n     * Whether sorting is enabled for the column.\r\n     * Only put sort logic into your header if this is true.\r\n     */\r\n    enableSorting: boolean | undefined;\r\n    /**\r\n     * Whether menu is enabled for the column.\r\n     * Only display a menu button in your header if this is true.\r\n     */\r\n    enableMenu: boolean;\r\n    /**\r\n     * Whether filter button should be displayed in the header (for new column menu).\r\n     */\r\n    enableFilterButton: boolean;\r\n    /**\r\n     * Whether filter icon should be displayed in the header (for legacy tabbed column menu).\r\n     */\r\n    enableFilterIcon: boolean;\r\n    /**\r\n     * Callback to request the grid to show the column menu.\r\n     * Pass in the html element of the column menu button to have the\r\n     * grid position the menu over the button.\r\n     */\r\n    showColumnMenu: (source: HTMLElement) => void;\r\n    /**\r\n     * Callback to request the grid to show the column menu.\r\n     * Similar to `showColumnMenu`, but will position the menu next to the provided `mouseEvent`.\r\n     */\r\n    showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => void;\r\n    /**\r\n     * Callback to request the grid to show the filter.\r\n     * Pass in the html element of the filter button to have the\r\n     * grid position the menu over the button.\r\n     */\r\n    showFilter: (source: HTMLElement) => void;\r\n    /**\r\n     * Callback to progress the sort for this column.\r\n     * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\r\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click).\r\n     */\r\n    progressSort: (multiSort?: boolean) => void;\r\n    /**\r\n     * Callback to set the sort for this column.\r\n     * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\r\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click)\r\n     */\r\n    setSort: (sort: SortDirection, multiSort?: boolean) => void;\r\n\r\n    /** Custom header template if provided to `headerComponentParams`, otherwise will be `undefined`. See [Header Templates](https://ag-grid.com/javascript-data-grid/column-headers/#header-templates) */\r\n    template?: string;\r\n    /** The component to use for inside the header (replaces the text value and leaves the remainder of the Grid's original component). */\r\n    innerHeaderComponent?: any;\r\n    /** Additional params to customise to the `innerHeaderComponent`. */\r\n    innerHeaderComponentParams?: any;\r\n    /**\r\n     * The header the grid provides.\r\n     * The custom header component is a child of the grid provided header.\r\n     * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\r\n     * This is provided should you want to make changes to this cell,\r\n     * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header).\r\n     */\r\n    eGridHeader: HTMLElement;\r\n\r\n    /**\r\n     * Sets a tooltip to the main element of this component.\r\n     * @param value The value to be displayed by the tooltip\r\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\r\n     */\r\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\r\n}\r\n\r\nexport interface IHeader {\r\n    /** Get the header to refresh. Gets called whenever Column Defs are updated. */\r\n    refresh(params: IHeaderParams): boolean;\r\n}\r\n\r\nexport interface IHeaderComp extends IHeader, IComponent<IHeaderParams> {}\r\n\r\nexport interface IInnerHeaderComponent<\r\n    TData = any,\r\n    TContext = any,\r\n    TParams extends Readonly<IHeaderParams<TData, TContext>> = IHeaderParams<TData, TContext>,\r\n> extends IComponent<TParams>,\r\n        IHeader {}\r\n\r\nfunction getHeaderCompTemplate(includeSortIndicator: boolean): string {\r\n    return /* html */ `<div class=\"ag-cell-label-container\" role=\"presentation\">\r\n        <span data-ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\r\n        <span data-ref=\"eFilterButton\" class=\"ag-header-icon ag-header-cell-filter-button\" aria-hidden=\"true\"></span>\r\n        <div data-ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\">\r\n            <span data-ref=\"eText\" class=\"ag-header-cell-text\"></span>\r\n            <span data-ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\r\n            ${includeSortIndicator ? '<ag-sort-indicator data-ref=\"eSortIndicator\"></ag-sort-indicator>' : ''}\r\n        </div>\r\n    </div>`;\r\n}\r\n\r\nexport class HeaderComp extends Component implements IHeaderComp {\r\n    private eFilter: HTMLElement = RefPlaceholder;\r\n    public eFilterButton?: HTMLElement = RefPlaceholder;\r\n    private eSortIndicator: SortIndicatorComp = RefPlaceholder;\r\n    public eMenu?: HTMLElement = RefPlaceholder;\r\n    private eLabel: HTMLElement = RefPlaceholder;\r\n    private eText: HTMLElement = RefPlaceholder;\r\n\r\n    /**\r\n     * Selectors for custom headers templates\r\n     */\r\n    private readonly eSortOrder: HTMLElement = RefPlaceholder;\r\n    private readonly eSortAsc: HTMLElement = RefPlaceholder;\r\n    private readonly eSortDesc: HTMLElement = RefPlaceholder;\r\n    private readonly eSortMixed: HTMLElement = RefPlaceholder;\r\n    private readonly eSortNone: HTMLElement = RefPlaceholder;\r\n\r\n    public params: IHeaderParams;\r\n\r\n    private currentDisplayName: string;\r\n    private currentTemplate: string | null | undefined;\r\n    private currentShowMenu: boolean;\r\n    private currentSuppressMenuHide: boolean;\r\n    private currentSort: boolean | undefined;\r\n\r\n    private innerHeaderComponent: IInnerHeaderComponent | undefined;\r\n    private isLoadingInnerComponent: boolean = false;\r\n\r\n    public refresh(params: IHeaderParams): boolean {\r\n        const oldParams = this.params;\r\n\r\n        this.params = params;\r\n\r\n        // if template changed, then recreate the whole comp, the code required to manage\r\n        // a changing template is to difficult for what it's worth.\r\n        if (\r\n            this.workOutTemplate() != this.currentTemplate ||\r\n            this.workOutShowMenu() != this.currentShowMenu ||\r\n            params.enableSorting != this.currentSort ||\r\n            (this.currentSuppressMenuHide != null && this.shouldSuppressMenuHide() != this.currentSuppressMenuHide) ||\r\n            oldParams.enableFilterButton != params.enableFilterButton ||\r\n            oldParams.enableFilterIcon != params.enableFilterIcon\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        this.setDisplayName(params);\r\n\r\n        return true;\r\n    }\r\n\r\n    private workOutTemplate(): string | null | undefined {\r\n        const { params, beans } = this;\r\n        const template: string | null | undefined = params.template ?? getHeaderCompTemplate(!!beans.sortSvc);\r\n\r\n        // take account of any newlines & whitespace before/after the actual template\r\n        return template?.trim ? template.trim() : template;\r\n    }\r\n\r\n    public init(params: IHeaderParams): void {\r\n        this.params = params;\r\n\r\n        const { sortSvc, touchSvc, userCompFactory } = this.beans;\r\n\r\n        this.currentTemplate = this.workOutTemplate();\r\n        this.setTemplate(this.currentTemplate, sortSvc ? [sortSvc.getSortIndicatorSelector()] : undefined);\r\n        touchSvc?.setupForHeader(this);\r\n        this.setMenu();\r\n        this.setupSort();\r\n        this.setupFilterIcon();\r\n        this.setupFilterButton();\r\n        this.workOutInnerHeaderComponent(userCompFactory, params);\r\n        this.setDisplayName(params);\r\n    }\r\n\r\n    private workOutInnerHeaderComponent(userCompFactory: UserComponentFactory, params: IHeaderParams): void {\r\n        const userCompDetails = _getInnerHeaderCompDetails(userCompFactory, params, params);\r\n\r\n        if (!userCompDetails) {\r\n            return;\r\n        }\r\n\r\n        this.isLoadingInnerComponent = true;\r\n\r\n        userCompDetails.newAgStackInstance().then((comp) => {\r\n            this.isLoadingInnerComponent = false;\r\n\r\n            if (!comp) {\r\n                return;\r\n            }\r\n\r\n            if (this.isAlive()) {\r\n                this.innerHeaderComponent = comp;\r\n                this.eText.appendChild(comp.getGui());\r\n            } else {\r\n                this.destroyBean(comp);\r\n            }\r\n        });\r\n    }\r\n\r\n    private setDisplayName(params: IHeaderParams) {\r\n        const { displayName } = params;\r\n        const oldDisplayName = this.currentDisplayName;\r\n        this.currentDisplayName = displayName;\r\n\r\n        if (oldDisplayName === displayName || this.innerHeaderComponent || this.isLoadingInnerComponent) {\r\n            return;\r\n        }\r\n\r\n        const displayNameSanitised = _escapeString(displayName, true);\r\n        this.eText.innerText = displayNameSanitised!;\r\n    }\r\n\r\n    private addInIcon(iconName: IconName, eParent: HTMLElement, column: AgColumn): void {\r\n        if (eParent == null) {\r\n            return;\r\n        }\r\n\r\n        const eIcon = _createIconNoSpan(iconName, this.beans, column);\r\n        if (eIcon) {\r\n            eParent.appendChild(eIcon);\r\n        }\r\n    }\r\n\r\n    private workOutShowMenu(): boolean {\r\n        return this.params.enableMenu && !!this.beans.menuSvc?.isHeaderMenuButtonEnabled();\r\n    }\r\n\r\n    public shouldSuppressMenuHide(): boolean {\r\n        return !!this.beans.menuSvc?.isHeaderMenuButtonAlwaysShowEnabled();\r\n    }\r\n\r\n    private setMenu(): void {\r\n        // if no menu provided in template, do nothing\r\n        if (!this.eMenu) {\r\n            return;\r\n        }\r\n\r\n        this.currentShowMenu = this.workOutShowMenu();\r\n        if (!this.currentShowMenu) {\r\n            _removeFromParent(this.eMenu);\r\n            this.eMenu = undefined;\r\n            return;\r\n        }\r\n\r\n        const { gos, eMenu, params, currentSuppressMenuHide } = this;\r\n\r\n        const isLegacyMenu = _isLegacyMenuEnabled(gos);\r\n        this.addInIcon(isLegacyMenu ? 'menu' : 'menuAlt', eMenu, params.column as AgColumn);\r\n        eMenu.classList.toggle('ag-header-menu-icon', !isLegacyMenu);\r\n\r\n        this.currentSuppressMenuHide = this.shouldSuppressMenuHide();\r\n        this.addManagedElementListeners(eMenu, { click: () => params.showColumnMenu(eMenu!) });\r\n        eMenu.classList.toggle('ag-header-menu-always-show', currentSuppressMenuHide);\r\n    }\r\n\r\n    public onMenuKeyboardShortcut(isFilterShortcut: boolean): boolean {\r\n        const { params, gos, beans, eMenu, eFilterButton } = this;\r\n        const column = params.column as AgColumn;\r\n        const isLegacyMenuEnabled = _isLegacyMenuEnabled(gos);\r\n        if (isFilterShortcut && !isLegacyMenuEnabled) {\r\n            if (beans.menuSvc?.isFilterMenuInHeaderEnabled(column)) {\r\n                params.showFilter(eFilterButton ?? eMenu ?? this.getGui());\r\n                return true;\r\n            }\r\n        } else if (params.enableMenu) {\r\n            params.showColumnMenu(eMenu ?? eFilterButton ?? this.getGui());\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setupSort(): void {\r\n        const { sortSvc } = this.beans;\r\n        if (!sortSvc) {\r\n            return;\r\n        }\r\n        const { enableSorting, column } = this.params;\r\n        this.currentSort = enableSorting;\r\n\r\n        // eSortIndicator will not be present when customers provided custom header\r\n        // templates, in that case, we need to look for provided sort elements and\r\n        // manually create eSortIndicator.\r\n        if (!this.eSortIndicator) {\r\n            this.eSortIndicator = this.createBean(sortSvc.createSortIndicator(true));\r\n            const { eSortIndicator, eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone } = this;\r\n            eSortIndicator.attachCustomElements(eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone);\r\n        }\r\n        this.eSortIndicator.setupSort(column as AgColumn);\r\n\r\n        // we set up the indicator prior to the check for whether this column is sortable, as it allows the indicator to\r\n        // set up the multi sort indicator which can appear irrelevant of whether this column can itself be sorted.\r\n        // this can occur in the case of a non-sortable group display column.\r\n        if (!this.currentSort) {\r\n            return;\r\n        }\r\n\r\n        sortSvc.setupHeader(this, column as AgColumn, this.eLabel);\r\n    }\r\n\r\n    private setupFilterIcon(): void {\r\n        const { eFilter, params } = this;\r\n        if (!eFilter) {\r\n            return;\r\n        }\r\n        this.configureFilter(params.enableFilterIcon, eFilter, this.onFilterChangedIcon.bind(this), 'filterActive');\r\n    }\r\n\r\n    private setupFilterButton(): void {\r\n        const { eFilterButton, params } = this;\r\n        if (!eFilterButton) {\r\n            return;\r\n        }\r\n        const configured = this.configureFilter(\r\n            params.enableFilterButton,\r\n            eFilterButton,\r\n            this.onFilterChangedButton.bind(this),\r\n            'filter'\r\n        );\r\n        if (configured) {\r\n            this.addManagedElementListeners(eFilterButton, {\r\n                click: () => params.showFilter(eFilterButton!),\r\n            });\r\n        } else {\r\n            this.eFilterButton = undefined;\r\n        }\r\n    }\r\n\r\n    private configureFilter(\r\n        enabled: boolean,\r\n        element: HTMLElement,\r\n        filterChangedCallback: () => void,\r\n        icon: IconName\r\n    ): boolean {\r\n        if (!enabled) {\r\n            _removeFromParent(element);\r\n            return false;\r\n        }\r\n\r\n        const column = this.params.column as AgColumn;\r\n        this.addInIcon(icon, element, column);\r\n\r\n        this.addManagedListeners(column, { filterChanged: filterChangedCallback });\r\n        filterChangedCallback();\r\n        return true;\r\n    }\r\n\r\n    private onFilterChangedIcon(): void {\r\n        const filterPresent = this.params.column.isFilterActive();\r\n        _setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });\r\n    }\r\n\r\n    private onFilterChangedButton(): void {\r\n        const filterPresent = this.params.column.isFilterActive();\r\n        this.eFilterButton!.classList.toggle('ag-filter-active', filterPresent);\r\n    }\r\n\r\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\r\n        const { eFilterButton, eMenu } = this;\r\n        if (isFilter) {\r\n            return eFilterButton ?? eMenu ?? this.getGui();\r\n        }\r\n        return eMenu ?? eFilterButton ?? this.getGui();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        if (this.innerHeaderComponent) {\r\n            this.destroyBean(this.innerHeaderComponent);\r\n            this.innerHeaderComponent = undefined;\r\n        }\r\n    }\r\n}\r\n", "import { _getInnerHeaderGroupCompDetails } from '../../../components/framework/userCompUtils';\r\nimport type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\r\nimport type { BeanCollection } from '../../../context/context';\r\nimport type { AgColumnGroup } from '../../../entities/agColumnGroup';\r\nimport type { ColumnGroup } from '../../../interfaces/iColumn';\r\nimport type { AgGridCommon } from '../../../interfaces/iCommon';\r\nimport type { IComponent } from '../../../interfaces/iComponent';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\nimport { _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '../../../utils/event';\r\nimport { _exists } from '../../../utils/generic';\r\nimport type { IconName } from '../../../utils/icon';\r\nimport { _createIconNoSpan } from '../../../utils/icon';\r\nimport { _escapeString } from '../../../utils/string';\r\nimport { _warn } from '../../../validation/logging';\r\nimport { Component, RefPlaceholder } from '../../../widgets/component';\r\n\r\nexport interface IHeaderGroupParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\r\n    /** The column group the header is for. */\r\n    columnGroup: ColumnGroup;\r\n    /**\r\n     * The text label to render.\r\n     * If the column is using a headerValueGetter, the displayName will take this into account.\r\n     */\r\n    displayName: string;\r\n    /** Opens / closes the column group */\r\n    setExpanded: (expanded: boolean) => void;\r\n    /**\r\n     * Sets a tooltip to the main element of this component.\r\n     * @param value The value to be displayed by the tooltip\r\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\r\n     */\r\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\r\n\r\n    /** The component to use for inside the header group (replaces the text value and leaves the remainder of the Grid's original component). */\r\n    innerHeaderGroupComponent?: any;\r\n    /** Additional params to customise to the `innerHeaderGroupComponent`. */\r\n    innerHeaderGroupComponentParams?: any;\r\n}\r\n\r\nexport interface IHeaderGroup {}\r\n\r\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> {}\r\n\r\nexport interface IInnerHeaderGroupComponent<\r\n    TData = any,\r\n    TContext = any,\r\n    TParams extends Readonly<IHeaderGroupParams<TData, TContext>> = IHeaderGroupParams<TData, TContext>,\r\n> extends IComponent<TParams>,\r\n        IHeaderGroup {}\r\n\r\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\r\n    private params: IHeaderGroupParams;\r\n\r\n    private readonly agOpened: HTMLElement = RefPlaceholder;\r\n    private readonly agClosed: HTMLElement = RefPlaceholder;\r\n    private readonly agLabel: HTMLElement = RefPlaceholder;\r\n\r\n    private innerHeaderGroupComponent: IInnerHeaderGroupComponent | undefined;\r\n    private isLoadingInnerComponent: boolean = false;\r\n\r\n    constructor() {\r\n        super(/* html */ `<div class=\"ag-header-group-cell-label\" role=\"presentation\">\r\n            <span data-ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\r\n            <span data-ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\r\n            <span data-ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\r\n        </div>`);\r\n    }\r\n\r\n    public init(params: IHeaderGroupParams): void {\r\n        const { userCompFactory } = this.beans;\r\n        this.params = params;\r\n\r\n        this.checkWarnings();\r\n        this.workOutInnerHeaderGroupComponent(userCompFactory, params);\r\n        this.setupLabel(params);\r\n        this.addGroupExpandIcon(params);\r\n        this.setupExpandIcons();\r\n    }\r\n\r\n    private checkWarnings(): void {\r\n        const paramsAny = this.params as any;\r\n\r\n        if (paramsAny.template) {\r\n            _warn(89);\r\n        }\r\n    }\r\n\r\n    private workOutInnerHeaderGroupComponent(userCompFactory: UserComponentFactory, params: IHeaderGroupParams): void {\r\n        const userCompDetails = _getInnerHeaderGroupCompDetails(userCompFactory, params, params);\r\n\r\n        if (!userCompDetails) {\r\n            return;\r\n        }\r\n\r\n        this.isLoadingInnerComponent = true;\r\n        userCompDetails.newAgStackInstance().then((comp) => {\r\n            this.isLoadingInnerComponent = false;\r\n            if (!comp) {\r\n                return;\r\n            }\r\n\r\n            if (this.isAlive()) {\r\n                this.innerHeaderGroupComponent = comp;\r\n                this.agLabel.appendChild(comp.getGui());\r\n            } else {\r\n                this.destroyBean(comp);\r\n            }\r\n        });\r\n    }\r\n\r\n    private setupExpandIcons(): void {\r\n        const {\r\n            agOpened,\r\n            agClosed,\r\n            params: { columnGroup },\r\n            beans,\r\n        } = this;\r\n        this.addInIcon('columnGroupOpened', agOpened);\r\n        this.addInIcon('columnGroupClosed', agClosed);\r\n\r\n        const expandAction = (event: MouseEvent) => {\r\n            if (_isStopPropagationForAgGrid(event)) {\r\n                return;\r\n            }\r\n\r\n            const newExpandedValue = !columnGroup.isExpanded();\r\n            beans.colGroupSvc!.setColumnGroupOpened(\r\n                (columnGroup as AgColumnGroup).getProvidedColumnGroup(),\r\n                newExpandedValue,\r\n                'uiColumnExpanded'\r\n            );\r\n        };\r\n\r\n        this.addTouchAndClickListeners(beans, agClosed, expandAction);\r\n        this.addTouchAndClickListeners(beans, agOpened, expandAction);\r\n\r\n        const stopPropagationAction = (event: MouseEvent) => {\r\n            _stopPropagationForAgGrid(event);\r\n        };\r\n\r\n        // adding stopPropagation to the double click for the icons prevents double click action happening\r\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\r\n        // then close again straight away. if we also listened to double click, then the group would open,\r\n        // close, then open, which is not what we want. double click should only action if the user double\r\n        // clicks outside of the icons.\r\n        this.addManagedElementListeners(agClosed, { dblclick: stopPropagationAction });\r\n        this.addManagedElementListeners(agOpened, { dblclick: stopPropagationAction });\r\n\r\n        this.addManagedElementListeners(this.getGui(), { dblclick: expandAction });\r\n\r\n        this.updateIconVisibility();\r\n\r\n        const providedColumnGroup = columnGroup.getProvidedColumnGroup();\r\n        const updateIcon = this.updateIconVisibility.bind(this);\r\n        this.addManagedListeners(providedColumnGroup, {\r\n            expandedChanged: updateIcon,\r\n            expandableChanged: updateIcon,\r\n        });\r\n    }\r\n\r\n    private addTouchAndClickListeners(\r\n        beans: BeanCollection,\r\n        eElement: HTMLElement,\r\n        action: (event: MouseEvent) => void\r\n    ): void {\r\n        beans.touchSvc?.setupForHeaderGroup(this, eElement, action);\r\n        this.addManagedElementListeners(eElement, { click: action });\r\n    }\r\n\r\n    private updateIconVisibility(): void {\r\n        const {\r\n            agOpened,\r\n            agClosed,\r\n            params: { columnGroup },\r\n        } = this;\r\n        if (columnGroup.isExpandable()) {\r\n            const expanded = columnGroup.isExpanded();\r\n            _setDisplayed(agOpened, expanded);\r\n            _setDisplayed(agClosed, !expanded);\r\n        } else {\r\n            _setDisplayed(agOpened, false);\r\n            _setDisplayed(agClosed, false);\r\n        }\r\n    }\r\n\r\n    private addInIcon(iconName: IconName, element: HTMLElement): void {\r\n        const eIcon = _createIconNoSpan(iconName, this.beans, null);\r\n        if (eIcon) {\r\n            element.appendChild(eIcon);\r\n        }\r\n    }\r\n\r\n    private addGroupExpandIcon(params: IHeaderGroupParams) {\r\n        if (!params.columnGroup.isExpandable()) {\r\n            const { agOpened, agClosed } = this;\r\n            _setDisplayed(agOpened, false);\r\n            _setDisplayed(agClosed, false);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private setupLabel(params: IHeaderGroupParams): void {\r\n        // no renderer, default text render\r\n        const { displayName, columnGroup } = params;\r\n\r\n        const hasInnerComponent = this.innerHeaderGroupComponent || this.isLoadingInnerComponent;\r\n\r\n        if (_exists(displayName) && !hasInnerComponent) {\r\n            const displayNameSanitised = _escapeString(displayName, true);\r\n            this.agLabel.textContent = displayNameSanitised!;\r\n        }\r\n\r\n        this.addOrRemoveCssClass('ag-sticky-label', !columnGroup.getColGroupDef()?.suppressStickyLabel);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        if (this.innerHeaderGroupComponent) {\r\n            this.destroyBean(this.innerHeaderGroupComponent);\r\n            this.innerHeaderGroupComponent = undefined;\r\n        }\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { HeaderComp } from './column/headerComp';\r\nimport { HeaderGroupComp } from './columnGroup/headerGroupComp';\r\n\r\n/**\r\n * @feature Columns -> Column Header\r\n * @colDef headerComponent\r\n */\r\nexport const ColumnHeaderCompModule: _ModuleWithoutApi = {\r\n    moduleName: 'ColumnHeaderComp',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agColumnHeader: HeaderComp,\r\n    },\r\n    icons: {\r\n        // button to launch legacy column menu\r\n        menu: 'menu',\r\n        // button to launch new enterprise column menu\r\n        menuAlt: 'menu-alt',\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Columns -> Column Groups\r\n * @colGroupDef headerGroupComponent\r\n */\r\nexport const ColumnGroupHeaderCompModule: _ModuleWithoutApi = {\r\n    moduleName: 'ColumnGroupHeaderComp',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agColumnGroupHeader: HeaderGroupComp,\r\n    },\r\n    icons: {\r\n        // header column group shown when expanded (click to contract)\r\n        columnGroupOpened: 'expanded',\r\n        // header column group shown when contracted (click to expand)\r\n        columnGroupClosed: 'contracted',\r\n    },\r\n};\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { AnimationFrameService } from './animationFrameService';\r\n\r\n/**\r\n * @feature Rendering\r\n * @gridOption suppressAnimationFrame\r\n */\r\nexport const AnimationFrameModule: _ModuleWithoutApi = {\r\n    moduleName: 'AnimationFrame',\r\n    version: VERSION,\r\n    beans: [AnimationFrameService],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport type { RowContainerEventsFeature } from '../gridBodyComp/rowContainer/rowContainerEventsFeature';\r\nimport type { HeaderComp } from '../headerRendering/cells/column/headerComp';\r\nimport type { HeaderGroupComp } from '../headerRendering/cells/columnGroup/headerGroupComp';\r\nimport type { GridHeaderCtrl } from '../headerRendering/gridHeaderCtrl';\r\nimport type { CellMouseListenerFeature } from '../rendering/cell/cellMouseListenerFeature';\r\nimport { _isIOSUserAgent } from '../utils/browser';\r\nimport { _isEventSupported } from '../utils/event';\r\nimport { _exists } from '../utils/generic';\r\nimport type { LongTapEvent, TapEvent, TouchListenerEvent } from '../widgets/touchListener';\r\nimport { TouchListener } from '../widgets/touchListener';\r\n\r\nexport class TouchService extends BeanStub implements NamedBean {\r\n    beanName = 'touchSvc' as const;\r\n\r\n    public mockBodyContextMenu(\r\n        ctrl: GridBodyCtrl,\r\n        listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void\r\n    ): void {\r\n        this.mockContextMenu(ctrl, ctrl.eBodyViewport, listener);\r\n    }\r\n\r\n    public mockHeaderContextMenu(\r\n        ctrl: GridHeaderCtrl,\r\n        listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void\r\n    ): void {\r\n        this.mockContextMenu(ctrl, ctrl.eGui, listener);\r\n    }\r\n\r\n    public mockRowContextMenu(ctrl: RowContainerEventsFeature): void {\r\n        // we do NOT want this when not in iPad, otherwise we will be doing\r\n        if (!_isIOSUserAgent()) {\r\n            return;\r\n        }\r\n\r\n        const listener = (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => {\r\n            const { rowCtrl, cellCtrl } = ctrl.getControlsForEventTarget(touchEvent?.target ?? null);\r\n            this.beans.contextMenuSvc?.handleContextMenuMouseEvent(undefined, touchEvent, rowCtrl, cellCtrl!);\r\n        };\r\n        this.mockContextMenu(ctrl, ctrl.element, listener);\r\n    }\r\n\r\n    public handleCellDoubleClick(ctrl: CellMouseListenerFeature, mouseEvent: MouseEvent): boolean {\r\n        const isDoubleClickOnIPad = () => {\r\n            if (!_isIOSUserAgent() || _isEventSupported('dblclick')) {\r\n                return false;\r\n            }\r\n\r\n            const nowMillis = new Date().getTime();\r\n            const res = nowMillis - ctrl.lastIPadMouseClickEvent < 200;\r\n            ctrl.lastIPadMouseClickEvent = nowMillis;\r\n\r\n            return res;\r\n        };\r\n        if (isDoubleClickOnIPad()) {\r\n            ctrl.onCellDoubleClicked(mouseEvent);\r\n            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public setupForHeader(comp: HeaderComp): void {\r\n        const { gos, sortSvc } = this.beans;\r\n\r\n        if (gos.get('suppressTouch')) {\r\n            return;\r\n        }\r\n        const { params, eMenu, eFilterButton } = comp;\r\n\r\n        const touchListener = new TouchListener(comp.getGui(), true);\r\n        const suppressMenuHide = comp.shouldSuppressMenuHide();\r\n        const tapMenuButton = suppressMenuHide && _exists(eMenu);\r\n        const menuTouchListener = tapMenuButton ? new TouchListener(eMenu, true) : touchListener;\r\n\r\n        if (params.enableMenu) {\r\n            const eventType: TouchListenerEvent = tapMenuButton ? 'tap' : 'longTap';\r\n            const showMenuFn = (event: TapEvent | LongTapEvent) =>\r\n                params.showColumnMenuAfterMouseClick(event.touchStart);\r\n            comp.addManagedListeners(menuTouchListener, { [eventType]: showMenuFn });\r\n        }\r\n\r\n        if (params.enableSorting) {\r\n            const tapListener = (event: TapEvent) => {\r\n                const target = event.touchStart.target as HTMLElement;\r\n                // When suppressMenuHide is true, a tap on the menu icon or filter button will bubble up\r\n                // to the header container, in that case we should not sort\r\n                if (suppressMenuHide && (eMenu?.contains(target) || eFilterButton?.contains(target))) {\r\n                    return;\r\n                }\r\n\r\n                sortSvc?.progressSort(params.column as AgColumn, false, 'uiColumnSorted');\r\n            };\r\n\r\n            comp.addManagedListeners(touchListener, { tap: tapListener });\r\n        }\r\n\r\n        if (params.enableFilterButton && eFilterButton) {\r\n            const filterButtonTouchListener = new TouchListener(eFilterButton, true);\r\n            comp.addManagedListeners(filterButtonTouchListener, {\r\n                tap: () => params.showFilter(eFilterButton),\r\n            });\r\n            comp.addDestroyFunc(() => filterButtonTouchListener.destroy());\r\n        }\r\n\r\n        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different\r\n        // so we need to make sure to destroy both listeners here\r\n        comp.addDestroyFunc(() => touchListener.destroy());\r\n\r\n        if (tapMenuButton) {\r\n            comp.addDestroyFunc(() => menuTouchListener.destroy());\r\n        }\r\n    }\r\n\r\n    public setupForHeaderGroup(\r\n        comp: HeaderGroupComp,\r\n        eElement: HTMLElement,\r\n        action: (event: MouseEvent) => void\r\n    ): void {\r\n        const touchListener = new TouchListener(eElement, true);\r\n\r\n        comp.addManagedListeners(touchListener, { tap: action });\r\n        comp.addDestroyFunc(() => touchListener.destroy());\r\n    }\r\n\r\n    private mockContextMenu(\r\n        ctrl: BeanStub,\r\n        element: HTMLElement,\r\n        listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void\r\n    ): void {\r\n        // we do NOT want this when not in iPad\r\n        if (!_isIOSUserAgent()) {\r\n            return;\r\n        }\r\n\r\n        const touchListener = new TouchListener(element);\r\n        const longTapListener = (event: LongTapEvent) => {\r\n            listener(undefined, event.touchStart, event.touchEvent);\r\n        };\r\n\r\n        ctrl.addManagedListeners(touchListener, { longTap: longTapListener });\r\n        ctrl.addDestroyFunc(() => touchListener.destroy());\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { TouchService } from './touchService';\r\n\r\n/**\r\n * @feature Interactivity -> Touch\r\n */\r\nexport const TouchModule: _ModuleWithoutApi = {\r\n    moduleName: 'Touch',\r\n    version: VERSION,\r\n    beans: [TouchService],\r\n};\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _isGroupRowsSticky } from '../gridOptionsUtils';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\r\nimport { _last } from '../utils/array';\r\nimport { _missing } from '../utils/generic';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport class CellNavigationService extends BeanStub implements NamedBean {\r\n    beanName = 'cellNavigation' as const;\r\n\r\n    // returns null if no cell to focus on, ie at the end of the grid\r\n    public getNextCellToFocus(\r\n        key: string,\r\n        focusedCell: CellPosition,\r\n        ctrlPressed: boolean = false\r\n    ): CellPosition | null {\r\n        if (ctrlPressed) {\r\n            return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);\r\n        }\r\n\r\n        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);\r\n    }\r\n\r\n    private getNextCellToFocusWithCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\r\n        const upKey = key === KeyCode.UP;\r\n        const downKey = key === KeyCode.DOWN;\r\n        const leftKey = key === KeyCode.LEFT;\r\n\r\n        let column: AgColumn;\r\n        let rowIndex: number;\r\n\r\n        const { pageBounds, gos, visibleCols } = this.beans;\r\n        if (upKey || downKey) {\r\n            rowIndex = upKey ? pageBounds.getFirstRow() : pageBounds.getLastRow();\r\n            column = focusedCell.column as AgColumn;\r\n        } else {\r\n            const allColumns = visibleCols.allCols;\r\n            const isRtl = gos.get('enableRtl');\r\n            rowIndex = focusedCell.rowIndex;\r\n            column = leftKey !== isRtl ? allColumns[0] : _last(allColumns);\r\n        }\r\n\r\n        return {\r\n            rowIndex,\r\n            rowPinned: null,\r\n            column,\r\n        };\r\n    }\r\n\r\n    private getNextCellToFocusWithoutCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\r\n        // starting with the provided cell, we keep moving until we find a cell we can\r\n        // focus on.\r\n        let pointer: CellPosition | null = focusedCell;\r\n        let finished = false;\r\n\r\n        // finished will be true when either:\r\n        // a) cell found that we can focus on\r\n        // b) run out of cells (ie the method returns null)\r\n        while (!finished) {\r\n            switch (key) {\r\n                case KeyCode.UP:\r\n                    pointer = this.getCellAbove(pointer);\r\n                    break;\r\n                case KeyCode.DOWN:\r\n                    pointer = this.getCellBelow(pointer);\r\n                    break;\r\n                case KeyCode.RIGHT:\r\n                    pointer = this.gos.get('enableRtl') ? this.getCellToLeft(pointer) : this.getCellToRight(pointer);\r\n                    break;\r\n                case KeyCode.LEFT:\r\n                    pointer = this.gos.get('enableRtl') ? this.getCellToRight(pointer) : this.getCellToLeft(pointer);\r\n                    break;\r\n                default:\r\n                    pointer = null;\r\n                    // unknown key, do nothing\r\n                    _warn(8, { key });\r\n                    break;\r\n            }\r\n\r\n            if (pointer) {\r\n                finished = this.isCellGoodToFocusOn(pointer);\r\n            } else {\r\n                finished = true;\r\n            }\r\n        }\r\n\r\n        return pointer;\r\n    }\r\n\r\n    private isCellGoodToFocusOn(gridCell: CellPosition): boolean {\r\n        const column = gridCell.column as AgColumn;\r\n        let rowNode: RowNode | undefined;\r\n        const { pinnedRowModel, rowModel } = this.beans;\r\n\r\n        switch (gridCell.rowPinned) {\r\n            case 'top':\r\n                rowNode = pinnedRowModel?.getPinnedTopRow(gridCell.rowIndex);\r\n                break;\r\n            case 'bottom':\r\n                rowNode = pinnedRowModel?.getPinnedBottomRow(gridCell.rowIndex);\r\n                break;\r\n            default:\r\n                rowNode = rowModel.getRow(gridCell.rowIndex);\r\n                break;\r\n        }\r\n\r\n        if (!rowNode) {\r\n            return false;\r\n        }\r\n\r\n        const suppressNavigable = this.isSuppressNavigable(column, rowNode);\r\n        return !suppressNavigable;\r\n    }\r\n\r\n    private getCellToLeft(lastCell: CellPosition | null): CellPosition | null {\r\n        if (!lastCell) {\r\n            return null;\r\n        }\r\n\r\n        const colToLeft = this.beans.visibleCols.getColBefore(lastCell.column as AgColumn);\r\n        if (!colToLeft) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            rowIndex: lastCell.rowIndex,\r\n            column: colToLeft,\r\n            rowPinned: lastCell.rowPinned,\r\n        } as CellPosition;\r\n    }\r\n\r\n    private getCellToRight(lastCell: CellPosition | null): CellPosition | null {\r\n        if (!lastCell) {\r\n            return null;\r\n        }\r\n\r\n        const colToRight = this.beans.visibleCols.getColAfter(lastCell.column as AgColumn);\r\n        // if already on right, do nothing\r\n        if (!colToRight) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            rowIndex: lastCell.rowIndex,\r\n            column: colToRight,\r\n            rowPinned: lastCell.rowPinned,\r\n        } as CellPosition;\r\n    }\r\n\r\n    public getRowBelow(rowPosition: RowPosition): RowPosition | null {\r\n        // if already on top row, do nothing\r\n        const index = rowPosition.rowIndex;\r\n        const pinned = rowPosition.rowPinned;\r\n        let ignoreSticky = false;\r\n        const { pageBounds, pinnedRowModel, rowModel } = this.beans;\r\n        if (this.isLastRowInContainer(rowPosition)) {\r\n            switch (pinned) {\r\n                case 'bottom':\r\n                    // never any rows after pinned bottom\r\n                    return null;\r\n                case 'top':\r\n                    // if on last row of pinned top, then next row is main body (if rows exist),\r\n                    // otherwise it's the pinned bottom\r\n                    if (rowModel.isRowsToRender()) {\r\n                        return { rowIndex: pageBounds.getFirstRow(), rowPinned: null } as RowPosition;\r\n                    }\r\n\r\n                    if (pinnedRowModel?.isRowsToRender('bottom')) {\r\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\r\n                    }\r\n\r\n                    return null;\r\n                default:\r\n                    // if in the main body, then try pinned bottom, otherwise return nothing\r\n                    if (pinnedRowModel?.isRowsToRender('bottom')) {\r\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\r\n                    }\r\n                    return null;\r\n            }\r\n        } else if (pinned) {\r\n            // if more pinned rows, should always navigate there\r\n            ignoreSticky = true;\r\n        }\r\n\r\n        const rowNode = rowModel.getRow(rowPosition.rowIndex);\r\n        const nextStickyPosition = ignoreSticky ? undefined : this.getNextStickyPosition(rowNode);\r\n\r\n        if (nextStickyPosition) {\r\n            return nextStickyPosition;\r\n        }\r\n\r\n        return { rowIndex: index + 1, rowPinned: pinned } as RowPosition;\r\n    }\r\n\r\n    private getNextStickyPosition(rowNode?: RowNode, up?: boolean): RowPosition | undefined {\r\n        const { gos, rowRenderer } = this.beans;\r\n        if (!_isGroupRowsSticky(gos) || !rowNode || !rowNode.sticky) {\r\n            return;\r\n        }\r\n\r\n        const isTopCtrls = rowRenderer\r\n            .getStickyTopRowCtrls()\r\n            .some((ctrl) => ctrl.rowNode.rowIndex === rowNode.rowIndex);\r\n\r\n        let stickyRowCtrls: RowCtrl[] = [];\r\n        if (isTopCtrls) {\r\n            stickyRowCtrls = [...rowRenderer.getStickyTopRowCtrls()].sort(\r\n                (a, b) => a.rowNode.rowIndex! - b.rowNode.rowIndex!\r\n            );\r\n        } else {\r\n            stickyRowCtrls = [...rowRenderer.getStickyBottomRowCtrls()].sort(\r\n                (a, b) => b.rowNode.rowIndex! - a.rowNode.rowIndex!\r\n            );\r\n        }\r\n\r\n        const diff = up ? -1 : 1;\r\n        const idx = stickyRowCtrls.findIndex((ctrl) => ctrl.rowNode.rowIndex === rowNode.rowIndex);\r\n        const nextCtrl = stickyRowCtrls[idx + diff];\r\n\r\n        if (nextCtrl) {\r\n            return { rowIndex: nextCtrl.rowNode.rowIndex!, rowPinned: null };\r\n        }\r\n    }\r\n\r\n    private getCellBelow(lastCell: CellPosition | null): CellPosition | null {\r\n        if (!lastCell) {\r\n            return null;\r\n        }\r\n\r\n        const rowBelow = this.getRowBelow(lastCell);\r\n        if (rowBelow) {\r\n            return {\r\n                rowIndex: rowBelow.rowIndex,\r\n                column: lastCell.column,\r\n                rowPinned: rowBelow.rowPinned,\r\n            } as CellPosition;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private isLastRowInContainer(rowPosition: RowPosition): boolean {\r\n        const pinned = rowPosition.rowPinned;\r\n        const index = rowPosition.rowIndex;\r\n\r\n        const { pinnedRowModel, pageBounds } = this.beans;\r\n\r\n        if (pinned === 'top') {\r\n            const lastTopIndex = pinnedRowModel?.getPinnedTopRowCount() ?? 0 - 1;\r\n            return lastTopIndex <= index;\r\n        }\r\n\r\n        if (pinned === 'bottom') {\r\n            const lastBottomIndex = pinnedRowModel?.getPinnedBottomRowCount() ?? 0 - 1;\r\n            return lastBottomIndex <= index;\r\n        }\r\n\r\n        const lastBodyIndex = pageBounds.getLastRow();\r\n        return lastBodyIndex <= index;\r\n    }\r\n\r\n    public getRowAbove(rowPosition: RowPosition): RowPosition | null {\r\n        // if already on top row, do nothing\r\n        const index = rowPosition.rowIndex;\r\n        const pinned = rowPosition.rowPinned;\r\n        const { pageBounds, pinnedRowModel, rowModel } = this.beans;\r\n        const isFirstRow = pinned ? index === 0 : index === pageBounds.getFirstRow();\r\n        let ignoreSticky = false;\r\n\r\n        const getLastFloatingTopRow = (): RowPosition => {\r\n            const lastFloatingRow = pinnedRowModel?.getPinnedTopRowCount() ?? 0 - 1;\r\n\r\n            return { rowIndex: lastFloatingRow, rowPinned: 'top' } as RowPosition;\r\n        };\r\n\r\n        // if already on top row, do nothing\r\n        if (isFirstRow) {\r\n            if (pinned === 'top') {\r\n                return null;\r\n            }\r\n\r\n            if (!pinned) {\r\n                if (pinnedRowModel?.isRowsToRender('top')) {\r\n                    return getLastFloatingTopRow();\r\n                }\r\n                return null;\r\n            }\r\n\r\n            // last floating bottom\r\n            if (rowModel.isRowsToRender()) {\r\n                const lastBodyRow = pageBounds.getLastRow();\r\n                return { rowIndex: lastBodyRow, rowPinned: null } as RowPosition;\r\n            }\r\n\r\n            if (pinnedRowModel?.isRowsToRender('top')) {\r\n                return getLastFloatingTopRow();\r\n            }\r\n\r\n            return null;\r\n        } else if (pinned) {\r\n            // if more pinned rows, should always navigate there\r\n            ignoreSticky = true;\r\n        }\r\n\r\n        const rowNode = rowModel.getRow(rowPosition.rowIndex);\r\n        const nextStickyPosition = ignoreSticky ? undefined : this.getNextStickyPosition(rowNode, true);\r\n\r\n        if (nextStickyPosition) {\r\n            return nextStickyPosition;\r\n        }\r\n\r\n        return { rowIndex: index - 1, rowPinned: pinned } as RowPosition;\r\n    }\r\n\r\n    private getCellAbove(lastCell: CellPosition | null): CellPosition | null {\r\n        if (!lastCell) {\r\n            return null;\r\n        }\r\n\r\n        const rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\r\n\r\n        if (rowAbove) {\r\n            return {\r\n                rowIndex: rowAbove.rowIndex,\r\n                column: lastCell.column,\r\n                rowPinned: rowAbove.rowPinned,\r\n            } as CellPosition;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getNextTabbedCell(gridCell: CellPosition, backwards: boolean): CellPosition | null {\r\n        if (backwards) {\r\n            return this.getNextTabbedCellBackwards(gridCell);\r\n        }\r\n\r\n        return this.getNextTabbedCellForwards(gridCell);\r\n    }\r\n\r\n    public getNextTabbedCellForwards(gridCell: CellPosition): CellPosition | null {\r\n        const { visibleCols, pagination } = this.beans;\r\n        const displayedColumns = visibleCols.allCols;\r\n\r\n        let newRowIndex: number | null = gridCell.rowIndex;\r\n        let newFloating: string | null | undefined = gridCell.rowPinned;\r\n\r\n        // move along to the next cell\r\n        let newColumn = visibleCols.getColAfter(gridCell.column as AgColumn);\r\n\r\n        // check if end of the row, and if so, go forward a row\r\n        if (!newColumn) {\r\n            newColumn = displayedColumns[0];\r\n\r\n            const rowBelow = this.getRowBelow(gridCell);\r\n            if (_missing(rowBelow)) {\r\n                return null;\r\n            }\r\n\r\n            // If we are tabbing and there is a paging panel present, tabbing should go\r\n            // to the paging panel instead of loading the next page.\r\n            if (!rowBelow.rowPinned && !(pagination?.isRowInPage(rowBelow) ?? true)) {\r\n                return null;\r\n            }\r\n\r\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\r\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\r\n        }\r\n\r\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\r\n    }\r\n\r\n    public getNextTabbedCellBackwards(gridCell: CellPosition): CellPosition | null {\r\n        const { visibleCols, pagination } = this.beans;\r\n        const displayedColumns = visibleCols.allCols;\r\n\r\n        let newRowIndex: number | null = gridCell.rowIndex;\r\n        let newFloating: string | null | undefined = gridCell.rowPinned;\r\n\r\n        // move along to the next cell\r\n        let newColumn = visibleCols.getColBefore(gridCell.column as AgColumn);\r\n\r\n        // check if end of the row, and if so, go forward a row\r\n        if (!newColumn) {\r\n            newColumn = _last(displayedColumns);\r\n\r\n            const rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\r\n\r\n            if (_missing(rowAbove)) {\r\n                return null;\r\n            }\r\n\r\n            // If we are tabbing and there is a paging panel present, tabbing should go\r\n            // to the paging panel instead of loading the next page.\r\n            if (!rowAbove.rowPinned && !(pagination?.isRowInPage(rowAbove) ?? true)) {\r\n                return null;\r\n            }\r\n\r\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\r\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\r\n        }\r\n\r\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\r\n    }\r\n\r\n    public isSuppressNavigable(column: AgColumn, rowNode: IRowNode): boolean {\r\n        const { suppressNavigable } = column.colDef;\r\n        // if boolean set, then just use it\r\n        if (typeof suppressNavigable === 'boolean') {\r\n            return suppressNavigable;\r\n        }\r\n\r\n        // if function, then call the function to find out\r\n        if (typeof suppressNavigable === 'function') {\r\n            const params = column.createColumnFunctionCallbackParams(rowNode);\r\n            const userFunc = suppressNavigable;\r\n            return userFunc(params);\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { Column, ColumnGroup } from '../interfaces/iColumn';\r\nimport type { RowPinnedType } from '../interfaces/iRowNode';\r\n\r\nexport function getFocusedCell(beans: BeanCollection): CellPosition | null {\r\n    return beans.focusSvc.getFocusedCell();\r\n}\r\n\r\nexport function clearFocusedCell(beans: BeanCollection): void {\r\n    return beans.focusSvc.clearFocusedCell();\r\n}\r\n\r\nexport function setFocusedCell(\r\n    beans: BeanCollection,\r\n    rowIndex: number,\r\n    colKey: string | Column,\r\n    rowPinned?: RowPinnedType\r\n) {\r\n    beans.focusSvc.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });\r\n}\r\n\r\nexport function tabToNextCell(beans: BeanCollection, event?: KeyboardEvent): boolean {\r\n    return beans.navigation?.tabToNextCell(false, event) ?? false;\r\n}\r\n\r\nexport function tabToPreviousCell(beans: BeanCollection, event?: KeyboardEvent): boolean {\r\n    return beans.navigation?.tabToNextCell(true, event) ?? false;\r\n}\r\n\r\nexport function setFocusedHeader(\r\n    beans: BeanCollection,\r\n    colKey: string | Column | ColumnGroup,\r\n    floatingFilter: boolean = false\r\n): void {\r\n    const headerPosition = beans.headerNavigation?.getHeaderPositionForColumn(colKey, floatingFilter);\r\n\r\n    if (!headerPosition) {\r\n        return;\r\n    }\r\n\r\n    beans.focusSvc.focusHeaderPosition({ headerPosition });\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _getCellByPosition, _getRowNode, _isRowBefore } from '../entities/positionUtils';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport { _getCellPositionForEvent } from '../gridBodyComp/mouseEventUtils';\r\nimport { _isGroupRowsSticky } from '../gridOptionsUtils';\r\nimport { getFocusHeaderRowCount } from '../headerRendering/headerUtils';\r\nimport type { NavigateToNextCellParams, TabToNextCellParams } from '../interfaces/iCallbackParams';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { VerticalScrollPosition } from '../interfaces/iRowNode';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport { RowCtrl } from '../rendering/row/rowCtrl';\r\nimport { _last } from '../utils/array';\r\nimport { _focusNextGridCoreContainer, _isHeaderFocusSuppressed } from '../utils/focus';\r\nimport { _throttle } from '../utils/function';\r\nimport { _exists, _missing } from '../utils/generic';\r\n\r\ninterface NavigateParams {\r\n    /** The rowIndex to vertically scroll to. */\r\n    scrollIndex: number;\r\n    /** The position to put scroll index. */\r\n    scrollType: 'top' | 'bottom' | null;\r\n    /**  The column to horizontally scroll to. */\r\n    scrollColumn: AgColumn | null;\r\n    /** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */\r\n    focusIndex: number;\r\n    focusColumn: AgColumn;\r\n    isAsync?: boolean;\r\n}\r\n\r\nexport class NavigationService extends BeanStub implements NamedBean {\r\n    beanName = 'navigation' as const;\r\n\r\n    private gridBodyCon: GridBodyCtrl;\r\n\r\n    constructor() {\r\n        super();\r\n        this.onPageDown = _throttle(this.onPageDown, 100);\r\n        this.onPageUp = _throttle(this.onPageUp, 100);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCon = p.gridBodyCtrl;\r\n        });\r\n    }\r\n\r\n    public handlePageScrollingKey(event: KeyboardEvent, fromFullWidth = false): boolean {\r\n        const key = event.key;\r\n        const alt = event.altKey;\r\n        const ctrl = event.ctrlKey || event.metaKey;\r\n        const rangeServiceShouldHandleShift = !!this.beans.rangeSvc && event.shiftKey;\r\n\r\n        // home and end can be processed without knowing the currently selected cell, this can occur for full width rows.\r\n        const currentCell: CellPosition | null = _getCellPositionForEvent(this.gos, event);\r\n\r\n        let processed = false;\r\n\r\n        switch (key) {\r\n            case KeyCode.PAGE_HOME:\r\n            case KeyCode.PAGE_END:\r\n                // handle home and end when ctrl & alt are NOT pressed\r\n                if (!ctrl && !alt) {\r\n                    this.onHomeOrEndKey(key);\r\n                    processed = true;\r\n                }\r\n                break;\r\n            case KeyCode.LEFT:\r\n            case KeyCode.RIGHT:\r\n            case KeyCode.UP:\r\n            case KeyCode.DOWN:\r\n                if (!currentCell) {\r\n                    return false;\r\n                }\r\n                // handle when ctrl is pressed only, if shift is pressed\r\n                // it will be handled by the rangeService\r\n                if (ctrl && !alt && !rangeServiceShouldHandleShift) {\r\n                    this.onCtrlUpDownLeftRight(key, currentCell);\r\n                    processed = true;\r\n                }\r\n                break;\r\n            case KeyCode.PAGE_DOWN:\r\n            case KeyCode.PAGE_UP:\r\n                // handle page up and page down when ctrl & alt are NOT pressed\r\n                if (!ctrl && !alt) {\r\n                    processed = this.handlePageUpDown(key, currentCell, fromFullWidth);\r\n                }\r\n                break;\r\n        }\r\n\r\n        if (processed) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        return processed;\r\n    }\r\n\r\n    private handlePageUpDown(key: string, currentCell: CellPosition | null, fromFullWidth: boolean): boolean {\r\n        if (fromFullWidth) {\r\n            currentCell = this.beans.focusSvc.getFocusedCell();\r\n        }\r\n\r\n        if (!currentCell) {\r\n            return false;\r\n        }\r\n\r\n        if (key === KeyCode.PAGE_UP) {\r\n            this.onPageUp(currentCell);\r\n        } else {\r\n            this.onPageDown(currentCell);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private navigateTo(navigateParams: NavigateParams): void {\r\n        const { scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn } = navigateParams;\r\n        const { scrollFeature } = this.gridBodyCon;\r\n\r\n        if (_exists(scrollColumn) && !scrollColumn.isPinned()) {\r\n            scrollFeature.ensureColumnVisible(scrollColumn);\r\n        }\r\n\r\n        if (_exists(scrollIndex)) {\r\n            scrollFeature.ensureIndexVisible(scrollIndex, scrollType);\r\n        }\r\n\r\n        // setFocusedCell relies on the browser default focus behavior to scroll the focused cell into view,\r\n        // however, this behavior will cause the cell border to be cut off, or if we have sticky rows, the\r\n        // cell will be completely hidden, so we call ensureIndexVisible without a position to guarantee\r\n        // minimal scroll to get the row into view.\r\n        if (!navigateParams.isAsync) {\r\n            scrollFeature.ensureIndexVisible(focusIndex);\r\n        }\r\n\r\n        const { focusSvc, rangeSvc } = this.beans;\r\n\r\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\r\n        // highlighted.\r\n        focusSvc.setFocusedCell({\r\n            rowIndex: focusIndex,\r\n            column: focusColumn,\r\n            rowPinned: null,\r\n            forceBrowserFocus: true,\r\n        });\r\n\r\n        rangeSvc?.setRangeToCell({ rowIndex: focusIndex, rowPinned: null, column: focusColumn });\r\n    }\r\n\r\n    // this method is throttled, see the `constructor`\r\n    private onPageDown(gridCell: CellPosition): void {\r\n        const beans = this.beans;\r\n        const scrollPosition = getVScroll(beans);\r\n        const pixelsInOnePage = this.getViewportHeight();\r\n\r\n        const { pageBounds, rowModel, rowAutoHeight } = beans;\r\n\r\n        const pagingPixelOffset = pageBounds.getPixelOffset();\r\n\r\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\r\n        const currentPageBottomRow = rowModel.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\r\n\r\n        if (rowAutoHeight?.active) {\r\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);\r\n        } else {\r\n            this.navigateToNextPage(gridCell, currentPageBottomRow);\r\n        }\r\n    }\r\n\r\n    // this method is throttled, see the `constructor`\r\n    private onPageUp(gridCell: CellPosition): void {\r\n        const beans = this.beans;\r\n        const scrollPosition = getVScroll(beans);\r\n\r\n        const { pageBounds, rowModel, rowAutoHeight } = beans;\r\n\r\n        const pagingPixelOffset = pageBounds.getPixelOffset();\r\n\r\n        const currentPageTopPixel = scrollPosition.top;\r\n        const currentPageTopRow = rowModel.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\r\n\r\n        if (rowAutoHeight?.active) {\r\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);\r\n        } else {\r\n            this.navigateToNextPage(gridCell, currentPageTopRow, true);\r\n        }\r\n    }\r\n\r\n    private navigateToNextPage(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\r\n        const { pageBounds, rowModel } = this.beans;\r\n        const pixelsInOnePage = this.getViewportHeight();\r\n        const firstRow = pageBounds.getFirstRow();\r\n        const lastRow = pageBounds.getLastRow();\r\n        const pagingPixelOffset = pageBounds.getPixelOffset();\r\n        const currentRowNode = rowModel.getRow(gridCell.rowIndex);\r\n\r\n        const rowPixelDiff = up\r\n            ? // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n              currentRowNode?.rowHeight! - pixelsInOnePage - pagingPixelOffset\r\n            : pixelsInOnePage - pagingPixelOffset;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        const nextCellPixel = currentRowNode?.rowTop! + rowPixelDiff;\r\n\r\n        let focusIndex = rowModel.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\r\n\r\n        if (focusIndex === gridCell.rowIndex) {\r\n            const diff = up ? -1 : 1;\r\n            scrollIndex = focusIndex = gridCell.rowIndex + diff;\r\n        }\r\n\r\n        let scrollType: 'top' | 'bottom';\r\n\r\n        if (up) {\r\n            scrollType = 'bottom';\r\n            if (focusIndex < firstRow) {\r\n                focusIndex = firstRow;\r\n            }\r\n            if (scrollIndex < firstRow) {\r\n                scrollIndex = firstRow;\r\n            }\r\n        } else {\r\n            scrollType = 'top';\r\n            if (focusIndex > lastRow) {\r\n                focusIndex = lastRow;\r\n            }\r\n            if (scrollIndex > lastRow) {\r\n                scrollIndex = lastRow;\r\n            }\r\n        }\r\n\r\n        if (this.isRowTallerThanView(rowModel.getRow(focusIndex))) {\r\n            scrollIndex = focusIndex;\r\n            scrollType = 'top';\r\n        }\r\n\r\n        this.navigateTo({\r\n            scrollIndex,\r\n            scrollType,\r\n            scrollColumn: null,\r\n            focusIndex,\r\n            focusColumn: gridCell.column as AgColumn,\r\n        });\r\n    }\r\n\r\n    private navigateToNextPageWithAutoHeight(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\r\n        // because autoHeight will calculate the height of rows after scroll\r\n        // first we scroll towards the required point, then we add a small\r\n        // delay to allow the height to be recalculated, check which index\r\n        // should be focused and then finally navigate to that index.\r\n        // TODO: we should probably have an event fired once to scrollbar has\r\n        // settled and all rowHeights have been calculated instead of relying\r\n        // on a setTimeout of 50ms.\r\n        this.navigateTo({\r\n            scrollIndex: scrollIndex,\r\n            scrollType: up ? 'bottom' : 'top',\r\n            scrollColumn: null,\r\n            focusIndex: scrollIndex,\r\n            focusColumn: gridCell.column as AgColumn,\r\n        });\r\n        setTimeout(() => {\r\n            const focusIndex = this.getNextFocusIndexForAutoHeight(gridCell, up);\r\n\r\n            this.navigateTo({\r\n                scrollIndex: scrollIndex,\r\n                scrollType: up ? 'bottom' : 'top',\r\n                scrollColumn: null,\r\n                focusIndex: focusIndex,\r\n                focusColumn: gridCell.column as AgColumn,\r\n                isAsync: true,\r\n            });\r\n        }, 50);\r\n    }\r\n\r\n    private getNextFocusIndexForAutoHeight(gridCell: CellPosition, up: boolean = false): number {\r\n        const step = up ? -1 : 1;\r\n        const pixelsInOnePage = this.getViewportHeight();\r\n        const { pageBounds, rowModel } = this.beans;\r\n        const lastRowIndex = pageBounds.getLastRow();\r\n\r\n        let pixelSum = 0;\r\n        let currentIndex = gridCell.rowIndex;\r\n\r\n        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {\r\n            const currentCell = rowModel.getRow(currentIndex);\r\n\r\n            if (currentCell) {\r\n                const currentCellHeight = currentCell.rowHeight ?? 0;\r\n\r\n                if (pixelSum + currentCellHeight > pixelsInOnePage) {\r\n                    break;\r\n                }\r\n                pixelSum += currentCellHeight;\r\n            }\r\n\r\n            currentIndex += step;\r\n        }\r\n\r\n        return Math.max(0, Math.min(currentIndex, lastRowIndex));\r\n    }\r\n\r\n    private getViewportHeight(): number {\r\n        const beans = this.beans;\r\n        const scrollPosition = getVScroll(beans);\r\n        const scrollbarWidth = this.beans.scrollVisibleSvc.getScrollbarWidth();\r\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\r\n\r\n        if (beans.ctrlsSvc.get('center').isHorizontalScrollShowing()) {\r\n            pixelsInOnePage -= scrollbarWidth;\r\n        }\r\n\r\n        return pixelsInOnePage;\r\n    }\r\n\r\n    private isRowTallerThanView(rowNode: RowNode | undefined): boolean {\r\n        if (!rowNode) {\r\n            return false;\r\n        }\r\n\r\n        const rowHeight = rowNode.rowHeight;\r\n\r\n        if (typeof rowHeight !== 'number') {\r\n            return false;\r\n        }\r\n\r\n        return rowHeight > this.getViewportHeight();\r\n    }\r\n\r\n    private onCtrlUpDownLeftRight(key: string, gridCell: CellPosition): void {\r\n        const cellToFocus = this.beans.cellNavigation!.getNextCellToFocus(key, gridCell, true)!;\r\n        const { rowIndex } = cellToFocus;\r\n        const column = cellToFocus.column as AgColumn;\r\n\r\n        this.navigateTo({\r\n            scrollIndex: rowIndex,\r\n            scrollType: null,\r\n            scrollColumn: column,\r\n            focusIndex: rowIndex,\r\n            focusColumn: column,\r\n        });\r\n    }\r\n\r\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\r\n    // same cell into view (which means either scroll all the way up, or all the way down).\r\n    private onHomeOrEndKey(key: string): void {\r\n        const homeKey = key === KeyCode.PAGE_HOME;\r\n        const { visibleCols, pageBounds } = this.beans;\r\n        const allColumns: AgColumn[] = visibleCols.allCols;\r\n        const columnToSelect = homeKey ? allColumns[0] : _last(allColumns);\r\n        const scrollIndex = homeKey ? pageBounds.getFirstRow() : pageBounds.getLastRow();\r\n\r\n        this.navigateTo({\r\n            scrollIndex: scrollIndex,\r\n            scrollType: null,\r\n            scrollColumn: columnToSelect,\r\n            focusIndex: scrollIndex,\r\n            focusColumn: columnToSelect,\r\n        });\r\n    }\r\n\r\n    // result of keyboard event\r\n    public onTabKeyDown(previous: CellCtrl | RowCtrl, keyboardEvent: KeyboardEvent): void {\r\n        const backwards = keyboardEvent.shiftKey;\r\n        const movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);\r\n\r\n        const beans = this.beans;\r\n        const { ctrlsSvc, pageBounds, focusSvc, gos } = beans;\r\n\r\n        if (movedToNextCell !== false) {\r\n            // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\r\n            // to the normal tabbing so user can exit the grid.\r\n            if (movedToNextCell) {\r\n                keyboardEvent.preventDefault();\r\n            } else if (movedToNextCell === null) {\r\n                // want to let browser handle, however some of the containers prevent browser focus\r\n                ctrlsSvc.get('gridCtrl').allowFocusForNextCoreContainer(backwards);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going\r\n        // backwards)\r\n        if (backwards) {\r\n            const { rowIndex, rowPinned } = previous.getRowPosition();\r\n            const firstRow = rowPinned ? rowIndex === 0 : rowIndex === pageBounds.getFirstRow();\r\n            if (firstRow) {\r\n                if (gos.get('headerHeight') === 0 || _isHeaderFocusSuppressed(beans)) {\r\n                    _focusNextGridCoreContainer(beans, true, true);\r\n                } else {\r\n                    keyboardEvent.preventDefault();\r\n                    focusSvc.focusPreviousFromFirstCell(keyboardEvent);\r\n                }\r\n            }\r\n        } else {\r\n            // if the case it's a popup editor, the focus is on the editor and not the previous cell.\r\n            // in order for the tab navigation to work, we need to focus the browser back onto the\r\n            // previous cell.\r\n            if (previous instanceof CellCtrl) {\r\n                previous.focusCell(true);\r\n            }\r\n\r\n            if ((!backwards && focusSvc.focusOverlay(false)) || _focusNextGridCoreContainer(beans, backwards)) {\r\n                keyboardEvent.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    // comes from API\r\n    public tabToNextCell(backwards: boolean, event?: KeyboardEvent): boolean {\r\n        const beans = this.beans;\r\n        const { focusSvc, rowRenderer } = beans;\r\n        const focusedCell = focusSvc.getFocusedCell();\r\n        // if no focus, then cannot navigate\r\n        if (!focusedCell) {\r\n            return false;\r\n        }\r\n\r\n        let cellOrRow: CellCtrl | RowCtrl | null = _getCellByPosition(beans, focusedCell);\r\n\r\n        // if cell is not rendered, means user has scrolled away from the cell\r\n        // or that the focusedCell is a Full Width Row\r\n        if (!cellOrRow) {\r\n            cellOrRow = rowRenderer.getRowByPosition(focusedCell);\r\n            if (!cellOrRow || !cellOrRow.isFullWidth()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return !!this.tabToNextCellCommon(cellOrRow, backwards, event);\r\n    }\r\n\r\n    private tabToNextCellCommon(\r\n        previous: CellCtrl | RowCtrl,\r\n        backwards: boolean,\r\n        event?: KeyboardEvent\r\n    ): boolean | null {\r\n        let editing = previous.editing;\r\n\r\n        // if cell is not editing, there is still chance row is editing if it's Full Row Editing\r\n        if (!editing && previous instanceof CellCtrl) {\r\n            const cell = previous as CellCtrl;\r\n            const row = cell.rowCtrl;\r\n            if (row) {\r\n                editing = row.editing;\r\n            }\r\n        }\r\n\r\n        let res: boolean | null;\r\n\r\n        if (editing) {\r\n            // if we are editing, we know it's not a Full Width Row (RowComp)\r\n            if (this.gos.get('editType') === 'fullRow') {\r\n                res = this.moveToNextEditingRow(previous as CellCtrl, backwards, event);\r\n            } else {\r\n                res = this.moveToNextEditingCell(previous as CellCtrl, backwards, event);\r\n            }\r\n        } else {\r\n            res = this.moveToNextCellNotEditing(previous, backwards);\r\n        }\r\n\r\n        if (res === null) {\r\n            return res;\r\n        }\r\n\r\n        // if a cell wasn't found, it's possible that focus was moved to the header\r\n        return res || !!this.beans.focusSvc.focusedHeader;\r\n    }\r\n\r\n    // returns null if no navigation should be performed\r\n    private moveToNextEditingCell(\r\n        previousCell: CellCtrl,\r\n        backwards: boolean,\r\n        event: KeyboardEvent | null = null\r\n    ): boolean | null {\r\n        const previousPos = previousCell.cellPosition;\r\n\r\n        // before we stop editing, we need to focus the cell element\r\n        // so the grid doesn't detect that focus has left the grid\r\n        previousCell.eGui.focus();\r\n\r\n        // need to do this before getting next cell to edit, in case the next cell\r\n        // has editable function (eg colDef.editable=func() ) and it depends on the\r\n        // result of this cell, so need to save updates from the first edit, in case\r\n        // the value is referenced in the function.\r\n        previousCell.stopEditing();\r\n\r\n        // find the next cell to start editing\r\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl | false;\r\n        if (nextCell === false) {\r\n            return null;\r\n        }\r\n        if (nextCell == null) {\r\n            return false;\r\n        }\r\n\r\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\r\n        // to the normal tabbing so user can exit the grid.\r\n        this.beans.editSvc?.startEditing(nextCell, null, true, event);\r\n        nextCell.focusCell(false);\r\n        return true;\r\n    }\r\n\r\n    // returns null if no navigation should be performed\r\n    private moveToNextEditingRow(\r\n        previousCell: CellCtrl,\r\n        backwards: boolean,\r\n        event: KeyboardEvent | null = null\r\n    ): boolean | null {\r\n        const previousPos = previousCell.cellPosition;\r\n\r\n        // find the next cell to start editing\r\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl | false;\r\n        if (nextCell === false) {\r\n            return null;\r\n        }\r\n        if (nextCell == null) {\r\n            return false;\r\n        }\r\n\r\n        const nextPos = nextCell.cellPosition;\r\n\r\n        const previousEditable = this.isCellEditable(previousPos);\r\n        const nextEditable = this.isCellEditable(nextPos);\r\n\r\n        const rowsMatch =\r\n            nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;\r\n\r\n        const { editSvc, rowEditSvc } = this.beans;\r\n        if (previousEditable) {\r\n            editSvc?.setFocusOutOnEditor(previousCell);\r\n        }\r\n\r\n        if (!rowsMatch) {\r\n            const pRow = previousCell.rowCtrl;\r\n            editSvc?.stopRowEditing(pRow);\r\n\r\n            const nRow = nextCell.rowCtrl;\r\n            rowEditSvc?.startEditing(nRow, undefined, undefined, event);\r\n        }\r\n\r\n        if (nextEditable) {\r\n            editSvc?.setFocusInOnEditor(nextCell);\r\n            nextCell.focusCell();\r\n        } else {\r\n            nextCell.focusCell(true);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // returns null if no navigation should be performed\r\n    private moveToNextCellNotEditing(previousCell: CellCtrl | RowCtrl, backwards: boolean): boolean | null {\r\n        const displayedColumns = this.beans.visibleCols.allCols;\r\n        let cellPos: CellPosition;\r\n\r\n        if (previousCell instanceof RowCtrl) {\r\n            cellPos = {\r\n                ...previousCell.getRowPosition(),\r\n                column: backwards ? displayedColumns[0] : _last(displayedColumns),\r\n            };\r\n        } else {\r\n            cellPos = previousCell.cellPosition;\r\n        }\r\n        // find the next cell to start editing\r\n        const nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);\r\n\r\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\r\n        // to the normal tabbing so user can exit the grid.\r\n        if (nextCell === false) {\r\n            return null;\r\n        }\r\n        if (nextCell instanceof CellCtrl) {\r\n            nextCell.focusCell(true);\r\n        } else if (nextCell) {\r\n            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);\r\n        }\r\n\r\n        return _exists(nextCell);\r\n    }\r\n\r\n    /**\r\n     * called by the cell, when tab is pressed while editing.\r\n     * @return: RenderedCell when navigation successful, false if navigation should not be performed, otherwise null\r\n     */\r\n    private findNextCellToFocusOn(\r\n        previousPosition: CellPosition,\r\n        backwards: boolean,\r\n        startEditing: boolean\r\n    ): CellCtrl | RowCtrl | null | false {\r\n        let nextPosition: CellPosition | null | undefined = previousPosition;\r\n        const beans = this.beans;\r\n        const { cellNavigation, gos, focusSvc, rowRenderer, rangeSvc } = beans;\r\n\r\n        while (true) {\r\n            if (previousPosition !== nextPosition) {\r\n                previousPosition = nextPosition;\r\n            }\r\n\r\n            if (!backwards) {\r\n                nextPosition = this.getLastCellOfColSpan(nextPosition);\r\n            }\r\n            nextPosition = cellNavigation!.getNextTabbedCell(nextPosition, backwards);\r\n\r\n            // allow user to override what cell to go to next\r\n            const userFunc = gos.getCallback('tabToNextCell');\r\n\r\n            if (_exists(userFunc)) {\r\n                const params: WithoutGridCommon<TabToNextCellParams> = {\r\n                    backwards: backwards,\r\n                    editing: startEditing,\r\n                    previousCellPosition: previousPosition,\r\n                    nextCellPosition: nextPosition ? nextPosition : null,\r\n                };\r\n                const userResult = userFunc(params);\r\n                if (userResult === true) {\r\n                    nextPosition = previousPosition;\r\n                } else if (userResult === false) {\r\n                    return false;\r\n                } else {\r\n                    nextPosition = {\r\n                        rowIndex: userResult.rowIndex,\r\n                        column: userResult.column,\r\n                        rowPinned: userResult.rowPinned,\r\n                    } as CellPosition;\r\n                }\r\n            }\r\n\r\n            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\r\n            // so bottom right cell going forwards, or top left going backwards\r\n            if (!nextPosition) {\r\n                return null;\r\n            }\r\n\r\n            if (nextPosition.rowIndex < 0) {\r\n                const headerLen = getFocusHeaderRowCount(beans);\r\n\r\n                focusSvc.focusHeaderPosition({\r\n                    headerPosition: {\r\n                        headerRowIndex: headerLen + nextPosition.rowIndex,\r\n                        column: nextPosition.column,\r\n                    },\r\n                    fromCell: true,\r\n                });\r\n\r\n                return null;\r\n            }\r\n\r\n            // if editing, but cell not editable, skip cell. we do this before we do all of\r\n            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\r\n            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\r\n            // (except for the last one) which causes grid to stall for a while.\r\n            // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.\r\n            const fullRowEdit = gos.get('editType') === 'fullRow';\r\n            if (startEditing && !fullRowEdit) {\r\n                const cellIsEditable = this.isCellEditable(nextPosition);\r\n                if (!cellIsEditable) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            this.ensureCellVisible(nextPosition);\r\n\r\n            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\r\n            // or row that is not currently in view, hence the renderedCell would not exist\r\n            const nextCell = _getCellByPosition(beans, nextPosition);\r\n\r\n            // if next cell is fullWidth row, then no rendered cell,\r\n            // as fullWidth rows have no cells, so we skip it\r\n            if (!nextCell) {\r\n                const row = rowRenderer.getRowByPosition(nextPosition);\r\n                if (!row || !row.isFullWidth() || startEditing) {\r\n                    continue;\r\n                }\r\n                return row;\r\n            }\r\n\r\n            if (cellNavigation!.isSuppressNavigable(nextCell.column, nextCell.rowNode)) {\r\n                continue;\r\n            }\r\n\r\n            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\r\n            // consistent, we set into range here also.\r\n            rangeSvc?.setRangeToCell(nextPosition);\r\n\r\n            // we successfully tabbed onto a grid cell, so return true\r\n            return nextCell;\r\n        }\r\n    }\r\n\r\n    private isCellEditable(cell: CellPosition): boolean {\r\n        const rowNode = this.lookupRowNodeForCell(cell);\r\n\r\n        if (rowNode) {\r\n            return cell.column.isCellEditable(rowNode);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private lookupRowNodeForCell({ rowIndex, rowPinned }: CellPosition) {\r\n        const { pinnedRowModel, rowModel } = this.beans;\r\n        if (rowPinned === 'top') {\r\n            return pinnedRowModel?.getPinnedTopRow(rowIndex);\r\n        }\r\n\r\n        if (rowPinned === 'bottom') {\r\n            return pinnedRowModel?.getPinnedBottomRow(rowIndex);\r\n        }\r\n\r\n        return rowModel.getRow(rowIndex);\r\n    }\r\n\r\n    // we use index for rows, but column object for columns, as the next column (by index) might not\r\n    // be visible (header grouping) so it's not reliable, so using the column object instead.\r\n    public navigateToNextCell(\r\n        event: KeyboardEvent | null,\r\n        key: string,\r\n        currentCell: CellPosition,\r\n        allowUserOverride: boolean\r\n    ) {\r\n        // we keep searching for a next cell until we find one. this is how the group rows get skipped\r\n        let nextCell: CellPosition | null = currentCell;\r\n        let hitEdgeOfGrid = false;\r\n        const beans = this.beans;\r\n        const { cellNavigation, focusSvc, gos } = beans;\r\n\r\n        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {\r\n            // if the current cell is spanning across multiple columns, we need to move\r\n            // our current position to be the last cell on the right before finding the\r\n            // the next target.\r\n            if (gos.get('enableRtl')) {\r\n                if (key === KeyCode.LEFT) {\r\n                    nextCell = this.getLastCellOfColSpan(nextCell);\r\n                }\r\n            } else if (key === KeyCode.RIGHT) {\r\n                nextCell = this.getLastCellOfColSpan(nextCell);\r\n            }\r\n\r\n            nextCell = cellNavigation!.getNextCellToFocus(key, nextCell);\r\n\r\n            // eg if going down, and nextCell=undefined, means we are gone past the last row\r\n            hitEdgeOfGrid = _missing(nextCell);\r\n        }\r\n\r\n        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {\r\n            nextCell = {\r\n                rowIndex: -1,\r\n                rowPinned: null,\r\n                column: currentCell.column,\r\n            };\r\n        }\r\n\r\n        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\r\n        // we allow this, however if processing 'enter after edit' we don't allow override\r\n        if (allowUserOverride) {\r\n            const userFunc = gos.getCallback('navigateToNextCell');\r\n            if (_exists(userFunc)) {\r\n                const params: WithoutGridCommon<NavigateToNextCellParams> = {\r\n                    key: key,\r\n                    previousCellPosition: currentCell,\r\n                    nextCellPosition: nextCell ? nextCell : null,\r\n                    event: event,\r\n                };\r\n                const userCell = userFunc(params);\r\n                if (_exists(userCell)) {\r\n                    nextCell = {\r\n                        rowPinned: userCell.rowPinned,\r\n                        rowIndex: userCell.rowIndex,\r\n                        column: userCell.column,\r\n                    } as CellPosition;\r\n                } else {\r\n                    nextCell = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\r\n        if (!nextCell) {\r\n            return;\r\n        }\r\n\r\n        if (nextCell.rowIndex < 0) {\r\n            const headerLen = getFocusHeaderRowCount(beans);\r\n\r\n            focusSvc.focusHeaderPosition({\r\n                headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },\r\n                event: event || undefined,\r\n                fromCell: true,\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        // in case we have col spanning we get the cellComp and use it to get the\r\n        // position. This was we always focus the first cell inside the spanning.\r\n        const normalisedPosition = this.getNormalisedPosition(nextCell);\r\n        if (normalisedPosition) {\r\n            this.focusPosition(normalisedPosition);\r\n        } else {\r\n            this.tryToFocusFullWidthRow(nextCell);\r\n        }\r\n    }\r\n\r\n    private getNormalisedPosition(cellPosition: CellPosition): CellPosition | null {\r\n        // ensureCellVisible first, to make sure cell at position is rendered.\r\n        this.ensureCellVisible(cellPosition);\r\n\r\n        const cellCtrl = _getCellByPosition(this.beans, cellPosition);\r\n\r\n        // not guaranteed to have a cellComp when using the SSRM as blocks are loading.\r\n        if (!cellCtrl) {\r\n            return null;\r\n        }\r\n\r\n        cellPosition = cellCtrl.cellPosition;\r\n        // we call this again, as nextCell can be different to it's previous value due to Column Spanning\r\n        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\r\n        // last column in the group, however now it's the first column in the group). if we didn't do\r\n        // ensureCellVisible again, then we could only be showing the last portion (last column) of the\r\n        // merged cells.\r\n        this.ensureCellVisible(cellPosition);\r\n\r\n        return cellPosition;\r\n    }\r\n\r\n    public tryToFocusFullWidthRow(position: CellPosition | RowPosition, backwards?: boolean): boolean {\r\n        const { visibleCols, rowRenderer, focusSvc, eventSvc } = this.beans;\r\n        const displayedColumns = visibleCols.allCols;\r\n        const rowComp = rowRenderer.getRowByPosition(position);\r\n        if (!rowComp || !rowComp.isFullWidth()) {\r\n            return false;\r\n        }\r\n\r\n        const currentCellFocused = focusSvc.getFocusedCell();\r\n\r\n        const cellPosition: CellPosition = {\r\n            rowIndex: position.rowIndex,\r\n            rowPinned: position.rowPinned,\r\n            column: (position as CellPosition).column || (backwards ? _last(displayedColumns) : displayedColumns[0]),\r\n        };\r\n\r\n        this.focusPosition(cellPosition);\r\n\r\n        const fromBelow =\r\n            backwards == null\r\n                ? currentCellFocused != null && _isRowBefore(cellPosition, currentCellFocused)\r\n                : backwards;\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'fullWidthRowFocused',\r\n            rowIndex: cellPosition.rowIndex,\r\n            rowPinned: cellPosition.rowPinned,\r\n            column: cellPosition.column,\r\n            isFullWidthCell: true,\r\n            fromBelow,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    private focusPosition(cellPosition: CellPosition) {\r\n        const { focusSvc, rangeSvc } = this.beans;\r\n        focusSvc.setFocusedCell({\r\n            rowIndex: cellPosition.rowIndex,\r\n            column: cellPosition.column,\r\n            rowPinned: cellPosition.rowPinned,\r\n            forceBrowserFocus: true,\r\n        });\r\n\r\n        rangeSvc?.setRangeToCell(cellPosition);\r\n    }\r\n\r\n    private isValidNavigateCell(cell: CellPosition): boolean {\r\n        const rowNode = _getRowNode(this.beans, cell);\r\n\r\n        // we do not allow focusing on detail rows and full width rows\r\n        return !!rowNode;\r\n    }\r\n\r\n    private getLastCellOfColSpan(cell: CellPosition): CellPosition {\r\n        const cellCtrl = _getCellByPosition(this.beans, cell);\r\n\r\n        if (!cellCtrl) {\r\n            return cell;\r\n        }\r\n\r\n        const colSpanningList = cellCtrl.getColSpanningList();\r\n\r\n        if (colSpanningList.length === 1) {\r\n            return cell;\r\n        }\r\n\r\n        return {\r\n            rowIndex: cell.rowIndex,\r\n            column: _last(colSpanningList),\r\n            rowPinned: cell.rowPinned,\r\n        };\r\n    }\r\n\r\n    public ensureCellVisible(gridCell: CellPosition): void {\r\n        const isGroupStickyEnabled = _isGroupRowsSticky(this.gos);\r\n\r\n        const rowNode = this.beans.rowModel.getRow(gridCell.rowIndex);\r\n        // sticky rows are always visible, so the grid shouldn't scroll to focus them.\r\n        const skipScrollToRow = isGroupStickyEnabled && rowNode?.sticky;\r\n\r\n        const { scrollFeature } = this.gridBodyCon;\r\n\r\n        // this scrolls the row into view\r\n        if (!skipScrollToRow && _missing(gridCell.rowPinned)) {\r\n            scrollFeature.ensureIndexVisible(gridCell.rowIndex);\r\n        }\r\n\r\n        if (!gridCell.column.isPinned()) {\r\n            scrollFeature.ensureColumnVisible(gridCell.column);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getVScroll(beans: BeanCollection): VerticalScrollPosition {\r\n    return beans.ctrlsSvc.getScrollFeature().getVScrollPosition();\r\n}\r\n", "import type { _KeyboardNavigationGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { CellNavigationService } from './cellNavigationService';\r\nimport { HeaderNavigationService } from './headerNavigationService';\r\nimport {\r\n    clearFocusedCell,\r\n    getFocusedCell,\r\n    setFocusedCell,\r\n    setFocusedHeader,\r\n    tabToNextCell,\r\n    tabToPreviousCell,\r\n} from './navigationApi';\r\nimport { NavigationService } from './navigationService';\r\n\r\n/**\r\n * @feature Interactivity -> Keyboard Navigation\r\n */\r\nexport const KeyboardNavigationModule: _ModuleWithApi<_KeyboardNavigationGridApi> = {\r\n    moduleName: 'KeyboardNavigation',\r\n    version: VERSION,\r\n    beans: [NavigationService, CellNavigationService, HeaderNavigationService],\r\n    apiFunctions: {\r\n        getFocusedCell,\r\n        clearFocusedCell,\r\n        setFocusedCell,\r\n        setFocusedHeader,\r\n        tabToNextCell,\r\n        tabToPreviousCell,\r\n    },\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { ModelUpdatedEvent } from '../events';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\n\r\nexport class PageBoundsListener extends BeanStub implements NamedBean {\r\n    beanName = 'pageBoundsListener' as const;\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({\r\n            modelUpdated: this.onModelUpdated.bind(this),\r\n            recalculateRowBounds: this.calculatePages.bind(this),\r\n        });\r\n\r\n        this.onModelUpdated();\r\n    }\r\n\r\n    private onModelUpdated(modelUpdatedEvent?: WithoutGridCommon<ModelUpdatedEvent>): void {\r\n        this.calculatePages();\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'paginationChanged',\r\n            animate: modelUpdatedEvent?.animate ?? false,\r\n            newData: modelUpdatedEvent?.newData ?? false,\r\n            newPage: modelUpdatedEvent?.newPage ?? false,\r\n            newPageSize: modelUpdatedEvent?.newPageSize ?? false,\r\n            keepRenderedRows: modelUpdatedEvent?.keepRenderedRows ?? false,\r\n        });\r\n    }\r\n\r\n    private calculatePages(): void {\r\n        const { pageBounds, pagination, rowModel } = this.beans;\r\n        if (pagination) {\r\n            pagination.calculatePages();\r\n        } else {\r\n            pageBounds.calculateBounds(0, rowModel.getRowCount() - 1);\r\n        }\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowBounds } from '../interfaces/iRowModel';\r\n\r\n// note that everything in this service is used even when pagination is off\r\nexport class PageBoundsService extends BeanStub implements NamedBean {\r\n    beanName = 'pageBounds' as const;\r\n\r\n    private topRowBounds?: Required<RowBounds> | null;\r\n    private bottomRowBounds?: Required<RowBounds> | null;\r\n    private pixelOffset = 0;\r\n\r\n    public getFirstRow(): number {\r\n        return this.topRowBounds?.rowIndex ?? -1;\r\n    }\r\n\r\n    public getLastRow(): number {\r\n        return this.bottomRowBounds?.rowIndex ?? -1;\r\n    }\r\n\r\n    public getCurrentPageHeight(): number {\r\n        const { topRowBounds, bottomRowBounds } = this;\r\n        if (!topRowBounds || !bottomRowBounds) {\r\n            return 0;\r\n        }\r\n        return Math.max(bottomRowBounds.rowTop + bottomRowBounds.rowHeight - topRowBounds.rowTop, 0);\r\n    }\r\n\r\n    public getCurrentPagePixelRange(): { pageFirstPixel: number; pageLastPixel: number } {\r\n        const { topRowBounds, bottomRowBounds } = this;\r\n        const pageFirstPixel = topRowBounds?.rowTop ?? 0;\r\n        const pageLastPixel = bottomRowBounds ? bottomRowBounds.rowTop + bottomRowBounds.rowHeight : 0;\r\n        return { pageFirstPixel, pageLastPixel };\r\n    }\r\n\r\n    public calculateBounds(topDisplayedRowIndex: number, bottomDisplayedRowIndex: number): void {\r\n        const { rowModel } = this.beans;\r\n        const topRowBounds = rowModel.getRowBounds(topDisplayedRowIndex)!;\r\n        if (topRowBounds) {\r\n            topRowBounds.rowIndex = topDisplayedRowIndex;\r\n        }\r\n        this.topRowBounds = topRowBounds as Required<RowBounds> | null;\r\n\r\n        const bottomRowBounds = rowModel.getRowBounds(bottomDisplayedRowIndex)!;\r\n        if (bottomRowBounds) {\r\n            bottomRowBounds.rowIndex = bottomDisplayedRowIndex;\r\n        }\r\n        this.bottomRowBounds = bottomRowBounds as Required<RowBounds> | null;\r\n\r\n        this.calculatePixelOffset();\r\n    }\r\n\r\n    public getPixelOffset(): number {\r\n        return this.pixelOffset;\r\n    }\r\n\r\n    private calculatePixelOffset(): void {\r\n        const value = this.topRowBounds?.rowTop ?? 0;\r\n\r\n        if (this.pixelOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this.pixelOffset = value;\r\n        // this event is required even when pagination is off\r\n        this.eventSvc.dispatchEvent({ type: 'paginationPixelOffsetChanged' });\r\n    }\r\n}\r\n", "export const pinnedColumnModuleCSS = /*css*/ `.ag-pinned-left-floating-bottom,.ag-pinned-left-floating-top,.ag-pinned-right-floating-bottom,.ag-pinned-right-floating-top{display:inline-block;min-width:0;overflow:hidden;position:relative}.ag-pinned-left-sticky-top,.ag-pinned-right-sticky-top{height:100%;overflow:hidden;position:relative}.ag-sticky-bottom-full-width-container,.ag-sticky-top-full-width-container{height:100%;overflow:hidden;width:100%}.ag-pinned-left-header,.ag-pinned-right-header{display:inline-block;height:100%;overflow:hidden;position:relative}.ag-body-horizontal-scroll:not(.ag-scrollbar-invisible){.ag-horizontal-left-spacer:not(.ag-scroller-corner){border-right:var(--ag-pinned-column-border)}.ag-horizontal-right-spacer:not(.ag-scroller-corner){border-left:var(--ag-pinned-column-border)}}.ag-pinned-right-header{border-left:var(--ag-pinned-column-border)}.ag-pinned-left-header{border-right:var(--ag-pinned-column-border)}.ag-cell.ag-cell-first-right-pinned:not(.ag-cell-range-left,.ag-cell-range-single-cell,.ag-cell-focus:not(.ag-cell-range-selected):focus-within){border-left:var(--ag-pinned-column-border)}.ag-cell.ag-cell-last-left-pinned:not(.ag-cell-range-right,.ag-cell-range-single-cell,.ag-cell-focus:not(.ag-cell-range-selected):focus-within){border-right:var(--ag-pinned-column-border)}.ag-pinned-left-header .ag-header-cell-resize:after{left:calc(50% - var(--ag-header-column-resize-handle-width))}.ag-pinned-right-header .ag-header-cell-resize:after{left:50%}.ag-pinned-left-header .ag-header-cell-resize{right:-3px}.ag-pinned-right-header .ag-header-cell-resize{left:-3px}`;\n", "import { BeanStub } from '../../context/beanStub';\r\nimport { _setDisplayed, _setFixedWidth } from '../../utils/dom';\r\n\r\nexport class SetPinnedWidthFeature extends BeanStub {\r\n    public readonly getWidth: () => number;\r\n\r\n    constructor(\r\n        private readonly element: HTMLElement,\r\n        private readonly isLeft: boolean\r\n    ) {\r\n        super();\r\n        this.getWidth = isLeft ? () => this.beans.pinnedCols!.leftWidth : () => this.beans.pinnedCols!.rightWidth;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({\r\n            [`${this.isLeft ? 'left' : 'right'}PinnedWidthChanged` as const]: this.onPinnedWidthChanged.bind(this),\r\n        });\r\n    }\r\n\r\n    private onPinnedWidthChanged(): void {\r\n        const width = this.getWidth();\r\n        const displayed = width > 0;\r\n        _setDisplayed(this.element, displayed);\r\n        _setFixedWidth(this.element, width);\r\n    }\r\n}\r\n", "import { dispatchColumnPinnedEvent } from '../columns/columnEventUtils';\r\nimport type { ColKey } from '../columns/columnModel';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport { SetPinnedWidthFeature } from '../gridBodyComp/rowContainer/setPinnedWidthFeature';\r\nimport { _isDomLayout } from '../gridOptionsUtils';\r\nimport type { HeaderRowContainerCtrl } from '../headerRendering/rowContainer/headerRowContainerCtrl';\r\nimport type { ProcessUnpinnedColumnsParams } from '../interfaces/iCallbackParams';\r\nimport type { ColumnPinnedType } from '../interfaces/iColumn';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport { _getInnerWidth } from '../utils/dom';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport class PinnedColumnService extends BeanStub implements NamedBean {\r\n    beanName = 'pinnedCols' as const;\r\n\r\n    private gridBodyCtrl: GridBodyCtrl;\r\n\r\n    public leftWidth: number;\r\n    public rightWidth: number;\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCtrl = p.gridBodyCtrl;\r\n        });\r\n        const listener = this.checkContainerWidths.bind(this);\r\n        this.addManagedEventListeners({\r\n            displayedColumnsChanged: listener,\r\n            displayedColumnsWidthChanged: listener,\r\n        });\r\n        this.addManagedPropertyListener('domLayout', listener);\r\n    }\r\n\r\n    private checkContainerWidths() {\r\n        const { gos, visibleCols, eventSvc } = this.beans;\r\n        const printLayout = _isDomLayout(gos, 'print');\r\n\r\n        const newLeftWidth = printLayout ? 0 : visibleCols.getColsLeftWidth();\r\n        const newRightWidth = printLayout ? 0 : visibleCols.getDisplayedColumnsRightWidth();\r\n\r\n        if (newLeftWidth != this.leftWidth) {\r\n            this.leftWidth = newLeftWidth;\r\n            eventSvc.dispatchEvent({ type: 'leftPinnedWidthChanged' });\r\n        }\r\n\r\n        if (newRightWidth != this.rightWidth) {\r\n            this.rightWidth = newRightWidth;\r\n            eventSvc.dispatchEvent({ type: 'rightPinnedWidthChanged' });\r\n        }\r\n    }\r\n\r\n    public keepPinnedColumnsNarrowerThanViewport(): void {\r\n        const eBodyViewport = this.gridBodyCtrl.eBodyViewport;\r\n        const bodyWidth = _getInnerWidth(eBodyViewport);\r\n\r\n        if (bodyWidth <= 50) {\r\n            return;\r\n        }\r\n\r\n        // remove 50px from the bodyWidth to give some margin\r\n        let columnsToRemove = this.getPinnedColumnsOverflowingViewport(bodyWidth - 50);\r\n        const processUnpinnedColumns = this.gos.getCallback('processUnpinnedColumns');\r\n\r\n        if (!columnsToRemove.length) {\r\n            return;\r\n        }\r\n\r\n        if (processUnpinnedColumns) {\r\n            const params: WithoutGridCommon<ProcessUnpinnedColumnsParams> = {\r\n                columns: columnsToRemove,\r\n                viewportWidth: bodyWidth,\r\n            };\r\n            columnsToRemove = processUnpinnedColumns(params) as AgColumn[];\r\n        }\r\n\r\n        this.setColsPinned(columnsToRemove, null, 'viewportSizeFeature');\r\n    }\r\n\r\n    public createPinnedWidthFeature(element: HTMLElement, isLeft: boolean): SetPinnedWidthFeature {\r\n        return new SetPinnedWidthFeature(element, isLeft);\r\n    }\r\n\r\n    public setColsPinned(keys: ColKey[], pinned: ColumnPinnedType, source: ColumnEventType): void {\r\n        const { colModel, colAnimation, visibleCols, gos } = this.beans;\r\n        if (!colModel.cols) {\r\n            return;\r\n        }\r\n        if (!keys?.length) {\r\n            return;\r\n        }\r\n\r\n        if (_isDomLayout(gos, 'print')) {\r\n            _warn(37);\r\n            return;\r\n        }\r\n\r\n        colAnimation?.start();\r\n\r\n        let actualPinned: ColumnPinnedType;\r\n        if (pinned === true || pinned === 'left') {\r\n            actualPinned = 'left';\r\n        } else if (pinned === 'right') {\r\n            actualPinned = 'right';\r\n        } else {\r\n            actualPinned = null;\r\n        }\r\n\r\n        const updatedCols: AgColumn[] = [];\r\n\r\n        keys.forEach((key) => {\r\n            if (!key) {\r\n                return;\r\n            }\r\n            const column = colModel.getCol(key);\r\n            if (!column) {\r\n                return;\r\n            }\r\n\r\n            if (column.getPinned() !== actualPinned) {\r\n                this.setColPinned(column, actualPinned);\r\n                updatedCols.push(column);\r\n            }\r\n        });\r\n\r\n        if (updatedCols.length) {\r\n            visibleCols.refresh(source);\r\n            dispatchColumnPinnedEvent(this.eventSvc, updatedCols, source);\r\n        }\r\n\r\n        colAnimation?.finish();\r\n    }\r\n\r\n    public initCol(column: AgColumn): void {\r\n        const { pinned, initialPinned } = column.colDef;\r\n        if (pinned !== undefined) {\r\n            this.setColPinned(column, pinned);\r\n        } else {\r\n            this.setColPinned(column, initialPinned);\r\n        }\r\n    }\r\n\r\n    public setColPinned(column: AgColumn, pinned: ColumnPinnedType): void {\r\n        if (pinned === true || pinned === 'left') {\r\n            column.pinned = 'left';\r\n        } else if (pinned === 'right') {\r\n            column.pinned = 'right';\r\n        } else {\r\n            column.pinned = null;\r\n        }\r\n        column.dispatchStateUpdatedEvent('pinned');\r\n    }\r\n\r\n    public setupHeaderPinnedWidth(ctrl: HeaderRowContainerCtrl): void {\r\n        const { scrollVisibleSvc } = this.beans;\r\n\r\n        if (ctrl.pinned == null) {\r\n            return;\r\n        }\r\n\r\n        const pinningLeft = ctrl.pinned === 'left';\r\n        const pinningRight = ctrl.pinned === 'right';\r\n\r\n        ctrl.hidden = true;\r\n\r\n        const listener = () => {\r\n            const width = pinningLeft ? this.leftWidth : this.rightWidth;\r\n            if (width == null) {\r\n                return;\r\n            } // can happen at initialisation, width not yet set\r\n\r\n            const hidden = width == 0;\r\n            const hiddenChanged = ctrl.hidden !== hidden;\r\n            const isRtl = this.gos.get('enableRtl');\r\n            const scrollbarWidth = scrollVisibleSvc.getScrollbarWidth();\r\n\r\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\r\n            // in the body, then we add extra space to keep header aligned with the body,\r\n            // as body width fits the cols and the scrollbar\r\n            const addPaddingForScrollbar =\r\n                scrollVisibleSvc.verticalScrollShowing && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\r\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\r\n\r\n            ctrl.comp.setPinnedContainerWidth(`${widthWithPadding}px`);\r\n            ctrl.comp.setDisplayed(!hidden);\r\n\r\n            if (hiddenChanged) {\r\n                ctrl.hidden = hidden;\r\n                ctrl.refresh();\r\n            }\r\n        };\r\n\r\n        ctrl.addManagedEventListeners({\r\n            leftPinnedWidthChanged: listener,\r\n            rightPinnedWidthChanged: listener,\r\n            scrollVisibilityChanged: listener,\r\n            scrollbarWidthChanged: listener,\r\n        });\r\n    }\r\n\r\n    public getHeaderResizeDiff(diff: number, column: AgColumn | AgColumnGroup): number {\r\n        const pinned = column.getPinned();\r\n        if (pinned) {\r\n            const { leftWidth, rightWidth } = this;\r\n            const bodyWidth = _getInnerWidth(this.beans.ctrlsSvc.getGridBodyCtrl().eBodyViewport) - 50;\r\n\r\n            if (leftWidth + rightWidth + diff > bodyWidth) {\r\n                if (bodyWidth > leftWidth + rightWidth) {\r\n                    // allow body width to ignore resize multiplier and fill space for last tick\r\n                    diff = bodyWidth - leftWidth - rightWidth;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return diff;\r\n    }\r\n\r\n    private getPinnedColumnsOverflowingViewport(viewportWidth: number): AgColumn[] {\r\n        const pinnedRightWidth = this.rightWidth ?? 0;\r\n        const pinnedLeftWidth = this.leftWidth ?? 0;\r\n        const totalPinnedWidth = pinnedRightWidth + pinnedLeftWidth;\r\n\r\n        if (totalPinnedWidth < viewportWidth) {\r\n            return [];\r\n        }\r\n\r\n        const { visibleCols } = this.beans;\r\n        const pinnedLeftColumns = [...visibleCols.leftCols];\r\n        const pinnedRightColumns = [...visibleCols.rightCols];\r\n\r\n        let indexRight = 0;\r\n        let indexLeft = 0;\r\n        const totalWidthRemoved = 0;\r\n\r\n        const columnsToRemove: AgColumn[] = [];\r\n\r\n        let spaceNecessary = totalPinnedWidth - totalWidthRemoved - viewportWidth;\r\n\r\n        while ((indexLeft < pinnedLeftColumns.length || indexRight < pinnedRightColumns.length) && spaceNecessary > 0) {\r\n            if (indexRight < pinnedRightColumns.length) {\r\n                const currentColumn = pinnedRightColumns[indexRight++];\r\n                spaceNecessary -= currentColumn.getActualWidth();\r\n                columnsToRemove.push(currentColumn);\r\n            }\r\n\r\n            if (indexLeft < pinnedLeftColumns.length && spaceNecessary > 0) {\r\n                const currentColumn = pinnedLeftColumns[indexLeft++];\r\n                spaceNecessary -= currentColumn.getActualWidth();\r\n                columnsToRemove.push(currentColumn);\r\n            }\r\n        }\r\n\r\n        return columnsToRemove;\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { pinnedColumnModuleCSS } from './pinnedColumnModule.css-GENERATED';\r\nimport { PinnedColumnService } from './pinnedColumnService';\r\n\r\n/**\r\n * @feature Columns -> Column Pinning\r\n * @colDef pinned\r\n */\r\nexport const PinnedColumnModule: _ModuleWithoutApi = {\r\n    moduleName: 'PinnedColumn',\r\n    version: VERSION,\r\n    beans: [PinnedColumnService],\r\n    css: [pinnedColumnModuleCSS],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _getDocument } from '../gridOptionsUtils';\r\nimport { _setAriaAtomic, _setAriaLive, _setAriaRelevant } from '../utils/aria';\r\nimport { _clearElement } from '../utils/dom';\r\nimport { _debounce } from '../utils/function';\r\n\r\nexport class AriaAnnouncementService extends BeanStub implements NamedBean {\r\n    beanName = 'ariaAnnounce' as const;\r\n\r\n    private descriptionContainer: HTMLElement | null = null;\r\n\r\n    private pendingAnnouncements: Map<string, string> = new Map();\r\n    private lastAnnouncement: string = '';\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.updateAnnouncement = _debounce(this, this.updateAnnouncement.bind(this), 200);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const beans = this.beans;\r\n        const eDocument = _getDocument(beans);\r\n        const div = (this.descriptionContainer = eDocument.createElement('div'));\r\n        div.classList.add('ag-aria-description-container');\r\n\r\n        _setAriaLive(div, 'polite');\r\n        _setAriaRelevant(div, 'additions text');\r\n        _setAriaAtomic(div, true);\r\n\r\n        beans.eGridDiv.appendChild(div);\r\n    }\r\n\r\n    /**\r\n     * @param key used for debouncing calls\r\n     */\r\n    public announceValue(value: string, key: string): void {\r\n        this.pendingAnnouncements.set(key, value);\r\n        this.updateAnnouncement();\r\n    }\r\n\r\n    private updateAnnouncement(): void {\r\n        if (!this.descriptionContainer) {\r\n            return;\r\n        }\r\n\r\n        const value = Array.from(this.pendingAnnouncements.values()).join('. ');\r\n        this.pendingAnnouncements.clear();\r\n        // screen readers announce a change in content, so we set it to an empty value\r\n        // and then use a setTimeout to force the Screen Reader announcement\r\n        this.descriptionContainer.textContent = '';\r\n        setTimeout(() => {\r\n            if (this.isAlive() && this.descriptionContainer) {\r\n                let valueToAnnounce = value;\r\n                // if the announcement is the same (static announcement)\r\n                // we add a period at the end to force screen readers to announce\r\n                if (this.lastAnnouncement === valueToAnnounce) {\r\n                    valueToAnnounce = `${valueToAnnounce}.`;\r\n                }\r\n                this.lastAnnouncement = valueToAnnounce;\r\n                this.descriptionContainer.textContent = valueToAnnounce;\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        const { descriptionContainer } = this;\r\n\r\n        if (descriptionContainer) {\r\n            _clearElement(descriptionContainer);\r\n            descriptionContainer.parentElement?.removeChild(descriptionContainer);\r\n        }\r\n        this.descriptionContainer = null;\r\n        this.pendingAnnouncements.clear();\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { AriaAnnouncementService } from './ariaAnnouncementService';\r\n\r\n/**\r\n * @feature Interactivity -> Accessibility (ARIA)\r\n */\r\nexport const AriaModule: _ModuleWithoutApi = {\r\n    moduleName: 'Aria',\r\n    version: VERSION,\r\n    beans: [AriaAnnouncementService],\r\n};\r\n", "import type { BeanCollection } from '../../context/context';\r\n\r\nexport function showLoadingOverlay(beans: BeanCollection): void {\r\n    beans.overlays?.showLoadingOverlay();\r\n}\r\n\r\nexport function showNoRowsOverlay(beans: BeanCollection): void {\r\n    beans.overlays?.showNoRowsOverlay();\r\n}\r\n\r\nexport function hideOverlay(beans: BeanCollection): void {\r\n    beans.overlays?.hideOverlay();\r\n}\r\n", "export const overlayWrapperComponentCSS = /*css*/ `.ag-overlay{inset:0;pointer-events:none;position:absolute;z-index:2}.ag-overlay-panel,.ag-overlay-wrapper{display:flex;height:100%;width:100%}.ag-overlay-wrapper{align-items:center;flex:none;justify-content:center;text-align:center}.ag-overlay-loading-wrapper{pointer-events:all}.ag-overlay-loading-center{background:var(--ag-background-color);border:1px solid var(--ag-border-color);border-radius:var(--ag-border-radius);box-shadow:var(--ag-popup-shadow);padding:var(--ag-spacing)}`;\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport type { GridOptions } from '../../entities/gridOptions';\r\nimport { _getActiveDomElement, _isNothingFocused } from '../../gridOptionsUtils';\r\nimport type { LayoutView, UpdateLayoutClassesParams } from '../../styling/layoutFeature';\r\nimport { LayoutCssClasses, LayoutFeature } from '../../styling/layoutFeature';\r\nimport { _last } from '../../utils/array';\r\nimport { _clearElement } from '../../utils/dom';\r\nimport { _isStopPropagationForAgGrid } from '../../utils/event';\r\nimport { _findNextFocusableElement, _focusInto, _focusNextGridCoreContainer } from '../../utils/focus';\r\nimport type { AgPromise } from '../../utils/promise';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { Component, RefPlaceholder } from '../../widgets/component';\r\nimport type { IOverlayComp } from './overlayComponent';\r\nimport { overlayWrapperComponentCSS } from './overlayWrapperComponent.css-GENERATED';\r\n\r\nexport class OverlayWrapperComponent extends Component implements LayoutView {\r\n    private readonly eOverlayWrapper: HTMLElement = RefPlaceholder;\r\n\r\n    private activePromise: AgPromise<IOverlayComp> | null = null;\r\n    private activeOverlay: IOverlayComp | null = null;\r\n    private updateListenerDestroyFunc: (() => null) | null = null;\r\n    private activeCssClass: string | null = null;\r\n    private elToFocusAfter: HTMLElement | null = null;\r\n\r\n    constructor() {\r\n        // wrapping in outer div, and wrapper, is needed to center the loading icon\r\n        super(/* html */ `\r\n            <div class=\"ag-overlay\" role=\"presentation\">\r\n                <div class=\"ag-overlay-panel\" role=\"presentation\">\r\n                    <div class=\"ag-overlay-wrapper\" data-ref=\"eOverlayWrapper\" role=\"presentation\"></div>\r\n                </div>\r\n            </div>`);\r\n        this.registerCSS(overlayWrapperComponentCSS);\r\n    }\r\n\r\n    private handleKeyDown(e: KeyboardEvent): void {\r\n        if (e.key !== KeyCode.TAB || e.defaultPrevented || _isStopPropagationForAgGrid(e)) {\r\n            return;\r\n        }\r\n\r\n        const beans = this.beans;\r\n\r\n        const nextEl = _findNextFocusableElement(beans, this.eOverlayWrapper, false, e.shiftKey);\r\n        if (nextEl) {\r\n            return;\r\n        }\r\n\r\n        let isFocused = false;\r\n        if (e.shiftKey) {\r\n            isFocused = beans.focusSvc.focusGridView(_last(beans.visibleCols.allCols), true, false);\r\n        } else {\r\n            isFocused = _focusNextGridCoreContainer(beans, false);\r\n        }\r\n\r\n        if (isFocused) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    public updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\r\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\r\n        const { AUTO_HEIGHT, NORMAL, PRINT } = LayoutCssClasses;\r\n        overlayWrapperClassList.toggle(AUTO_HEIGHT, params.autoHeight);\r\n        overlayWrapperClassList.toggle(NORMAL, params.normal);\r\n        overlayWrapperClassList.toggle(PRINT, params.print);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.createManagedBean(new LayoutFeature(this));\r\n        this.setDisplayed(false, { skipAriaHidden: true });\r\n\r\n        this.beans.overlays!.setOverlayWrapperComp(this);\r\n        this.addManagedElementListeners(this.getFocusableElement(), { keydown: this.handleKeyDown.bind(this) });\r\n    }\r\n\r\n    private setWrapperTypeClass(overlayWrapperCssClass: string): void {\r\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\r\n        if (this.activeCssClass) {\r\n            overlayWrapperClassList.toggle(this.activeCssClass, false);\r\n        }\r\n        this.activeCssClass = overlayWrapperCssClass;\r\n        overlayWrapperClassList.toggle(overlayWrapperCssClass, true);\r\n    }\r\n\r\n    public showOverlay(\r\n        overlayComponentPromise: AgPromise<IOverlayComp> | null,\r\n        overlayWrapperCssClass: string,\r\n        exclusive: boolean,\r\n        gridOption?: keyof GridOptions\r\n    ): void {\r\n        this.setWrapperTypeClass(overlayWrapperCssClass);\r\n        this.destroyActiveOverlay();\r\n\r\n        this.elToFocusAfter = null;\r\n        this.activePromise = overlayComponentPromise;\r\n\r\n        if (!overlayComponentPromise) {\r\n            return;\r\n        }\r\n\r\n        this.setDisplayed(true, { skipAriaHidden: true });\r\n\r\n        if (exclusive && this.isGridFocused()) {\r\n            const activeElement = _getActiveDomElement(this.beans);\r\n            if (activeElement && !_isNothingFocused(this.beans)) {\r\n                this.elToFocusAfter = activeElement as HTMLElement;\r\n            }\r\n        }\r\n\r\n        overlayComponentPromise.then((comp) => {\r\n            if (this.activePromise !== overlayComponentPromise) {\r\n                // Another promise was started, we need to cancel this old operation\r\n                if (this.activeOverlay !== comp) {\r\n                    // We can destroy the component as it will not be used\r\n                    this.destroyBean(comp);\r\n                    comp = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.activePromise = null; // Promise completed, so we can reset this\r\n\r\n            if (!comp) {\r\n                return; // Error handling\r\n            }\r\n\r\n            if (this.activeOverlay !== comp) {\r\n                this.eOverlayWrapper.appendChild(comp.getGui());\r\n                this.activeOverlay = comp;\r\n\r\n                if (gridOption) {\r\n                    const component = comp;\r\n                    this.updateListenerDestroyFunc = this.addManagedPropertyListener(gridOption, ({ currentValue }) => {\r\n                        component.refresh?.(this.gos.addGridCommonParams({ ...(currentValue ?? {}) }));\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (exclusive && this.isGridFocused()) {\r\n                _focusInto(this.eOverlayWrapper);\r\n            }\r\n        });\r\n    }\r\n\r\n    public updateOverlayWrapperPaddingTop(padding: number): void {\r\n        this.eOverlayWrapper.style.setProperty('padding-top', `${padding}px`);\r\n    }\r\n\r\n    private destroyActiveOverlay(): void {\r\n        this.activePromise = null;\r\n\r\n        const activeOverlay = this.activeOverlay;\r\n        if (!activeOverlay) {\r\n            return; // Nothing to destroy\r\n        }\r\n\r\n        let elementToFocus = this.elToFocusAfter;\r\n        this.activeOverlay = null;\r\n        this.elToFocusAfter = null;\r\n\r\n        if (elementToFocus && !this.isGridFocused()) {\r\n            elementToFocus = null;\r\n        }\r\n\r\n        const updateListenerDestroyFunc = this.updateListenerDestroyFunc;\r\n        if (updateListenerDestroyFunc) {\r\n            updateListenerDestroyFunc();\r\n            this.updateListenerDestroyFunc = null;\r\n        }\r\n\r\n        this.destroyBean(activeOverlay);\r\n\r\n        _clearElement(this.eOverlayWrapper);\r\n\r\n        // Focus the element that was focused before the exclusive overlay was shown\r\n        elementToFocus?.focus?.({ preventScroll: true });\r\n    }\r\n\r\n    public hideOverlay(): void {\r\n        this.destroyActiveOverlay();\r\n        this.setDisplayed(false, { skipAriaHidden: true });\r\n    }\r\n\r\n    private isGridFocused(): boolean {\r\n        const activeEl = _getActiveDomElement(this.beans);\r\n        return !!activeEl && this.beans.eGridDiv.contains(activeEl);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.elToFocusAfter = null;\r\n        this.destroyActiveOverlay();\r\n        this.beans.overlays!.setOverlayWrapperComp(undefined);\r\n        super.destroy();\r\n    }\r\n}\r\nexport const OverlayWrapperSelector: ComponentSelector = {\r\n    selector: 'AG-OVERLAY-WRAPPER',\r\n    component: OverlayWrapperComponent,\r\n};\r\n", "import { _getLoadingOverlayCompDetails, _getNoRowsOverlayCompDetails } from '../../components/framework/userCompUtils';\r\nimport type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { GridOptions } from '../../entities/gridOptions';\r\nimport { _isClientSideRowModel } from '../../gridOptionsUtils';\r\nimport type { UserCompDetails } from '../../interfaces/iUserCompDetails';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { OverlayWrapperComponent, OverlayWrapperSelector } from './overlayWrapperComponent';\r\n\r\nconst enum OverlayServiceState {\r\n    Hidden = 0,\r\n    Loading = 1,\r\n    NoRows = 2,\r\n}\r\n\r\nexport class OverlayService extends BeanStub implements NamedBean {\r\n    beanName = 'overlays' as const;\r\n\r\n    private isClientSide: boolean;\r\n    private state: OverlayServiceState = OverlayServiceState.Hidden;\r\n    private showInitialOverlay: boolean = true;\r\n    private exclusive?: boolean;\r\n    private wrapperPadding: number = 0;\r\n\r\n    public eWrapper: OverlayWrapperComponent | undefined;\r\n\r\n    public postConstruct(): void {\r\n        this.isClientSide = _isClientSideRowModel(this.gos);\r\n        const updateOverlayVisibility = () => this.updateOverlayVisibility();\r\n\r\n        this.addManagedEventListeners({\r\n            newColumnsLoaded: updateOverlayVisibility,\r\n            rowDataUpdated: updateOverlayVisibility,\r\n            gridSizeChanged: this.refreshWrapperPadding.bind(this),\r\n            rowCountReady: () => {\r\n                // Support hiding the initial overlay when data is set via transactions.\r\n                this.showInitialOverlay = false;\r\n                this.updateOverlayVisibility();\r\n            },\r\n        });\r\n\r\n        this.addManagedPropertyListener('loading', updateOverlayVisibility);\r\n    }\r\n\r\n    public setOverlayWrapperComp(overlayWrapperComp: OverlayWrapperComponent | undefined): void {\r\n        this.eWrapper = overlayWrapperComp;\r\n        this.updateOverlayVisibility();\r\n    }\r\n\r\n    /** Returns true if the overlay is visible. */\r\n    public isVisible(): boolean {\r\n        return this.state !== OverlayServiceState.Hidden && !!this.eWrapper;\r\n    }\r\n\r\n    /** Returns true if the overlay is visible and is exclusive (popup over the grid) */\r\n    public isExclusive(): boolean {\r\n        return this.state === OverlayServiceState.Loading && !!this.eWrapper;\r\n    }\r\n\r\n    public showLoadingOverlay(): void {\r\n        this.showInitialOverlay = false;\r\n\r\n        const gos = this.gos;\r\n        const loading = gos.get('loading');\r\n        if (!loading && (loading !== undefined || gos.get('suppressLoadingOverlay'))) {\r\n            return;\r\n        }\r\n\r\n        this.doShowLoadingOverlay();\r\n    }\r\n\r\n    public showNoRowsOverlay(): void {\r\n        this.showInitialOverlay = false;\r\n\r\n        const gos = this.gos;\r\n        if (gos.get('loading') || gos.get('suppressNoRowsOverlay')) {\r\n            return;\r\n        }\r\n\r\n        this.doShowNoRowsOverlay();\r\n    }\r\n\r\n    public hideOverlay(): void {\r\n        this.showInitialOverlay = false;\r\n\r\n        if (this.gos.get('loading')) {\r\n            _warn(99);\r\n            return;\r\n        }\r\n\r\n        this.doHideOverlay();\r\n    }\r\n\r\n    public getOverlayWrapperSelector(): ComponentSelector {\r\n        return OverlayWrapperSelector;\r\n    }\r\n\r\n    public getOverlayWrapperCompClass(): typeof OverlayWrapperComponent {\r\n        return OverlayWrapperComponent;\r\n    }\r\n\r\n    private updateOverlayVisibility(): void {\r\n        if (!this.eWrapper) {\r\n            this.state = OverlayServiceState.Hidden;\r\n            return;\r\n        }\r\n\r\n        const {\r\n            state,\r\n            isClientSide,\r\n            beans: { gos, colModel, rowModel },\r\n        } = this;\r\n        let loading = this.gos.get('loading');\r\n\r\n        if (loading !== undefined) {\r\n            // If loading is defined, we don't show the initial overlay.\r\n            this.showInitialOverlay = false;\r\n        }\r\n\r\n        if (this.showInitialOverlay && loading === undefined && !gos.get('suppressLoadingOverlay')) {\r\n            loading = !gos.get('columnDefs') || !colModel.ready || (!gos.get('rowData') && isClientSide);\r\n        }\r\n\r\n        if (loading) {\r\n            if (state !== OverlayServiceState.Loading) {\r\n                this.doShowLoadingOverlay();\r\n            }\r\n        } else {\r\n            this.showInitialOverlay = false;\r\n            if (rowModel.isEmpty() && !gos.get('suppressNoRowsOverlay') && isClientSide) {\r\n                if (state !== OverlayServiceState.NoRows) {\r\n                    this.doShowNoRowsOverlay();\r\n                }\r\n            } else if (state !== OverlayServiceState.Hidden) {\r\n                this.doHideOverlay();\r\n            }\r\n        }\r\n    }\r\n\r\n    private doShowLoadingOverlay(): void {\r\n        if (!this.eWrapper) {\r\n            return;\r\n        }\r\n\r\n        this.state = OverlayServiceState.Loading;\r\n        this.showOverlay(\r\n            _getLoadingOverlayCompDetails(this.beans.userCompFactory, {}),\r\n            'ag-overlay-loading-wrapper',\r\n            'loadingOverlayComponentParams'\r\n        );\r\n        this.updateExclusive();\r\n    }\r\n\r\n    private doShowNoRowsOverlay(): void {\r\n        if (!this.eWrapper) {\r\n            return;\r\n        }\r\n\r\n        this.state = OverlayServiceState.NoRows;\r\n        this.showOverlay(\r\n            _getNoRowsOverlayCompDetails(this.beans.userCompFactory, {}),\r\n            'ag-overlay-no-rows-wrapper',\r\n            'noRowsOverlayComponentParams'\r\n        );\r\n        this.updateExclusive();\r\n    }\r\n\r\n    private doHideOverlay(): void {\r\n        if (!this.eWrapper) {\r\n            return;\r\n        }\r\n\r\n        this.state = OverlayServiceState.Hidden;\r\n        this.eWrapper.hideOverlay();\r\n        this.updateExclusive();\r\n    }\r\n\r\n    private showOverlay(\r\n        compDetails: UserCompDetails | undefined,\r\n        wrapperCssClass: string,\r\n        gridOption: keyof GridOptions\r\n    ): void {\r\n        const promise = compDetails?.newAgStackInstance() ?? null;\r\n        this.eWrapper?.showOverlay(promise, wrapperCssClass, this.isExclusive(), gridOption);\r\n        this.refreshWrapperPadding();\r\n    }\r\n\r\n    private updateExclusive(): void {\r\n        const wasExclusive = this.exclusive;\r\n        this.exclusive = this.isExclusive();\r\n        if (this.exclusive !== wasExclusive) {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'overlayExclusiveChanged',\r\n            });\r\n        }\r\n    }\r\n\r\n    private refreshWrapperPadding(): void {\r\n        const eWrapper = this.eWrapper;\r\n        if (!eWrapper) {\r\n            return;\r\n        }\r\n\r\n        let newPadding: number = 0;\r\n\r\n        if (this.state === OverlayServiceState.NoRows) {\r\n            const headerCtrl = this.beans.ctrlsSvc.get('gridHeaderCtrl');\r\n            const headerHeight = headerCtrl?.headerHeight || 0;\r\n\r\n            newPadding = headerHeight;\r\n        } else if (this.wrapperPadding !== 0) {\r\n            newPadding = 0;\r\n        }\r\n\r\n        if (this.wrapperPadding === newPadding) {\r\n            return;\r\n        }\r\n\r\n        this.wrapperPadding = newPadding;\r\n        eWrapper.updateOverlayWrapperPaddingTop(newPadding);\r\n    }\r\n}\r\n", "import type { _OverlayGridApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { LoadingOverlayComponent } from './loadingOverlayComponent';\r\nimport { NoRowsOverlayComponent } from './noRowsOverlayComponent';\r\nimport { hideOverlay, showLoadingOverlay, showNoRowsOverlay } from './overlayApi';\r\nimport { OverlayService } from './overlayService';\r\n\r\n/**\r\n * @feature Accessories -> Overlays\r\n * @gridOption loading, overlayLoadingTemplate, loadingOverlayComponent, overlayNoRowsTemplate, noRowsOverlayComponent\r\n */\r\nexport const OverlayModule: _ModuleWithApi<_OverlayGridApi> = {\r\n    moduleName: 'Overlay',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agLoadingOverlay: LoadingOverlayComponent,\r\n        agNoRowsOverlay: NoRowsOverlayComponent,\r\n    },\r\n    apiFunctions: {\r\n        showLoadingOverlay,\r\n        showNoRowsOverlay,\r\n        hideOverlay,\r\n    },\r\n    beans: [OverlayService],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _getMaxDivHeight } from '../utils/browser';\r\nimport { _logIfDebug } from '../utils/function';\r\n\r\n/**\r\n * This class solves the 'max height' problem, where the user might want to show more data than\r\n * the max div height actually allows.\r\n */\r\n\r\nexport class RowContainerHeightService extends BeanStub implements NamedBean {\r\n    beanName = 'rowContainerHeight' as const;\r\n\r\n    private maxDivHeight: number;\r\n\r\n    // if false, then stretching is not active, logic in this class is not used,\r\n    // the pixel height of the row container matches what is actually needed,\r\n    // no scaling applied.\r\n    public stretching: boolean;\r\n\r\n    private modelHeight: number | null; // how many pixels the model needs\r\n    public uiContainerHeight: number | null; // how many pixels we actually have\r\n    private pixelsToShave: number; // the number of pixels we need to shave\r\n\r\n    // the number of pixels we add to each rowTop - depends on the scroll position\r\n    public divStretchOffset: number;\r\n\r\n    // the scrollY position\r\n    private scrollY = 0;\r\n    // how tall the body is\r\n    private uiBodyHeight = 0;\r\n\r\n    // the max scroll position\r\n    private maxScrollY: number;\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({ bodyHeightChanged: this.updateOffset.bind(this) });\r\n        this.maxDivHeight = _getMaxDivHeight();\r\n        _logIfDebug(this.gos, 'RowContainerHeightService - maxDivHeight = ' + this.maxDivHeight);\r\n    }\r\n\r\n    public updateOffset(): void {\r\n        if (!this.stretching) {\r\n            return;\r\n        }\r\n\r\n        const newScrollY = this.beans.ctrlsSvc.getScrollFeature().getVScrollPosition().top;\r\n        const newBodyHeight = this.getUiBodyHeight();\r\n\r\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\r\n        if (atLeastOneChanged) {\r\n            this.scrollY = newScrollY;\r\n            this.uiBodyHeight = newBodyHeight;\r\n            this.calculateOffset();\r\n        }\r\n    }\r\n\r\n    private calculateOffset(): void {\r\n        this.setUiContainerHeight(this.maxDivHeight);\r\n        this.pixelsToShave = this.modelHeight! - this.uiContainerHeight!;\r\n\r\n        this.maxScrollY = this.uiContainerHeight! - this.uiBodyHeight;\r\n        const scrollPercent = this.scrollY / this.maxScrollY;\r\n\r\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\r\n\r\n        _logIfDebug(\r\n            this.gos,\r\n            `RowContainerHeightService - Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`\r\n        );\r\n\r\n        this.setDivStretchOffset(divStretchOffset);\r\n    }\r\n\r\n    private setUiContainerHeight(height: number | null): void {\r\n        if (height !== this.uiContainerHeight) {\r\n            this.uiContainerHeight = height;\r\n            this.eventSvc.dispatchEvent({ type: 'rowContainerHeightChanged' });\r\n        }\r\n    }\r\n\r\n    private clearOffset(): void {\r\n        this.setUiContainerHeight(this.modelHeight);\r\n        this.pixelsToShave = 0;\r\n        this.setDivStretchOffset(0);\r\n    }\r\n\r\n    private setDivStretchOffset(newOffset: number): void {\r\n        // because we are talking pixels, no point in confusing things with half numbers\r\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\r\n        if (this.divStretchOffset === newOffsetFloor) {\r\n            return;\r\n        }\r\n\r\n        this.divStretchOffset = newOffsetFloor!;\r\n        this.eventSvc.dispatchEvent({ type: 'heightScaleChanged' });\r\n    }\r\n\r\n    public setModelHeight(modelHeight: number | null): void {\r\n        this.modelHeight = modelHeight;\r\n        this.stretching =\r\n            modelHeight != null && // null happens when in print layout\r\n            this.maxDivHeight > 0 &&\r\n            modelHeight! > this.maxDivHeight;\r\n        if (this.stretching) {\r\n            this.calculateOffset();\r\n        } else {\r\n            this.clearOffset();\r\n        }\r\n    }\r\n\r\n    public getRealPixelPosition(modelPixel: number): number {\r\n        return modelPixel - this.divStretchOffset;\r\n    }\r\n\r\n    private getUiBodyHeight(): number {\r\n        const pos = this.beans.ctrlsSvc.getScrollFeature().getVScrollPosition();\r\n        return pos.bottom - pos.top;\r\n    }\r\n\r\n    public getScrollPositionForPixel(rowTop: number): number {\r\n        if (this.pixelsToShave <= 0) {\r\n            return rowTop;\r\n        }\r\n\r\n        const modelMaxScroll = this.modelHeight! - this.getUiBodyHeight();\r\n        const scrollPercent = rowTop / modelMaxScroll;\r\n        const scrollPixel = this.maxScrollY * scrollPercent;\r\n        return scrollPixel;\r\n    }\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CtrlsService } from '../ctrlsService';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { BodyScrollEvent, CellFocusedEvent, PaginationChangedEvent } from '../events';\r\nimport type { FocusService } from '../focusService';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport {\r\n    _getActiveDomElement,\r\n    _getDomData,\r\n    _getRowHeightAsNumber,\r\n    _isAnimateRows,\r\n    _isCellSelectionEnabled,\r\n    _isDomLayout,\r\n} from '../gridOptionsUtils';\r\nimport type { RenderedRowEvent } from '../interfaces/iCallbackParams';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { RefreshCellsParams } from '../interfaces/iCellsParams';\r\nimport type { IEventListener } from '../interfaces/iEventEmitter';\r\nimport type { IRowModel } from '../interfaces/iRowModel';\r\nimport type { IRowNode, RowPinnedType } from '../interfaces/iRowNode';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport type { IStickyRowFeature } from '../interfaces/iStickyRows';\r\nimport type { PageBoundsService } from '../pagination/pageBoundsService';\r\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport { _exists } from '../utils/generic';\r\nimport { _errMsg } from '../validation/logging';\r\nimport type { CellCtrl } from './cell/cellCtrl';\r\nimport { DOM_DATA_KEY_CELL_CTRL } from './cell/cellCtrl';\r\nimport type { RowCtrlInstanceId } from './row/rowCtrl';\r\nimport { DOM_DATA_KEY_ROW_CTRL, RowCtrl } from './row/rowCtrl';\r\nimport type { RowContainerHeightService } from './rowContainerHeightService';\r\n\r\ntype RowCtrlIdMap = Record<RowCtrlInstanceId, RowCtrl>;\r\ntype RowCtrlByRowIndex = Record<number, RowCtrl>;\r\ntype RowCtrlByRowNodeIdMap = Record<string, RowCtrl>;\r\n\r\ninterface RowNodeMap {\r\n    [id: string]: IRowNode;\r\n}\r\n\r\nconst ROW_ANIMATION_TIMEOUT = 400 as const;\r\n\r\nexport class RowRenderer extends BeanStub implements NamedBean {\r\n    beanName = 'rowRenderer' as const;\r\n\r\n    private pageBounds: PageBoundsService;\r\n    private colModel: ColumnModel;\r\n    private pinnedRowModel?: PinnedRowModel;\r\n    private rowModel: IRowModel;\r\n    private focusSvc: FocusService;\r\n    private rowContainerHeight: RowContainerHeightService;\r\n    private ctrlsSvc: CtrlsService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.pageBounds = beans.pageBounds;\r\n        this.colModel = beans.colModel;\r\n        this.pinnedRowModel = beans.pinnedRowModel;\r\n        this.rowModel = beans.rowModel;\r\n        this.focusSvc = beans.focusSvc;\r\n        this.rowContainerHeight = beans.rowContainerHeight;\r\n        this.ctrlsSvc = beans.ctrlsSvc;\r\n    }\r\n\r\n    private gridBodyCtrl: GridBodyCtrl;\r\n\r\n    private destroyFuncsForColumnListeners: (() => void)[] = [];\r\n\r\n    public firstRenderedRow: number;\r\n    public lastRenderedRow: number;\r\n\r\n    // map of row ids to row objects. keeps track of which elements\r\n    // are rendered for which rows in the dom.\r\n    private rowCtrlsByRowIndex: RowCtrlByRowIndex = {};\r\n    private zombieRowCtrls: RowCtrlIdMap = {};\r\n    private cachedRowCtrls: RowCtrlCache;\r\n    public allRowCtrls: RowCtrl[] = [];\r\n\r\n    public topRowCtrls: RowCtrl[] = [];\r\n    public bottomRowCtrls: RowCtrl[] = [];\r\n\r\n    private pinningLeft: boolean;\r\n    private pinningRight: boolean;\r\n\r\n    public firstVisibleVPixel: number;\r\n    public lastVisibleVPixel: number;\r\n\r\n    // we only allow one refresh at a time, otherwise the internal memory structure here\r\n    // will get messed up. this can happen if the user has a cellRenderer, and inside the\r\n    // renderer they call an API method that results in another pass of the refresh,\r\n    // then it will be trying to draw rows in the middle of a refresh.\r\n    private refreshInProgress = false;\r\n\r\n    private printLayout: boolean;\r\n    private embedFullWidthRows: boolean;\r\n    private stickyRowFeature?: IStickyRowFeature;\r\n\r\n    private dataFirstRenderedFired = false;\r\n\r\n    public postConstruct(): void {\r\n        this.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCtrl = p.gridBodyCtrl;\r\n            this.initialise();\r\n        });\r\n    }\r\n\r\n    private initialise(): void {\r\n        this.addManagedEventListeners({\r\n            paginationChanged: this.onPageLoaded.bind(this),\r\n            pinnedRowDataChanged: this.onPinnedRowDataChanged.bind(this),\r\n            displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),\r\n            bodyScroll: this.onBodyScroll.bind(this),\r\n            bodyHeightChanged: this.redraw.bind(this, {}),\r\n        });\r\n\r\n        this.addManagedPropertyListeners(['domLayout', 'embedFullWidthRows'], () => this.onDomLayoutChanged());\r\n        this.addManagedPropertyListeners(['suppressMaxRenderedRowRestriction', 'rowBuffer'], () => this.redraw());\r\n        this.addManagedPropertyListener('suppressCellFocus', (e) => this.onSuppressCellFocusChanged(e.currentValue));\r\n        this.addManagedPropertyListeners(\r\n            [\r\n                'groupSuppressBlankHeader',\r\n                'getBusinessKeyForNode',\r\n\r\n                'fullWidthCellRenderer',\r\n                'fullWidthCellRendererParams',\r\n\r\n                'suppressStickyTotalRow',\r\n\r\n                'groupRowRenderer',\r\n                'groupRowRendererParams', // maybe only needs to refresh FW rows...\r\n\r\n                'loadingCellRenderer',\r\n                'loadingCellRendererParams',\r\n\r\n                'detailCellRenderer',\r\n                'detailCellRendererParams',\r\n\r\n                'enableRangeSelection',\r\n                'enableCellTextSelection',\r\n            ],\r\n            () => this.redrawRows()\r\n        );\r\n\r\n        this.addManagedPropertyListener('cellSelection', ({ currentValue, previousValue }) => {\r\n            // Only redraw rows if cell selection is enabled or disabled\r\n            if ((!previousValue && currentValue) || (previousValue && !currentValue)) {\r\n                this.redrawRows();\r\n            }\r\n        });\r\n\r\n        const { stickyRowSvc, gos } = this.beans;\r\n        if (stickyRowSvc) {\r\n            this.stickyRowFeature = stickyRowSvc.createStickyRowFeature(\r\n                this,\r\n                this.createRowCon.bind(this),\r\n                this.destroyRowCtrls.bind(this)\r\n            );\r\n        } else {\r\n            const gridBodyCtrl = this.gridBodyCtrl;\r\n            gridBodyCtrl.setStickyTopHeight(0);\r\n            gridBodyCtrl.setStickyBottomHeight(0);\r\n        }\r\n\r\n        this.registerCellEventListeners();\r\n\r\n        this.initialiseCache();\r\n        this.printLayout = _isDomLayout(gos, 'print');\r\n        this.embedFullWidthRows = this.printLayout || gos.get('embedFullWidthRows');\r\n\r\n        this.redrawAfterModelUpdate();\r\n    }\r\n\r\n    private initialiseCache(): void {\r\n        if (this.gos.get('keepDetailRows')) {\r\n            const countProp = this.getKeepDetailRowsCount();\r\n            const count = countProp != null ? countProp : 3;\r\n            this.cachedRowCtrls = new RowCtrlCache(count);\r\n        }\r\n    }\r\n\r\n    private getKeepDetailRowsCount(): number {\r\n        return this.gos.get('keepDetailRowsCount');\r\n    }\r\n\r\n    public getStickyTopRowCtrls(): RowCtrl[] {\r\n        return this.stickyRowFeature?.stickyTopRowCtrls ?? [];\r\n    }\r\n\r\n    public getStickyBottomRowCtrls(): RowCtrl[] {\r\n        return this.stickyRowFeature?.stickyBottomRowCtrls ?? [];\r\n    }\r\n\r\n    private updateAllRowCtrls(): void {\r\n        const liveList = Object.values(this.rowCtrlsByRowIndex);\r\n        const zombieList = Object.values(this.zombieRowCtrls);\r\n        const cachedList = this.cachedRowCtrls?.getEntries() ?? [];\r\n\r\n        if (zombieList.length > 0 || cachedList.length > 0) {\r\n            // Only spread if we need to.\r\n            this.allRowCtrls = [...liveList, ...zombieList, ...cachedList];\r\n        } else {\r\n            this.allRowCtrls = liveList;\r\n        }\r\n    }\r\n\r\n    private onCellFocusChanged(event?: CellFocusedEvent) {\r\n        this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onCellFocused(event));\r\n        this.getFullWidthRowCtrls().forEach((rowCtrl) => rowCtrl.onFullWidthRowFocused(event));\r\n    }\r\n\r\n    private onSuppressCellFocusChanged(suppressCellFocus: boolean): void {\r\n        this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onSuppressCellFocusChanged(suppressCellFocus));\r\n        this.getFullWidthRowCtrls().forEach((rowCtrl) => rowCtrl.onSuppressCellFocusChanged(suppressCellFocus));\r\n    }\r\n\r\n    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\r\n    // registering and de-registering for events is a performance bottleneck. so we register here once and inform\r\n    // all active cells.\r\n    private registerCellEventListeners(): void {\r\n        this.addManagedEventListeners({\r\n            cellFocused: (event) => {\r\n                this.onCellFocusChanged(event);\r\n            },\r\n            cellFocusCleared: () => this.onCellFocusChanged(),\r\n            flashCells: (event) => {\r\n                const { cellFlashSvc } = this.beans;\r\n                if (cellFlashSvc) {\r\n                    this.getAllCellCtrls().forEach((cellCtrl) => cellFlashSvc.onFlashCells(cellCtrl, event));\r\n                }\r\n            },\r\n            columnHoverChanged: () => {\r\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onColumnHover());\r\n            },\r\n            displayedColumnsChanged: () => {\r\n                this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onDisplayedColumnsChanged());\r\n            },\r\n            displayedColumnsWidthChanged: () => {\r\n                // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\r\n                // then changing the width of the containers will impact left position. eg the center cols all have their\r\n                // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\r\n                // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\r\n                // in different containers so doesn't impact.\r\n                if (this.printLayout) {\r\n                    this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onLeftChanged());\r\n                }\r\n            },\r\n        });\r\n\r\n        this.setupRangeSelectionListeners();\r\n\r\n        // add listeners to the grid columns\r\n        this.refreshListenersToColumnsForCellComps();\r\n        // if the grid columns change, then refresh the listeners again\r\n        this.addManagedEventListeners({\r\n            gridColumnsChanged: this.refreshListenersToColumnsForCellComps.bind(this),\r\n        });\r\n\r\n        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\r\n    }\r\n\r\n    private setupRangeSelectionListeners = () => {\r\n        const onCellSelectionChanged = () => {\r\n            this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.onCellSelectionChanged());\r\n        };\r\n\r\n        const onColumnMovedPinnedVisible = () => {\r\n            this.getAllCellCtrls().forEach((cellCtrl) => cellCtrl.updateRangeBordersIfRangeCount());\r\n        };\r\n\r\n        const addCellSelectionListeners = () => {\r\n            this.eventSvc.addEventListener('cellSelectionChanged', onCellSelectionChanged);\r\n            this.eventSvc.addEventListener('columnMoved', onColumnMovedPinnedVisible);\r\n            this.eventSvc.addEventListener('columnPinned', onColumnMovedPinnedVisible);\r\n            this.eventSvc.addEventListener('columnVisible', onColumnMovedPinnedVisible);\r\n        };\r\n\r\n        const removeCellSelectionListeners = () => {\r\n            this.eventSvc.removeEventListener('cellSelectionChanged', onCellSelectionChanged);\r\n            this.eventSvc.removeEventListener('columnMoved', onColumnMovedPinnedVisible);\r\n            this.eventSvc.removeEventListener('columnPinned', onColumnMovedPinnedVisible);\r\n            this.eventSvc.removeEventListener('columnVisible', onColumnMovedPinnedVisible);\r\n        };\r\n        this.addDestroyFunc(() => removeCellSelectionListeners());\r\n        this.addManagedPropertyListeners(['enableRangeSelection', 'cellSelection'], () => {\r\n            const isEnabled = _isCellSelectionEnabled(this.gos);\r\n            if (isEnabled) {\r\n                addCellSelectionListeners();\r\n            } else {\r\n                removeCellSelectionListeners();\r\n            }\r\n        });\r\n        const cellSelectionEnabled = _isCellSelectionEnabled(this.gos);\r\n        if (cellSelectionEnabled) {\r\n            addCellSelectionListeners();\r\n        }\r\n    };\r\n\r\n    // executes all functions in destroyFuncsForColumnListeners and then clears the list\r\n    private removeGridColumnListeners(): void {\r\n        this.destroyFuncsForColumnListeners.forEach((func) => func());\r\n        this.destroyFuncsForColumnListeners.length = 0;\r\n    }\r\n\r\n    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\r\n    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\r\n    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\r\n    // once instead.\r\n    private refreshListenersToColumnsForCellComps(): void {\r\n        this.removeGridColumnListeners();\r\n\r\n        const cols = this.colModel.getCols();\r\n\r\n        cols.forEach((col) => {\r\n            const forEachCellWithThisCol = (callback: (cellCtrl: CellCtrl) => void) => {\r\n                this.getAllCellCtrls().forEach((cellCtrl) => {\r\n                    if (cellCtrl.column === col) {\r\n                        callback(cellCtrl);\r\n                    }\r\n                });\r\n            };\r\n\r\n            const leftChangedListener = () => {\r\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onLeftChanged());\r\n            };\r\n            const widthChangedListener = () => {\r\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onWidthChanged());\r\n            };\r\n            const firstRightPinnedChangedListener = () => {\r\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onFirstRightPinnedChanged());\r\n            };\r\n            const lastLeftPinnedChangedListener = () => {\r\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onLastLeftPinnedChanged());\r\n            };\r\n            const colDefChangedListener = () => {\r\n                forEachCellWithThisCol((cellCtrl) => cellCtrl.onColDefChanged());\r\n            };\r\n\r\n            col.addEventListener('leftChanged', leftChangedListener);\r\n            col.addEventListener('widthChanged', widthChangedListener);\r\n            col.addEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\r\n            col.addEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\r\n            col.addEventListener('colDefChanged', colDefChangedListener);\r\n\r\n            this.destroyFuncsForColumnListeners.push(() => {\r\n                col.removeEventListener('leftChanged', leftChangedListener);\r\n                col.removeEventListener('widthChanged', widthChangedListener);\r\n                col.removeEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\r\n                col.removeEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\r\n                col.removeEventListener('colDefChanged', colDefChangedListener);\r\n            });\r\n        });\r\n    }\r\n\r\n    private onDomLayoutChanged(): void {\r\n        const printLayout = _isDomLayout(this.gos, 'print');\r\n        const embedFullWidthRows = printLayout || this.gos.get('embedFullWidthRows');\r\n\r\n        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\r\n        // out using absolute positioning when doing print layout\r\n        const destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\r\n\r\n        this.printLayout = printLayout;\r\n        this.embedFullWidthRows = embedFullWidthRows;\r\n\r\n        if (destroyRows) {\r\n            this.redrawAfterModelUpdate({ domLayoutChanged: true });\r\n        }\r\n    }\r\n\r\n    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\r\n    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\r\n    public datasourceChanged(): void {\r\n        this.firstRenderedRow = 0;\r\n        this.lastRenderedRow = -1;\r\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\r\n        this.removeRowCtrls(rowIndexesToRemove);\r\n    }\r\n\r\n    private onPageLoaded(event: PaginationChangedEvent): void {\r\n        const params: RefreshViewParams = {\r\n            recycleRows: event.keepRenderedRows,\r\n            animate: event.animate,\r\n            newData: event.newData,\r\n            newPage: event.newPage,\r\n            // because this is a model updated event (not pinned rows), we\r\n            // can skip updating the pinned rows. this is needed so that if user\r\n            // is doing transaction updates, the pinned rows are not getting constantly\r\n            // trashed - or editing cells in pinned rows are not refreshed and put into read mode\r\n            onlyBody: true,\r\n        };\r\n        this.redrawAfterModelUpdate(params);\r\n    }\r\n\r\n    /**\r\n     * @param column AgColumn\r\n     * @returns An array with HTMLElement for every cell of the column passed as param.\r\n     * If the cell is spanning across multiple columns, it only returns the html element\r\n     * if the column passed is the first column of the span (used for auto width calculation).\r\n     */\r\n    public getAllCellsNotSpanningForColumn(column: AgColumn): HTMLElement[] {\r\n        const res: HTMLElement[] = [];\r\n\r\n        this.getAllRowCtrls().forEach((rowCtrl) => {\r\n            const eCell = rowCtrl.getCellCtrl(column, true)?.eGui;\r\n            if (eCell) {\r\n                res.push(eCell);\r\n            }\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    public refreshFloatingRowComps(): void {\r\n        this.refreshFloatingRows(this.topRowCtrls, 'top');\r\n\r\n        this.refreshFloatingRows(this.bottomRowCtrls, 'bottom');\r\n    }\r\n\r\n    /**\r\n     * Determines which row controllers need to be destroyed and re-created vs which ones can\r\n     * be re-used.\r\n     *\r\n     * This is operation is to pinned/floating rows as `this.recycleRows` is to normal/body rows.\r\n     *\r\n     * All `RowCtrl` instances in `rowCtrls` that don't correspond to `RowNode` instances in `rowNodes` are destroyed.\r\n     * All `RowNode` instances in `rowNodes` that don't correspond to `RowCtrl` instances in `rowCtrls` are created.\r\n     * All instances in `rowCtrls` must be in the same order as their corresponding nodes in `rowNodes`.\r\n     *\r\n     * @param rowCtrls The list of existing row controllers\r\n     * @param rowNodes The canonical list of row nodes that should have associated controllers\r\n     */\r\n    private refreshFloatingRows(rowCtrls: RowCtrl[], floating: NonNullable<RowPinnedType>): void {\r\n        const { pinnedRowModel, beans, printLayout } = this;\r\n        const rowCtrlMap = Object.fromEntries(rowCtrls.map((ctrl) => [ctrl.rowNode.id!, ctrl]));\r\n\r\n        pinnedRowModel?.forEachPinnedRow(floating, (node, i) => {\r\n            const rowCtrl = rowCtrls[i];\r\n            const rowCtrlDoesNotExist =\r\n                rowCtrl && pinnedRowModel.getPinnedRowById(rowCtrl.rowNode.id!, floating) === undefined;\r\n\r\n            if (rowCtrlDoesNotExist) {\r\n                // ctrl not in new nodes list, destroy\r\n                rowCtrl.destroyFirstPass();\r\n                rowCtrl.destroySecondPass();\r\n            }\r\n\r\n            if (node.id! in rowCtrlMap) {\r\n                // ctrl exists already, re-use it\r\n                rowCtrls[i] = rowCtrlMap[node.id!];\r\n                delete rowCtrlMap[node.id!];\r\n            } else {\r\n                // ctrl doesn't exist, create it\r\n                rowCtrls[i] = new RowCtrl(node, beans, false, false, printLayout);\r\n            }\r\n        });\r\n\r\n        const rowNodeCount =\r\n            (floating === 'top' ? pinnedRowModel?.getPinnedTopRowCount() : pinnedRowModel?.getPinnedBottomRowCount()) ??\r\n            0;\r\n\r\n        // Truncate array if rowCtrls is longer than rowNodes\r\n        rowCtrls.length = rowNodeCount;\r\n    }\r\n\r\n    private onPinnedRowDataChanged(): void {\r\n        // recycling rows in order to ensure cell editing is not cancelled\r\n        const params: RefreshViewParams = {\r\n            recycleRows: true,\r\n        };\r\n\r\n        this.redrawAfterModelUpdate(params);\r\n    }\r\n\r\n    public redrawRow(rowNode: RowNode, suppressEvent = false) {\r\n        if (rowNode.sticky) {\r\n            this.stickyRowFeature?.refreshStickyNode(rowNode);\r\n        } else if (this.cachedRowCtrls?.has(rowNode)) {\r\n            // delete row from cache if it needs redrawn\r\n            // if it's in the cache no updates need fired, as nothing\r\n            // has been rendered\r\n            this.cachedRowCtrls.removeRow(rowNode);\r\n            return;\r\n        } else {\r\n            const destroyAndRecreateCtrl = (dataStruct: RowCtrl[] | RowCtrlByRowIndex) => {\r\n                const ctrl = dataStruct[rowNode.rowIndex!];\r\n                if (!ctrl) {\r\n                    return;\r\n                }\r\n                if (ctrl.rowNode !== rowNode) {\r\n                    // if the node is in the wrong place, then the row model is responsible for triggering a full refresh.\r\n                    return;\r\n                }\r\n                ctrl.destroyFirstPass();\r\n                ctrl.destroySecondPass();\r\n                dataStruct[rowNode.rowIndex!] = this.createRowCon(rowNode, false, false);\r\n            };\r\n\r\n            switch (rowNode.rowPinned) {\r\n                case 'top':\r\n                    destroyAndRecreateCtrl(this.topRowCtrls);\r\n                    break;\r\n                case 'bottom':\r\n                    destroyAndRecreateCtrl(this.bottomRowCtrls);\r\n                    break;\r\n                default:\r\n                    destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);\r\n                    this.updateAllRowCtrls();\r\n            }\r\n        }\r\n\r\n        if (!suppressEvent) {\r\n            this.dispatchDisplayedRowsChanged(false);\r\n        }\r\n    }\r\n\r\n    public redrawRows(rowNodes?: IRowNode[]): void {\r\n        // if no row nodes provided, then refresh everything\r\n        const partialRefresh = rowNodes != null;\r\n\r\n        if (partialRefresh) {\r\n            rowNodes?.forEach((node) => this.redrawRow(node as RowNode, true));\r\n            this.dispatchDisplayedRowsChanged(false);\r\n            return;\r\n        }\r\n\r\n        this.redrawAfterModelUpdate();\r\n    }\r\n\r\n    private getCellToRestoreFocusToAfterRefresh(params?: RefreshViewParams): CellPosition | null {\r\n        const focusedCell = params?.suppressKeepFocus ? null : this.focusSvc.getFocusCellToUseAfterRefresh();\r\n\r\n        if (focusedCell == null) {\r\n            return null;\r\n        }\r\n\r\n        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\r\n        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\r\n        // cell itself, then the cell can be registered as having focus, however it's the text field that\r\n        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\r\n        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\r\n        // the focus is lost from the text field. we do not want this.\r\n        const activeElement = _getActiveDomElement(this.beans);\r\n        const cellDomData = _getDomData(this.gos, activeElement, DOM_DATA_KEY_CELL_CTRL);\r\n        const rowDomData = _getDomData(this.gos, activeElement, DOM_DATA_KEY_ROW_CTRL);\r\n\r\n        const gridElementFocused = cellDomData || rowDomData;\r\n\r\n        return gridElementFocused ? focusedCell : null;\r\n    }\r\n\r\n    // gets called from:\r\n    // +) initialisation (in registerGridComp) params = null\r\n    // +) onDomLayoutChanged, params = null\r\n    // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true\r\n    // +) onPinnedRowDataChanged, recycleRows = true\r\n    // +) redrawRows (from Grid API), recycleRows = true/false\r\n    private redrawAfterModelUpdate(params: RefreshViewParams = {}): void {\r\n        this.getLockOnRefresh();\r\n\r\n        const focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);\r\n\r\n        this.updateContainerHeights();\r\n        this.scrollToTopIfNewData(params);\r\n\r\n        // never recycle rows on layout change as rows could change from normal DOM layout\r\n        // back to the grid's row positioning.\r\n        const recycleRows = !params.domLayoutChanged && !!params.recycleRows;\r\n        const animate = params.animate && _isAnimateRows(this.gos);\r\n\r\n        // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,\r\n        // however we can reuse the rows, so we keep them but index by rowNode.id\r\n        const rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;\r\n        if (!recycleRows) {\r\n            this.removeAllRowComps();\r\n        }\r\n\r\n        this.workOutFirstAndLastRowsToRender();\r\n\r\n        const { stickyRowFeature } = this;\r\n        if (stickyRowFeature) {\r\n            stickyRowFeature.checkStickyRows();\r\n\r\n            // this is a hack, if sticky rows brings in rows from other pages\r\n            // need to update the model height to include them.\r\n            const extraHeight = stickyRowFeature.extraTopHeight + stickyRowFeature.extraBottomHeight;\r\n            if (extraHeight) {\r\n                this.updateContainerHeights(extraHeight);\r\n            }\r\n        }\r\n\r\n        this.recycleRows(rowsToRecycle, animate);\r\n\r\n        this.gridBodyCtrl.updateRowCount();\r\n\r\n        if (!params.onlyBody) {\r\n            this.refreshFloatingRowComps();\r\n        }\r\n\r\n        this.dispatchDisplayedRowsChanged();\r\n\r\n        // if a cell was focused before, ensure focus now.\r\n        if (focusedCell != null) {\r\n            this.restoreFocusedCell(focusedCell);\r\n        }\r\n\r\n        this.releaseLockOnRefresh();\r\n    }\r\n\r\n    private scrollToTopIfNewData(params: RefreshViewParams): void {\r\n        const scrollToTop = params.newData || params.newPage;\r\n        const suppressScrollToTop = this.gos.get('suppressScrollOnNewData');\r\n\r\n        if (scrollToTop && !suppressScrollToTop) {\r\n            this.gridBodyCtrl.scrollFeature.scrollToTop();\r\n            this.stickyRowFeature?.resetOffsets();\r\n        }\r\n    }\r\n\r\n    private updateContainerHeights(additionalHeight = 0): void {\r\n        const { rowContainerHeight } = this;\r\n        // when doing print layout, we don't explicitly set height on the containers\r\n        if (this.printLayout) {\r\n            rowContainerHeight.setModelHeight(null);\r\n            return;\r\n        }\r\n\r\n        let containerHeight = this.pageBounds.getCurrentPageHeight();\r\n        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\r\n        // we still want the scroll to be present, otherwise there would be no way to scroll the header\r\n        // which might be needed us user wants to access columns\r\n        // on the RHS - and if that was where the filter was that cause no rows to be presented, there\r\n        // is no way to remove the filter.\r\n        if (containerHeight === 0) {\r\n            containerHeight = 1;\r\n        }\r\n\r\n        rowContainerHeight.setModelHeight(containerHeight + additionalHeight);\r\n    }\r\n\r\n    private getLockOnRefresh(): void {\r\n        if (this.refreshInProgress) {\r\n            throw new Error(_errMsg(252));\r\n        }\r\n\r\n        this.refreshInProgress = true;\r\n        this.beans.frameworkOverrides.getLockOnRefresh?.();\r\n    }\r\n\r\n    private releaseLockOnRefresh(): void {\r\n        this.refreshInProgress = false;\r\n        this.beans.frameworkOverrides.releaseLockOnRefresh?.();\r\n    }\r\n\r\n    public isRefreshInProgress(): boolean {\r\n        return this.refreshInProgress;\r\n    }\r\n\r\n    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\r\n    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\r\n    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\r\n    // edited cell).\r\n    private restoreFocusedCell(cellPosition: CellPosition | null): void {\r\n        if (!cellPosition) {\r\n            return;\r\n        }\r\n\r\n        this.focusSvc.restoreFocusedCell(cellPosition, () => {\r\n            // we don't wish to dispatch an event as the rowRenderer is not capable of changing the selected cell,\r\n            // so we mock a change event for the full width rows and cells to ensure they update to the newly selected state\r\n\r\n            this.onCellFocusChanged(\r\n                this.gos.addGridCommonParams<CellFocusedEvent>({\r\n                    rowIndex: cellPosition.rowIndex,\r\n                    column: cellPosition.column,\r\n                    rowPinned: cellPosition.rowPinned,\r\n                    forceBrowserFocus: true,\r\n                    preventScrollOnBrowserFocus: true,\r\n                    type: 'cellFocused',\r\n                })\r\n            );\r\n        });\r\n    }\r\n\r\n    public getAllCellCtrls(): CellCtrl[] {\r\n        const res: CellCtrl[] = [];\r\n        const rowCtrls = this.getAllRowCtrls();\r\n        const rowCtrlsLength = rowCtrls.length;\r\n\r\n        for (let i = 0; i < rowCtrlsLength; i++) {\r\n            const cellCtrls = rowCtrls[i].getAllCellCtrls();\r\n            const cellCtrlsLength = cellCtrls.length;\r\n\r\n            for (let j = 0; j < cellCtrlsLength; j++) {\r\n                res.push(cellCtrls[j]);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public getAllRowCtrls(): RowCtrl[] {\r\n        const stickyTopRowCtrls = this.getStickyTopRowCtrls();\r\n        const stickyBottomRowCtrls = this.getStickyBottomRowCtrls();\r\n        const res = [\r\n            ...this.topRowCtrls,\r\n            ...this.bottomRowCtrls,\r\n            ...stickyTopRowCtrls,\r\n            ...stickyBottomRowCtrls,\r\n            ...Object.values(this.rowCtrlsByRowIndex),\r\n        ];\r\n\r\n        return res;\r\n    }\r\n\r\n    public addRenderedRowListener(\r\n        eventName: RenderedRowEvent,\r\n        rowIndex: number,\r\n        callback: IEventListener<RenderedRowEvent>\r\n    ): void {\r\n        const rowComp = this.rowCtrlsByRowIndex[rowIndex];\r\n        if (rowComp) {\r\n            rowComp.addEventListener(eventName, callback);\r\n        }\r\n    }\r\n\r\n    public refreshCells(params: RefreshCellsParams = {}): void {\r\n        const refreshCellParams = {\r\n            forceRefresh: params.force,\r\n            newData: false,\r\n            suppressFlash: params.suppressFlash,\r\n        };\r\n        for (const cellCtrl of this.getCellCtrls(params.rowNodes, params.columns as AgColumn[])) {\r\n            cellCtrl.refreshOrDestroyCell(refreshCellParams);\r\n        }\r\n\r\n        // refresh the full width rows too\r\n        this.refreshFullWidth(params.rowNodes);\r\n    }\r\n\r\n    private refreshFullWidth(rowNodes?: IRowNode[]): void {\r\n        if (!rowNodes) {\r\n            return;\r\n        }\r\n\r\n        let cellFocused: CellPosition | null = null;\r\n\r\n        if (this.stickyRowFeature) {\r\n            cellFocused = this.getCellToRestoreFocusToAfterRefresh() || null;\r\n        }\r\n\r\n        for (const rowCtrl of this.getRowCtrls(rowNodes)) {\r\n            if (!rowCtrl.isFullWidth()) {\r\n                continue;\r\n            }\r\n\r\n            const refreshed = rowCtrl.refreshFullWidth();\r\n            if (!refreshed) {\r\n                this.redrawRow(rowCtrl.rowNode, true);\r\n            }\r\n        }\r\n\r\n        this.dispatchDisplayedRowsChanged(false);\r\n\r\n        if (cellFocused) {\r\n            this.restoreFocusedCell(cellFocused);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.\r\n     */\r\n    public getRowCtrls(rowNodes?: IRowNode[] | null): RowCtrl[] {\r\n        const rowIdsMap = mapRowNodes(rowNodes);\r\n        const allRowCtrls = this.getAllRowCtrls();\r\n        if (!rowNodes || !rowIdsMap) {\r\n            return allRowCtrls;\r\n        }\r\n\r\n        return allRowCtrls.filter((rowCtrl) => {\r\n            const rowNode = rowCtrl.rowNode;\r\n            return isRowInMap(rowNode, rowIdsMap);\r\n        });\r\n    }\r\n\r\n    // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node\r\n    // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.\r\n    public getCellCtrls(rowNodes?: IRowNode[] | null, columns?: (string | AgColumn)[]): CellCtrl[] {\r\n        let colIdsMap: any;\r\n        if (_exists(columns)) {\r\n            colIdsMap = {};\r\n            columns.forEach((colKey: string | AgColumn) => {\r\n                const column: AgColumn | null = this.colModel.getCol(colKey);\r\n                if (_exists(column)) {\r\n                    colIdsMap[column.getId()] = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        const res: CellCtrl[] = [];\r\n        this.getRowCtrls(rowNodes).forEach((rowCtrl) => {\r\n            rowCtrl.getAllCellCtrls().forEach((cellCtrl) => {\r\n                const colId: string = cellCtrl.column.getId();\r\n                const excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\r\n\r\n                if (excludeColFromRefresh) {\r\n                    return;\r\n                }\r\n\r\n                res.push(cellCtrl);\r\n            });\r\n        });\r\n        return res;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.removeAllRowComps(true);\r\n        super.destroy();\r\n    }\r\n\r\n    private removeAllRowComps(suppressAnimation: boolean = false): void {\r\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\r\n        this.removeRowCtrls(rowIndexesToRemove, suppressAnimation);\r\n\r\n        this.stickyRowFeature?.destroyStickyCtrls();\r\n    }\r\n\r\n    private getRowsToRecycle(): RowCtrlByRowNodeIdMap {\r\n        // remove all stub nodes, they can't be reused, as no rowNode id\r\n        const stubNodeIndexes: string[] = [];\r\n        for (const [index, rowCtrl] of Object.entries(this.rowCtrlsByRowIndex)) {\r\n            const stubNode = rowCtrl.rowNode.id == null;\r\n            if (stubNode) {\r\n                stubNodeIndexes.push(index);\r\n            }\r\n        }\r\n        this.removeRowCtrls(stubNodeIndexes);\r\n\r\n        // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex\r\n        const ctrlsByIdMap: RowCtrlByRowNodeIdMap = {};\r\n        for (const rowCtrl of Object.values(this.rowCtrlsByRowIndex)) {\r\n            const rowNode = rowCtrl.rowNode;\r\n            ctrlsByIdMap[rowNode.id!] = rowCtrl;\r\n        }\r\n        this.rowCtrlsByRowIndex = {};\r\n\r\n        return ctrlsByIdMap;\r\n    }\r\n\r\n    // takes array of row indexes\r\n    private removeRowCtrls(rowsToRemove: any[], suppressAnimation: boolean = false) {\r\n        // if no fromIndex then set to -1, which will refresh everything\r\n        // let realFromIndex = -1;\r\n\r\n        rowsToRemove.forEach((indexToRemove) => {\r\n            const rowCtrl = this.rowCtrlsByRowIndex[indexToRemove];\r\n            if (rowCtrl) {\r\n                rowCtrl.destroyFirstPass(suppressAnimation);\r\n                rowCtrl.destroySecondPass();\r\n            }\r\n            delete this.rowCtrlsByRowIndex[indexToRemove];\r\n        });\r\n    }\r\n\r\n    private onBodyScroll(e: BodyScrollEvent) {\r\n        if (e.direction !== 'vertical') {\r\n            return;\r\n        }\r\n        this.redraw({ afterScroll: true });\r\n    }\r\n\r\n    // gets called when rows don't change, but viewport does, so after:\r\n    // 1) height of grid body changes, ie number of displayed rows has changed\r\n    // 2) grid scrolled to new position\r\n    // 3) ensure index visible (which is a scroll)\r\n    public redraw(params: { afterScroll?: boolean } = {}) {\r\n        const { afterScroll } = params;\r\n        let cellFocused: CellPosition | undefined;\r\n\r\n        const stickyRowFeature = this.stickyRowFeature;\r\n        // only try to refocus cells shifting in and out of sticky container\r\n        // if the browser supports focus ({ preventScroll })\r\n        if (stickyRowFeature) {\r\n            cellFocused = this.getCellToRestoreFocusToAfterRefresh() || undefined;\r\n        }\r\n\r\n        const oldFirstRow = this.firstRenderedRow;\r\n        const oldLastRow = this.lastRenderedRow;\r\n        this.workOutFirstAndLastRowsToRender();\r\n\r\n        let hasStickyRowChanges = false;\r\n\r\n        if (stickyRowFeature) {\r\n            hasStickyRowChanges = stickyRowFeature.checkStickyRows();\r\n\r\n            // this is a hack, if sticky rows brings in rows from other pages\r\n            // need to update the model height to include them.\r\n            const extraHeight = stickyRowFeature.extraTopHeight + stickyRowFeature.extraBottomHeight;\r\n            if (extraHeight) {\r\n                this.updateContainerHeights(extraHeight);\r\n            }\r\n        }\r\n\r\n        const rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;\r\n\r\n        if (afterScroll && !hasStickyRowChanges && !rangeChanged) {\r\n            return;\r\n        }\r\n\r\n        this.getLockOnRefresh();\r\n        this.recycleRows(null, false, afterScroll);\r\n        this.releaseLockOnRefresh();\r\n        // AfterScroll results in flushSync in React but we need to disable flushSync for sticky row group changes to avoid flashing\r\n        this.dispatchDisplayedRowsChanged(afterScroll && !hasStickyRowChanges);\r\n\r\n        if (cellFocused != null) {\r\n            const newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();\r\n\r\n            if (cellFocused != null && newFocusedCell == null) {\r\n                this.beans.animationFrameSvc?.flushAllFrames();\r\n                this.restoreFocusedCell(cellFocused);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeRowCompsNotToDraw(indexesToDraw: number[], suppressAnimation: boolean): void {\r\n        // for speedy lookup, dump into map\r\n        const indexesToDrawMap: { [index: string]: boolean } = {};\r\n        indexesToDraw.forEach((index) => (indexesToDrawMap[index] = true));\r\n\r\n        const existingIndexes = Object.keys(this.rowCtrlsByRowIndex);\r\n        const indexesNotToDraw = existingIndexes.filter((index) => !indexesToDrawMap[index]);\r\n\r\n        this.removeRowCtrls(indexesNotToDraw, suppressAnimation);\r\n    }\r\n\r\n    private calculateIndexesToDraw(rowsToRecycle?: { [key: string]: RowCtrl } | null): number[] {\r\n        // all in all indexes in the viewport\r\n        const indexesToDraw: number[] = [];\r\n        for (let i = this.firstRenderedRow; i <= this.lastRenderedRow; i++) {\r\n            indexesToDraw.push(i);\r\n        }\r\n\r\n        const checkRowToDraw = (rowComp: RowCtrl) => {\r\n            const index = rowComp.rowNode.rowIndex;\r\n            if (index == null) {\r\n                return;\r\n            }\r\n            if (index < this.firstRenderedRow || index > this.lastRenderedRow) {\r\n                if (this.doNotUnVirtualiseRow(rowComp)) {\r\n                    indexesToDraw.push(index);\r\n                }\r\n            }\r\n        };\r\n\r\n        // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex\r\n        for (const rowCtrl of Object.values(this.rowCtrlsByRowIndex)) {\r\n            checkRowToDraw(rowCtrl);\r\n        }\r\n\r\n        // if we are redrawing due to model update, then old rows are in rowsToRecycle\r\n        if (rowsToRecycle) {\r\n            for (const rowCtrl of Object.values(rowsToRecycle)) {\r\n                checkRowToDraw(rowCtrl);\r\n            }\r\n        }\r\n\r\n        indexesToDraw.sort((a, b) => a - b);\r\n\r\n        const ret: number[] = [];\r\n\r\n        for (let i = 0; i < indexesToDraw.length; i++) {\r\n            const currRow = indexesToDraw[i];\r\n            const rowNode = this.rowModel.getRow(currRow);\r\n            if (rowNode && !rowNode.sticky) {\r\n                ret.push(currRow);\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    private recycleRows(rowsToRecycle?: { [key: string]: RowCtrl } | null, animate = false, afterScroll = false) {\r\n        // the row can already exist and be in the following:\r\n        // rowsToRecycle -> if model change, then the index may be different, however row may\r\n        //                         exist here from previous time (mapped by id).\r\n        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\r\n\r\n        // this is all the indexes we want, including those that already exist, so this method\r\n        // will end up going through each index and drawing only if the row doesn't already exist\r\n        const indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);\r\n\r\n        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\r\n        // otherwise we risk the printer printing a row that's half faded (half way through fading in)\r\n        // Don't animate rows that have been added or removed as part of scrolling\r\n        if (this.printLayout || afterScroll) {\r\n            animate = false;\r\n        }\r\n\r\n        this.removeRowCompsNotToDraw(indexesToDraw, !animate);\r\n\r\n        // add in new rows\r\n        const rowCtrls: RowCtrl[] = [];\r\n\r\n        indexesToDraw.forEach((rowIndex) => {\r\n            const rowCtrl = this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);\r\n            if (_exists(rowCtrl)) {\r\n                rowCtrls.push(rowCtrl);\r\n            }\r\n        });\r\n\r\n        if (rowsToRecycle) {\r\n            const { animationFrameSvc } = this.beans;\r\n            const useAnimationFrame =\r\n                animationFrameSvc && afterScroll && !this.gos.get('suppressAnimationFrame') && !this.printLayout;\r\n            if (useAnimationFrame) {\r\n                animationFrameSvc.addDestroyTask(() => {\r\n                    this.destroyRowCtrls(rowsToRecycle, animate);\r\n                    this.updateAllRowCtrls();\r\n                    this.dispatchDisplayedRowsChanged();\r\n                });\r\n            } else {\r\n                this.destroyRowCtrls(rowsToRecycle, animate);\r\n            }\r\n        }\r\n\r\n        this.updateAllRowCtrls();\r\n    }\r\n\r\n    private dispatchDisplayedRowsChanged(afterScroll: boolean = false): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'displayedRowsChanged',\r\n            afterScroll,\r\n        });\r\n    }\r\n\r\n    private onDisplayedColumnsChanged(): void {\r\n        const { visibleCols } = this.beans;\r\n        const pinningLeft = visibleCols.isPinningLeft();\r\n        const pinningRight = visibleCols.isPinningRight();\r\n        const atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\r\n\r\n        if (atLeastOneChanged) {\r\n            this.pinningLeft = pinningLeft;\r\n            this.pinningRight = pinningRight;\r\n\r\n            if (this.embedFullWidthRows) {\r\n                this.redrawFullWidthEmbeddedRows();\r\n            }\r\n        }\r\n    }\r\n\r\n    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\r\n    // then it should go into the pinned left area if pinning left, or the center area if not pinning.\r\n    private redrawFullWidthEmbeddedRows(): void {\r\n        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\r\n        // embedded, as what appears in each section depends on whether we are pinned or not\r\n        const rowsToRemove: string[] = [];\r\n\r\n        this.getFullWidthRowCtrls().forEach((fullWidthCtrl) => {\r\n            const rowIndex = fullWidthCtrl.rowNode.rowIndex;\r\n            rowsToRemove.push(rowIndex!.toString());\r\n        });\r\n\r\n        this.refreshFloatingRowComps();\r\n        this.removeRowCtrls(rowsToRemove);\r\n        this.redraw({ afterScroll: true });\r\n    }\r\n\r\n    public getFullWidthRowCtrls(rowNodes?: IRowNode[]): RowCtrl[] {\r\n        const rowNodesMap = mapRowNodes(rowNodes);\r\n\r\n        return this.getAllRowCtrls().filter((rowCtrl: RowCtrl) => {\r\n            // include just full width\r\n            if (!rowCtrl.isFullWidth()) {\r\n                return false;\r\n            }\r\n\r\n            // if Row Nodes provided, we exclude where Row Node is missing\r\n            const rowNode = rowCtrl.rowNode;\r\n            if (rowNodesMap != null && !isRowInMap(rowNode, rowNodesMap)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private createOrUpdateRowCtrl(\r\n        rowIndex: number,\r\n        rowsToRecycle: { [key: string]: RowCtrl | null } | null | undefined,\r\n        animate: boolean,\r\n        afterScroll: boolean\r\n    ): RowCtrl | null | undefined {\r\n        let rowNode: RowNode | undefined;\r\n        let rowCtrl: RowCtrl | null = this.rowCtrlsByRowIndex[rowIndex];\r\n\r\n        // if no row comp, see if we can get it from the previous rowComps\r\n        if (!rowCtrl) {\r\n            rowNode = this.rowModel.getRow(rowIndex);\r\n            if (_exists(rowNode) && _exists(rowsToRecycle) && rowsToRecycle[rowNode.id!] && rowNode.alreadyRendered) {\r\n                rowCtrl = rowsToRecycle[rowNode.id!];\r\n                rowsToRecycle[rowNode.id!] = null;\r\n            }\r\n        }\r\n\r\n        const creatingNewRowCtrl = !rowCtrl;\r\n\r\n        if (creatingNewRowCtrl) {\r\n            // create a new one\r\n            if (!rowNode) {\r\n                rowNode = this.rowModel.getRow(rowIndex);\r\n            }\r\n\r\n            if (_exists(rowNode)) {\r\n                rowCtrl = this.createRowCon(rowNode, animate, afterScroll);\r\n            } else {\r\n                // this should never happen - if somehow we are trying to create\r\n                // a row for a rowNode that does not exist.\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (rowNode) {\r\n            // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\r\n            // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\r\n            rowNode.alreadyRendered = true;\r\n        }\r\n\r\n        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl!;\r\n\r\n        return rowCtrl;\r\n    }\r\n\r\n    private destroyRowCtrls(rowCtrlsMap: RowCtrlIdMap | null | undefined, animate: boolean): void {\r\n        const executeInAWhileFuncs: (() => void)[] = [];\r\n        if (rowCtrlsMap) {\r\n            for (const rowCtrl of Object.values(rowCtrlsMap)) {\r\n                // if row was used, then it's null\r\n                if (!rowCtrl) {\r\n                    continue;\r\n                }\r\n\r\n                if (this.cachedRowCtrls && rowCtrl.isCacheable()) {\r\n                    this.cachedRowCtrls.addRow(rowCtrl);\r\n                    continue;\r\n                }\r\n\r\n                rowCtrl.destroyFirstPass(!animate);\r\n                if (animate) {\r\n                    const instanceId = rowCtrl.instanceId;\r\n                    this.zombieRowCtrls[instanceId] = rowCtrl;\r\n                    executeInAWhileFuncs.push(() => {\r\n                        rowCtrl.destroySecondPass();\r\n                        delete this.zombieRowCtrls[instanceId];\r\n                    });\r\n                } else {\r\n                    rowCtrl.destroySecondPass();\r\n                }\r\n            }\r\n        }\r\n        if (animate) {\r\n            // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get\r\n            // executed, as we added it to the end of the list.\r\n            executeInAWhileFuncs.push(() => {\r\n                this.updateAllRowCtrls();\r\n                this.dispatchDisplayedRowsChanged();\r\n            });\r\n            window.setTimeout(() => executeInAWhileFuncs.forEach((func) => func()), ROW_ANIMATION_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    private getRowBuffer(): number {\r\n        return this.gos.get('rowBuffer');\r\n    }\r\n\r\n    private getRowBufferInPixels() {\r\n        const rowsToBuffer = this.getRowBuffer();\r\n        const defaultRowHeight = _getRowHeightAsNumber(this.beans);\r\n\r\n        return rowsToBuffer * defaultRowHeight;\r\n    }\r\n\r\n    private workOutFirstAndLastRowsToRender(): void {\r\n        const { rowContainerHeight, pageBounds, rowModel } = this;\r\n        rowContainerHeight.updateOffset();\r\n        let newFirst: number;\r\n        let newLast: number;\r\n\r\n        if (!rowModel.isRowsToRender()) {\r\n            newFirst = 0;\r\n            newLast = -1; // setting to -1 means nothing in range\r\n        } else if (this.printLayout) {\r\n            this.beans.environment.refreshRowHeightVariable();\r\n            newFirst = pageBounds.getFirstRow();\r\n            newLast = pageBounds.getLastRow();\r\n        } else {\r\n            const bufferPixels = this.getRowBufferInPixels();\r\n            const scrollFeature = this.ctrlsSvc.getScrollFeature();\r\n            const suppressRowVirtualisation = this.gos.get('suppressRowVirtualisation');\r\n\r\n            let rowHeightsChanged = false;\r\n            let firstPixel: number;\r\n            let lastPixel: number;\r\n            do {\r\n                const paginationOffset = pageBounds.getPixelOffset();\r\n                const { pageFirstPixel, pageLastPixel } = pageBounds.getCurrentPagePixelRange();\r\n                const divStretchOffset = rowContainerHeight.divStretchOffset;\r\n\r\n                const bodyVRange = scrollFeature.getVScrollPosition();\r\n                const bodyTopPixel = bodyVRange.top;\r\n                const bodyBottomPixel = bodyVRange.bottom;\r\n\r\n                if (suppressRowVirtualisation) {\r\n                    firstPixel = pageFirstPixel + divStretchOffset;\r\n                    lastPixel = pageLastPixel + divStretchOffset;\r\n                } else {\r\n                    firstPixel =\r\n                        Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;\r\n                    lastPixel =\r\n                        Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;\r\n                }\r\n\r\n                this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;\r\n                this.lastVisibleVPixel = Math.min(bodyBottomPixel + paginationOffset, pageLastPixel) + divStretchOffset;\r\n\r\n                // if the rows we are about to display get their heights changed, then that upsets the calcs from above.\r\n                rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\r\n            } while (rowHeightsChanged);\r\n\r\n            let firstRowIndex = rowModel.getRowIndexAtPixel(firstPixel);\r\n            let lastRowIndex = rowModel.getRowIndexAtPixel(lastPixel);\r\n\r\n            const pageFirstRow = pageBounds.getFirstRow();\r\n            const pageLastRow = pageBounds.getLastRow();\r\n\r\n            // adjust, in case buffer extended actual size\r\n            if (firstRowIndex < pageFirstRow) {\r\n                firstRowIndex = pageFirstRow;\r\n            }\r\n\r\n            if (lastRowIndex > pageLastRow) {\r\n                lastRowIndex = pageLastRow;\r\n            }\r\n\r\n            newFirst = firstRowIndex;\r\n            newLast = lastRowIndex;\r\n        }\r\n\r\n        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\r\n        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\r\n        // killing the browser, we limit the number of rows. just in case some use case we didn't think\r\n        // of, we also have a property to not do this operation.\r\n        const rowLayoutNormal = _isDomLayout(this.gos, 'normal');\r\n        const suppressRowCountRestriction = this.gos.get('suppressMaxRenderedRowRestriction');\r\n        const rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);\r\n\r\n        if (rowLayoutNormal && !suppressRowCountRestriction) {\r\n            if (newLast - newFirst > rowBufferMaxSize) {\r\n                newLast = newFirst + rowBufferMaxSize;\r\n            }\r\n        }\r\n\r\n        const firstDiffers = newFirst !== this.firstRenderedRow;\r\n        const lastDiffers = newLast !== this.lastRenderedRow;\r\n\r\n        if (firstDiffers || lastDiffers) {\r\n            this.firstRenderedRow = newFirst;\r\n            this.lastRenderedRow = newLast;\r\n\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'viewportChanged',\r\n                firstRow: newFirst,\r\n                lastRow: newLast,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This event will only be fired once, and is queued until after the browser next renders.\r\n     * This allows us to fire an event during the start of the render cycle, when we first see data being rendered\r\n     * but not execute the event until all of the data has finished being rendered to the dom.\r\n     */\r\n    public dispatchFirstDataRenderedEvent() {\r\n        if (this.dataFirstRenderedFired) {\r\n            return;\r\n        }\r\n        this.dataFirstRenderedFired = true;\r\n\r\n        // See AG-7018\r\n        window.requestAnimationFrame(() => {\r\n            this.beans.eventSvc.dispatchEvent({\r\n                type: 'firstDataRendered',\r\n                firstRow: this.firstRenderedRow,\r\n                lastRow: this.lastRenderedRow,\r\n            });\r\n        });\r\n    }\r\n\r\n    private ensureAllRowsInRangeHaveHeightsCalculated(topPixel: number, bottomPixel: number): boolean {\r\n        const pinnedRowHeightsChanged = this.pinnedRowModel?.ensureRowHeightsValid();\r\n\r\n        // ensure sticky rows heights are all updated\r\n        const stickyHeightsChanged = this.stickyRowFeature?.ensureRowHeightsValid();\r\n        const { pageBounds, rowModel } = this;\r\n        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\r\n        // all the other row models just hard code so the method just returns back false\r\n        const rowModelHeightsChanged = rowModel.ensureRowHeightsValid(\r\n            topPixel,\r\n            bottomPixel,\r\n            pageBounds.getFirstRow(),\r\n            pageBounds.getLastRow()\r\n        );\r\n        if (rowModelHeightsChanged || stickyHeightsChanged) {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'recalculateRowBounds',\r\n            });\r\n        }\r\n\r\n        if (stickyHeightsChanged || rowModelHeightsChanged || pinnedRowHeightsChanged) {\r\n            this.updateContainerHeights();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // check that none of the rows to remove are editing or focused as:\r\n    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\r\n    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\r\n    //    the edit is reset - so we want to keep it rendered.\r\n    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\r\n    //    otherwise the user can range select and drag (with focus cell going out of the viewport)\r\n    //    and then ctrl+c, nothing will happen if cell is removed from dom.\r\n    // c) if detail record of master detail, as users complained that the context of detail rows\r\n    //    was getting lost when detail row out of view. eg user expands to show detail row,\r\n    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\r\n    //    after detail panel is scrolled out of / into view.\r\n    private doNotUnVirtualiseRow(rowCtrl: RowCtrl): boolean {\r\n        const REMOVE_ROW: boolean = false;\r\n        const KEEP_ROW: boolean = true;\r\n        const rowNode = rowCtrl.rowNode;\r\n\r\n        const rowHasFocus = this.focusSvc.isRowNodeFocused(rowNode);\r\n        const rowIsEditing = rowCtrl.editing;\r\n        const rowIsDetail = rowNode.detail;\r\n\r\n        const mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;\r\n\r\n        // if we deffo don't want to keep it,\r\n        if (!mightWantToKeepRow) {\r\n            return REMOVE_ROW;\r\n        }\r\n\r\n        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\r\n        // the reason we want to keep is if user is scrolling up and down, we don't want to loose\r\n        // the context of the editing in process.\r\n        const rowNodePresent = this.isRowPresent(rowNode);\r\n        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\r\n    }\r\n\r\n    private isRowPresent(rowNode: RowNode): boolean {\r\n        if (!this.rowModel.isRowPresent(rowNode)) {\r\n            return false;\r\n        }\r\n        return this.beans.pagination?.isRowPresent(rowNode) ?? true;\r\n    }\r\n\r\n    private createRowCon(rowNode: RowNode, animate: boolean, afterScroll: boolean): RowCtrl {\r\n        const rowCtrlFromCache = this.cachedRowCtrls?.getRow(rowNode) ?? null;\r\n        if (rowCtrlFromCache) {\r\n            return rowCtrlFromCache;\r\n        }\r\n\r\n        // we don't use animations frames for printing, so the user can put the grid into print mode\r\n        // and immediately print - otherwise the user would have to wait for the rows to draw in the background\r\n        // (via the animation frames) which is awkward to do from code.\r\n\r\n        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\r\n        // having animation frames for other times makes the grid look 'jumpy'.\r\n\r\n        const suppressAnimationFrame = this.gos.get('suppressAnimationFrame');\r\n        const useAnimationFrameForCreate =\r\n            afterScroll && !suppressAnimationFrame && !this.printLayout && !!this.beans.animationFrameSvc;\r\n\r\n        const res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);\r\n\r\n        return res;\r\n    }\r\n\r\n    public getRenderedNodes() {\r\n        const renderedRows = this.rowCtrlsByRowIndex;\r\n        return Object.values(renderedRows).map((rowCtrl) => rowCtrl.rowNode);\r\n    }\r\n\r\n    public getRowByPosition(rowPosition: RowPosition): RowCtrl | null {\r\n        let rowCtrl: RowCtrl | null;\r\n        const { rowIndex } = rowPosition;\r\n        switch (rowPosition.rowPinned) {\r\n            case 'top':\r\n                rowCtrl = this.topRowCtrls[rowIndex];\r\n                break;\r\n            case 'bottom':\r\n                rowCtrl = this.bottomRowCtrls[rowIndex];\r\n                break;\r\n            default:\r\n                rowCtrl = this.rowCtrlsByRowIndex[rowIndex];\r\n                if (!rowCtrl) {\r\n                    rowCtrl = this.getStickyTopRowCtrls().find((ctrl) => ctrl.rowNode.rowIndex === rowIndex) || null;\r\n\r\n                    if (!rowCtrl) {\r\n                        rowCtrl =\r\n                            this.getStickyBottomRowCtrls().find((ctrl) => ctrl.rowNode.rowIndex === rowIndex) || null;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n        return rowCtrl;\r\n    }\r\n\r\n    // returns true if any row between startIndex and endIndex is rendered. used by\r\n    // SSRM or IRM, as they don't want to purge visible blocks from cache.\r\n    public isRangeInRenderedViewport(startIndex: number, endIndex: number): boolean {\r\n        // parent closed means the parent node is not expanded, thus these blocks are not visible\r\n        const parentClosed = startIndex == null || endIndex == null;\r\n        if (parentClosed) {\r\n            return false;\r\n        }\r\n\r\n        const blockAfterViewport = startIndex > this.lastRenderedRow;\r\n        const blockBeforeViewport = endIndex < this.firstRenderedRow;\r\n        const blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;\r\n\r\n        return blockInsideViewport;\r\n    }\r\n}\r\n\r\nclass RowCtrlCache {\r\n    // map for fast access\r\n    private entriesMap: RowCtrlByRowNodeIdMap = {};\r\n\r\n    // list for keeping order\r\n    private entriesList: RowCtrl[] = [];\r\n\r\n    private readonly maxCount: number;\r\n\r\n    constructor(maxCount: number) {\r\n        this.maxCount = maxCount;\r\n    }\r\n\r\n    public addRow(rowCtrl: RowCtrl): void {\r\n        this.entriesMap[rowCtrl.rowNode.id!] = rowCtrl;\r\n        this.entriesList.push(rowCtrl);\r\n        rowCtrl.setCached(true);\r\n\r\n        if (this.entriesList.length > this.maxCount) {\r\n            const rowCtrlToDestroy = this.entriesList[0];\r\n            rowCtrlToDestroy.destroyFirstPass();\r\n            rowCtrlToDestroy.destroySecondPass();\r\n            this.removeFromCache(rowCtrlToDestroy);\r\n        }\r\n    }\r\n\r\n    public getRow(rowNode: RowNode): RowCtrl | null {\r\n        if (rowNode == null || rowNode.id == null) {\r\n            return null;\r\n        }\r\n\r\n        const res = this.entriesMap[rowNode.id];\r\n\r\n        if (!res) {\r\n            return null;\r\n        }\r\n\r\n        this.removeFromCache(res);\r\n        res.setCached(false);\r\n\r\n        // this can happen if user reloads data, and a new RowNode is reusing\r\n        // the same ID as the old one\r\n        const rowNodeMismatch = res.rowNode != rowNode;\r\n\r\n        return rowNodeMismatch ? null : res;\r\n    }\r\n\r\n    public has(rowNode: RowNode): boolean {\r\n        return this.entriesMap[rowNode.id!] != null;\r\n    }\r\n\r\n    public removeRow(rowNode: RowNode): void {\r\n        const rowNodeId = rowNode.id!;\r\n        const ctrl = this.entriesMap[rowNodeId];\r\n        delete this.entriesMap[rowNodeId];\r\n        _removeFromArray(this.entriesList, ctrl);\r\n    }\r\n\r\n    public removeFromCache(rowCtrl: RowCtrl): void {\r\n        const rowNodeId = rowCtrl.rowNode.id!;\r\n        delete this.entriesMap[rowNodeId];\r\n        _removeFromArray(this.entriesList, rowCtrl);\r\n    }\r\n\r\n    public getEntries(): RowCtrl[] {\r\n        return this.entriesList;\r\n    }\r\n}\r\n\r\nexport interface RefreshViewParams {\r\n    recycleRows?: boolean;\r\n    animate?: boolean;\r\n    suppressKeepFocus?: boolean;\r\n    onlyBody?: boolean;\r\n    // when new data, grid scrolls back to top\r\n    newData?: boolean;\r\n    newPage?: boolean;\r\n    domLayoutChanged?: boolean;\r\n}\r\n\r\nexport function mapRowNodes(\r\n    rowNodes?: IRowNode[] | null\r\n): { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap } | undefined {\r\n    if (!rowNodes) {\r\n        return;\r\n    }\r\n\r\n    const res: { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap } = {\r\n        top: {},\r\n        bottom: {},\r\n        normal: {},\r\n    };\r\n\r\n    rowNodes.forEach((rowNode) => {\r\n        const id = rowNode.id!;\r\n        switch (rowNode.rowPinned) {\r\n            case 'top':\r\n                res.top[id] = rowNode;\r\n                break;\r\n            case 'bottom':\r\n                res.bottom[id] = rowNode;\r\n                break;\r\n            default:\r\n                res.normal[id] = rowNode;\r\n                break;\r\n        }\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport function isRowInMap(\r\n    rowNode: RowNode,\r\n    rowIdsMap: { top: RowNodeMap; bottom: RowNodeMap; normal: RowNodeMap }\r\n): boolean {\r\n    // skip this row if it is missing from the provided list\r\n    const id = rowNode.id!;\r\n    const floating = rowNode.rowPinned;\r\n\r\n    switch (floating) {\r\n        case 'top':\r\n            return rowIdsMap.top[id] != null;\r\n        case 'bottom':\r\n            return rowIdsMap.bottom[id] != null;\r\n        default:\r\n            return rowIdsMap.normal[id] != null;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _isColumnsSortingCoupledToGroup, _isGroupUseEntireRow } from '../gridOptionsUtils';\r\nimport type { SortOption } from '../interfaces/iSortOption';\r\nimport { _defaultComparator } from '../utils/generic';\r\n\r\nexport interface SortedRowNode {\r\n    currentPos: number;\r\n    rowNode: RowNode;\r\n}\r\n\r\n// this logic is used by both SSRM and CSRM\r\n\r\nexport class RowNodeSorter extends BeanStub implements NamedBean {\r\n    beanName = 'rowNodeSorter' as const;\r\n\r\n    private isAccentedSort: boolean;\r\n    private primaryColumnsSortGroups: boolean;\r\n\r\n    public postConstruct(): void {\r\n        const { gos } = this;\r\n        this.isAccentedSort = gos.get('accentedSort');\r\n        this.primaryColumnsSortGroups = _isColumnsSortingCoupledToGroup(gos);\r\n\r\n        this.addManagedPropertyListener(\r\n            'accentedSort',\r\n            (propChange) => (this.isAccentedSort = propChange.currentValue)\r\n        );\r\n        this.addManagedPropertyListener(\r\n            'autoGroupColumnDef',\r\n            () => (this.primaryColumnsSortGroups = _isColumnsSortingCoupledToGroup(gos))\r\n        );\r\n    }\r\n\r\n    public doFullSort(rowNodes: RowNode[], sortOptions: SortOption[]): RowNode[] {\r\n        const sortedRowNodes = rowNodes.map((rowNode, currentPos) => ({\r\n            currentPos,\r\n            rowNode,\r\n        }));\r\n\r\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\r\n\r\n        return sortedRowNodes.map((item) => item.rowNode);\r\n    }\r\n\r\n    public compareRowNodes(sortOptions: SortOption[], sortedNodeA: SortedRowNode, sortedNodeB: SortedRowNode): number {\r\n        const nodeA: RowNode = sortedNodeA.rowNode;\r\n        const nodeB: RowNode = sortedNodeB.rowNode;\r\n\r\n        // Iterate columns, return the first that doesn't match\r\n        for (let i = 0, len = sortOptions.length; i < len; i++) {\r\n            const sortOption = sortOptions[i];\r\n            const isDescending = sortOption.sort === 'desc';\r\n\r\n            const valueA = this.getValue(nodeA, sortOption.column as AgColumn);\r\n            const valueB = this.getValue(nodeB, sortOption.column as AgColumn);\r\n\r\n            let comparatorResult: number;\r\n            const providedComparator = this.getComparator(sortOption, nodeA);\r\n            if (providedComparator) {\r\n                //if comparator provided, use it\r\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);\r\n            } else {\r\n                //otherwise do our own comparison\r\n                comparatorResult = _defaultComparator(valueA, valueB, this.isAccentedSort);\r\n            }\r\n\r\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\r\n            // typically occurs when the comparator is used on a group row\r\n            const validResult = !isNaN(comparatorResult);\r\n\r\n            if (validResult && comparatorResult !== 0) {\r\n                return sortOption.sort === 'asc' ? comparatorResult : comparatorResult * -1;\r\n            }\r\n        }\r\n        // All matched, we make is so that the original sort order is kept:\r\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\r\n    }\r\n\r\n    private getComparator(\r\n        sortOption: SortOption,\r\n        rowNode: RowNode\r\n    ): ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isDescending: boolean) => number) | undefined {\r\n        const column = sortOption.column;\r\n\r\n        // comparator on col get preference over everything else\r\n        const comparatorOnCol = column.getColDef().comparator;\r\n        if (comparatorOnCol != null) {\r\n            return comparatorOnCol;\r\n        }\r\n\r\n        if (!column.getColDef().showRowGroup) {\r\n            return;\r\n        }\r\n\r\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\r\n        const groupLeafField = !rowNode.group && column.getColDef().field;\r\n        if (!groupLeafField) {\r\n            return;\r\n        }\r\n\r\n        const primaryColumn = this.beans.colModel.getColDefCol(groupLeafField);\r\n        if (!primaryColumn) {\r\n            return;\r\n        }\r\n\r\n        return primaryColumn.getColDef().comparator;\r\n    }\r\n\r\n    private getValue(node: RowNode, column: AgColumn): any {\r\n        const { valueSvc, colModel, showRowGroupCols, gos } = this.beans;\r\n        if (!this.primaryColumnsSortGroups) {\r\n            return valueSvc.getValue(column, node, false);\r\n        }\r\n\r\n        const isNodeGroupedAtLevel = node.rowGroupColumn === column;\r\n        if (isNodeGroupedAtLevel) {\r\n            const isGroupRows = _isGroupUseEntireRow(gos, colModel.isPivotActive());\r\n            // because they're group rows, no display cols exist, so groupData never populated.\r\n            // instead delegate to getting value from leaf child.\r\n            if (isGroupRows) {\r\n                const leafChild = node.allLeafChildren?.[0];\r\n                if (leafChild) {\r\n                    return valueSvc.getValue(column, leafChild, false);\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            const displayCol = showRowGroupCols?.getShowRowGroupCol(column.getId());\r\n            if (!displayCol) {\r\n                return undefined;\r\n            }\r\n            return node.groupData?.[displayCol.getId()];\r\n        }\r\n\r\n        if (node.group && column.getColDef().showRowGroup) {\r\n            return undefined;\r\n        }\r\n\r\n        return valueSvc.getValue(column, node, false);\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\n\r\nexport function onSortChanged(beans: BeanCollection) {\r\n    beans.sortSvc?.onSortChanged('api');\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport { _isColumnsSortingCoupledToGroup } from '../gridOptionsUtils';\r\nimport { _clearElement, _setDisplayed } from '../utils/dom';\r\nimport type { IconName } from '../utils/icon';\r\nimport { _createIconNoSpan } from '../utils/icon';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { Component, RefPlaceholder } from '../widgets/component';\r\n\r\nfunction makeSpan(dataRefSuffix: string, classSuffix: string) {\r\n    return /* html */ `<span data-ref=\"eSort${dataRefSuffix}\" class=\"ag-sort-indicator-icon ag-sort-${classSuffix} ag-hidden\" aria-hidden=\"true\"></span>`;\r\n}\r\n\r\nconst SortIndicatorTemplate = /* html */ `<span class=\"ag-sort-indicator-container\">\r\n        ${makeSpan('Order', 'order')}\r\n        ${makeSpan('Asc', 'ascending-icon')}\r\n        ${makeSpan('Desc', 'descending-icon')}\r\n        ${makeSpan('Mixed', 'mixed-icon')}\r\n        ${makeSpan('None', 'none-icon')}\r\n    </span>`;\r\nexport class SortIndicatorComp extends Component {\r\n    private eSortOrder: HTMLElement = RefPlaceholder;\r\n    private eSortAsc: HTMLElement = RefPlaceholder;\r\n    private eSortDesc: HTMLElement = RefPlaceholder;\r\n    private eSortMixed: HTMLElement = RefPlaceholder;\r\n    private eSortNone: HTMLElement = RefPlaceholder;\r\n\r\n    private column: AgColumn;\r\n    private suppressOrder: boolean;\r\n\r\n    constructor(skipTemplate?: boolean) {\r\n        super();\r\n\r\n        if (!skipTemplate) {\r\n            this.setTemplate(SortIndicatorTemplate);\r\n        }\r\n    }\r\n\r\n    public attachCustomElements(\r\n        eSortOrder: HTMLElement,\r\n        eSortAsc: HTMLElement,\r\n        eSortDesc: HTMLElement,\r\n        eSortMixed: HTMLElement,\r\n        eSortNone: HTMLElement\r\n    ) {\r\n        this.eSortOrder = eSortOrder;\r\n        this.eSortAsc = eSortAsc;\r\n        this.eSortDesc = eSortDesc;\r\n        this.eSortMixed = eSortMixed;\r\n        this.eSortNone = eSortNone;\r\n    }\r\n\r\n    public setupSort(column: AgColumn, suppressOrder: boolean = false): void {\r\n        this.column = column;\r\n        this.suppressOrder = suppressOrder;\r\n\r\n        this.setupMultiSortIndicator();\r\n\r\n        if (!column.isSortable() && !column.getColDef().showRowGroup) {\r\n            return;\r\n        }\r\n\r\n        this.addInIcon('sortAscending', this.eSortAsc, column);\r\n        this.addInIcon('sortDescending', this.eSortDesc, column);\r\n        this.addInIcon('sortUnSort', this.eSortNone, column);\r\n\r\n        const updateIcons = this.updateIcons.bind(this);\r\n        const sortUpdated = this.onSortChanged.bind(this);\r\n        this.addManagedPropertyListener('unSortIcon', updateIcons);\r\n        this.addManagedEventListeners({\r\n            newColumnsLoaded: updateIcons,\r\n            // Watch global events, as row group columns can effect their display column.\r\n            sortChanged: sortUpdated,\r\n            // when grouping changes so can sort indexes and icons\r\n            columnRowGroupChanged: sortUpdated,\r\n        });\r\n\r\n        this.onSortChanged();\r\n    }\r\n\r\n    private addInIcon(iconName: IconName, eParent: HTMLElement, column: AgColumn): void {\r\n        if (eParent == null) {\r\n            return;\r\n        }\r\n\r\n        const eIcon = _createIconNoSpan(iconName, this.beans, column);\r\n        if (eIcon) {\r\n            eParent.appendChild(eIcon);\r\n        }\r\n    }\r\n\r\n    private onSortChanged(): void {\r\n        this.updateIcons();\r\n        if (!this.suppressOrder) {\r\n            this.updateSortOrder();\r\n        }\r\n    }\r\n\r\n    private updateIcons(): void {\r\n        const { eSortAsc, eSortDesc, eSortNone, column, gos, beans } = this;\r\n\r\n        const sortDirection = beans.sortSvc!.getDisplaySortForColumn(column);\r\n\r\n        if (eSortAsc) {\r\n            const isAscending = sortDirection === 'asc';\r\n            _setDisplayed(eSortAsc, isAscending, { skipAriaHidden: true });\r\n        }\r\n\r\n        if (eSortDesc) {\r\n            const isDescending = sortDirection === 'desc';\r\n            _setDisplayed(eSortDesc, isDescending, { skipAriaHidden: true });\r\n        }\r\n\r\n        if (eSortNone) {\r\n            const alwaysHideNoSort = !column.getColDef().unSortIcon && !gos.get('unSortIcon');\r\n            const isNone = sortDirection === null || sortDirection === undefined;\r\n            _setDisplayed(eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });\r\n        }\r\n    }\r\n\r\n    private setupMultiSortIndicator() {\r\n        const { eSortMixed, column, gos } = this;\r\n        this.addInIcon('sortUnSort', eSortMixed, column);\r\n\r\n        const isColumnShowingRowGroup = column.getColDef().showRowGroup;\r\n        const areGroupsCoupled = _isColumnsSortingCoupledToGroup(gos);\r\n        if (areGroupsCoupled && isColumnShowingRowGroup) {\r\n            this.addManagedEventListeners({\r\n                // Watch global events, as row group columns can effect their display column.\r\n                sortChanged: this.updateMultiSortIndicator.bind(this),\r\n                // when grouping changes so can sort indexes and icons\r\n                columnRowGroupChanged: this.updateMultiSortIndicator.bind(this),\r\n            });\r\n            this.updateMultiSortIndicator();\r\n        }\r\n    }\r\n\r\n    private updateMultiSortIndicator() {\r\n        const { eSortMixed, beans, column } = this;\r\n        if (eSortMixed) {\r\n            const isMixedSort = beans.sortSvc!.getDisplaySortForColumn(column) === 'mixed';\r\n            _setDisplayed(eSortMixed, isMixedSort, { skipAriaHidden: true });\r\n        }\r\n    }\r\n\r\n    // we listen here for global sort events, NOT column sort events, as we want to do this\r\n    // when sorting has been set on all column (if we listened just for our col (where we\r\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\r\n    private updateSortOrder(): void {\r\n        const {\r\n            eSortOrder,\r\n            column,\r\n            beans: { sortSvc },\r\n        } = this;\r\n        if (!eSortOrder) {\r\n            return;\r\n        }\r\n\r\n        const allColumnsWithSorting = sortSvc!.getColumnsWithSortingOrdered();\r\n\r\n        const indexThisCol = sortSvc!.getDisplaySortIndexForColumn(column) ?? -1;\r\n        const moreThanOneColSorting = allColumnsWithSorting.some(\r\n            (col) => sortSvc!.getDisplaySortIndexForColumn(col) ?? -1 >= 1\r\n        );\r\n        const showIndex = indexThisCol >= 0 && moreThanOneColSorting;\r\n        _setDisplayed(eSortOrder, showIndex, { skipAriaHidden: true });\r\n\r\n        if (indexThisCol >= 0) {\r\n            eSortOrder.textContent = (indexThisCol + 1).toString();\r\n        } else {\r\n            _clearElement(eSortOrder);\r\n        }\r\n    }\r\n}\r\n\r\nexport const SortIndicatorSelector: ComponentSelector = {\r\n    selector: 'AG-SORT-INDICATOR',\r\n    component: SortIndicatorComp,\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { SortDirection } from '../entities/colDef';\r\nimport type { ColumnEventType, SortChangedEvent } from '../events';\r\nimport { _isColumnsSortingCoupledToGroup } from '../gridOptionsUtils';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { SortModelItem } from '../interfaces/iSortModelItem';\r\nimport type { SortOption } from '../interfaces/iSortOption';\r\nimport type { Component, ComponentSelector } from '../widgets/component';\r\nimport { SortIndicatorComp, SortIndicatorSelector } from './sortIndicatorComp';\r\n\r\nexport const DEFAULT_SORTING_ORDER: SortDirection[] = ['asc', 'desc', null];\r\nexport class SortService extends BeanStub implements NamedBean {\r\n    beanName = 'sortSvc' as const;\r\n\r\n    public progressSort(column: AgColumn, multiSort: boolean, source: ColumnEventType): void {\r\n        const nextDirection = this.getNextSortDirection(column);\r\n        this.setSortForColumn(column, nextDirection, multiSort, source);\r\n    }\r\n\r\n    public progressSortFromEvent(column: AgColumn, event: MouseEvent | KeyboardEvent): void {\r\n        const sortUsingCtrl = this.gos.get('multiSortKey') === 'ctrl';\r\n        const multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;\r\n        this.progressSort(column, multiSort, 'uiColumnSorted');\r\n    }\r\n\r\n    public setSortForColumn(column: AgColumn, sort: SortDirection, multiSort: boolean, source: ColumnEventType): void {\r\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\r\n        if (sort !== 'asc' && sort !== 'desc') {\r\n            sort = null;\r\n        }\r\n\r\n        const { gos, showRowGroupCols } = this.beans;\r\n\r\n        const isColumnsSortingCoupledToGroup = _isColumnsSortingCoupledToGroup(gos);\r\n        let columnsToUpdate = [column];\r\n        if (isColumnsSortingCoupledToGroup) {\r\n            if (column.getColDef().showRowGroup) {\r\n                const rowGroupColumns = showRowGroupCols?.getSourceColumnsForGroupColumn?.(column);\r\n                const sortableRowGroupColumns = rowGroupColumns?.filter((col) => col.isSortable());\r\n\r\n                if (sortableRowGroupColumns) {\r\n                    columnsToUpdate = [column, ...sortableRowGroupColumns];\r\n                }\r\n            }\r\n        }\r\n\r\n        columnsToUpdate.forEach((col) => this.setColSort(col, sort, source));\r\n\r\n        const doingMultiSort = (multiSort || gos.get('alwaysMultiSort')) && !gos.get('suppressMultiSort');\r\n\r\n        // clear sort on all columns except those changed, and update the icons\r\n        const updatedColumns: AgColumn[] = [];\r\n        if (!doingMultiSort) {\r\n            const clearedColumns = this.clearSortBarTheseColumns(columnsToUpdate, source);\r\n            updatedColumns.push(...clearedColumns);\r\n        }\r\n\r\n        // sortIndex used for knowing order of cols when multi-col sort\r\n        this.updateSortIndex(column);\r\n\r\n        updatedColumns.push(...columnsToUpdate);\r\n        this.dispatchSortChangedEvents(source, updatedColumns);\r\n    }\r\n\r\n    private updateSortIndex(lastColToChange: AgColumn) {\r\n        const { gos, colModel, showRowGroupCols } = this.beans;\r\n        const isCoupled = _isColumnsSortingCoupledToGroup(gos);\r\n        const groupParent = showRowGroupCols?.getShowRowGroupCol(lastColToChange.getId());\r\n        const lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;\r\n\r\n        const allSortedCols = this.getColumnsWithSortingOrdered();\r\n\r\n        // reset sort index on everything\r\n        colModel.getAllCols().forEach((col) => this.setColSortIndex(col, null));\r\n        const allSortedColsWithoutChangesOrGroups = allSortedCols.filter((col) => {\r\n            if (isCoupled && col.getColDef().showRowGroup) {\r\n                return false;\r\n            }\r\n            return col !== lastSortIndexCol;\r\n        });\r\n        const sortedColsWithIndices = lastSortIndexCol.getSort()\r\n            ? [...allSortedColsWithoutChangesOrGroups, lastSortIndexCol]\r\n            : allSortedColsWithoutChangesOrGroups;\r\n        sortedColsWithIndices.forEach((col, idx) => this.setColSortIndex(col, idx));\r\n    }\r\n\r\n    // gets called by API, so if data changes, use can call this, which will end up\r\n    // working out the sort order again of the rows.\r\n    public onSortChanged(source: string, columns?: AgColumn[]): void {\r\n        this.dispatchSortChangedEvents(source, columns);\r\n    }\r\n\r\n    public isSortActive(): boolean {\r\n        // pull out all the columns that have sorting set\r\n        const allCols = this.beans.colModel.getAllCols();\r\n        const sortedCols = allCols.filter((column) => !!column.getSort());\r\n        return sortedCols && sortedCols.length > 0;\r\n    }\r\n\r\n    public dispatchSortChangedEvents(source: string, columns?: AgColumn[]): void {\r\n        const event: WithoutGridCommon<SortChangedEvent> = {\r\n            type: 'sortChanged',\r\n            source,\r\n        };\r\n\r\n        if (columns) {\r\n            event.columns = columns;\r\n        }\r\n        this.eventSvc.dispatchEvent(event);\r\n    }\r\n\r\n    private clearSortBarTheseColumns(columnsToSkip: AgColumn[], source: ColumnEventType): AgColumn[] {\r\n        const clearedColumns: AgColumn[] = [];\r\n        this.beans.colModel.getAllCols().forEach((columnToClear) => {\r\n            // Do not clear if either holding shift, or if column in question was clicked\r\n            if (!columnsToSkip.includes(columnToClear)) {\r\n                // add to list of cleared cols when sort direction is set\r\n                if (columnToClear.getSort()) {\r\n                    clearedColumns.push(columnToClear);\r\n                }\r\n\r\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\r\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\r\n                this.setColSort(columnToClear, undefined, source);\r\n            }\r\n        });\r\n\r\n        return clearedColumns;\r\n    }\r\n\r\n    private getNextSortDirection(column: AgColumn): SortDirection {\r\n        const sortingOrder: SortDirection[] | null | undefined =\r\n            column.getColDef().sortingOrder ?? this.gos.get('sortingOrder') ?? DEFAULT_SORTING_ORDER;\r\n\r\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\r\n        const notInArray = currentIndex < 0;\r\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\r\n\r\n        return notInArray || lastItemInArray ? sortingOrder[0] : sortingOrder[currentIndex + 1];\r\n    }\r\n\r\n    /**\r\n     * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices\r\n     */\r\n    private getIndexedSortMap(): Map<AgColumn, number> {\r\n        const { gos, colModel, showRowGroupCols, rowGroupColsSvc } = this.beans;\r\n        // pull out all the columns that have sorting set\r\n        let allSortedCols = colModel.getAllCols().filter((col) => !!col.getSort());\r\n\r\n        if (colModel.isPivotMode()) {\r\n            const isSortingLinked = _isColumnsSortingCoupledToGroup(gos);\r\n            allSortedCols = allSortedCols.filter((col) => {\r\n                const isAggregated = !!col.getAggFunc();\r\n                const isSecondary = !col.isPrimary();\r\n                const isGroup = isSortingLinked\r\n                    ? showRowGroupCols?.getShowRowGroupCol(col.getId())\r\n                    : col.getColDef().showRowGroup;\r\n                return isAggregated || isSecondary || isGroup;\r\n            });\r\n        }\r\n\r\n        const sortedRowGroupCols = rowGroupColsSvc?.columns.filter((col) => !!col.getSort()) ?? [];\r\n\r\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\r\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\r\n        // cols is sorted by first.\r\n        const allColsIndexes: { [id: string]: number } = {};\r\n        allSortedCols.forEach((col, index) => (allColsIndexes[col.getId()] = index));\r\n\r\n        // put the columns in order of which one got sorted first\r\n        allSortedCols.sort((a, b) => {\r\n            const iA = a.getSortIndex();\r\n            const iB = b.getSortIndex();\r\n            if (iA != null && iB != null) {\r\n                return iA - iB; // both present, normal comparison\r\n            } else if (iA == null && iB == null) {\r\n                // both missing, compare using column positions\r\n                const posA = allColsIndexes[a.getId()];\r\n                const posB = allColsIndexes[b.getId()];\r\n                return posA > posB ? 1 : -1;\r\n            } else if (iB == null) {\r\n                return -1; // iB missing\r\n            } else {\r\n                return 1; // iA missing\r\n            }\r\n        });\r\n\r\n        const isSortLinked = _isColumnsSortingCoupledToGroup(gos) && !!sortedRowGroupCols.length;\r\n        if (isSortLinked) {\r\n            allSortedCols = [\r\n                ...new Set(\r\n                    // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness\r\n                    allSortedCols.map((col) => showRowGroupCols?.getShowRowGroupCol(col.getId()) ?? col)\r\n                ),\r\n            ];\r\n        }\r\n\r\n        const indexMap: Map<AgColumn, number> = new Map();\r\n\r\n        allSortedCols.forEach((col, idx) => indexMap.set(col, idx));\r\n\r\n        // add the row group cols back\r\n        if (isSortLinked) {\r\n            sortedRowGroupCols.forEach((col) => {\r\n                const groupDisplayCol = showRowGroupCols!.getShowRowGroupCol(col.getId())!;\r\n                indexMap.set(col, indexMap.get(groupDisplayCol)!);\r\n            });\r\n        }\r\n\r\n        return indexMap;\r\n    }\r\n\r\n    public getColumnsWithSortingOrdered(): AgColumn[] {\r\n        // pull out all the columns that have sorting set\r\n        return (\r\n            [...this.getIndexedSortMap().entries()]\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                .sort(([col1, idx1], [col2, idx2]) => idx1 - idx2)\r\n                .map(([col]) => col)\r\n        );\r\n    }\r\n\r\n    // used by server side row models, to sent sort to server\r\n    public getSortModel(): SortModelItem[] {\r\n        return this.getColumnsWithSortingOrdered()\r\n            .filter((column) => column.getSort())\r\n            .map((column) => ({\r\n                sort: column.getSort()!,\r\n                colId: column.getId(),\r\n            }));\r\n    }\r\n\r\n    public getSortOptions(): SortOption[] {\r\n        return this.getColumnsWithSortingOrdered()\r\n            .filter((column) => column.getSort())\r\n            .map((column) => ({\r\n                sort: column.getSort()!,\r\n                column,\r\n            }));\r\n    }\r\n\r\n    public canColumnDisplayMixedSort(column: AgColumn): boolean {\r\n        const isColumnSortCouplingActive = _isColumnsSortingCoupledToGroup(this.gos);\r\n        const isGroupDisplayColumn = !!column.getColDef().showRowGroup;\r\n        return isColumnSortCouplingActive && isGroupDisplayColumn;\r\n    }\r\n\r\n    public getDisplaySortForColumn(column: AgColumn): SortDirection | 'mixed' | undefined {\r\n        const linkedColumns = this.beans.showRowGroupCols?.getSourceColumnsForGroupColumn(column);\r\n        if (!this.canColumnDisplayMixedSort(column) || !linkedColumns?.length) {\r\n            return column.getSort();\r\n        }\r\n\r\n        // if column has unique data, its sorting is independent - but can still be mixed\r\n        const columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;\r\n        const sortableColumns = columnHasUniqueData ? [column, ...linkedColumns] : linkedColumns;\r\n\r\n        const firstSort = sortableColumns[0].getSort();\r\n        // the == is intentional, as null and undefined both represent no sort, which means they are equivalent\r\n        const allMatch = sortableColumns.every((col) => col.getSort() == firstSort);\r\n        if (!allMatch) {\r\n            return 'mixed';\r\n        }\r\n        return firstSort;\r\n    }\r\n\r\n    public getDisplaySortIndexForColumn(column: AgColumn): number | null | undefined {\r\n        return this.getIndexedSortMap().get(column);\r\n    }\r\n\r\n    public setupHeader(comp: Component, column: AgColumn, clickElement?: HTMLElement): void {\r\n        let lastMovingChanged = 0;\r\n\r\n        // keep track of last time the moving changed flag was set\r\n        comp.addManagedListeners(column, {\r\n            movingChanged: () => {\r\n                lastMovingChanged = new Date().getTime();\r\n            },\r\n        });\r\n\r\n        // add the event on the header, so when clicked, we do sorting\r\n        if (clickElement) {\r\n            comp.addManagedElementListeners(clickElement, {\r\n                click: (event: MouseEvent) => {\r\n                    // sometimes when moving a column via dragging, this was also firing a clicked event.\r\n                    // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076\r\n                    // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)\r\n                    const moving = column.isMoving();\r\n                    const nowTime = new Date().getTime();\r\n                    // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn\r\n                    const movedRecently = nowTime - lastMovingChanged < 50;\r\n                    const columnMoving = moving || movedRecently;\r\n\r\n                    if (!columnMoving) {\r\n                        this.progressSortFromEvent(column, event);\r\n                    }\r\n                },\r\n            });\r\n        }\r\n\r\n        const onSortingChanged = () => {\r\n            const sort = column.getSort();\r\n            comp.addOrRemoveCssClass('ag-header-cell-sorted-asc', sort === 'asc');\r\n            comp.addOrRemoveCssClass('ag-header-cell-sorted-desc', sort === 'desc');\r\n            comp.addOrRemoveCssClass('ag-header-cell-sorted-none', !sort);\r\n\r\n            if (column.getColDef().showRowGroup) {\r\n                const sourceColumns = this.beans.showRowGroupCols?.getSourceColumnsForGroupColumn(column);\r\n                // this == is intentional, as it allows null and undefined to match, which are both unsorted states\r\n                const sortDirectionsMatch = sourceColumns?.every(\r\n                    (sourceCol) => column.getSort() == sourceCol.getSort()\r\n                );\r\n                const isMultiSorting = !sortDirectionsMatch;\r\n\r\n                comp.addOrRemoveCssClass('ag-header-cell-sorted-mixed', isMultiSorting);\r\n            }\r\n        };\r\n        comp.addManagedEventListeners({\r\n            sortChanged: onSortingChanged,\r\n            columnRowGroupChanged: onSortingChanged,\r\n        });\r\n    }\r\n\r\n    public initCol(column: AgColumn): void {\r\n        const { sort, initialSort, sortIndex, initialSortIndex } = column.colDef;\r\n\r\n        if (sort !== undefined) {\r\n            if (sort === 'asc' || sort === 'desc') {\r\n                column.sort = sort;\r\n            }\r\n        } else {\r\n            if (initialSort === 'asc' || initialSort === 'desc') {\r\n                column.sort = initialSort;\r\n            }\r\n        }\r\n\r\n        if (sortIndex !== undefined) {\r\n            if (sortIndex !== null) {\r\n                column.sortIndex = sortIndex;\r\n            }\r\n        } else {\r\n            if (initialSortIndex !== null) {\r\n                column.sortIndex = initialSortIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateColSort(column: AgColumn, sort: SortDirection | undefined, source: ColumnEventType): void {\r\n        if (sort !== undefined) {\r\n            if (sort === 'desc' || sort === 'asc') {\r\n                this.setColSort(column, sort, source);\r\n            } else {\r\n                this.setColSort(column, undefined, source);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setColSort(column: AgColumn, sort: SortDirection | undefined, source: ColumnEventType): void {\r\n        if (column.sort !== sort) {\r\n            column.sort = sort;\r\n            column.dispatchColEvent('sortChanged', source);\r\n        }\r\n        column.dispatchStateUpdatedEvent('sort');\r\n    }\r\n\r\n    public setColSortIndex(column: AgColumn, sortOrder?: number | null): void {\r\n        column.sortIndex = sortOrder;\r\n        column.dispatchStateUpdatedEvent('sortIndex');\r\n    }\r\n\r\n    public createSortIndicator(skipTemplate?: boolean): SortIndicatorComp {\r\n        return new SortIndicatorComp(skipTemplate);\r\n    }\r\n\r\n    public getSortIndicatorSelector(): ComponentSelector {\r\n        return SortIndicatorSelector;\r\n    }\r\n}\r\n", "import type { _SortGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { RowNodeSorter } from './rowNodeSorter';\r\nimport { onSortChanged } from './sortApi';\r\nimport { SortIndicatorComp } from './sortIndicatorComp';\r\nimport { SortService } from './sortService';\r\n\r\n/**\r\n * @feature Rows -> Row Sorting\r\n * @colDef sortable, sort, sortIndex\r\n */\r\nexport const SortModule: _ModuleWithApi<_SortGridApi> = {\r\n    moduleName: 'Sort',\r\n    version: VERSION,\r\n    beans: [SortService, RowNodeSorter],\r\n    apiFunctions: {\r\n        onSortChanged,\r\n    },\r\n    userComponents: {\r\n        agSortIndicator: SortIndicatorComp,\r\n    },\r\n    icons: {\r\n        // show on column header when column is sorted ascending\r\n        sortAscending: 'asc',\r\n        // show on column header when column is sorted descending\r\n        sortDescending: 'desc',\r\n        // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\r\n        sortUnSort: 'none',\r\n    },\r\n};\r\n", "import { _convertColumnEventSourceType } from './columns/columnUtils';\r\nimport type { NamedBean } from './context/bean';\r\nimport { BeanStub } from './context/beanStub';\r\nimport type { ColDef, ColGroupDef } from './entities/colDef';\r\nimport type { PropertyValueChangedEvent } from './gridOptionsService';\r\nimport { _logIfDebug } from './utils/function';\r\n\r\nexport class SyncService extends BeanStub implements NamedBean {\r\n    beanName = 'syncSvc' as const;\r\n\r\n    private waitingForColumns: boolean = false;\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedPropertyListener('columnDefs', (event) => this.setColumnDefs(event));\r\n    }\r\n\r\n    public start(): void {\r\n        // we wait until the UI has finished initialising before setting in columns and rows\r\n        this.beans.ctrlsSvc.whenReady(this, () => {\r\n            const columnDefs = this.gos.get('columnDefs');\r\n            if (columnDefs) {\r\n                this.setColumnsAndData(columnDefs);\r\n            } else {\r\n                this.waitingForColumns = true;\r\n            }\r\n            this.gridReady();\r\n        });\r\n    }\r\n\r\n    private setColumnsAndData(columnDefs: (ColDef | ColGroupDef)[]): void {\r\n        const { colModel, rowModel } = this.beans;\r\n        colModel.setColumnDefs(columnDefs ?? [], 'gridInitializing');\r\n        rowModel.start();\r\n    }\r\n\r\n    private gridReady(): void {\r\n        const { eventSvc, gos } = this;\r\n        eventSvc.dispatchEvent({\r\n            type: 'gridReady',\r\n        });\r\n        _logIfDebug(gos, `initialised successfully, enterprise = ${gos.isModuleRegistered('EnterpriseCore')}`);\r\n    }\r\n\r\n    private setColumnDefs(event: PropertyValueChangedEvent<'columnDefs'>): void {\r\n        const columnDefs = this.gos.get('columnDefs');\r\n        if (!columnDefs) {\r\n            return;\r\n        }\r\n\r\n        if (this.waitingForColumns) {\r\n            this.waitingForColumns = false;\r\n            this.setColumnsAndData(columnDefs);\r\n            return;\r\n        }\r\n\r\n        this.beans.colModel.setColumnDefs(columnDefs, _convertColumnEventSourceType(event.source));\r\n    }\r\n}\r\n", "import type { GetCellValueParams } from '../api/gridApi';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { _missing } from '../utils/generic';\r\nimport { _escapeString } from '../utils/string';\r\n\r\nexport function expireValueCache(beans: BeanCollection): void {\r\n    beans.valueCache?.expire();\r\n}\r\n\r\nexport function getCellValue<TValue = any>(beans: BeanCollection, params: GetCellValueParams<TValue>): any {\r\n    const { colKey, rowNode, useFormatter } = params;\r\n\r\n    const column = beans.colModel.getColDefCol(colKey) ?? beans.colModel.getCol(colKey);\r\n    if (_missing(column)) {\r\n        return null;\r\n    }\r\n\r\n    const value = beans.valueSvc.getValueForDisplay(column, rowNode);\r\n\r\n    if (useFormatter) {\r\n        const formattedValue = beans.valueSvc.formatValue(column, rowNode, value);\r\n        // Match the logic in the default cell renderer insertValueWithoutCellRenderer if no formatter is used\r\n        return formattedValue ?? _escapeString(value, true);\r\n    }\r\n\r\n    return value;\r\n}\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\n\r\n// the class below contains a tree of row nodes. each node is\r\n// represented by a PathItem\r\ninterface PathItem {\r\n    rowNode: RowNode; // the node this item points to\r\n    children: PathItem[] | null; // children of this node - will be a subset of all the nodes children\r\n}\r\n\r\n// when doing transactions, or change detection, and grouping is present\r\n// in the data, there is no need for the ClientSideRowModel to update each\r\n// group after an update, ony parts that were impacted by the change.\r\n// this class keeps track of all groups that were impacted by a transaction.\r\n// the the different CSRM operations (filter, sort etc) use the forEach method\r\n// to visit each group that was changed.\r\nexport class ChangedPath {\r\n    // we keep columns when doing changed detection after user edits.\r\n    // when a user edits, we only need to re-aggregate the column\r\n    // that was edited.\r\n    private readonly keepingColumns: boolean;\r\n\r\n    // the root path always points to RootNode, and RootNode\r\n    // is always in the changed path. over time, we add items to\r\n    // the path, but this stays as the root. when the changed path\r\n    // is ready, this will be the root of the tree of RowNodes that\r\n    // need to be refreshed (all the row nodes that were impacted by\r\n    // the transaction).\r\n    private readonly pathRoot: PathItem;\r\n\r\n    // whether changed path is active of not. it is active when a) doing\r\n    // a transaction update or b) doing change detection. if we are doing\r\n    // a CSRM refresh for other reasons (after sort or filter, or user calling\r\n    // setRowData() without delta mode) then we are not active. we are also\r\n    // marked as not active if secondary columns change in pivot (as this impacts\r\n    // aggregations).\r\n    // can be set inactive by:\r\n    // a) ClientSideRowModel, if no transactions or\r\n    // b) PivotService, if secondary columns changed\r\n    public active = true;\r\n\r\n    // for each node in the change path, we also store which columns need\r\n    // to be re-aggregated.\r\n    private nodeIdsToColumns: { [nodeId: string]: { [colId: string]: boolean } } = {};\r\n\r\n    // for quick lookup, all items in the change path are mapped by nodeId\r\n    private mapToItems: { [id: string]: PathItem } = {};\r\n\r\n    public constructor(keepingColumns: boolean, rootNode: RowNode) {\r\n        this.keepingColumns = keepingColumns;\r\n\r\n        this.pathRoot = {\r\n            rowNode: rootNode,\r\n            children: null,\r\n        };\r\n        this.mapToItems[rootNode.id!] = this.pathRoot;\r\n    }\r\n\r\n    private depthFirstSearchChangedPath(pathItem: PathItem, callback: (rowNode: RowNode) => void): void {\r\n        const { rowNode, children } = pathItem;\r\n        if (children) {\r\n            for (let i = 0; i < children.length; ++i) {\r\n                this.depthFirstSearchChangedPath(children[i], callback);\r\n            }\r\n        }\r\n        callback(rowNode);\r\n    }\r\n\r\n    private depthFirstSearchEverything(\r\n        rowNode: RowNode,\r\n        callback: (rowNode: RowNode) => void,\r\n        traverseEverything: boolean\r\n    ): void {\r\n        const childrenAfterGroup = rowNode.childrenAfterGroup;\r\n        if (childrenAfterGroup) {\r\n            for (let i = 0, len = childrenAfterGroup.length; i < len; ++i) {\r\n                const childNode = childrenAfterGroup[i];\r\n                if (childNode.childrenAfterGroup) {\r\n                    this.depthFirstSearchEverything(childNode, callback, traverseEverything);\r\n                } else if (traverseEverything) {\r\n                    callback(childNode);\r\n                }\r\n            }\r\n        }\r\n        callback(rowNode);\r\n    }\r\n\r\n    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback\r\n    // will be called for child nodes in addition to parent nodes.\r\n    public forEachChangedNodeDepthFirst(\r\n        callback: (rowNode: RowNode) => void,\r\n        traverseLeafNodes = false,\r\n        includeUnchangedNodes = false\r\n    ): void {\r\n        if (this.active && !includeUnchangedNodes) {\r\n            // if we are active, then use the change path to callback\r\n            // only for updated groups\r\n            this.depthFirstSearchChangedPath(this.pathRoot, callback);\r\n        } else {\r\n            // we are not active, so callback for everything, walk the entire path\r\n            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);\r\n        }\r\n    }\r\n\r\n    public executeFromRootNode(callback: (rowNode: RowNode) => void) {\r\n        callback(this.pathRoot.rowNode);\r\n    }\r\n\r\n    private createPathItems(rowNode: RowNode): number {\r\n        let pointer = rowNode;\r\n        let newEntryCount = 0;\r\n        while (!this.mapToItems[pointer.id!]) {\r\n            const newEntry: PathItem = {\r\n                rowNode: pointer,\r\n                children: null,\r\n            };\r\n            this.mapToItems[pointer.id!] = newEntry;\r\n            newEntryCount++;\r\n            pointer = pointer.parent!;\r\n        }\r\n        return newEntryCount;\r\n    }\r\n\r\n    private populateColumnsMap(rowNode: RowNode, columns: AgColumn[]): void {\r\n        if (!this.keepingColumns || !columns) {\r\n            return;\r\n        }\r\n\r\n        let pointer = rowNode;\r\n        while (pointer) {\r\n            // if columns, add the columns in all the way to parent, merging\r\n            // in any other columns that might be there already\r\n            if (!this.nodeIdsToColumns[pointer.id!]) {\r\n                this.nodeIdsToColumns[pointer.id!] = {};\r\n            }\r\n            columns.forEach((col) => (this.nodeIdsToColumns[pointer.id!][col.getId()] = true));\r\n            pointer = pointer.parent!;\r\n        }\r\n    }\r\n\r\n    private linkPathItems(rowNode: RowNode, newEntryCount: number): void {\r\n        let pointer = rowNode;\r\n        for (let i = 0; i < newEntryCount; i++) {\r\n            const thisItem = this.mapToItems[pointer.id!];\r\n            const parentItem = this.mapToItems[pointer.parent!.id!];\r\n            if (!parentItem.children) {\r\n                parentItem.children = [];\r\n            }\r\n            parentItem.children.push(thisItem);\r\n            pointer = pointer.parent!;\r\n        }\r\n    }\r\n\r\n    // called by\r\n    // 1) change detection (provides cols) and\r\n    // 2) groupStage if doing transaction update (doesn't provide cols)\r\n    public addParentNode(rowNode: RowNode | null, columns?: AgColumn[]): void {\r\n        if (!rowNode || rowNode.isRowPinned()) {\r\n            return;\r\n        }\r\n\r\n        // we cannot do  both steps below in the same loop as\r\n        // the second loop has a dependency on the first loop.\r\n        // ie the hierarchy cannot be stitched up yet because\r\n        // we don't have it built yet\r\n\r\n        // create the new PathItem objects.\r\n        const newEntryCount = this.createPathItems(rowNode);\r\n\r\n        // link in the node items\r\n        this.linkPathItems(rowNode, newEntryCount);\r\n\r\n        // update columns\r\n        this.populateColumnsMap(rowNode, columns!);\r\n    }\r\n\r\n    public canSkip(rowNode: RowNode): boolean {\r\n        return this.active && !this.mapToItems[rowNode.id!];\r\n    }\r\n\r\n    public getValueColumnsForNode(rowNode: RowNode, valueColumns: AgColumn[]): AgColumn[] {\r\n        if (!this.keepingColumns) {\r\n            return valueColumns;\r\n        }\r\n\r\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\r\n        const result = valueColumns.filter((col) => colsForThisNode[col.getId()]);\r\n        return result;\r\n    }\r\n\r\n    public getNotValueColumnsForNode(rowNode: RowNode, valueColumns: AgColumn[]): AgColumn[] | null {\r\n        if (!this.keepingColumns) {\r\n            return null;\r\n        }\r\n\r\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\r\n        const result = valueColumns.filter((col) => !colsForThisNode[col.getId()]);\r\n        return result;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { CellValueChangedEvent } from '../events';\r\nimport { _isClientSideRowModel } from '../gridOptionsUtils';\r\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\r\nimport { ChangedPath } from '../utils/changedPath';\r\n\r\n// Matches value in clipboard module\r\nconst SOURCE_PASTE = 'paste';\r\nexport class ChangeDetectionService extends BeanStub implements NamedBean {\r\n    beanName = 'changeDetectionSvc' as const;\r\n\r\n    private clientSideRowModel: IClientSideRowModel | null = null;\r\n\r\n    public postConstruct(): void {\r\n        const { gos, rowModel } = this.beans;\r\n        if (_isClientSideRowModel(gos, rowModel)) {\r\n            this.clientSideRowModel = rowModel;\r\n        }\r\n\r\n        this.addManagedEventListeners({ cellValueChanged: this.onCellValueChanged.bind(this) });\r\n    }\r\n\r\n    private onCellValueChanged(event: CellValueChangedEvent): void {\r\n        const { gos, rowRenderer } = this.beans;\r\n        // Clipboard service manages its own change detection, so no need to do it here.\r\n        // The clipboard manages its own as otherwise this would happen once for every cell\r\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\r\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\r\n        // service executes the logic we have here once (in essence batching up all cell changes\r\n        // into one change detection).\r\n        if (event.source === SOURCE_PASTE || gos.get('suppressChangeDetection')) {\r\n            return;\r\n        }\r\n\r\n        const rowNode = event.node as RowNode;\r\n\r\n        const nodesToRefresh: RowNode[] = [rowNode];\r\n\r\n        const clientSideRowModel = this.clientSideRowModel;\r\n        const rootNode = clientSideRowModel?.rootNode;\r\n\r\n        // step 1 of change detection is to update the aggregated values\r\n        if (rootNode && !rowNode.isRowPinned()) {\r\n            const onlyChangedColumns = gos.get('aggregateOnlyChangedColumns');\r\n            const changedPath = new ChangedPath(onlyChangedColumns, rootNode);\r\n            changedPath.addParentNode(rowNode.parent, [event.column as AgColumn]);\r\n            clientSideRowModel.doAggregate(changedPath);\r\n\r\n            // add all nodes impacted by aggregation, as they need refreshed also.\r\n            changedPath.forEachChangedNodeDepthFirst((rowNode) => {\r\n                nodesToRefresh.push(rowNode);\r\n            });\r\n        }\r\n\r\n        // step 2 of change detection is to refresh the cells\r\n        rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _error } from '../validation/logging';\r\n\r\nexport class ExpressionService extends BeanStub implements NamedBean {\r\n    beanName = 'expressionSvc' as const;\r\n\r\n    private cache = {} as any;\r\n\r\n    public evaluate(expression: string | undefined, params: any): any {\r\n        if (typeof expression === 'string') {\r\n            // valueGetter is an expression, so execute the expression\r\n            return this.evaluateExpression(expression, params);\r\n        } else {\r\n            _error(15, { expression });\r\n        }\r\n    }\r\n\r\n    private evaluateExpression(expression: string, params: any): any {\r\n        try {\r\n            const javaScriptFunction = this.createExpressionFunction(expression);\r\n            // the params don't have all these values, rather we add every possible\r\n            // value a params can have, which makes whatever is in the params available.\r\n            const result = javaScriptFunction(\r\n                params.value,\r\n                params.context,\r\n                params.oldValue,\r\n                params.newValue,\r\n                params.value,\r\n                params.node,\r\n                params.data,\r\n                params.colDef,\r\n                params.rowIndex,\r\n                params.api,\r\n                params.getValue,\r\n                params.column,\r\n                params.columnGroup\r\n            );\r\n            return result;\r\n        } catch (e) {\r\n            // the expression failed, which can happen, as it's the client that\r\n            // provides the expression. so print a nice message\r\n            _error(16, { expression, params, e });\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private createExpressionFunction(expression: any) {\r\n        const expressionToFunctionCache = this.cache;\r\n        // check cache first\r\n        if (expressionToFunctionCache[expression]) {\r\n            return expressionToFunctionCache[expression];\r\n        }\r\n        // if not found in cache, return the function\r\n        const functionBody = this.createFunctionBody(expression);\r\n        const theFunction = new Function(\r\n            'x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, getValue, column, columnGroup',\r\n            functionBody\r\n        );\r\n\r\n        // store in cache\r\n        expressionToFunctionCache[expression] = theFunction;\r\n\r\n        return theFunction;\r\n    }\r\n\r\n    private createFunctionBody(expression: any) {\r\n        // if the expression has the 'return' word in it, then use as is,\r\n        // if not, then wrap it with return and ';' to make a function\r\n        if (expression.indexOf('return') >= 0) {\r\n            return expression;\r\n        } else {\r\n            return 'return ' + expression + ';';\r\n        }\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowNode } from '../entities/rowNode';\r\n\r\nexport class ValueCache extends BeanStub implements NamedBean {\r\n    beanName = 'valueCache' as const;\r\n\r\n    private cacheVersion = 0;\r\n    private active: boolean;\r\n    private neverExpires: boolean;\r\n\r\n    public postConstruct(): void {\r\n        const gos = this.gos;\r\n        this.active = gos.get('valueCache');\r\n        this.neverExpires = gos.get('valueCacheNeverExpires');\r\n    }\r\n\r\n    public onDataChanged(): void {\r\n        if (this.neverExpires) {\r\n            return;\r\n        }\r\n\r\n        this.expire();\r\n    }\r\n\r\n    public expire(): void {\r\n        this.cacheVersion++;\r\n    }\r\n\r\n    public setValue(rowNode: RowNode, colId: string, value: any): any {\r\n        if (this.active) {\r\n            const cacheVersion = this.cacheVersion;\r\n            if (rowNode.__cacheVersion !== cacheVersion) {\r\n                rowNode.__cacheVersion = cacheVersion;\r\n                rowNode.__cacheData = {};\r\n            }\r\n\r\n            rowNode.__cacheData[colId] = value;\r\n        }\r\n    }\r\n\r\n    public getValue(rowNode: RowNode, colId: string): any {\r\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\r\n            return undefined;\r\n        }\r\n\r\n        return rowNode.__cacheData[colId];\r\n    }\r\n}\r\n", "import type { _ValueApi, _ValueCacheApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { expireValueCache, getCellValue } from './cellApi';\r\nimport { ChangeDetectionService } from './changeDetectionService';\r\nimport { ExpressionService } from './expressionService';\r\nimport { ValueCache } from './valueCache';\r\n\r\n/**\r\n * @feature Performance -> Value Cache\r\n * @gridOption valueCache\r\n */\r\nexport const ValueCacheModule: _ModuleWithApi<_ValueCacheApi> = {\r\n    moduleName: 'ValueCache',\r\n    version: VERSION,\r\n    beans: [ValueCache],\r\n    apiFunctions: {\r\n        expireValueCache,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Cells -> Expression\r\n */\r\nexport const ExpressionModule: _ModuleWithoutApi = {\r\n    moduleName: 'Expression',\r\n    version: VERSION,\r\n    beans: [ExpressionService],\r\n};\r\n\r\n/**\r\n * @feature Change Detection\r\n * @gridOption suppressChangeDetection\r\n */\r\nexport const ChangeDetectionModule: _ModuleWithoutApi = {\r\n    moduleName: 'ChangeDetection',\r\n    version: VERSION,\r\n    beans: [ChangeDetectionService],\r\n};\r\n\r\n/**\r\n * @feature Cells -> API\r\n */\r\nexport const CellApiModule: _ModuleWithApi<_ValueApi<any>> = {\r\n    moduleName: 'CellApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        getCellValue,\r\n    },\r\n};\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { DataTypeService } from '../columns/dataTypeService';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type {\r\n    KeyCreatorParams,\r\n    ValueFormatterParams,\r\n    ValueGetterParams,\r\n    ValueParserParams,\r\n    ValueSetterParams,\r\n} from '../entities/colDef';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { CellValueChangedEvent } from '../events';\r\nimport { _isServerSideRowModel } from '../gridOptionsUtils';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport { _exists, _missing } from '../utils/generic';\r\nimport { _getValueUsingField } from '../utils/object';\r\nimport { _warn } from '../validation/logging';\r\nimport type { ExpressionService } from './expressionService';\r\nimport type { ValueCache } from './valueCache';\r\n\r\nexport class ValueService extends BeanStub implements NamedBean {\r\n    beanName = 'valueSvc' as const;\r\n\r\n    private expressionSvc?: ExpressionService;\r\n    private colModel: ColumnModel;\r\n    private valueCache?: ValueCache;\r\n    private dataTypeSvc?: DataTypeService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.expressionSvc = beans.expressionSvc;\r\n        this.colModel = beans.colModel;\r\n        this.valueCache = beans.valueCache;\r\n        this.dataTypeSvc = beans.dataTypeSvc;\r\n    }\r\n\r\n    private cellExpressions: boolean;\r\n    // Store locally for performance reasons and keep updated via property listener\r\n    private isTreeData: boolean;\r\n\r\n    private initialised = false;\r\n\r\n    private isSsrm = false;\r\n\r\n    private executeValueGetter: (\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        valueGetter: string | Function,\r\n        data: any,\r\n        column: AgColumn,\r\n        rowNode: IRowNode\r\n    ) => any;\r\n\r\n    public postConstruct(): void {\r\n        if (!this.initialised) {\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    private init(): void {\r\n        this.executeValueGetter = this.valueCache\r\n            ? this.executeValueGetterWithValueCache.bind(this)\r\n            : this.executeValueGetterWithoutValueCache.bind(this);\r\n        this.isSsrm = _isServerSideRowModel(this.gos);\r\n        this.cellExpressions = this.gos.get('enableCellExpressions');\r\n        this.isTreeData = this.gos.get('treeData');\r\n        this.initialised = true;\r\n\r\n        // We listen to our own event and use it to call the columnSpecific callback,\r\n        // this way the handler calls are correctly interleaved with other global events\r\n        const listener = (event: CellValueChangedEvent) => this.callColumnCellValueChangedHandler(event);\r\n        this.eventSvc.addEventListener('cellValueChanged', listener, true);\r\n        this.addDestroyFunc(() => this.eventSvc.removeEventListener('cellValueChanged', listener, true));\r\n\r\n        this.addManagedPropertyListener('treeData', (propChange) => (this.isTreeData = propChange.currentValue));\r\n    }\r\n\r\n    /**\r\n     * Use this function to get a displayable cell value.\r\n     * This hides values in expanded group rows which are instead displayed by the footer row.\r\n     */\r\n    public getValueForDisplay(column: AgColumn, node: IRowNode) {\r\n        // when in pivot mode, leafGroups cannot be expanded\r\n        const lockedClosedGroup = node.leafGroup && this.colModel.isPivotMode();\r\n        const isOpenGroup = node.group && node.expanded && !node.footer && !lockedClosedGroup;\r\n\r\n        // checks if we show header data regardless of footer\r\n        const groupAlwaysShowAggData = this.gos.get('groupSuppressBlankHeader');\r\n        if (!isOpenGroup || groupAlwaysShowAggData) {\r\n            return this.getValue(column, node);\r\n        }\r\n\r\n        let includeFooter = false;\r\n        const groupIncludeFooterOpt = this.gos.get('groupTotalRow');\r\n        if (typeof groupIncludeFooterOpt !== 'function') {\r\n            includeFooter = !!groupIncludeFooterOpt;\r\n        } else {\r\n            const groupIncludeFooterCb: any = this.gos.getCallback('groupTotalRow' as any);\r\n            includeFooter = !!groupIncludeFooterCb({ node: this });\r\n        }\r\n\r\n        // if doing grouping and footers, we don't want to include the agg value\r\n        // in the header when the group is open\r\n        const ignoreAggData = isOpenGroup && includeFooter;\r\n        return this.getValue(column, node, ignoreAggData);\r\n    }\r\n\r\n    public getValue(column: AgColumn, rowNode?: IRowNode | null, ignoreAggData = false): any {\r\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\r\n        // really should have a way so they get initialised in the right order???\r\n        if (!this.initialised) {\r\n            this.init();\r\n        }\r\n\r\n        if (!rowNode) {\r\n            return;\r\n        }\r\n\r\n        // pull these out to make code below easier to read\r\n        const colDef = column.getColDef();\r\n        const field = colDef.field;\r\n        const colId = column.getColId();\r\n        const data = rowNode.data;\r\n\r\n        let result: any;\r\n\r\n        // if there is a value getter, this gets precedence over a field\r\n        const groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\r\n        const aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\r\n\r\n        // SSRM agg data comes from the data attribute, so ignore that instead\r\n        const ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;\r\n        const ssrmFooterGroupCol =\r\n            this.isSsrm &&\r\n            rowNode.footer &&\r\n            rowNode.field &&\r\n            (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);\r\n\r\n        if (this.isTreeData && aggDataExists) {\r\n            result = rowNode.aggData[colId];\r\n        } else if (this.isTreeData && colDef.valueGetter) {\r\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\r\n        } else if (this.isTreeData && field && data) {\r\n            result = _getValueUsingField(data, field, column.isFieldContainsDots());\r\n        } else if (groupDataExists) {\r\n            result = rowNode.groupData![colId];\r\n        } else if (aggDataExists) {\r\n            result = rowNode.aggData[colId];\r\n        } else if (colDef.valueGetter) {\r\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\r\n        } else if (ssrmFooterGroupCol) {\r\n            // this is for group footers in SSRM, as the SSRM row won't have groupData, need to extract\r\n            // the group value from the data using the row field\r\n            result = _getValueUsingField(data, rowNode.field!, column.isFieldContainsDots());\r\n        } else if (field && data && !ignoreSsrmAggData) {\r\n            result = _getValueUsingField(data, field, column.isFieldContainsDots());\r\n        }\r\n\r\n        // the result could be an expression itself, if we are allowing cell values to be expressions\r\n        if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {\r\n            const cellValueGetter = result.substring(1);\r\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\r\n        }\r\n\r\n        if (result == null) {\r\n            const openedGroup = this.getOpenedGroup(rowNode, column);\r\n            if (openedGroup != null) {\r\n                return openedGroup;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public parseValue(column: AgColumn, rowNode: IRowNode | null, newValue: any, oldValue: any): any {\r\n        const colDef = column.getColDef();\r\n\r\n        const valueParser = colDef.valueParser;\r\n\r\n        if (_exists(valueParser)) {\r\n            const params: ValueParserParams = this.gos.addGridCommonParams({\r\n                node: rowNode,\r\n                data: rowNode?.data,\r\n                oldValue,\r\n                newValue,\r\n                colDef,\r\n                column,\r\n            });\r\n            if (typeof valueParser === 'function') {\r\n                return valueParser(params);\r\n            }\r\n            return this.expressionSvc?.evaluate(valueParser, params);\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    public getDeleteValue(column: AgColumn, rowNode: IRowNode): any {\r\n        if (_exists(column.getColDef().valueParser)) {\r\n            return this.parseValue(column, rowNode, '', this.getValueForDisplay(column, rowNode)) ?? null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public formatValue(\r\n        column: AgColumn,\r\n        node: IRowNode | null,\r\n        value: any,\r\n        suppliedFormatter?: (value: any) => string,\r\n        useFormatterFromColumn = true\r\n    ): string | null {\r\n        let result: string | null = null;\r\n        let formatter: ((value: any) => string) | string | undefined;\r\n\r\n        const colDef = column.getColDef();\r\n\r\n        if (suppliedFormatter) {\r\n            // use supplied formatter if provided, e.g. set filter items can have their own value formatters\r\n            formatter = suppliedFormatter;\r\n        } else if (useFormatterFromColumn) {\r\n            formatter = colDef.valueFormatter;\r\n        }\r\n\r\n        if (formatter) {\r\n            const params: ValueFormatterParams = this.gos.addGridCommonParams({\r\n                value,\r\n                node,\r\n                data: node ? node.data : null,\r\n                colDef,\r\n                column,\r\n            });\r\n            if (typeof formatter === 'function') {\r\n                result = formatter(params);\r\n            } else {\r\n                result = this.expressionSvc ? this.expressionSvc.evaluate(formatter, params) : null;\r\n            }\r\n        } else if (colDef.refData) {\r\n            return colDef.refData[value] || '';\r\n        }\r\n\r\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)\r\n        if (result == null && Array.isArray(value)) {\r\n            result = value.join(', ');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getOpenedGroup(rowNode: IRowNode, column: AgColumn): any {\r\n        if (!this.gos.get('showOpenedGroup')) {\r\n            return;\r\n        }\r\n\r\n        const colDef = column.getColDef();\r\n        if (!colDef.showRowGroup) {\r\n            return;\r\n        }\r\n\r\n        const showRowGroup = column.getColDef().showRowGroup;\r\n\r\n        let pointer = rowNode.parent;\r\n\r\n        while (pointer != null) {\r\n            if (\r\n                pointer.rowGroupColumn &&\r\n                (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())\r\n            ) {\r\n                return pointer.key;\r\n            }\r\n            pointer = pointer.parent;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a GridCell\r\n     * @param rowNode The `RowNode` to be updated\r\n     * @param colKey The `Column` to be updated\r\n     * @param newValue The new value to be set\r\n     * @param eventSource The event source\r\n     * @returns `True` if the value has been updated, otherwise`False`.\r\n     */\r\n    public setValue(rowNode: IRowNode, colKey: string | AgColumn, newValue: any, eventSource?: string): boolean {\r\n        const column = this.colModel.getColDefCol(colKey);\r\n\r\n        if (!rowNode || !column) {\r\n            return false;\r\n        }\r\n        // this happens when enableGroupEdit is turned on and editing is performed on group rows\r\n        if (_missing(rowNode.data)) {\r\n            rowNode.data = {};\r\n        }\r\n\r\n        const { field, valueSetter } = column.getColDef();\r\n\r\n        if (_missing(field) && _missing(valueSetter)) {\r\n            _warn(17);\r\n            return false;\r\n        }\r\n\r\n        if (this.dataTypeSvc && !this.dataTypeSvc.checkType(column, newValue)) {\r\n            _warn(135);\r\n            return false;\r\n        }\r\n\r\n        const params: ValueSetterParams = this.gos.addGridCommonParams({\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            oldValue: this.getValue(column, rowNode),\r\n            newValue: newValue,\r\n            colDef: column.getColDef(),\r\n            column: column,\r\n        });\r\n\r\n        params.newValue = newValue;\r\n\r\n        let valueWasDifferent: boolean;\r\n\r\n        if (_exists(valueSetter)) {\r\n            if (typeof valueSetter === 'function') {\r\n                valueWasDifferent = valueSetter(params);\r\n            } else {\r\n                valueWasDifferent = this.expressionSvc?.evaluate(valueSetter, params);\r\n            }\r\n        } else {\r\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\r\n        }\r\n\r\n        // in case user forgot to return something (possible if they are not using TypeScript\r\n        // and just forgot we default the return value to true, so we always refresh.\r\n        if (valueWasDifferent === undefined) {\r\n            valueWasDifferent = true;\r\n        }\r\n\r\n        // if no change to the value, then no need to do the updating, or notifying via events.\r\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\r\n        // all the time.\r\n        if (!valueWasDifferent) {\r\n            return false;\r\n        }\r\n\r\n        // reset quick filter on this row\r\n        rowNode.resetQuickFilterAggregateText();\r\n\r\n        this.valueCache?.onDataChanged();\r\n\r\n        const savedValue = this.getValue(column, rowNode);\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'cellValueChanged',\r\n            event: null,\r\n            rowIndex: rowNode.rowIndex!,\r\n            rowPinned: rowNode.rowPinned,\r\n            column: params.column,\r\n            colDef: params.colDef,\r\n            data: rowNode.data,\r\n            node: rowNode,\r\n            oldValue: params.oldValue,\r\n            newValue: savedValue,\r\n            value: savedValue,\r\n            source: eventSource,\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    private callColumnCellValueChangedHandler(event: CellValueChangedEvent) {\r\n        const onCellValueChanged = event.colDef.onCellValueChanged;\r\n        if (typeof onCellValueChanged === 'function') {\r\n            this.beans.frameworkOverrides.wrapOutgoing(() => {\r\n                onCellValueChanged({\r\n                    node: event.node,\r\n                    data: event.data,\r\n                    oldValue: event.oldValue,\r\n                    newValue: event.newValue,\r\n                    colDef: event.colDef,\r\n                    column: event.column,\r\n                    api: event.api,\r\n                    context: event.context,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private setValueUsingField(\r\n        data: any,\r\n        field: string | undefined,\r\n        newValue: any,\r\n        isFieldContainsDots: boolean\r\n    ): boolean {\r\n        if (!field) {\r\n            return false;\r\n        }\r\n\r\n        // if no '.', then it's not a deep value\r\n        let valuesAreSame: boolean = false;\r\n        if (!isFieldContainsDots) {\r\n            valuesAreSame = data[field] === newValue;\r\n            if (!valuesAreSame) {\r\n                data[field] = newValue;\r\n            }\r\n        } else {\r\n            // otherwise it is a deep value, so need to dig for it\r\n            const fieldPieces = field.split('.');\r\n            let currentObject = data;\r\n            while (fieldPieces.length > 0 && currentObject) {\r\n                const fieldPiece: any = fieldPieces.shift();\r\n                if (fieldPieces.length === 0) {\r\n                    valuesAreSame = currentObject[fieldPiece] === newValue;\r\n                    if (!valuesAreSame) {\r\n                        currentObject[fieldPiece] = newValue;\r\n                    }\r\n                } else {\r\n                    currentObject = currentObject[fieldPiece];\r\n                }\r\n            }\r\n        }\r\n        return !valuesAreSame;\r\n    }\r\n\r\n    private executeValueGetterWithValueCache(\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        valueGetter: string | Function,\r\n        data: any,\r\n        column: AgColumn,\r\n        rowNode: IRowNode\r\n    ): any {\r\n        const colId = column.getColId();\r\n\r\n        // if inside the same turn, just return back the value we got last time\r\n        const valueFromCache = this.valueCache!.getValue(rowNode as RowNode, colId);\r\n\r\n        if (valueFromCache !== undefined) {\r\n            return valueFromCache;\r\n        }\r\n\r\n        const result = this.executeValueGetterWithoutValueCache(valueGetter, data, column, rowNode);\r\n\r\n        // if a turn is active, store the value in case the grid asks for it again\r\n        this.valueCache!.setValue(rowNode as RowNode, colId, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    private executeValueGetterWithoutValueCache(\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        valueGetter: string | Function,\r\n        data: any,\r\n        column: AgColumn,\r\n        rowNode: IRowNode\r\n    ): any {\r\n        const params: ValueGetterParams = this.gos.addGridCommonParams({\r\n            data: data,\r\n            node: rowNode,\r\n            column: column,\r\n            colDef: column.getColDef(),\r\n            getValue: this.getValueCallback.bind(this, rowNode),\r\n        });\r\n\r\n        let result;\r\n        if (typeof valueGetter === 'function') {\r\n            result = valueGetter(params);\r\n        } else {\r\n            result = this.expressionSvc?.evaluate(valueGetter, params);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getValueCallback(node: IRowNode, field: string | AgColumn): any {\r\n        const otherColumn = this.colModel.getColDefCol(field);\r\n\r\n        if (otherColumn) {\r\n            return this.getValue(otherColumn, node);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\r\n    public getKeyForNode(col: AgColumn, rowNode: IRowNode): any {\r\n        const value = this.getValue(col, rowNode);\r\n        const keyCreator = col.getColDef().keyCreator;\r\n\r\n        let result = value;\r\n        if (keyCreator) {\r\n            const keyParams: KeyCreatorParams = this.gos.addGridCommonParams({\r\n                value: value,\r\n                colDef: col.getColDef(),\r\n                column: col,\r\n                node: rowNode,\r\n                data: rowNode.data,\r\n            });\r\n            result = keyCreator(keyParams);\r\n        }\r\n\r\n        // if already a string, or missing, just return it\r\n        if (typeof result === 'string' || result == null) {\r\n            return result;\r\n        }\r\n\r\n        result = String(result);\r\n\r\n        if (result === '[object Object]') {\r\n            _warn(121);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { ApiFunctionService } from './api/apiFunctionService';\r\nimport { destroy, getGridId, getGridOption, isDestroyed, setGridOption, updateGridOptions } from './api/coreApi';\r\nimport type { _CoreGridApi } from './api/gridApi';\r\nimport { ColumnMoveModule } from './columnMove/columnMoveModule';\r\nimport { ColumnResizeModule } from './columnResize/columnResizeModule';\r\nimport { ColumnGroupModule } from './columns/columnGroups/columnGroupModule';\r\nimport { ColumnModel } from './columns/columnModel';\r\nimport { ColumnFlexModule, DataTypeModule } from './columns/columnModule';\r\nimport { ColumnNameService } from './columns/columnNameService';\r\nimport { ColumnViewportService } from './columns/columnViewportService';\r\nimport { VisibleColsService } from './columns/visibleColsService';\r\nimport { CellRendererFunctionModule } from './components/framework/cellRendererFunctionModule';\r\nimport { Registry } from './components/framework/registry';\r\nimport { UserComponentFactory } from './components/framework/userComponentFactory';\r\nimport { CtrlsService } from './ctrlsService';\r\nimport { Environment } from './environment';\r\nimport { EventService } from './eventService';\r\nimport { FocusService } from './focusService';\r\nimport { ScrollVisibleService } from './gridBodyComp/scrollVisibleService';\r\nimport { GridDestroyService } from './gridDestroyService';\r\nimport { GridOptionsService } from './gridOptionsService';\r\nimport { ColumnGroupHeaderCompModule, ColumnHeaderCompModule } from './headerRendering/cells/headerModule';\r\nimport type { _ModuleWithApi } from './interfaces/iModule';\r\nimport { AnimationFrameModule } from './misc/animationFrameModule';\r\nimport { TouchModule } from './misc/touchModule';\r\nimport { KeyboardNavigationModule } from './navigation/navigationModule';\r\nimport { PageBoundsListener } from './pagination/pageBoundsListener';\r\nimport { PageBoundsService } from './pagination/pageBoundsService';\r\nimport { PinnedColumnModule } from './pinnedColumns/pinnedColumnModule';\r\nimport { AriaModule } from './rendering/ariaModule';\r\nimport { OverlayModule } from './rendering/overlays/overlayModule';\r\nimport { RowContainerHeightService } from './rendering/rowContainerHeightService';\r\nimport { RowRenderer } from './rendering/rowRenderer';\r\nimport { SortModule } from './sort/sortModule';\r\nimport { SyncService } from './syncService';\r\nimport { ChangeDetectionModule, ExpressionModule } from './valueService/valueModule';\r\nimport { ValueService } from './valueService/valueService';\r\nimport { VERSION } from './version';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const CommunityCoreModule: _ModuleWithApi<_CoreGridApi> = {\r\n    moduleName: 'CommunityCore',\r\n    version: VERSION,\r\n    beans: [\r\n        GridDestroyService,\r\n        ApiFunctionService,\r\n        Registry,\r\n        UserComponentFactory,\r\n        RowContainerHeightService,\r\n        VisibleColsService,\r\n        EventService,\r\n        GridOptionsService,\r\n        ColumnModel,\r\n        PageBoundsService,\r\n        PageBoundsListener,\r\n        RowRenderer,\r\n        ValueService,\r\n        FocusService,\r\n        Environment,\r\n        ScrollVisibleService,\r\n        CtrlsService,\r\n        SyncService,\r\n        ColumnNameService,\r\n        ColumnViewportService,\r\n    ],\r\n    icons: {\r\n        // icon on select dropdowns (select cell editor, charts tool panels)\r\n        selectOpen: 'small-down',\r\n\r\n        /** @deprecated v33 */\r\n        smallDown: 'small-down',\r\n        /** @deprecated v33 */\r\n        colorPicker: 'color-picker',\r\n        /** @deprecated v33 */\r\n        smallUp: 'small-up',\r\n        /** @deprecated v33 */\r\n        checkboxChecked: 'small-up',\r\n        /** @deprecated v33 */\r\n        checkboxIndeterminate: 'checkbox-indeterminate',\r\n        /** @deprecated v33 */\r\n        checkboxUnchecked: 'checkbox-unchecked',\r\n        /** @deprecated v33 */\r\n        radioButtonOn: 'radio-button-on',\r\n        /** @deprecated v33 */\r\n        radioButtonOff: 'radio-button-off',\r\n        /** @deprecated v33 */\r\n        smallLeft: 'small-left',\r\n        /** @deprecated v33 */\r\n        smallRight: 'small-right',\r\n    },\r\n    apiFunctions: {\r\n        getGridId,\r\n        destroy,\r\n        isDestroyed,\r\n        getGridOption,\r\n        setGridOption,\r\n        updateGridOptions,\r\n    },\r\n    dependsOn: [\r\n        DataTypeModule,\r\n        ColumnMoveModule,\r\n        ColumnResizeModule,\r\n        SortModule,\r\n        ColumnHeaderCompModule,\r\n        ColumnGroupModule,\r\n        ColumnGroupHeaderCompModule,\r\n        OverlayModule,\r\n        ChangeDetectionModule,\r\n        AnimationFrameModule,\r\n        KeyboardNavigationModule,\r\n        PinnedColumnModule,\r\n        AriaModule,\r\n        TouchModule,\r\n        CellRendererFunctionModule,\r\n        ColumnFlexModule,\r\n        ExpressionModule,\r\n    ],\r\n};\r\n", "import { createGridApi } from './api/apiUtils';\r\nimport type { GridApi } from './api/gridApi';\r\nimport type { ApiFunctionName } from './api/iApiFunction';\r\nimport type { ContextParams, SingletonBean } from './context/context';\r\nimport { Context } from './context/context';\r\nimport { gridBeanDestroyComparator, gridBeanInitComparator } from './context/gridBeanComparator';\r\nimport type { GridOptions } from './entities/gridOptions';\r\nimport { GridComp } from './gridComp/gridComp';\r\nimport { CommunityCoreModule } from './gridCoreModule';\r\nimport type { IFrameworkOverrides } from './interfaces/iFrameworkOverrides';\r\nimport type {\r\n    CommunityModuleName,\r\n    EnterpriseModuleName,\r\n    Module,\r\n    _ModuleWithApi,\r\n    _ModuleWithoutApi,\r\n} from './interfaces/iModule';\r\nimport type { RowModelType } from './interfaces/iRowModel';\r\nimport {\r\n    _areModulesGridScoped,\r\n    _getRegisteredModules,\r\n    _isModuleRegistered,\r\n    _registerModule,\r\n} from './modules/moduleRegistry';\r\nimport { _missing } from './utils/generic';\r\nimport { _mergeDeep } from './utils/object';\r\nimport { _error, _logPreInitErr, baseDocLink } from './validation/logging';\r\nimport { VanillaFrameworkOverrides } from './vanillaFrameworkOverrides';\r\n\r\nexport interface GridParams {\r\n    // INTERNAL - used by Web Components\r\n    globalListener?: (...args: any[]) => any;\r\n    // INTERNAL - Always sync - for events such as gridPreDestroyed\r\n    globalSyncListener?: (...args: any[]) => any;\r\n    // INTERNAL - this allows the base frameworks (React, Angular, etc) to provide alternative cellRenderers and cellEditors\r\n    frameworkOverrides?: IFrameworkOverrides;\r\n    // INTERNAL - bean instances to add to the context\r\n    providedBeanInstances?: { [key: string]: any };\r\n    // INTERNAL - set by frameworks if the provided grid div is safe to set a theme class on\r\n    setThemeOnGridDiv?: boolean;\r\n\r\n    /**\r\n     * Modules to be registered directly with this grid instance.\r\n     */\r\n    modules?: Module[];\r\n}\r\n\r\nexport interface Params {\r\n    /**\r\n     * Modules to be registered directly with this grid instance.\r\n     */\r\n    modules?: Module[];\r\n}\r\n\r\nclass GlobalGridOptions {\r\n    static gridOptions: GridOptions | undefined = undefined;\r\n    static mergeStrategy: GlobalGridOptionsMergeStrategy = 'shallow';\r\n\r\n    /**\r\n     * @param providedOptions\r\n     * @returns Shallow copy of the provided options with global options merged in.\r\n     */\r\n    static applyGlobalGridOptions(providedOptions: GridOptions): GridOptions {\r\n        if (!GlobalGridOptions.gridOptions) {\r\n            // No global options provided, return a shallow copy of the provided options\r\n            return { ...providedOptions };\r\n        }\r\n\r\n        let mergedGridOps: GridOptions = {};\r\n        // Merge deep to avoid leaking changes to the global options\r\n        _mergeDeep(mergedGridOps, GlobalGridOptions.gridOptions, true, true);\r\n        if (GlobalGridOptions.mergeStrategy === 'deep') {\r\n            _mergeDeep(mergedGridOps, providedOptions, true, true);\r\n        } else {\r\n            // Shallow copy so that provided object properties completely override global options\r\n            mergedGridOps = { ...mergedGridOps, ...providedOptions };\r\n        }\r\n\r\n        if (GlobalGridOptions.gridOptions.context) {\r\n            // Ensure context reference is maintained if it was provided\r\n            mergedGridOps.context = GlobalGridOptions.gridOptions.context;\r\n        }\r\n        if (providedOptions.context) {\r\n            if (GlobalGridOptions.mergeStrategy === 'deep' && mergedGridOps.context) {\r\n                // Merge global context properties into the provided context whilst maintaining provided context reference\r\n                _mergeDeep(providedOptions.context, mergedGridOps.context, true, true);\r\n            }\r\n            mergedGridOps.context = providedOptions.context;\r\n        }\r\n\r\n        return mergedGridOps;\r\n    }\r\n}\r\n\r\n/**\r\n * When providing global grid options, specify how they should be merged with the grid options provided to individual grids.\r\n * - `deep` will merge the global options into the provided options deeply, with provided options taking precedence.\r\n * - `shallow` will merge the global options with the provided options shallowly, with provided options taking precedence.\r\n * @default 'shallow'\r\n * @param gridOptions - global grid options\r\n */\r\nexport type GlobalGridOptionsMergeStrategy = 'deep' | 'shallow';\r\n\r\n/**\r\n * Provide gridOptions that will be shared by all grid instances.\r\n * Individually defined GridOptions will take precedence over global options.\r\n * @param gridOptions - global grid options\r\n */\r\nexport function provideGlobalGridOptions(\r\n    gridOptions: GridOptions,\r\n    mergeStrategy: GlobalGridOptionsMergeStrategy = 'shallow'\r\n): void {\r\n    GlobalGridOptions.gridOptions = gridOptions;\r\n    GlobalGridOptions.mergeStrategy = mergeStrategy;\r\n}\r\n\r\nexport function _getGlobalGridOption<K extends keyof GridOptions>(gridOption: K): GridOptions[K] {\r\n    return GlobalGridOptions.gridOptions?.[gridOption];\r\n}\r\n\r\n// **NOTE** If updating this JsDoc please also update the re-exported createGrid in main-umd-shared.ts\r\n/**\r\n * Creates a grid inside the provided HTML element.\r\n * @param eGridDiv Parent element to contain the grid.\r\n * @param gridOptions Configuration for the grid.\r\n * @param params Individually register AG Grid Modules to this grid.\r\n * @returns api to be used to interact with the grid.\r\n */\r\nexport function createGrid<TData>(\r\n    eGridDiv: HTMLElement,\r\n    gridOptions: GridOptions<TData>,\r\n    params?: Params\r\n): GridApi<TData> {\r\n    if (!gridOptions) {\r\n        // No gridOptions provided, abort creating the grid\r\n        _error(11);\r\n        return {} as GridApi;\r\n    }\r\n    const gridParams: GridParams | undefined = params;\r\n    let destroyCallback: (() => void) | undefined;\r\n    if (!gridParams?.setThemeOnGridDiv) {\r\n        // frameworks already create an element owned by our code, so we can set\r\n        // the theme class on it. JS users calling createGrid directly are\r\n        // passing an element owned by their application, so we can't set a\r\n        // class name on it and must create a wrapper.\r\n        const newGridDiv = document.createElement('div');\r\n        newGridDiv.style.height = '100%';\r\n        eGridDiv.appendChild(newGridDiv);\r\n        eGridDiv = newGridDiv;\r\n        destroyCallback = () => eGridDiv.remove();\r\n    }\r\n    const api = new GridCoreCreator().create(\r\n        eGridDiv,\r\n        gridOptions,\r\n        (context) => {\r\n            const gridComp = new GridComp(eGridDiv);\r\n            context.createBean(gridComp);\r\n        },\r\n        undefined,\r\n        params,\r\n        destroyCallback\r\n    );\r\n\r\n    return api;\r\n}\r\n\r\nlet nextGridId = 1;\r\n\r\n// creates services of grid only, no UI, so frameworks can use this if providing\r\n// their own UI\r\nexport class GridCoreCreator {\r\n    public create(\r\n        eGridDiv: HTMLElement,\r\n        providedOptions: GridOptions,\r\n        createUi: (context: Context) => void,\r\n        acceptChanges?: (context: Context) => void,\r\n        params?: GridParams,\r\n        destroyCallback?: () => void\r\n    ): GridApi {\r\n        // Returns a shallow copy of the provided options, with global options merged in\r\n        const gridOptions = GlobalGridOptions.applyGlobalGridOptions(providedOptions);\r\n\r\n        const gridId = gridOptions.gridId ?? String(nextGridId++);\r\n\r\n        const rowModelType = gridOptions.rowModelType ?? 'clientSide';\r\n\r\n        const registeredModules = this.getRegisteredModules(params, gridId, rowModelType);\r\n\r\n        const beanClasses = this.createBeansList(rowModelType, registeredModules, gridId);\r\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\r\n\r\n        if (!beanClasses) {\r\n            // Detailed error message will have been printed by createBeansList\r\n            // Break typing so that the normal return type does not have to handle undefined.\r\n            return undefined as any;\r\n        }\r\n\r\n        const contextParams: ContextParams = {\r\n            providedBeanInstances,\r\n            beanClasses,\r\n            gridId,\r\n            beanInitComparator: gridBeanInitComparator,\r\n            beanDestroyComparator: gridBeanDestroyComparator,\r\n            derivedBeans: [createGridApi],\r\n            destroyCallback,\r\n        };\r\n\r\n        const context = new Context(contextParams);\r\n        this.registerModuleFeatures(context, registeredModules);\r\n\r\n        createUi(context);\r\n\r\n        context.getBean('syncSvc').start();\r\n\r\n        if (acceptChanges) {\r\n            acceptChanges(context);\r\n        }\r\n\r\n        return context.getBean('gridApi');\r\n    }\r\n\r\n    private getRegisteredModules(params: GridParams | undefined, gridId: string, rowModelType: RowModelType): Module[] {\r\n        _registerModule(CommunityCoreModule, undefined);\r\n\r\n        params?.modules?.forEach((m) => _registerModule(m, gridId));\r\n\r\n        return _getRegisteredModules(gridId, rowModelType);\r\n    }\r\n\r\n    private registerModuleFeatures(\r\n        context: Context,\r\n        registeredModules: (_ModuleWithApi<any> | _ModuleWithoutApi)[]\r\n    ): void {\r\n        const registry = context.getBean('registry');\r\n        const apiFunctionSvc = context.getBean('apiFunctionSvc');\r\n\r\n        registeredModules.forEach((module) => {\r\n            registry.registerModule(module);\r\n\r\n            const apiFunctions = module.apiFunctions;\r\n            if (apiFunctions) {\r\n                const names = Object.keys(apiFunctions) as ApiFunctionName[];\r\n                names.forEach((name) => {\r\n                    apiFunctionSvc?.addFunction(name, apiFunctions[name]!);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private createProvidedBeans(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams): any {\r\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\r\n        if (_missing(frameworkOverrides)) {\r\n            frameworkOverrides = new VanillaFrameworkOverrides();\r\n        }\r\n\r\n        const seed = {\r\n            gridOptions: gridOptions,\r\n            eGridDiv: eGridDiv,\r\n            globalListener: params ? params.globalListener : null,\r\n            globalSyncListener: params ? params.globalSyncListener : null,\r\n            frameworkOverrides: frameworkOverrides,\r\n        };\r\n        if (params && params.providedBeanInstances) {\r\n            Object.assign(seed, params.providedBeanInstances);\r\n        }\r\n\r\n        return seed;\r\n    }\r\n\r\n    private createBeansList(\r\n        rowModelType: RowModelType,\r\n        registeredModules: Module[],\r\n        gridId: string\r\n    ): SingletonBean[] | undefined {\r\n        // assert that the relevant module has been loaded\r\n        const rowModelModuleNames: Record<RowModelType, CommunityModuleName | EnterpriseModuleName> = {\r\n            clientSide: 'ClientSideRowModel',\r\n            infinite: 'InfiniteRowModel',\r\n            serverSide: 'ServerSideRowModel',\r\n            viewport: 'ViewportRowModel',\r\n        };\r\n\r\n        const rowModuleModelName = rowModelModuleNames[rowModelType];\r\n\r\n        if (!rowModuleModelName) {\r\n            // can't use validation service here as hasn't been created yet\r\n            _logPreInitErr(201, { rowModelType }, `Unknown rowModelType ${rowModelType}.`);\r\n            return;\r\n        }\r\n\r\n        if (!_isModuleRegistered(rowModuleModelName, gridId, rowModelType)) {\r\n            _logPreInitErr(\r\n                200,\r\n                {\r\n                    reasonOrId: `rowModelType = '${rowModelType}'`,\r\n                    moduleName: rowModuleModelName,\r\n                    gridScoped: _areModulesGridScoped(),\r\n                    gridId,\r\n                    rowModelType,\r\n                },\r\n                `Missing module ${rowModuleModelName}Module for rowModelType ${rowModelType}. \\nIf upgrading from before v33, see ${baseDocLink}/upgrading-to-ag-grid-33/#changes-to-modules/`\r\n            );\r\n            return;\r\n        }\r\n\r\n        const beans: Set<SingletonBean> = new Set();\r\n\r\n        registeredModules.forEach((module) => module.beans?.forEach((bean) => beans.add(bean)));\r\n\r\n        return Array.from(beans);\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { InfiniteRowModel } from '../infiniteRowModel/infiniteRowModel';\r\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\r\nimport type { IServerSideRowModel } from '../interfaces/iServerSideRowModel';\r\n\r\nexport function _getClientSideRowModel(beans: BeanCollection): IClientSideRowModel | undefined {\r\n    const rowModel = beans.rowModel;\r\n    return rowModel.getType() === 'clientSide' ? (rowModel as IClientSideRowModel) : undefined;\r\n}\r\n\r\nexport function _getInfiniteRowModel(beans: BeanCollection): InfiniteRowModel | undefined {\r\n    const rowModel = beans.rowModel;\r\n    return rowModel.getType() === 'infinite' ? (rowModel as InfiniteRowModel) : undefined;\r\n}\r\n\r\nexport function _getServerSideRowModel(beans: BeanCollection): IServerSideRowModel | undefined {\r\n    const rowModel = beans.rowModel;\r\n    return rowModel.getType() === 'serverSide' ? (rowModel as IServerSideRowModel) : undefined;\r\n}\r\n", "// events that are available for use by users of AG Grid and so should be documented\r\n/** EVENTS that should be exposed via code generation for the framework components.  */\r\nexport const _PUBLIC_EVENTS = [\r\n    'columnEverythingChanged',\r\n    'newColumnsLoaded',\r\n    'columnPivotModeChanged',\r\n    'pivotMaxColumnsExceeded',\r\n    'columnRowGroupChanged',\r\n    'expandOrCollapseAll',\r\n    'columnPivotChanged',\r\n    'gridColumnsChanged',\r\n    'columnValueChanged',\r\n    'columnMoved',\r\n    'columnVisible',\r\n    'columnPinned',\r\n    'columnGroupOpened',\r\n    'columnResized',\r\n    'displayedColumnsChanged',\r\n    'virtualColumnsChanged',\r\n    'columnHeaderMouseOver',\r\n    'columnHeaderMouseLeave',\r\n    'columnHeaderClicked',\r\n    'columnHeaderContextMenu',\r\n    'asyncTransactionsFlushed',\r\n    'rowGroupOpened',\r\n    'rowDataUpdated',\r\n    'pinnedRowDataChanged',\r\n    'rangeSelectionChanged',\r\n    'cellSelectionChanged',\r\n    'chartCreated',\r\n    'chartRangeSelectionChanged',\r\n    'chartOptionsChanged',\r\n    'chartDestroyed',\r\n    'toolPanelVisibleChanged',\r\n    'toolPanelSizeChanged',\r\n    'modelUpdated',\r\n    'cutStart',\r\n    'cutEnd',\r\n    'pasteStart',\r\n    'pasteEnd',\r\n    'fillStart',\r\n    'fillEnd',\r\n    'cellSelectionDeleteStart',\r\n    'cellSelectionDeleteEnd',\r\n    'rangeDeleteStart',\r\n    'rangeDeleteEnd',\r\n    'undoStarted',\r\n    'undoEnded',\r\n    'redoStarted',\r\n    'redoEnded',\r\n    'cellClicked',\r\n    'cellDoubleClicked',\r\n    'cellMouseDown',\r\n    'cellContextMenu',\r\n    'cellValueChanged',\r\n    'cellEditRequest',\r\n    'rowValueChanged',\r\n    'headerFocused',\r\n    'cellFocused',\r\n    'rowSelected',\r\n    'selectionChanged',\r\n    'tooltipShow',\r\n    'tooltipHide',\r\n    'cellKeyDown',\r\n    'cellMouseOver',\r\n    'cellMouseOut',\r\n    'filterChanged',\r\n    'filterModified',\r\n    'filterOpened',\r\n    'advancedFilterBuilderVisibleChanged',\r\n    'sortChanged',\r\n    'virtualRowRemoved',\r\n    'rowClicked',\r\n    'rowDoubleClicked',\r\n    'gridReady',\r\n    'gridPreDestroyed',\r\n    'gridSizeChanged',\r\n    'viewportChanged',\r\n    'firstDataRendered',\r\n    'dragStarted',\r\n    'dragStopped',\r\n    'dragCancelled',\r\n    'rowEditingStarted',\r\n    'rowEditingStopped',\r\n    'cellEditingStarted',\r\n    'cellEditingStopped',\r\n    'bodyScroll',\r\n    'bodyScrollEnd',\r\n    'paginationChanged',\r\n    'componentStateChanged',\r\n    'storeRefreshed',\r\n    'stateUpdated',\r\n    'columnMenuVisibleChanged',\r\n    'contextMenuVisibleChanged',\r\n    'rowDragEnter',\r\n    'rowDragMove',\r\n    'rowDragLeave',\r\n    'rowDragEnd',\r\n    'rowDragCancel',\r\n] as const;\r\n\r\n// events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\r\n// These events are still available to users via the API if the eventName is cast to any to stop Typescript from complaining, but they are not intended for general use\r\n/** Exclude the following internal events from code generation to prevent exposing these events via framework components */\r\nexport const _INTERNAL_EVENTS = [\r\n    'scrollbarWidthChanged',\r\n    'keyShortcutChangedCellStart',\r\n    'keyShortcutChangedCellEnd',\r\n    'pinnedHeightChanged',\r\n    'cellFocusCleared',\r\n    'fullWidthRowFocused',\r\n    'checkboxChanged',\r\n    'heightScaleChanged',\r\n    'suppressMovableColumns',\r\n    'suppressMenuHide',\r\n    'suppressFieldDotNotation',\r\n    'columnPanelItemDragStart',\r\n    'columnPanelItemDragEnd',\r\n    'bodyHeightChanged',\r\n    'columnContainerWidthChanged',\r\n    'displayedColumnsWidthChanged',\r\n    'scrollVisibilityChanged',\r\n    'scrollGapChanged',\r\n    'columnHoverChanged',\r\n    'flashCells',\r\n    'paginationPixelOffsetChanged',\r\n    'displayedRowsChanged',\r\n    'leftPinnedWidthChanged',\r\n    'rightPinnedWidthChanged',\r\n    'rowContainerHeightChanged',\r\n    'headerHeightChanged',\r\n    'columnGroupHeaderHeightChanged',\r\n    'columnHeaderHeightChanged',\r\n    'gridStylesChanged',\r\n    'storeUpdated',\r\n    'filterDestroyed',\r\n    'rowDataUpdateStarted',\r\n    'rowCountReady',\r\n    'advancedFilterEnabledChanged',\r\n    'dataTypesInferred',\r\n    'fieldValueChanged',\r\n    'fieldPickerValueSelected',\r\n    'richSelectListRowSelected',\r\n    'sideBarUpdated',\r\n    'alignedGridScroll',\r\n    'alignedGridColumn',\r\n    'gridOptionsChanged',\r\n    'chartTitleEdit',\r\n    'recalculateRowBounds',\r\n    'stickyTopOffsetChanged',\r\n    'overlayExclusiveChanged',\r\n    'beforeRefreshModel',\r\n] as const;\r\n\r\nexport const _ALL_EVENTS = [..._PUBLIC_EVENTS, ..._INTERNAL_EVENTS] as const;\r\n\r\nexport type AgPublicEventType = (typeof _PUBLIC_EVENTS)[number];\r\nexport type AgInternalEventType = (typeof _INTERNAL_EVENTS)[number];\r\nexport type AgEventType = AgPublicEventType | AgInternalEventType;\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { GetLocaleTextParams } from '../../interfaces/iCallbackParams';\r\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\r\nimport type { LocaleTextFunc } from './localeUtils';\r\n\r\nexport class LocaleService extends BeanStub implements NamedBean {\r\n    beanName = 'localeSvc' as const;\r\n\r\n    public override getLocaleTextFunc(): LocaleTextFunc {\r\n        const gos = this.gos;\r\n        const getLocaleText = gos.getCallback('getLocaleText');\r\n        if (getLocaleText) {\r\n            //key: string, defaultValue: string, variableValues?: string[]\r\n            return (key: string, defaultValue: string, variableValues?: string[]) => {\r\n                const params: WithoutGridCommon<GetLocaleTextParams> = {\r\n                    key,\r\n                    defaultValue,\r\n                    variableValues,\r\n                };\r\n                return getLocaleText(params);\r\n            };\r\n        }\r\n\r\n        const localeText = gos.get('localeText');\r\n        return (key: string, defaultValue: string, variableValues?: string[]) => {\r\n            let localisedText = localeText && localeText[key];\r\n\r\n            if (localisedText && variableValues && variableValues.length) {\r\n                let found = 0;\r\n                while (true) {\r\n                    if (found >= variableValues.length) {\r\n                        break;\r\n                    }\r\n                    const idx = localisedText.indexOf('${variable}');\r\n                    if (idx === -1) {\r\n                        break;\r\n                    }\r\n\r\n                    localisedText = localisedText.replace('${variable}', variableValues[found++]);\r\n                }\r\n            }\r\n\r\n            return localisedText ?? defaultValue;\r\n        };\r\n    }\r\n}\r\n", "import type { GridOptions } from './entities/gridOptions';\r\nimport type { AgGridCommon } from './interfaces/iCommon';\r\n\r\ntype GridOptionKey = keyof GridOptions;\r\n\r\ntype GetKeys<T, U> = {\r\n    [K in keyof T]: U extends T[K] ? K : T[K] extends U | null | undefined ? K : never; //Reverse match for string literal types\r\n}[keyof T];\r\n\r\n/**\r\n *  Get the GridProperties that are of type `any`.\r\n *  Works by finding the properties that can extend a non existing string.\r\n *  This will only be the properties of type `any`.\r\n */\r\nexport type AnyGridOptions = {\r\n    [K in keyof GridOptions]: GridOptions[K] extends 'NO_MATCH' ? K : never;\r\n}[keyof GridOptions];\r\n\r\n/**\r\n * Get all the GridOptions properties of the provided type.\r\n * Will also include `any` properties.\r\n */\r\ntype KeysLike<U> = Exclude<GetKeys<GridOptions, U>, undefined>;\r\n/**\r\n * Get all the GridOption properties that strictly contain the provided type.\r\n * Does not include `any` properties.\r\n */\r\ntype KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\r\ntype CallbackKeys = KeysOfType<(any: AgGridCommon<any, any>) => any>;\r\n/** All function properties excluding those explicity match the common callback interface. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype FunctionKeys = Exclude<KeysLike<Function>, CallbackKeys>;\r\n\r\n/**\r\n * These keys are used for validating properties supplied on a gridOptions object, and for code generation.\r\n * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.\r\n */\r\n// only used internally\r\nconst STRING_GRID_OPTIONS: KeysOfType<string>[] = [\r\n    'overlayLoadingTemplate',\r\n    'overlayNoRowsTemplate',\r\n    'gridId',\r\n    'quickFilterText',\r\n    'rowModelType',\r\n    'editType',\r\n    'domLayout',\r\n    'clipboardDelimiter',\r\n    'rowGroupPanelShow',\r\n    'multiSortKey',\r\n    'pivotColumnGroupTotals',\r\n    'pivotRowTotals',\r\n    'pivotPanelShow',\r\n    'fillHandleDirection',\r\n    'groupDisplayType',\r\n    'treeDataDisplayType',\r\n    'colResizeDefault',\r\n    'tooltipTrigger',\r\n    'serverSidePivotResultFieldSeparator',\r\n    'columnMenu',\r\n    'tooltipShowMode',\r\n    'grandTotalRow',\r\n    // 'treeDataChildrenField',\r\n];\r\n\r\n// only used internally\r\nconst OBJECT_GRID_OPTIONS: KeysLike<object | HTMLElement>[] = [\r\n    'components',\r\n    'rowStyle',\r\n    'context',\r\n    'autoGroupColumnDef',\r\n    'localeText',\r\n    'icons',\r\n    'datasource',\r\n    'dragAndDropImageComponentParams',\r\n    'serverSideDatasource',\r\n    'viewportDatasource',\r\n    'groupRowRendererParams',\r\n    'aggFuncs',\r\n    'fullWidthCellRendererParams',\r\n    'defaultColGroupDef',\r\n    'defaultColDef',\r\n    'defaultCsvExportParams',\r\n    'defaultExcelExportParams',\r\n    'columnTypes',\r\n    'rowClassRules',\r\n    'detailCellRendererParams',\r\n    'loadingCellRendererParams',\r\n    'loadingOverlayComponentParams',\r\n    'noRowsOverlayComponentParams',\r\n    'popupParent',\r\n    'statusBar',\r\n    'chartThemeOverrides',\r\n    'customChartThemes',\r\n    'chartToolPanelsDef',\r\n    'dataTypeDefinitions',\r\n    'advancedFilterParent',\r\n    'advancedFilterBuilderParams',\r\n    'initialState',\r\n    'autoSizeStrategy',\r\n    'selectionColumnDef',\r\n];\r\n\r\n// only used internally\r\nconst ARRAY_GRID_OPTIONS: KeysOfType<any[]>[] = [\r\n    'sortingOrder',\r\n    'alignedGrids',\r\n    'rowData',\r\n    'columnDefs',\r\n    'excelStyles',\r\n    'pinnedTopRowData',\r\n    'pinnedBottomRowData',\r\n    'chartThemes',\r\n    'rowClass',\r\n    'paginationPageSizeSelector',\r\n];\r\n\r\n// Used in validations to check type of number inputs\r\nexport const _NUMBER_GRID_OPTIONS: KeysOfType<number>[] = [\r\n    'rowHeight',\r\n    'detailRowHeight',\r\n    'rowBuffer',\r\n    'headerHeight',\r\n    'groupHeaderHeight',\r\n    'groupLockGroupColumns',\r\n    'floatingFiltersHeight',\r\n    'pivotHeaderHeight',\r\n    'pivotGroupHeaderHeight',\r\n    'groupDefaultExpanded',\r\n    'pivotDefaultExpanded',\r\n    'viewportRowModelPageSize',\r\n    'viewportRowModelBufferSize',\r\n    'autoSizePadding',\r\n    'maxBlocksInCache',\r\n    'maxConcurrentDatasourceRequests',\r\n    'tooltipShowDelay',\r\n    'tooltipHideDelay',\r\n    'cacheOverflowSize',\r\n    'paginationPageSize',\r\n    'cacheBlockSize',\r\n    'infiniteInitialRowCount',\r\n    'serverSideInitialRowCount',\r\n    'scrollbarWidth',\r\n    'asyncTransactionWaitMillis',\r\n    'blockLoadDebounceMillis',\r\n    'keepDetailRowsCount',\r\n    'undoRedoCellEditingLimit',\r\n    'cellFlashDuration',\r\n    'cellFadeDuration',\r\n    'tabIndex',\r\n    'pivotMaxGeneratedColumns',\r\n];\r\n\r\n// If property does not fit above, i.e union that should not be coerced.\r\n// used internally\r\nconst OTHER_GRID_OPTIONS: GridOptionKey[] = ['theme', 'rowSelection'];\r\n\r\n// Used by Angular to support the user setting these\r\n// as plain HTML attributes and us correctly mapping that to true\r\n// These are all of type boolean | something else\r\nexport const _BOOLEAN_MIXED_GRID_OPTIONS: KeysOfType<boolean>[] = [\r\n    'cellSelection',\r\n    'sideBar',\r\n    'suppressGroupChangesColumnVisibility',\r\n    'groupAggFiltering',\r\n    'suppressStickyTotalRow',\r\n    'groupHideParentOfSingleChild',\r\n];\r\n\r\n// Used in validations to check type of pure boolean inputs\r\nexport const _BOOLEAN_GRID_OPTIONS: KeysOfType<boolean>[] = [\r\n    'loadThemeGoogleFonts',\r\n    'suppressMakeColumnVisibleAfterUnGroup',\r\n    'suppressRowClickSelection',\r\n    'suppressCellFocus',\r\n    'suppressHeaderFocus',\r\n    'suppressHorizontalScroll',\r\n    'groupSelectsChildren',\r\n    'alwaysShowHorizontalScroll',\r\n    'alwaysShowVerticalScroll',\r\n    'debug',\r\n    'enableBrowserTooltips',\r\n    'enableCellExpressions',\r\n    'groupSuppressBlankHeader',\r\n    'suppressMenuHide',\r\n    'suppressRowDeselection',\r\n    'unSortIcon',\r\n    'suppressMultiSort',\r\n    'alwaysMultiSort',\r\n    'singleClickEdit',\r\n    'suppressLoadingOverlay',\r\n    'suppressNoRowsOverlay',\r\n    'suppressAutoSize',\r\n    'skipHeaderOnAutoSize',\r\n    'suppressColumnMoveAnimation',\r\n    'suppressMoveWhenColumnDragging',\r\n    'suppressMovableColumns',\r\n    'suppressFieldDotNotation',\r\n    'enableRangeSelection',\r\n    'enableRangeHandle',\r\n    'enableFillHandle',\r\n    'suppressClearOnFillReduction',\r\n    'deltaSort',\r\n    'suppressTouch',\r\n    'allowContextMenuWithControlKey',\r\n    'suppressContextMenu',\r\n    'suppressDragLeaveHidesColumns',\r\n    'suppressRowGroupHidesColumns',\r\n    'suppressMiddleClickScrolls',\r\n    'suppressPreventDefaultOnMouseWheel',\r\n    'suppressCopyRowsToClipboard',\r\n    'copyHeadersToClipboard',\r\n    'copyGroupHeadersToClipboard',\r\n    'pivotMode',\r\n    'suppressAggFuncInHeader',\r\n    'suppressColumnVirtualisation',\r\n    'alwaysAggregateAtRootLevel',\r\n    'suppressFocusAfterRefresh',\r\n    'functionsReadOnly',\r\n    'animateRows',\r\n    'groupSelectsFiltered',\r\n    'groupRemoveSingleChildren',\r\n    'groupRemoveLowestSingleChildren',\r\n    'enableRtl',\r\n    'suppressClickEdit',\r\n    'rowDragEntireRow',\r\n    'rowDragManaged',\r\n    'suppressRowDrag',\r\n    'suppressMoveWhenRowDragging',\r\n    'rowDragMultiRow',\r\n    'enableGroupEdit',\r\n    'embedFullWidthRows',\r\n    'suppressPaginationPanel',\r\n    'groupHideOpenParents',\r\n    'groupAllowUnbalanced',\r\n    'pagination',\r\n    'paginationAutoPageSize',\r\n    'suppressScrollOnNewData',\r\n    'suppressScrollWhenPopupsAreOpen',\r\n    'purgeClosedRowNodes',\r\n    'cacheQuickFilter',\r\n    'includeHiddenColumnsInQuickFilter',\r\n    'ensureDomOrder',\r\n    'accentedSort',\r\n    'suppressChangeDetection',\r\n    'valueCache',\r\n    'valueCacheNeverExpires',\r\n    'aggregateOnlyChangedColumns',\r\n    'suppressAnimationFrame',\r\n    'suppressExcelExport',\r\n    'suppressCsvExport',\r\n    'includeHiddenColumnsInAdvancedFilter',\r\n    'suppressMultiRangeSelection',\r\n    'enterNavigatesVerticallyAfterEdit',\r\n    'enterNavigatesVertically',\r\n    'suppressPropertyNamesCheck',\r\n    'rowMultiSelectWithClick',\r\n    'suppressRowHoverHighlight',\r\n    'suppressRowTransform',\r\n    'suppressClipboardPaste',\r\n    'suppressLastEmptyLineOnPaste',\r\n    'enableCharts',\r\n    'suppressMaintainUnsortedOrder',\r\n    'enableCellTextSelection',\r\n    'suppressBrowserResizeObserver',\r\n    'suppressMaxRenderedRowRestriction',\r\n    'excludeChildrenWhenTreeDataFiltering',\r\n    'tooltipMouseTrack',\r\n    'tooltipInteraction',\r\n    'keepDetailRows',\r\n    'paginateChildRows',\r\n    'preventDefaultOnContextMenu',\r\n    'undoRedoCellEditing',\r\n    'allowDragFromColumnsToolPanel',\r\n    'pivotSuppressAutoColumn',\r\n    'suppressExpandablePivotGroups',\r\n    'debounceVerticalScrollbar',\r\n    'detailRowAutoHeight',\r\n    'serverSideSortAllLevels',\r\n    'serverSideEnableClientSideSort',\r\n    'serverSideOnlyRefreshFilteredGroups',\r\n    'suppressAggFilteredOnly',\r\n    'showOpenedGroup',\r\n    'suppressClipboardApi',\r\n    'suppressModelUpdateAfterUpdateTransaction',\r\n    'stopEditingWhenCellsLoseFocus',\r\n    'groupMaintainOrder',\r\n    'columnHoverHighlight',\r\n    'readOnlyEdit',\r\n    'suppressRowVirtualisation',\r\n    'enableCellEditingOnBackspace',\r\n    'resetRowDataOnUpdate',\r\n    'removePivotHeaderRowWhenSingleValueColumn',\r\n    'suppressCopySingleCellRanges',\r\n    'suppressGroupRowsSticky',\r\n    'suppressCutToClipboard',\r\n    'rowGroupPanelSuppressSort',\r\n    'allowShowChangeAfterFilter',\r\n    'enableAdvancedFilter',\r\n    'masterDetail',\r\n    'treeData',\r\n    'reactiveCustomComponents',\r\n    'applyQuickFilterBeforePivotOrAgg',\r\n    'suppressServerSideFullWidthLoadingRow',\r\n    'suppressAdvancedFilterEval',\r\n    'loading',\r\n    'maintainColumnOrder',\r\n    'enableStrictPivotColumnOrder',\r\n    'suppressSetFilterByDefault',\r\n];\r\n\r\n// Used in example generation\r\nexport const _FUNCTION_GRID_OPTIONS: (CallbackKeys | FunctionKeys)[] = [\r\n    'doesExternalFilterPass',\r\n    'processPivotResultColDef',\r\n    'processPivotResultColGroupDef',\r\n    'getBusinessKeyForNode',\r\n    'isRowSelectable',\r\n    'rowDragText',\r\n    'groupRowRenderer',\r\n    'dragAndDropImageComponent',\r\n    'fullWidthCellRenderer',\r\n    'loadingCellRenderer',\r\n    'loadingOverlayComponent',\r\n    'noRowsOverlayComponent',\r\n    'detailCellRenderer',\r\n    'quickFilterParser',\r\n    'quickFilterMatcher',\r\n    'getLocaleText',\r\n    'isExternalFilterPresent',\r\n    'getRowHeight',\r\n    'getRowClass',\r\n    'getRowStyle',\r\n    'getContextMenuItems',\r\n    'getMainMenuItems',\r\n    'processRowPostCreate',\r\n    'processCellForClipboard',\r\n    'getGroupRowAgg',\r\n    'isFullWidthRow',\r\n    'sendToClipboard',\r\n    'focusGridInnerElement',\r\n    'navigateToNextHeader',\r\n    'tabToNextHeader',\r\n    'navigateToNextCell',\r\n    'tabToNextCell',\r\n    'processCellFromClipboard',\r\n    'getDocument',\r\n    'postProcessPopup',\r\n    'getChildCount',\r\n    'getDataPath',\r\n    'isRowMaster',\r\n    'postSortRows',\r\n    'processHeaderForClipboard',\r\n    'processUnpinnedColumns',\r\n    'processGroupHeaderForClipboard',\r\n    'paginationNumberFormatter',\r\n    'processDataFromClipboard',\r\n    'getServerSideGroupKey',\r\n    'isServerSideGroup',\r\n    'createChartContainer',\r\n    'getChartToolbarItems',\r\n    'fillOperation',\r\n    'isApplyServerSideTransaction',\r\n    'getServerSideGroupLevelParams',\r\n    'isServerSideGroupOpenByDefault',\r\n    'isGroupOpenByDefault',\r\n    'initialGroupOrderComparator',\r\n    'loadingCellRendererSelector',\r\n    'getRowId',\r\n    'chartMenuItems',\r\n    'groupTotalRow',\r\n    'alwaysPassFilter',\r\n];\r\n\r\n// angular generation of component\r\n// validation of properties\r\n// Vue Runtime prop changes\r\n// example generation\r\nexport const _ALL_GRID_OPTIONS: GridOptionKey[] = [\r\n    ...ARRAY_GRID_OPTIONS,\r\n    ...OBJECT_GRID_OPTIONS,\r\n    ...STRING_GRID_OPTIONS,\r\n    ..._NUMBER_GRID_OPTIONS,\r\n    ..._FUNCTION_GRID_OPTIONS,\r\n    ..._BOOLEAN_GRID_OPTIONS,\r\n    ..._BOOLEAN_MIXED_GRID_OPTIONS,\r\n    ...OTHER_GRID_OPTIONS,\r\n];\r\n", "import type { IComponent } from '../../interfaces/iComponent';\r\nimport type { ComponentType } from '../../interfaces/iUserCompDetails';\r\nimport { _warn } from '../../validation/logging';\r\n\r\n/**\r\n * B the business interface (ie IHeader)\r\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\r\n */\r\nexport interface FrameworkComponentWrapper {\r\n    wrap<A extends IComponent<any>>(\r\n        frameworkComponent: { new (): any } | null,\r\n        mandatoryMethods: string[] | undefined,\r\n        optionalMethods: string[] | undefined,\r\n        componentType: ComponentType\r\n    ): A;\r\n}\r\n\r\nexport interface WrappableInterface {\r\n    hasMethod(name: string): boolean;\r\n\r\n    callMethod(name: string, args: IArguments): void;\r\n\r\n    addMethod(name: string, callback: (...args: any[]) => any): void;\r\n}\r\n\r\nexport abstract class BaseComponentWrapper<F extends WrappableInterface> implements FrameworkComponentWrapper {\r\n    public wrap<A extends IComponent<any>>(\r\n        OriginalConstructor: { new (): any },\r\n        mandatoryMethods: string[] | undefined,\r\n        optionalMethods: string[] | undefined,\r\n        componentType: ComponentType\r\n    ): A {\r\n        const wrapper: F = this.createWrapper(OriginalConstructor, componentType);\r\n\r\n        mandatoryMethods?.forEach((methodName) => {\r\n            this.createMethod(wrapper, methodName, true);\r\n        });\r\n\r\n        optionalMethods?.forEach((methodName) => {\r\n            this.createMethod(wrapper, methodName, false);\r\n        });\r\n\r\n        return wrapper as any as A;\r\n    }\r\n\r\n    protected abstract createWrapper(OriginalConstructor: { new (): any }, componentType: ComponentType): F;\r\n\r\n    private createMethod(wrapper: F, methodName: string, mandatory: boolean): void {\r\n        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));\r\n    }\r\n\r\n    protected createMethodProxy(wrapper: F, methodName: string, mandatory: boolean): (...args: any[]) => any {\r\n        return function () {\r\n            if (wrapper.hasMethod(methodName)) {\r\n                // eslint-disable-next-line\r\n                return wrapper.callMethod(methodName, arguments);\r\n            }\r\n\r\n            if (mandatory) {\r\n                _warn(49, { methodName });\r\n            }\r\n            // multiple features rely on this returning `null` rather than `undefined`,\r\n            // so that they can differentiate whether the underlying component has implemented a void method or not\r\n            return null;\r\n        };\r\n    }\r\n}\r\n", "import type { ColDef, ColGroupDef } from '../entities/colDef';\r\nimport type { Column, ColumnGroup } from '../interfaces/iColumn';\r\nimport type { AgGridCommon } from '../interfaces/iCommon';\r\nimport type { IComponent } from '../interfaces/iComponent';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport { _escapeString } from '../utils/string';\r\nimport { PopupComponent } from '../widgets/popupComponent';\r\n\r\nexport type TooltipLocation =\r\n    | 'advancedFilter'\r\n    | 'cell'\r\n    | 'columnToolPanelColumn'\r\n    | 'columnToolPanelColumnGroup'\r\n    | 'filterToolPanelColumnGroup'\r\n    | 'fullWidthRow'\r\n    | 'header'\r\n    | 'headerGroup'\r\n    | 'menu'\r\n    | 'pivotColumnsList'\r\n    | 'rowGroupColumnsList'\r\n    | 'setFilterValue'\r\n    | 'valueColumnsList'\r\n    | 'UNKNOWN';\r\n\r\nexport interface ITooltipParams<TData = any, TValue = any, TContext = any> extends AgGridCommon<TData, TContext> {\r\n    /** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */\r\n    location: TooltipLocation;\r\n    /** The value to be rendered by the tooltip. */\r\n    value?: TValue | null;\r\n    /** The formatted value to be rendered by the tooltip. */\r\n    valueFormatted?: string | null;\r\n    /** Column / ColumnGroup definition. */\r\n    colDef?: ColDef<TData, TValue> | ColGroupDef<TData> | null;\r\n    /** Column / ColumnGroup */\r\n    column?: Column<TValue> | ColumnGroup;\r\n    /** The index of the row containing the cell rendering the tooltip. */\r\n    rowIndex?: number;\r\n    /** The row node. */\r\n    node?: IRowNode<TData>;\r\n    /** Data for the row node in question. */\r\n    data?: TData;\r\n    /** A callback function that hides the tooltip */\r\n    hideTooltipCallback?: () => void;\r\n}\r\n\r\nexport interface ITooltipComp extends IComponent<ITooltipParams> {}\r\n\r\nexport class TooltipComponent extends PopupComponent implements ITooltipComp {\r\n    constructor() {\r\n        super(/* html */ `<div class=\"ag-tooltip\"></div>`);\r\n    }\r\n\r\n    // will need to type params\r\n    public init(params: ITooltipParams): void {\r\n        const { value } = params;\r\n        this.getGui().textContent = _escapeString(value, true) as string;\r\n    }\r\n}\r\n", "/**\r\n *\r\n * @param {String} inputValue The value to be compared against a list of strings\r\n * @param allSuggestions The list of strings to be compared against\r\n */\r\nexport function _fuzzySuggestions(params: {\r\n    inputValue: string;\r\n    allSuggestions: string[];\r\n    hideIrrelevant?: boolean;\r\n    filterByPercentageOfBestMatch?: number;\r\n    addSequentialWeight?: boolean;\r\n}): { values: string[]; indices: number[] } {\r\n    const { inputValue, allSuggestions, hideIrrelevant, filterByPercentageOfBestMatch, addSequentialWeight } = params;\r\n\r\n    let thisSuggestions: { value: string; relevance: number; idx: number }[] = allSuggestions.map((text, idx) => ({\r\n        value: text,\r\n        relevance: levenshteinDistance(inputValue.toLowerCase(), text.toLocaleLowerCase(), addSequentialWeight),\r\n        idx,\r\n    }));\r\n\r\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\r\n\r\n    if (hideIrrelevant) {\r\n        thisSuggestions = thisSuggestions.filter((suggestion) => suggestion.relevance !== 0);\r\n    }\r\n    if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {\r\n        const bestMatch = thisSuggestions[0].relevance;\r\n        const limit = bestMatch * filterByPercentageOfBestMatch;\r\n        thisSuggestions = thisSuggestions.filter((suggestion) => limit - suggestion.relevance < 0);\r\n    }\r\n\r\n    const values: string[] = [];\r\n    const indices: number[] = [];\r\n\r\n    for (const suggestion of thisSuggestions) {\r\n        values.push(suggestion.value);\r\n        indices.push(suggestion.idx);\r\n    }\r\n\r\n    return { values, indices };\r\n}\r\n\r\nfunction getAllSubstrings(str: string): string[] {\r\n    const result: string[] = [];\r\n    const size = str.length;\r\n\r\n    for (let len = 1; len <= size; len++) {\r\n        for (let i = 0; i <= size - len; i++) {\r\n            const j = i + len - 1;\r\n            result.push(str.slice(i, j + 1));\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction levenshteinDistance(str1: string, str2: string, addSequentialWeight: boolean = false): number {\r\n    const a = str1.replace(/\\s/g, '');\r\n    const b = str2.replace(/\\s/g, '');\r\n    const len1 = a.length;\r\n    const len2 = b.length;\r\n\r\n    // Levenshtein Distance (Wagner\u2013Fischer algorithm)\r\n    const m = new Array(len1 + 1).fill(null).map(() => new Array(len2 + 1).fill(0));\r\n\r\n    for (let i = 0; i <= len1; i += 1) {\r\n        m[i][0] = i;\r\n    }\r\n\r\n    for (let j = 0; j <= len2; j += 1) {\r\n        m[0][j] = j;\r\n    }\r\n\r\n    for (let i = 1; i <= len1; i++) {\r\n        for (let j = 1; j <= len2; j++) {\r\n            if (a[i - 1] === b[j - 1]) {\r\n                m[i][j] = m[i - 1][j - 1];\r\n            } else {\r\n                m[i][j] = 1 + Math.min(m[i][j - 1], Math.min(m[i - 1][j], m[i - 1][j - 1]));\r\n            }\r\n        }\r\n    }\r\n\r\n    const distance = m[len1][len2];\r\n    const maxDistance = Math.max(len1, len2);\r\n\r\n    let weight = maxDistance - distance;\r\n\r\n    if (addSequentialWeight) {\r\n        const substrings = getAllSubstrings(a);\r\n        for (let i = 0; i < substrings.length; i++) {\r\n            const currentSubstring = substrings[i];\r\n            if (b.indexOf(currentSubstring) !== -1) {\r\n                weight += 1;\r\n                weight *= currentSubstring.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    return weight;\r\n}\r\n", "import type { LocaleTextFunc } from '../misc/locale/localeUtils';\r\n\r\n/**\r\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\r\n * puts in decimal places in IE, so we use this method instead\r\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\r\n * @param {number} value\r\n * @returns {string}\r\n */\r\nexport function _formatNumberCommas(value: number, getLocaleTextFunc: () => LocaleTextFunc): string {\r\n    if (typeof value !== 'number') {\r\n        return '';\r\n    }\r\n\r\n    const localeTextFunc = getLocaleTextFunc();\r\n    const thousandSeparator = localeTextFunc('thousandSeparator', ',');\r\n    const decimalSeparator = localeTextFunc('decimalSeparator', '.');\r\n\r\n    return value\r\n        .toString()\r\n        .replace('.', decimalSeparator)\r\n        .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousandSeparator}`);\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { ExportParams } from '../interfaces/exportParams';\r\nimport type { GridSerializer } from './gridSerializer';\r\nimport type { GridSerializingSession } from './iGridSerializer';\r\n\r\nexport abstract class BaseCreator<T, S extends GridSerializingSession<T>, P extends ExportParams<T>> extends BeanStub {\r\n    protected abstract export(userParams?: P, compress?: boolean): void;\r\n\r\n    protected abstract getMergedParams(params?: P): P;\r\n\r\n    protected getFileName(fileName?: string): string {\r\n        const extension = this.getDefaultFileExtension();\r\n\r\n        if (fileName == null || !fileName.length) {\r\n            fileName = this.getDefaultFileName();\r\n        }\r\n\r\n        return fileName.indexOf('.') === -1 ? `${fileName}.${extension}` : fileName;\r\n    }\r\n\r\n    protected getData(params: P): string {\r\n        const serializingSession = this.createSerializingSession(params);\r\n        return (this.beans.gridSerializer as GridSerializer).serialize(serializingSession, params);\r\n    }\r\n\r\n    public getDefaultFileName(): string {\r\n        return `export.${this.getDefaultFileExtension()}`;\r\n    }\r\n\r\n    public abstract createSerializingSession(params?: P): S;\r\n    public abstract getDefaultFileExtension(): string;\r\n    public abstract isExportSuppressed(): boolean;\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { ColumnNameService } from '../columns/columnNameService';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { GridOptionsService } from '../gridOptionsService';\r\nimport { _isGroupMultiAutoColumn, _isGroupUseEntireRow, _isServerSideRowModel } from '../gridOptionsUtils';\r\nimport type {\r\n    ProcessCellForExportParams,\r\n    ProcessGroupHeaderForExportParams,\r\n    ProcessHeaderForExportParams,\r\n    ProcessRowGroupForExportParams,\r\n} from '../interfaces/exportParams';\r\nimport type { IColsService } from '../interfaces/iColsService';\r\nimport type { ValueService } from '../valueService/valueService';\r\nimport type { RowAccumulator, RowSpanningAccumulator } from './iGridSerializer';\r\nimport type { GridSerializingParams, GridSerializingSession } from './iGridSerializer';\r\n\r\nexport abstract class BaseGridSerializingSession<T> implements GridSerializingSession<T> {\r\n    public colModel: ColumnModel;\r\n    private colNames: ColumnNameService;\r\n    public rowGroupColsSvc?: IColsService;\r\n    public valueSvc: ValueService;\r\n    public gos: GridOptionsService;\r\n    public processCellCallback?: (params: ProcessCellForExportParams) => string;\r\n    public processHeaderCallback?: (params: ProcessHeaderForExportParams) => string;\r\n    public processGroupHeaderCallback?: (params: ProcessGroupHeaderForExportParams) => string;\r\n    public processRowGroupCallback?: (params: ProcessRowGroupForExportParams) => string;\r\n\r\n    private groupColumns: AgColumn[] = [];\r\n\r\n    constructor(config: GridSerializingParams) {\r\n        const {\r\n            colModel,\r\n            rowGroupColsSvc,\r\n            colNames,\r\n            valueSvc,\r\n            gos,\r\n            processCellCallback,\r\n            processHeaderCallback,\r\n            processGroupHeaderCallback,\r\n            processRowGroupCallback,\r\n        } = config;\r\n\r\n        this.colModel = colModel;\r\n        this.rowGroupColsSvc = rowGroupColsSvc;\r\n        this.colNames = colNames;\r\n        this.valueSvc = valueSvc;\r\n        this.gos = gos;\r\n        this.processCellCallback = processCellCallback;\r\n        this.processHeaderCallback = processHeaderCallback;\r\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\r\n        this.processRowGroupCallback = processRowGroupCallback;\r\n    }\r\n\r\n    abstract addCustomContent(customContent: T): void;\r\n    abstract onNewHeaderGroupingRow(): RowSpanningAccumulator;\r\n    abstract onNewHeaderRow(): RowAccumulator;\r\n    abstract onNewBodyRow(node?: RowNode): RowAccumulator;\r\n    abstract parse(): string;\r\n\r\n    public prepare(columnsToExport: AgColumn[]): void {\r\n        this.groupColumns = columnsToExport.filter((col) => !!col.getColDef().showRowGroup);\r\n    }\r\n\r\n    public extractHeaderValue(column: AgColumn): string {\r\n        const value = this.getHeaderName(this.processHeaderCallback, column);\r\n        return value ?? '';\r\n    }\r\n\r\n    public extractRowCellValue(\r\n        column: AgColumn,\r\n        index: number,\r\n        accumulatedRowIndex: number,\r\n        type: string,\r\n        node: RowNode\r\n    ): { value: any; valueFormatted?: string | null } {\r\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\r\n        const hideOpenParents = this.gos.get('groupHideOpenParents');\r\n        const value =\r\n            (!hideOpenParents || node.footer) && this.shouldRenderGroupSummaryCell(node, column, index)\r\n                ? this.createValueForGroupNode(column, node)\r\n                : this.valueSvc.getValue(column, node);\r\n\r\n        const processedValue = this.processCell({\r\n            accumulatedRowIndex,\r\n            rowNode: node,\r\n            column,\r\n            value,\r\n            processCellCallback: this.processCellCallback,\r\n            type,\r\n        });\r\n\r\n        return processedValue;\r\n    }\r\n\r\n    private shouldRenderGroupSummaryCell(node: RowNode, column: AgColumn, currentColumnIndex: number): boolean {\r\n        const isGroupNode = node && node.group;\r\n        // only on group rows\r\n        if (!isGroupNode) {\r\n            return false;\r\n        }\r\n\r\n        const currentColumnGroupIndex = this.groupColumns.indexOf(column);\r\n\r\n        if (currentColumnGroupIndex !== -1) {\r\n            if (node.groupData?.[column.getId()] !== undefined) {\r\n                return true;\r\n            }\r\n\r\n            if (_isServerSideRowModel(this.gos) && node.group) {\r\n                return true;\r\n            }\r\n\r\n            // if this is a top level footer, always render`Total` in the left-most cell\r\n            if (node.footer && node.level === -1) {\r\n                const colDef = column.getColDef();\r\n                const isFullWidth = colDef == null || colDef.showRowGroup === true;\r\n\r\n                return isFullWidth || colDef.showRowGroup === this.rowGroupColsSvc?.columns[0].getId();\r\n            }\r\n        }\r\n\r\n        const isGroupUseEntireRow = _isGroupUseEntireRow(this.gos, this.colModel.isPivotMode());\r\n\r\n        return currentColumnIndex === 0 && isGroupUseEntireRow;\r\n    }\r\n\r\n    private getHeaderName(\r\n        callback: ((params: ProcessHeaderForExportParams) => string) | undefined,\r\n        column: AgColumn\r\n    ): string | null {\r\n        if (callback) {\r\n            return callback(this.gos.addGridCommonParams({ column }));\r\n        }\r\n\r\n        return this.colNames.getDisplayNameForColumn(column, 'csv', true);\r\n    }\r\n\r\n    private createValueForGroupNode(column: AgColumn, node: RowNode): string {\r\n        if (this.processRowGroupCallback) {\r\n            return this.processRowGroupCallback(this.gos.addGridCommonParams({ column, node }));\r\n        }\r\n\r\n        const isTreeData = this.gos.get('treeData');\r\n\r\n        // if not tree data then we get the value from the group data\r\n        const getValueFromNode = (node: RowNode) => {\r\n            if (isTreeData) {\r\n                return node.key;\r\n            }\r\n            const value = node.groupData?.[column.getId()];\r\n            if (\r\n                !value ||\r\n                !node.rowGroupColumn ||\r\n                node.rowGroupColumn.getColDef().useValueFormatterForExport === false\r\n            ) {\r\n                return value;\r\n            }\r\n            return this.valueSvc.formatValue(node.rowGroupColumn, node, value) ?? value;\r\n        };\r\n\r\n        const isFooter = node.footer;\r\n        const keys = [getValueFromNode(node)];\r\n\r\n        if (!_isGroupMultiAutoColumn(this.gos)) {\r\n            while (node.parent) {\r\n                node = node.parent;\r\n                keys.push(getValueFromNode(node));\r\n            }\r\n        }\r\n\r\n        const groupValue = keys.reverse().join(' -> ');\r\n\r\n        return isFooter ? `Total ${groupValue}` : groupValue;\r\n    }\r\n\r\n    private processCell(params: {\r\n        accumulatedRowIndex: number;\r\n        rowNode: RowNode;\r\n        column: AgColumn;\r\n        value: any;\r\n        processCellCallback: ((params: ProcessCellForExportParams) => string) | undefined;\r\n        type: string;\r\n    }): { value: any; valueFormatted?: string | null } {\r\n        const { accumulatedRowIndex, rowNode, column, value, processCellCallback, type } = params;\r\n\r\n        if (processCellCallback) {\r\n            return {\r\n                value:\r\n                    processCellCallback(\r\n                        this.gos.addGridCommonParams({\r\n                            accumulatedRowIndex,\r\n                            column: column,\r\n                            node: rowNode,\r\n                            value: value,\r\n                            type: type,\r\n                            parseValue: (valueToParse: string) =>\r\n                                this.valueSvc.parseValue(\r\n                                    column,\r\n                                    rowNode,\r\n                                    valueToParse,\r\n                                    this.valueSvc.getValue(column, rowNode)\r\n                                ),\r\n                            formatValue: (valueToFormat: any) =>\r\n                                this.valueSvc.formatValue(column, rowNode, valueToFormat) ?? valueToFormat,\r\n                        })\r\n                    ) ?? '',\r\n            };\r\n        }\r\n\r\n        if (column.getColDef().useValueFormatterForExport !== false) {\r\n            return {\r\n                value: value ?? '',\r\n                valueFormatted: this.valueSvc.formatValue(column, rowNode, value),\r\n            };\r\n        }\r\n\r\n        return { value: value ?? '' };\r\n    }\r\n}\r\n", "import { _warn } from '../validation/logging';\r\n\r\nexport function _downloadFile(fileName: string, content: Blob) {\r\n    const win = document.defaultView || window;\r\n\r\n    if (!win) {\r\n        _warn(52);\r\n        return;\r\n    }\r\n\r\n    const element = document.createElement('a');\r\n    const url = win.URL.createObjectURL(content);\r\n    element.setAttribute('href', url);\r\n    element.setAttribute('download', fileName);\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n\r\n    element.dispatchEvent(\r\n        new MouseEvent('click', {\r\n            bubbles: false,\r\n            cancelable: true,\r\n            view: win,\r\n        })\r\n    );\r\n\r\n    document.body.removeChild(element);\r\n\r\n    win.setTimeout(() => {\r\n        win.URL.revokeObjectURL(url);\r\n    }, 0);\r\n}\r\n", "import type { GridOptions } from './entities/gridOptions';\r\n\r\nexport const INITIAL_GRID_OPTION_KEYS = {\r\n    enableBrowserTooltips: true,\r\n    tooltipTrigger: true,\r\n    tooltipMouseTrack: true,\r\n    tooltipShowMode: true,\r\n    tooltipInteraction: true,\r\n    defaultColGroupDef: true,\r\n    suppressAutoSize: true,\r\n    skipHeaderOnAutoSize: true,\r\n    autoSizeStrategy: true,\r\n    components: true,\r\n    stopEditingWhenCellsLoseFocus: true,\r\n    undoRedoCellEditing: true,\r\n    undoRedoCellEditingLimit: true,\r\n    excelStyles: true,\r\n    cacheQuickFilter: true,\r\n    customChartThemes: true,\r\n    chartThemeOverrides: true,\r\n    chartToolPanelsDef: true,\r\n    loadingCellRendererSelector: true,\r\n    localeText: true,\r\n    keepDetailRows: true,\r\n    keepDetailRowsCount: true,\r\n    detailRowHeight: true,\r\n    detailRowAutoHeight: true,\r\n    tabIndex: true,\r\n    valueCache: true,\r\n    valueCacheNeverExpires: true,\r\n    enableCellExpressions: true,\r\n    suppressTouch: true,\r\n    suppressBrowserResizeObserver: true,\r\n    suppressPropertyNamesCheck: true,\r\n    debug: true,\r\n    dragAndDropImageComponent: true,\r\n    loadingOverlayComponent: true,\r\n    suppressLoadingOverlay: true,\r\n    noRowsOverlayComponent: true,\r\n    paginationPageSizeSelector: true,\r\n    paginateChildRows: true,\r\n    pivotPanelShow: true,\r\n    pivotSuppressAutoColumn: true,\r\n    suppressExpandablePivotGroups: true,\r\n    aggFuncs: true,\r\n    allowShowChangeAfterFilter: true,\r\n    ensureDomOrder: true,\r\n    enableRtl: true,\r\n    suppressColumnVirtualisation: true,\r\n    suppressMaxRenderedRowRestriction: true,\r\n    suppressRowVirtualisation: true,\r\n    rowDragText: true,\r\n    groupLockGroupColumns: true,\r\n    suppressGroupRowsSticky: true,\r\n    rowModelType: true,\r\n    cacheOverflowSize: true,\r\n    infiniteInitialRowCount: true,\r\n    serverSideInitialRowCount: true,\r\n    maxBlocksInCache: true,\r\n    maxConcurrentDatasourceRequests: true,\r\n    blockLoadDebounceMillis: true,\r\n    serverSideOnlyRefreshFilteredGroups: true,\r\n    serverSidePivotResultFieldSeparator: true,\r\n    viewportRowModelPageSize: true,\r\n    viewportRowModelBufferSize: true,\r\n    debounceVerticalScrollbar: true,\r\n    suppressAnimationFrame: true,\r\n    suppressPreventDefaultOnMouseWheel: true,\r\n    scrollbarWidth: true,\r\n    icons: true,\r\n    suppressRowTransform: true,\r\n    gridId: true,\r\n    enableGroupEdit: true,\r\n    initialState: true,\r\n    processUnpinnedColumns: true,\r\n    createChartContainer: true,\r\n    getLocaleText: true,\r\n    getRowId: true,\r\n    reactiveCustomComponents: true,\r\n    columnMenu: true,\r\n    suppressSetFilterByDefault: true,\r\n    getDataPath: true,\r\n};\r\n\r\ntype InitialGridOptionKey = keyof typeof INITIAL_GRID_OPTION_KEYS;\r\n/**\r\n * Used simply to type check the default grid options.\r\n * Done here to allow inference of the above type, for gridOptionsService.get to infer where defaults exist.\r\n */\r\ntype AllValidKeys = Exclude<InitialGridOptionKey, keyof GridOptions> extends never ? true : false;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst allValidKeys: AllValidKeys = true;\r\n\r\nexport type ManagedGridOptionKey = Exclude<keyof GridOptions, InitialGridOptionKey>;\r\n\r\nexport type ManagedGridOptions<TData = any> = {\r\n    [K in ManagedGridOptionKey]?: GridOptions<TData>[K];\r\n};\r\n", "import type { ApiFunction, ApiFunctionName } from '../api/iApiFunction';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { RowModelType } from '../interfaces/iRowModel';\r\nimport { _errorOnce, _warnOnce } from '../utils/function';\r\n\r\nconst clientSide = 'clientSide';\r\nconst serverSide = 'serverSide';\r\nconst infinite = 'infinite';\r\n\r\nconst functionRowModels: { [name in ApiFunctionName]?: RowModelType[] } = {\r\n    onGroupExpandedOrCollapsed: [clientSide],\r\n    refreshClientSideRowModel: [clientSide],\r\n    isRowDataEmpty: [clientSide],\r\n    forEachLeafNode: [clientSide],\r\n    forEachNodeAfterFilter: [clientSide],\r\n    forEachNodeAfterFilterAndSort: [clientSide],\r\n    resetRowHeights: [clientSide],\r\n    applyTransaction: [clientSide],\r\n    applyTransactionAsync: [clientSide],\r\n    flushAsyncTransactions: [clientSide],\r\n    getBestCostNodeSelection: [clientSide],\r\n    getServerSideSelectionState: [serverSide],\r\n    setServerSideSelectionState: [serverSide],\r\n    applyServerSideTransaction: [serverSide],\r\n    applyServerSideTransactionAsync: [serverSide],\r\n    applyServerSideRowData: [serverSide],\r\n    retryServerSideLoads: [serverSide],\r\n    flushServerSideAsyncTransactions: [serverSide],\r\n    refreshServerSide: [serverSide],\r\n    getServerSideGroupLevelState: [serverSide],\r\n    refreshInfiniteCache: [infinite],\r\n    purgeInfiniteCache: [infinite],\r\n    getInfiniteRowCount: [infinite],\r\n    isLastRowIndexKnown: [infinite, serverSide],\r\n    expandAll: [clientSide, serverSide],\r\n    collapseAll: [clientSide, serverSide],\r\n    onRowHeightChanged: [clientSide, serverSide],\r\n    setRowCount: [infinite, serverSide],\r\n    getCacheBlockState: [infinite, serverSide],\r\n};\r\n\r\n/** Utility type to support adding params to a grid api method. */\r\ntype StartsWithApiFunctionName = `${ApiFunctionName}${string}`;\r\n\r\nconst deprecatedFunctions: {\r\n    [name in ApiFunctionName]?: {\r\n        version: string;\r\n        old?: StartsWithApiFunctionName;\r\n        new?: StartsWithApiFunctionName;\r\n        message?: string;\r\n    };\r\n} = {\r\n    showLoadingOverlay: {\r\n        version: 'v32',\r\n        message:\r\n            '`showLoadingOverlay` is deprecated. Use the grid option \"loading\"=true instead or setGridOption(\"loading\", true).',\r\n    },\r\n    clearRangeSelection: {\r\n        version: 'v32.2',\r\n        message: 'Use `clearCellSelection` instead.',\r\n    },\r\n    getInfiniteRowCount: {\r\n        version: 'v32.2',\r\n        old: 'getInfiniteRowCount()',\r\n        new: 'getDisplayedRowCount()',\r\n    },\r\n    selectAllFiltered: {\r\n        version: 'v33',\r\n        old: 'selectAllFiltered()',\r\n        new: 'selectAll(\"filtered\")',\r\n    },\r\n    deselectAllFiltered: {\r\n        version: 'v33',\r\n        old: 'deselectAllFiltered()',\r\n        new: 'deselectAll(\"filtered\")',\r\n    },\r\n    selectAllOnCurrentPage: {\r\n        version: 'v33',\r\n        old: 'selectAllOnCurrentPage()',\r\n        new: 'selectAll(\"currentPage\")',\r\n    },\r\n    deselectAllOnCurrentPage: {\r\n        version: 'v33',\r\n        old: 'deselectAllOnCurrentPage()',\r\n        new: 'deselectAll(\"currentPage\")',\r\n    },\r\n};\r\n\r\nexport function validateApiFunction<TFunctionName extends ApiFunctionName>(\r\n    functionName: TFunctionName,\r\n    apiFunction: ApiFunction<TFunctionName>,\r\n    beans: BeanCollection\r\n): ApiFunction<TFunctionName> {\r\n    const deprecation = deprecatedFunctions[functionName];\r\n    if (deprecation) {\r\n        const { version, new: replacement, old, message } = deprecation;\r\n        const apiMethod = old ?? functionName;\r\n        return (...args: any[]) => {\r\n            const replacementMessage = replacement ? `Please use ${replacement} instead. ` : '';\r\n            _warnOnce(`Since ${version} api.${apiMethod} is deprecated. ${replacementMessage}${message ?? ''}`);\r\n            return apiFunction.apply(apiFunction, args);\r\n        };\r\n    }\r\n    const rowModels = functionRowModels[functionName];\r\n    if (rowModels) {\r\n        return (...args: any[]) => {\r\n            const rowModel = beans.rowModel.getType();\r\n            if (!rowModels.includes(rowModel)) {\r\n                _errorOnce(\r\n                    `api.${functionName} can only be called when gridOptions.rowModelType is ${rowModels.join(' or ')}`\r\n                );\r\n                return undefined as any;\r\n            }\r\n            return apiFunction.apply(apiFunction, args);\r\n        };\r\n    }\r\n    return apiFunction;\r\n}\r\n", "import type { EnterpriseModuleName } from '../interfaces/iModule';\r\n\r\nexport const ENTERPRISE_MODULE_NAMES: Record<EnterpriseModuleName, 1> = {\r\n    AdvancedFilter: 1,\r\n    AllEnterprise: 1,\r\n    CellSelection: 1,\r\n    Clipboard: 1,\r\n    ColumnMenu: 1,\r\n    ColumnsToolPanel: 1,\r\n    ContextMenu: 1,\r\n    ExcelExport: 1,\r\n    FiltersToolPanel: 1,\r\n    GridCharts: 1,\r\n    IntegratedCharts: 1,\r\n    GroupFilter: 1,\r\n    MasterDetail: 1,\r\n    Menu: 1,\r\n    MultiFilter: 1,\r\n    Pivot: 1,\r\n    RangeSelection: 1,\r\n    RichSelect: 1,\r\n    RowGrouping: 1,\r\n    RowGroupingPanel: 1,\r\n    ServerSideRowModelApi: 1,\r\n    ServerSideRowModel: 1,\r\n    SetFilter: 1,\r\n    SideBar: 1,\r\n    Sparklines: 1,\r\n    StatusBar: 1,\r\n    TreeData: 1,\r\n    ViewportRowModel: 1,\r\n};\r\n", "import type {\r\n    CommunityModuleName,\r\n    EnterpriseModuleName,\r\n    ResolvableModuleName,\r\n    ValidationModuleName,\r\n} from '../interfaces/iModule';\r\nimport type { RowModelType } from '../interfaces/iRowModel';\r\n\r\nconst ALL_COLUMN_FILTERS = [\r\n    'TextFilter',\r\n    'NumberFilter',\r\n    'DateFilter',\r\n    'SetFilter',\r\n    'MultiFilter',\r\n    'GroupFilter',\r\n    'CustomFilter',\r\n] as const;\r\n\r\n/**\r\n * Some of these modules are (for now) included by default in core. For these, we just return AllCommunityModule.\r\n */\r\nexport const RESOLVABLE_MODULE_NAMES: Record<\r\n    ResolvableModuleName,\r\n    readonly (CommunityModuleName | EnterpriseModuleName)[]\r\n> = {\r\n    EditCore: [\r\n        'TextEditor',\r\n        'NumberEditor',\r\n        'DateEditor',\r\n        'CheckboxEditor',\r\n        'LargeTextEditor',\r\n        'SelectEditor',\r\n        'RichSelect',\r\n        'CustomEditor',\r\n    ],\r\n    CheckboxCellRenderer: ['AllCommunity'],\r\n    ClientSideRowModelHierarchy: ['RowGrouping', 'Pivot', 'TreeData'],\r\n    ColumnFilter: ALL_COLUMN_FILTERS,\r\n    ColumnGroupHeaderComp: ['AllCommunity'],\r\n    ColumnGroup: ['AllCommunity'],\r\n    ColumnHeaderComp: ['AllCommunity'],\r\n    ColumnMove: ['AllCommunity'],\r\n    ColumnResize: ['AllCommunity'],\r\n    CommunityCore: ['AllCommunity'],\r\n    CsrmSsrmSharedApi: ['ClientSideRowModelApi', 'ServerSideRowModelApi'],\r\n    EnterpriseCore: ['AllEnterprise'],\r\n    FilterCore: [...ALL_COLUMN_FILTERS, 'QuickFilter', 'ExternalFilter', 'AdvancedFilter'],\r\n    GroupCellRenderer: ['RowGrouping', 'Pivot', 'TreeData', 'MasterDetail', 'ServerSideRowModel'],\r\n    KeyboardNavigation: ['AllCommunity'],\r\n    LoadingCellRenderer: ['ServerSideRowModel'],\r\n    MenuCore: ['ColumnMenu', 'ContextMenu'],\r\n    MenuItem: ['ColumnMenu', 'ContextMenu', 'MultiFilter', 'IntegratedCharts', 'ColumnsToolPanel'],\r\n    Overlay: ['AllCommunity'],\r\n    PinnedColumn: ['AllCommunity'],\r\n    SharedAggregation: ['RowGrouping', 'Pivot', 'TreeData', 'ServerSideRowModel'],\r\n    SharedDragAndDrop: ['AllCommunity'],\r\n    SharedMasterDetail: ['MasterDetail', 'ServerSideRowModel'],\r\n    SharedMenu: [...ALL_COLUMN_FILTERS, 'ColumnMenu', 'ContextMenu'],\r\n    SharedPivot: ['Pivot', 'ServerSideRowModel'],\r\n    SharedRowGrouping: ['RowGrouping', 'ServerSideRowModel'],\r\n    SharedRowSelection: ['RowSelection', 'ServerSideRowModel'],\r\n    SkeletonCellRenderer: ['ServerSideRowModel'],\r\n    Sort: ['AllCommunity'],\r\n    SsrmInfiniteSharedApi: ['InfiniteRowModel', 'ServerSideRowModelApi'],\r\n    SharedTreeData: ['TreeData', 'ServerSideRowModel'],\r\n};\r\n\r\nexport const MODULES_FOR_ROW_MODELS: Partial<Record<CommunityModuleName | EnterpriseModuleName, RowModelType>> = {\r\n    InfiniteRowModel: 'infinite',\r\n    ClientSideRowModelApi: 'clientSide',\r\n    ClientSideRowModel: 'clientSide',\r\n    ServerSideRowModelApi: 'serverSide',\r\n    ServerSideRowModel: 'serverSide',\r\n    ViewportRowModel: 'viewport',\r\n};\r\n\r\nexport function resolveModuleNames(\r\n    moduleName: ValidationModuleName | ValidationModuleName[],\r\n    rowModelType: RowModelType\r\n): (CommunityModuleName | EnterpriseModuleName)[] {\r\n    const resolvedModuleNames: (CommunityModuleName | EnterpriseModuleName)[] = [];\r\n    (Array.isArray(moduleName) ? moduleName : [moduleName]).forEach((modName) => {\r\n        const resolved = RESOLVABLE_MODULE_NAMES[modName as ResolvableModuleName];\r\n        if (resolved) {\r\n            resolved.forEach((resolvedModName) => {\r\n                const rowModelForModule = MODULES_FOR_ROW_MODELS[resolvedModName];\r\n                // don't show module for different row models\r\n                if (!rowModelForModule || rowModelForModule === rowModelType) {\r\n                    resolvedModuleNames.push(resolvedModName);\r\n                }\r\n            });\r\n        } else {\r\n            resolvedModuleNames.push(modName as CommunityModuleName | EnterpriseModuleName);\r\n        }\r\n    });\r\n    return resolvedModuleNames;\r\n}\r\n", "import type { UserComponentName } from '../../context/context';\r\nimport type { ValidationModuleName } from '../../interfaces/iModule';\r\n\r\nexport const USER_COMP_MODULES: Record<UserComponentName, ValidationModuleName> = {\r\n    agSetColumnFilter: 'SetFilter',\r\n    agSetColumnFloatingFilter: 'SetFilter',\r\n    agMultiColumnFilter: 'MultiFilter',\r\n    agMultiColumnFloatingFilter: 'MultiFilter',\r\n    agGroupColumnFilter: 'GroupFilter',\r\n    agGroupColumnFloatingFilter: 'GroupFilter',\r\n    agGroupCellRenderer: 'GroupCellRenderer',\r\n    agGroupRowRenderer: 'GroupCellRenderer',\r\n    agRichSelect: 'RichSelect',\r\n    agRichSelectCellEditor: 'RichSelect',\r\n    agDetailCellRenderer: 'SharedMasterDetail',\r\n    agSparklineCellRenderer: 'Sparklines',\r\n    agDragAndDropImage: 'SharedDragAndDrop',\r\n    agColumnHeader: 'ColumnHeaderComp',\r\n    agColumnGroupHeader: 'ColumnGroupHeaderComp',\r\n    agSortIndicator: 'Sort',\r\n    agAnimateShowChangeCellRenderer: 'HighlightChanges',\r\n    agAnimateSlideCellRenderer: 'HighlightChanges',\r\n    agLoadingCellRenderer: 'LoadingCellRenderer',\r\n    agSkeletonCellRenderer: 'SkeletonCellRenderer',\r\n    agCheckboxCellRenderer: 'CheckboxCellRenderer',\r\n    agLoadingOverlay: 'Overlay',\r\n    agNoRowsOverlay: 'Overlay',\r\n    agTooltipComponent: 'Tooltip',\r\n    agReadOnlyFloatingFilter: 'CustomFilter',\r\n    agTextColumnFilter: 'TextFilter',\r\n    agNumberColumnFilter: 'NumberFilter',\r\n    agDateColumnFilter: 'DateFilter',\r\n    agDateInput: 'DateFilter',\r\n    agTextColumnFloatingFilter: 'TextFilter',\r\n    agNumberColumnFloatingFilter: 'NumberFilter',\r\n    agDateColumnFloatingFilter: 'DateFilter',\r\n    agCellEditor: 'TextEditor',\r\n    agSelectCellEditor: 'SelectEditor',\r\n    agTextCellEditor: 'TextEditor',\r\n    agNumberCellEditor: 'NumberEditor',\r\n    agDateCellEditor: 'DateEditor',\r\n    agDateStringCellEditor: 'DateEditor',\r\n    agCheckboxCellEditor: 'CheckboxEditor',\r\n    agLargeTextCellEditor: 'LargeTextEditor',\r\n    agMenuItem: 'MenuItem',\r\n    agColumnsToolPanel: 'ColumnsToolPanel',\r\n    agFiltersToolPanel: 'FiltersToolPanel',\r\n    agAggregationComponent: 'StatusBar',\r\n    agSelectedRowCountComponent: 'StatusBar',\r\n    agTotalRowCountComponent: 'StatusBar',\r\n    agFilteredRowCountComponent: 'StatusBar',\r\n    agTotalAndFilteredRowCountComponent: 'StatusBar',\r\n};\r\n", "import type { UserComponentName } from '../../context/context';\r\nimport type { Column } from '../../interfaces/iColumn';\r\nimport type { EnterpriseModuleName, ModuleName, ValidationModuleName } from '../../interfaces/iModule';\r\nimport type { RowModelType } from '../../interfaces/iRowModel';\r\nimport type { RowNodeEventType } from '../../interfaces/iRowNode';\r\nimport { _fuzzySuggestions } from '../../utils/fuzzyMatch';\r\nimport { ENTERPRISE_MODULE_NAMES } from '../enterpriseModuleNames';\r\nimport { baseDocLink, getErrorLink } from '../logging';\r\nimport { resolveModuleNames } from '../resolvableModuleNames';\r\nimport { USER_COMP_MODULES } from '../rules/userCompValidations';\r\n\r\nexport const moduleImportMsg = (moduleNames: ModuleName[]) => {\r\n    const imports = moduleNames\r\n        .map(\r\n            (moduleName) =>\r\n                `import { ${convertToUserModuleName(moduleName)} } from '${ENTERPRISE_MODULE_NAMES[moduleName as EnterpriseModuleName] ? 'ag-grid-enterprise' : 'ag-grid-community'}';`\r\n        )\r\n        .join(' \\n');\r\n    return `import { ModuleRegistry } from 'ag-grid-community'; \\n${imports} \\n\\nModuleRegistry.registerModules([ ${moduleNames.map(convertToUserModuleName).join(', ')} ]); \\n\\nFor more info see: ${baseDocLink}/modules/`;\r\n};\r\n\r\nfunction convertToUserModuleName(moduleName: ModuleName): `${ModuleName}Module` {\r\n    return `${moduleName}Module`;\r\n}\r\n\r\nconst missingModule = ({\r\n    reasonOrId,\r\n    moduleName,\r\n    gridScoped,\r\n    gridId,\r\n    rowModelType,\r\n    additionalText,\r\n}: {\r\n    reasonOrId: string | keyof MissingModuleErrors;\r\n    moduleName: ValidationModuleName | ValidationModuleName[];\r\n    gridScoped: boolean;\r\n    gridId: string;\r\n    rowModelType: RowModelType;\r\n    additionalText?: string;\r\n}) => {\r\n    const resolvedModuleNames = resolveModuleNames(moduleName, rowModelType);\r\n    const reason = typeof reasonOrId === 'string' ? reasonOrId : MISSING_MODULE_REASONS[reasonOrId];\r\n    return (\r\n        `Unable to use ${reason} as ${resolvedModuleNames.length > 1 ? 'one of ' + resolvedModuleNames.map(convertToUserModuleName).join(', ') : convertToUserModuleName(resolvedModuleNames[0])} is not registered${gridScoped ? ' for gridId: ' + gridId : ''}. Check if you have registered the module:\r\n${moduleImportMsg(resolvedModuleNames)}` + (additionalText ? ` \\n\\n${additionalText}` : '')\r\n    );\r\n};\r\n\r\nconst missingChartsWithModule = (gridModule: 'IntegratedChartsModule' | 'SparklinesModule') => {\r\n    return `${gridModule} must be initialised with an AG Charts module. One of 'AgChartsCommunityModule' / 'AgChartsEnterpriseModule'.\r\n\r\nimport { AgChartsEnterpriseModule } from 'ag-charts-enterprise';\r\nimport { ModuleRegistry } from 'ag-grid-community';\r\nimport { ${gridModule} } from 'ag-grid-enterprise';\r\n    \r\nModuleRegistry.registerModules([${gridModule}.with(AgChartsEnterpriseModule)]);\r\n    ` as const;\r\n};\r\n\r\nconst clipboardApiError = (method: string) =>\r\n    `AG Grid: Unable to use the Clipboard API (navigator.clipboard.${method}()). ` +\r\n    'The reason why it could not be used has been logged in the previous line. ' +\r\n    \"For this reason the grid has defaulted to using a workaround which doesn't perform as well. \" +\r\n    'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' +\r\n    'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.';\r\n\r\n/**\r\n * NOTES on setting console messages:\r\n * 1. The message is a function that returns either a string or an array of any type.\r\n * 2. Returning an array enables the console to log actual objects / numbers / booleans nicely as this will be spread to the underlying console call instead of being cast to a string.\r\n * 3. Each entry should be followed by as const so that the IDE hover shows the actual message to aid devs\r\n */\r\nexport const AG_GRID_ERRORS = {\r\n    1: () => '`rowData` must be an array' as const,\r\n    2: ({ nodeId }: { nodeId: string | undefined }) =>\r\n        `Duplicate node id '${nodeId}' detected from getRowId callback, this could cause issues in your grid.` as const,\r\n    3: () => 'Calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.' as const,\r\n    4: ({ id }: { id: string }) => `Could not find row id=${id}, data item was not found for this id` as const,\r\n    5: ({ data }: { data: any }) =>\r\n        [\r\n            `Could not find data item as object was not found.`,\r\n            data,\r\n            ' Consider using getRowId to help the Grid find matching row data',\r\n        ] as const,\r\n    6: () => `'groupHideOpenParents' only works when specifying specific columns for 'colDef.showRowGroup'` as const,\r\n    7: () => 'Pivoting is not supported with aligned grids as it may produce different columns in each grid.' as const,\r\n    8: ({ key }: { key: string }) => `Unknown key for navigation ${key}` as const,\r\n    9: ({ variable }: { variable: { cssName: string; defaultValue: number } }) =>\r\n        `No value for ${variable.cssName}. This usually means that the grid has been initialised before styles have been loaded. The default value of ${variable.defaultValue} will be used and updated when styles load.` as const,\r\n    10: ({ eventType }: { eventType: RowNodeEventType }) =>\r\n        `As of v33, the '${eventType}' event is deprecated. Use the global 'modelUpdated' event to determine when row children have changed.`,\r\n    11: () => 'No gridOptions provided to createGrid' as const,\r\n    12: ({ colKey }: { colKey: string | Column }) => ['column ', colKey, ' not found'] as const,\r\n    13: () =>\r\n        'Could not find rowIndex, this means tasks are being executed on a rowNode that has been removed from the grid.' as const,\r\n    14: ({ groupPrefix }: { groupPrefix: string }) =>\r\n        `Row IDs cannot start with ${groupPrefix}, this is a reserved prefix for AG Grid's row grouping feature.` as const,\r\n    15: ({ expression }: { expression: any }) => ['value should be either a string or a function', expression] as const,\r\n    16: ({ expression, params, e }: { expression: string; params: any; e: any }) =>\r\n        [\r\n            'Processing of the expression failed',\r\n            'Expression = ',\r\n            expression,\r\n            'Params = ',\r\n            params,\r\n            'Exception = ',\r\n            e,\r\n        ] as const,\r\n    17: () => 'you need either field or valueSetter set on colDef for editing to work' as const,\r\n    18: () => `alignedGrids contains an undefined option.` as const,\r\n    19: () => `alignedGrids - No api found on the linked grid.` as const,\r\n    20: () =>\r\n        `You may want to configure via a callback to avoid setup race conditions:\r\n                     \"alignedGrids: () => [linkedGrid]\"` as const,\r\n    21: () =>\r\n        'pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.' as const,\r\n    22: ({ key }: { key: string }) => `${key} is an initial property and cannot be updated.` as const,\r\n    23: () =>\r\n        'The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.' as const,\r\n    24: () => 'row height must be a number if not using standard row model' as const,\r\n    25: ({ id }: { id: any }) =>\r\n        [`The getRowId callback must return a string. The ID `, id, ` is being cast to a string.`] as const,\r\n    26: ({ fnName, preDestroyLink }: { fnName: string; preDestroyLink: string }) => {\r\n        return `Grid API function ${fnName}() cannot be called as the grid has been destroyed.\\n Either clear local references to the grid api, when it is destroyed, or check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.\\n To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ${preDestroyLink}` as const;\r\n    },\r\n    27: ({ fnName, module }: { fnName: string; module: string }) =>\r\n        `API function '${fnName}' not registered to module '${module}'` as const,\r\n    28: () => 'setRowCount cannot be used while using row grouping.' as const,\r\n    29: () =>\r\n        'tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?' as const,\r\n    30: ({ toIndex }: { toIndex: number }) =>\r\n        [\r\n            'tried to insert columns in invalid location, toIndex = ',\r\n            toIndex,\r\n            'remember that you should not count the moving columns when calculating the new index',\r\n        ] as const,\r\n    31: () => 'infinite loop in resizeColumnSets' as const,\r\n    32: () =>\r\n        'applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.' as const,\r\n    33: () =>\r\n        'stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.' as const,\r\n\r\n    34: ({ key }: { key: string }) =>\r\n        `the column type '${key}' is a default column type and cannot be overridden.` as const,\r\n    35: () =>\r\n        `Column type definitions 'columnTypes' with a 'type' attribute are not supported because a column type cannot refer to another column type. Only column definitions 'columnDefs' can use the 'type' attribute to refer to a column type.` as const,\r\n    36: ({ t }: { t: string }) => \"colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\",\r\n    37: () => `Changing the column pinning status is not allowed with domLayout='print'` as const,\r\n    38: ({ iconName }: { iconName: string }) =>\r\n        `provided icon '${iconName}' needs to be a string or a function` as const,\r\n    39: () =>\r\n        'Applying column order broke a group where columns should be married together. Applying new order has been discarded.' as const,\r\n    40: ({ e, method }: { e: any; method: string }) => `${e}\\n${clipboardApiError(method)}` as const,\r\n    41: () =>\r\n        \"Browser did not allow document.execCommand('copy'). Ensure 'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons.\" as const,\r\n    42: () => \"Browser does not support document.execCommand('copy') for clipboard operations\" as const,\r\n    43: ({ iconName }: { iconName: string }) =>\r\n        `As of v33, icon '${iconName}' is deprecated. Use the icon CSS name instead.` as const,\r\n    44: () =>\r\n        'Data type definition hierarchies (via the \"extendsDataType\" property) cannot contain circular references.' as const,\r\n    45: ({ parentCellDataType }: { parentCellDataType: string }) =>\r\n        `The data type definition ${parentCellDataType} does not exist.` as const,\r\n    46: () => 'The \"baseDataType\" property of a data type definition must match that of its parent.' as const,\r\n    47: ({ cellDataType }: { cellDataType: string }) => `Missing data type definition - \"${cellDataType}\"` as const,\r\n    48: ({ property }: { property: string }) =>\r\n        `Cell data type is \"object\" but no Value ${property} has been provided. Please either provide an object data type definition with a Value ${property}, or set \"colDef.value${property}\"` as const,\r\n    49: ({ methodName }: { methodName: string }) =>\r\n        `Framework component is missing the method ${methodName}()` as const,\r\n    50: ({ compName }: { compName: string | undefined }) =>\r\n        `Could not find component ${compName}, did you forget to configure this component?` as const,\r\n    51: () => `Export cancelled. Export is not allowed as per your configuration.` as const,\r\n    52: () => 'There is no `window` associated with the current `document`' as const,\r\n    53: () => `unknown value type during csv conversion` as const,\r\n    54: () => 'Could not find document body, it is needed for drag and drop and context menu.' as const,\r\n    55: () => 'addRowDropZone - A container target needs to be provided' as const,\r\n    56: () =>\r\n        'addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.' as const,\r\n    57: () => 'unable to show popup filter, filter instantiation failed' as const,\r\n    58: () => 'no values found for select cellEditor' as const,\r\n    59: () => 'cannot select pinned rows' as const,\r\n    60: () => 'cannot select node until it has finished loading' as const,\r\n    61: () =>\r\n        'since version v32.2.0, rowNode.isFullWidthCell() has been deprecated. Instead check `rowNode.detail` followed by the user provided `isFullWidthRow` grid option.' as const,\r\n    62: ({ colId }: { colId: string }) => `setFilterModel() - no column found for colId: ${colId}` as const,\r\n    63: ({ colId }: { colId: string }) =>\r\n        `setFilterModel() - unable to fully apply model, filtering disabled for colId: ${colId}` as const,\r\n    64: ({ colId }: { colId: string }) =>\r\n        `setFilterModel() - unable to fully apply model, unable to create filter for colId: ${colId}` as const,\r\n    65: () => 'filter missing setModel method, which is needed for setFilterModel' as const,\r\n    66: () => 'filter API missing getModel method, which is needed for getFilterModel' as const,\r\n    67: () => 'Filter is missing isFilterActive() method' as const,\r\n    68: () => 'Column Filter API methods have been disabled as Advanced Filters are enabled.' as const,\r\n    69: ({ guiFromFilter }: { guiFromFilter: any }) =>\r\n        `getGui method from filter returned ${guiFromFilter}; it should be a DOM element.` as const,\r\n    70: ({ newFilter }: { newFilter: any }) =>\r\n        `Grid option quickFilterText only supports string inputs, received: ${typeof newFilter}` as const,\r\n    71: () => 'debounceMs is ignored when apply button is present' as const,\r\n    72: ({ keys }: { keys: string[] }) => [`ignoring FilterOptionDef as it doesn't contain one of `, keys] as const,\r\n    73: () => `invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'` as const,\r\n    74: () => 'no filter options for filter' as const,\r\n    75: () => 'Unknown button type specified' as const,\r\n    76: ({ filterModelType }: { filterModelType: any }) =>\r\n        [\r\n            'Unexpected type of filter \"',\r\n            filterModelType,\r\n            '\", it looks like the filter was configured with incorrect Filter Options',\r\n        ] as const,\r\n    77: () => `Filter model is missing 'conditions'` as const,\r\n    78: () =>\r\n        'Filter Model contains more conditions than \"filterParams.maxNumConditions\". Additional conditions have been ignored.' as const,\r\n    79: () => '\"filterParams.maxNumConditions\" must be greater than or equal to zero.' as const,\r\n    80: () => '\"filterParams.numAlwaysVisibleConditions\" must be greater than or equal to zero.' as const,\r\n    81: () =>\r\n        '\"filterParams.numAlwaysVisibleConditions\" cannot be greater than \"filterParams.maxNumConditions\".' as const,\r\n    82: ({ param }: { param: any }) => `DateFilter ${param} is not a number` as const,\r\n    83: () => `DateFilter minValidYear should be <= maxValidYear` as const,\r\n    84: () => `DateFilter minValidDate should be <= maxValidDate` as const,\r\n    85: () =>\r\n        'DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.' as const,\r\n    86: () =>\r\n        'DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.' as const,\r\n    87: () =>\r\n        'DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.' as const,\r\n    88: ({ index }: { index: number }) => `Invalid row index for ensureIndexVisible: ${index}` as const,\r\n    89: () =>\r\n        `A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)` as const,\r\n    90: () => `datasource is missing getRows method` as const,\r\n    91: () => 'Filter is missing method doesFilterPass' as const,\r\n    92: ({ methodName }: { methodName: string }) =>\r\n        `AnimationFrameService.${methodName} called but animation frames are off` as const,\r\n    93: () => 'cannot add multiple ranges when `cellSelection.suppressMultiRanges = true`' as const,\r\n    94: ({\r\n        paginationPageSizeOption,\r\n        pageSizeSet,\r\n        pageSizesSet,\r\n        pageSizeOptions,\r\n    }: {\r\n        paginationPageSizeOption: number;\r\n        pageSizeSet: boolean;\r\n        pageSizesSet: any;\r\n        pageSizeOptions: any[];\r\n    }) =>\r\n        `'paginationPageSize=${paginationPageSizeOption}'${pageSizeSet ? '' : ' (default value)'}, but ${paginationPageSizeOption} is not included in${pageSizesSet ? '' : ' the default'} paginationPageSizeSelector=[${pageSizeOptions.join(', ')}].` as const,\r\n    95: ({\r\n        paginationPageSizeOption,\r\n        paginationPageSizeSelector,\r\n    }: {\r\n        paginationPageSizeOption: number;\r\n        paginationPageSizeSelector: string;\r\n    }) =>\r\n        `Either set '${paginationPageSizeSelector}' to an array that includes ${paginationPageSizeOption} or to 'false' to disable the page size selector.` as const,\r\n    96: ({ id, data }: { id: string; data: any }) =>\r\n        [\r\n            'Duplicate ID',\r\n            id,\r\n            'found for pinned row with data',\r\n            data,\r\n            'When `getRowId` is defined, it must return unique IDs for all pinned rows. Use the `rowPinned` parameter.',\r\n        ] as const,\r\n    97: ({ colId }: { colId: string }) => `cellEditor for column ${colId} is missing getGui() method` as const,\r\n    98: () =>\r\n        'popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.' as const,\r\n    99: () =>\r\n        'Since v32, `api.hideOverlay()` does not hide the loading overlay when `loading=true`. Set `loading=false` instead.' as const,\r\n    100: ({ rowModelType }: { rowModelType: RowModelType }) =>\r\n        `selectAll only available when rowModelType='clientSide', ie not ${rowModelType}` as const,\r\n    101: ({\r\n        propertyName,\r\n        componentName,\r\n        agGridDefaults,\r\n        jsComps,\r\n    }: {\r\n        propertyName: string;\r\n        componentName: string;\r\n        agGridDefaults: { [key in UserComponentName]?: any };\r\n        jsComps: { [key: string]: any };\r\n    }) => {\r\n        const textOutput: string[] = [];\r\n        const validComponents = [\r\n            // Don't include the old names / internals in potential suggestions\r\n            ...Object.keys(agGridDefaults).filter(\r\n                (k) => !['agCellEditor', 'agGroupRowRenderer', 'agSortIndicator'].includes(k)\r\n            ),\r\n            ...Object.keys(jsComps),\r\n        ];\r\n        const suggestions = _fuzzySuggestions({\r\n            inputValue: componentName,\r\n            allSuggestions: validComponents,\r\n            hideIrrelevant: true,\r\n            filterByPercentageOfBestMatch: 0.8,\r\n        }).values;\r\n\r\n        textOutput.push(\r\n            `Could not find '${componentName}' component. It was configured as \"${propertyName}: '${componentName}'\" but it wasn't found in the list of registered components.\\n`\r\n        );\r\n        if (suggestions.length > 0) {\r\n            textOutput.push(`         Did you mean: [${suggestions.slice(0, 3)}]?\\n`);\r\n        }\r\n        textOutput.push(`If using a custom component check it has been registered correctly.`);\r\n        return textOutput;\r\n    },\r\n    102: () => \"selecting just filtered only works when gridOptions.rowModelType='clientSide'\" as const,\r\n    103: () =>\r\n        'Invalid selection state. When using client-side row model, the state must conform to `string[]`.' as const,\r\n    104: ({ value, param }: { value: number; param: string }) =>\r\n        `Numeric value ${value} passed to ${param} param will be interpreted as ${value} seconds. If this is intentional use \"${value}s\" to silence this warning.` as const,\r\n    105: ({ e }: { e: any }) => [`chart rendering failed`, e] as const,\r\n    106: () =>\r\n        `Theming API and Legacy Themes are both used in the same page. A Theming API theme has been provided to the 'theme' grid option, but the file (ag-grid.css) is also included and will cause styling issues. Remove ag-grid.css from the page. See the migration guide: ${baseDocLink}/theming-migration/` as const,\r\n    107: ({ key, value }: { key: string; value: unknown }) =>\r\n        `Invalid value for theme param ${key} - ${value}` as const,\r\n    108: ({ e }: { e: any }) => ['chart update failed', e] as const,\r\n    109: ({ aggFuncOrString }: { aggFuncOrString: any }) =>\r\n        `unrecognised aggregation function ${aggFuncOrString}` as const,\r\n    110: () => 'groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup' as const,\r\n    111: () =>\r\n        'Invalid selection state. When `groupSelectsChildren` is enabled, the state must conform to `IServerSideGroupSelectionState`.' as const,\r\n    113: () =>\r\n        'Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values' as const,\r\n    114: ({ component }: { component: string }) =>\r\n        `Could not find component with name of ${component}. Is it in Vue.components?` as const,\r\n    115: () => 'The provided selection state should be an object.' as const,\r\n    116: () => 'Invalid selection state. The state must conform to `IServerSideSelectionState`.' as const,\r\n    117: () => 'selectAll must be of boolean type.' as const,\r\n    118: () => 'Infinite scrolling must be enabled in order to set the row count.' as const,\r\n    119: () => 'Unable to instantiate filter',\r\n    120: () => 'MultiFloatingFilterComp expects MultiFilter as its parent',\r\n    121: () =>\r\n        'a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (see AG Grid docs) or b) to toString() on the object to return a key' as const,\r\n    122: () => 'could not find the document, document is empty' as const,\r\n    123: () => 'Advanced Filter is only supported with the Client-Side Row Model or Server-Side Row Model.' as const,\r\n    124: () => 'No active charts to update.' as const,\r\n    125: ({ chartId }: { chartId: string }) =>\r\n        `Unable to update chart. No active chart found with ID: ${chartId}.` as const,\r\n    126: () => 'unable to restore chart as no chart model is provided' as const,\r\n    127: ({ allRange }: { allRange?: boolean }) =>\r\n        `unable to create chart as ${allRange ? 'there are no columns in the grid' : 'no range is selected'}.` as const,\r\n    128: ({ feature }: { feature: string }) =>\r\n        `${feature} is only available if using 'multiRow' selection mode.` as const,\r\n    129: ({ feature, rowModel }: { feature: string; rowModel: string }) =>\r\n        `${feature} is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ${rowModel}.` as const,\r\n    130: () => 'cannot multi select unless selection mode is \"multiRow\"' as const,\r\n    131: () => 'cannot range select while selecting multiple rows' as const,\r\n    132: () => 'Row selection features are not available unless `rowSelection` is enabled.' as const,\r\n    133: ({ iconName }: { iconName: string }) =>\r\n        `icon '${iconName}' function should return back a string or a dom object` as const,\r\n    134: ({ iconName }: { iconName: string }) => `Did not find icon '${iconName}'` as const,\r\n    135: () => `Data type of the new value does not match the cell data type of the column` as const,\r\n    136: () =>\r\n        `Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.` as const,\r\n    137: ({ type, currentChartType }: { type: string; currentChartType: string }) =>\r\n        `Unable to update chart as a '${type}' update type is not permitted on a ${currentChartType}.` as const,\r\n    138: ({ chartType }: { chartType: string }) => `invalid chart type supplied: ${chartType}` as const,\r\n    139: ({ customThemeName }: { customThemeName: string }) =>\r\n        `a custom chart theme with the name ${customThemeName} has been supplied but not added to the 'chartThemes' list` as const,\r\n    140: ({ name }: { name: string }) =>\r\n        `no stock theme exists with the name '${name}' and no custom chart theme with that name was supplied to 'customChartThemes'` as const,\r\n    141: () => 'cross filtering with row grouping is not supported.' as const,\r\n    142: () => 'cross filtering is only supported in the client side row model.' as const,\r\n    143: ({ panel }: { panel: string | undefined }) => `'${panel}' is not a valid Chart Tool Panel name` as const,\r\n    144: ({ type }: { type: string }) => `Invalid charts data panel group name supplied: '${type}'` as const,\r\n    145: ({ group }: { group: string }) =>\r\n        `As of v32, only one charts customize panel group can be expanded at a time. '${group}' will not be expanded.` as const,\r\n    146: ({ comp }: { comp: string }) =>\r\n        `Unable to instantiate component '${comp}' as its module hasn't been loaded. Add 'ValidationModule' to see which module is required.` as const,\r\n    147: ({ group }: { group: string }) => `Invalid charts customize panel group name supplied: '${group}'` as const,\r\n    148: ({ group }: { group: string }) => `invalid chartGroupsDef config '${group}'` as const,\r\n    149: ({ group, chartType }: { group: string; chartType: string }) =>\r\n        `invalid chartGroupsDef config '${group}.${chartType}'` as const,\r\n    150: () => `'seriesChartTypes' are required when the 'customCombo' chart type is specified.` as const,\r\n    151: ({ chartType }: { chartType: string }) =>\r\n        `invalid chartType '${chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.` as const,\r\n    152: ({ colId }: { colId: string }) =>\r\n        `no 'seriesChartType' found for colId = '${colId}', defaulting to 'line'.` as const,\r\n    153: ({ chartDataType }: { chartDataType: string }) =>\r\n        `unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'` as const,\r\n    154: ({ colId }: { colId: string }) =>\r\n        `cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' to be defined on the column with id: ${colId}` as const,\r\n    155: ({ option }: { option: string }) => `'${option}' is not a valid Chart Toolbar Option` as const,\r\n    156: ({ panel }: { panel: string }) => `Invalid panel in chartToolPanelsDef.panels: '${panel}'` as const,\r\n    157: ({ unrecognisedGroupIds }: { unrecognisedGroupIds: string[] }) =>\r\n        ['unable to find group(s) for supplied groupIds:', unrecognisedGroupIds] as const,\r\n    158: () => 'can not expand a column item that does not represent a column group header' as const,\r\n    159: () => 'Invalid params supplied to createExcelFileForExcel() - `ExcelExportParams.data` is empty.' as const,\r\n    160: () => `Export cancelled. Export is not allowed as per your configuration.` as const,\r\n    161: () =>\r\n        \"The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'\" as const,\r\n    162: ({ id, dataType }: { id: string; dataType: string }) =>\r\n        `Unrecognized data type for excel export [${id}.dataType=${dataType}]` as const,\r\n    163: ({ featureName }: { featureName: string }) =>\r\n        `Excel table export does not work with ${featureName}. The exported Excel file will not contain any Excel tables.\\n Please turn off ${featureName} to enable Excel table exports.` as const,\r\n    164: () => 'Unable to add data table to Excel sheet: A table already exists.' as const,\r\n    165: () => 'Unable to add data table to Excel sheet: Missing required parameters.' as const,\r\n    166: ({ unrecognisedGroupIds }: { unrecognisedGroupIds: string[] }) =>\r\n        ['unable to find groups for these supplied groupIds:', unrecognisedGroupIds] as const,\r\n    167: ({ unrecognisedColIds }: { unrecognisedColIds: string[] }) =>\r\n        ['unable to find columns for these supplied colIds:', unrecognisedColIds] as const,\r\n    168: () => 'detailCellRendererParams.template should be function or string' as const,\r\n    169: () =>\r\n        'Reference to eDetailGrid was missing from the details template. Please add data-ref=\"eDetailGrid\" to the template.' as const,\r\n    170: ({ providedStrategy }: { providedStrategy: string }) =>\r\n        `invalid cellRendererParams.refreshStrategy = ${providedStrategy} supplied, defaulting to refreshStrategy = 'rows'.` as const,\r\n    171: () =>\r\n        'could not find detail grid options for master detail, please set gridOptions.detailCellRendererParams.detailGridOptions' as const,\r\n    172: () =>\r\n        'could not find getDetailRowData for master / detail, please set gridOptions.detailCellRendererParams.getDetailRowData' as const,\r\n    173: ({ group }: { group: string }) => `invalid chartGroupsDef config '${group}'` as const,\r\n    174: ({ group, chartType }: { group: string; chartType: string }) =>\r\n        `invalid chartGroupsDef config '${group}.${chartType}'` as const,\r\n    175: ({ menuTabName, itemsToConsider }: { menuTabName: string; itemsToConsider: string[] }) =>\r\n        [\r\n            `Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of `,\r\n            itemsToConsider,\r\n        ] as const,\r\n    176: ({ key }: { key: string }) => `unknown menu item type ${key}` as const,\r\n    177: () => `valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.` as const,\r\n    178: ({ colId }: { colId: string }) => `column ${colId} is not visible` as const,\r\n    179: () => 'totalValueGetter should be either a function or a string (expression)' as const,\r\n    180: () => 'agRichSelectCellEditor requires cellEditorParams.values to be set' as const,\r\n    181: () =>\r\n        'agRichSelectCellEditor cannot have `multiSelect` and `allowTyping` set to `true`. AllowTyping has been turned off.' as const,\r\n    182: () =>\r\n        'you cannot mix groupDisplayType = \"multipleColumns\" with treeData, only one column can be used to display groups when doing tree data' as const,\r\n    183: () => 'Group Column Filter only works on group columns. Please use a different filter.' as const,\r\n    184: ({ parentGroupData, childNodeData }: { parentGroupData: any; childNodeData: any }) =>\r\n        [`duplicate group keys for row data, keys should be unique`, [parentGroupData, childNodeData]] as const,\r\n    185: ({ data }: { data: any }) => [`getDataPath() should not return an empty path`, [data]] as const,\r\n    186: ({\r\n        rowId,\r\n        rowData,\r\n        duplicateRowsData,\r\n    }: {\r\n        rowId: string | undefined;\r\n        rowData: any;\r\n        duplicateRowsData: any[];\r\n    }) => [`duplicate group keys for row data, keys should be unique`, rowId, rowData, ...duplicateRowsData] as const,\r\n    187: ({ rowId, firstData, secondData }: { rowId: string; firstData: any; secondData: any }) =>\r\n        [\r\n            `Duplicate node id ${rowId}. Row IDs are provided via the getRowId() callback. Please modify the getRowId() callback code to provide unique row id values.`,\r\n            'first instance',\r\n            firstData,\r\n            'second instance',\r\n            secondData,\r\n        ] as const,\r\n    188: () => `getRowId callback must be provided for Server Side Row Model selection to work correctly.` as const,\r\n    189: ({ startRow }: { startRow: number }) =>\r\n        `invalid value ${startRow} for startRow, the value should be >= 0` as const,\r\n    190: ({ rowGroupId, data }: { rowGroupId: string | undefined; data: any }) =>\r\n        [\r\n            `null and undefined values are not allowed for server side row model keys`,\r\n            rowGroupId ? `column = ${rowGroupId}` : ``,\r\n            `data is `,\r\n            data,\r\n        ] as const,\r\n    191: () => `cannot multi select unless selection mode is 'multiRow'` as const,\r\n    192: () => `cannot use range selection when multi selecting rows` as const,\r\n    193: () => \"cannot multi select unless selection mode is 'multiRow'\" as const,\r\n    194: ({ method }: { method: string }) =>\r\n        `calling gridApi.${method}() is only possible when using rowModelType=\\`clientSide\\`.` as const,\r\n    195: ({ justCurrentPage }: { justCurrentPage: boolean | undefined }) =>\r\n        `selecting just ${justCurrentPage ? 'current page' : 'filtered'} only works when gridOptions.rowModelType='clientSide'` as const,\r\n    196: ({ key }: { key: string }) => `Provided ids must be of string type. Invalid id provided: ${key}` as const,\r\n    197: () => '`toggledNodes` must be an array of string ids.' as const,\r\n    198: () => `cannot multi select unless selection mode is 'multiRow'` as const,\r\n    199: () =>\r\n        `getSelectedNodes and getSelectedRows functions cannot be used with select all functionality with the server-side row model. Use \\`api.getServerSideSelectionState()\\` instead.` as const,\r\n    200: missingModule,\r\n    201: ({ rowModelType }: { rowModelType: string }) => `Could not find row model for rowModelType = ${rowModelType}`,\r\n\r\n    202: () =>\r\n        `\\`getSelectedNodes\\` and \\`getSelectedRows\\` functions cannot be used with \\`groupSelectsChildren\\` and the server-side row model. Use \\`api.getServerSideSelectionState()\\` instead.` as const,\r\n    203: () =>\r\n        'Server Side Row Model does not support Dynamic Row Height and Cache Purging. Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.' as const,\r\n    204: () =>\r\n        'Server Side Row Model does not support Auto Row Height and Cache Purging. Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.' as const,\r\n    205: ({ duplicateIdText }: { duplicateIdText: string }) =>\r\n        `Unable to display rows as duplicate row ids (${duplicateIdText}) were returned by the getRowId callback. Please modify the getRowId callback to provide unique ids.` as const,\r\n    206: () => 'getRowId callback must be implemented for transactions to work. Transaction was ignored.' as const,\r\n    207: () =>\r\n        'The Set Filter Parameter \"defaultToNothingSelected\" value was ignored because it does not work when \"excelMode\" is used.' as const,\r\n    208: () =>\r\n        `Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects.` as const,\r\n    209: () =>\r\n        `Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects. See ${baseDocLink}/filter-set-filter-list/#filter-value-types` as const,\r\n    210: () =>\r\n        'Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects?' as const,\r\n    211: () =>\r\n        'property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.' as const,\r\n    212: () =>\r\n        `please review all your toolPanel components, it seems like at least one of them doesn't have an id` as const,\r\n    213: () => 'Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.' as const,\r\n    214: ({ key }: { key: string }) => `unable to lookup Tool Panel as invalid key supplied: ${key}` as const,\r\n    215: ({ key, defaultByKey }: { key: string; defaultByKey: object }) =>\r\n        `the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(defaultByKey).join(',')}` as const,\r\n    216: ({ name }: { name: string }) => `Missing component for '${name}'` as const,\r\n    217: ({ invalidColIds }: { invalidColIds: any[] }) =>\r\n        ['unable to find grid columns for the supplied colDef(s):', invalidColIds] as const,\r\n    218: ({ property, defaultOffset }: { property: string; defaultOffset: number | undefined }) =>\r\n        `${property} must be a number, the value you provided is not a valid number. Using the default of ${defaultOffset}px.` as const,\r\n    219: ({ property }: { property: string }) => `Property ${property} does not exist on the target object.` as const,\r\n    220: ({ lineDash }: { lineDash: string }) => `'${lineDash}' is not a valid 'lineDash' option.` as const,\r\n    221: () => `agAggregationComponent should only be used with the client and server side row model.` as const,\r\n    222: () => `agFilteredRowCountComponent should only be used with the client side row model.` as const,\r\n    223: () => `agSelectedRowCountComponent should only be used with the client and server side row model.` as const,\r\n    224: () => `agTotalAndFilteredRowCountComponent should only be used with the client side row model.` as const,\r\n    225: () => 'agTotalRowCountComponent should only be used with the client side row model.' as const,\r\n    226: () => 'viewport is missing init method.' as const,\r\n    227: () => 'menu item icon must be DOM node or string' as const,\r\n    228: ({ menuItemOrString }: { menuItemOrString: string }) => `unrecognised menu item ${menuItemOrString}` as const,\r\n    229: ({ index }: { index: number }) => ['invalid row index for ensureIndexVisible: ', index] as const,\r\n    230: () =>\r\n        'detailCellRendererParams.template is not supported by AG Grid React. To change the template, provide a Custom Detail Cell Renderer. See https://ag-grid.com/react-data-grid/master-detail-custom-detail/' as const,\r\n    // @deprecated v32 mark for removal as part of v32 deprecated features\r\n    231: () => 'As of v32, using custom components with `reactiveCustomComponents = false` is deprecated.' as const,\r\n    232: () => 'Using both rowData and v-model. rowData will be ignored.' as const,\r\n    233: ({ methodName }: { methodName: string }) =>\r\n        `Framework component is missing the method ${methodName}()` as const,\r\n    234: () =>\r\n        'Group Column Filter does not work with the colDef property \"field\". This property will be ignored.' as const,\r\n    235: () =>\r\n        'Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.' as const,\r\n    236: () =>\r\n        'Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.' as const,\r\n    237: () =>\r\n        'Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.' as const,\r\n    238: () => 'setRowCount can only accept a positive row count.' as const,\r\n    239: () =>\r\n        'Theming API and CSS File Themes are both used in the same page. In v33 we released the Theming API as the new default method of styling the grid. See the migration docs https://www.ag-grid.com/react-data-grid/theming-migration/. Because no value was provided to the `theme` grid option it defaulted to themeQuartz. But the file (ag-grid.css) is also included and will cause styling issues. Either pass the string \"legacy\" to the theme grid option to use v32 style themes, or remove ag-grid.css from the page to use Theming API.' as const,\r\n    240: ({ theme }: { theme: any }) =>\r\n        `theme grid option must be a Theming API theme object or the string \"legacy\", received: ${theme}` as const,\r\n    241: () => `cannot select multiple rows when rowSelection.mode is set to 'singleRow'` as const,\r\n    242: () => 'cannot select multiple rows when using rangeSelect' as const,\r\n    243: () => 'Failed to deserialize state - each provided state object must be an object.' as const,\r\n    244: () => 'Failed to deserialize state - `selectAllChildren` must be a boolean value or undefined.' as const,\r\n    245: () => 'Failed to deserialize state - `toggledNodes` must be an array.' as const,\r\n    246: () => 'Failed to deserialize state - Every `toggledNode` requires an associated string id.' as const,\r\n    247: () =>\r\n        `Row selection state could not be parsed due to invalid data. Ensure all child state has toggledNodes or does not conform with the parent rule. \\nPlease rebuild the selection state and reapply it.` as const,\r\n    248: () => 'SetFloatingFilter expects SetFilter as its parent' as const,\r\n    249: () => 'Must supply a Value Formatter in Set Filter params when using a Key Creator' as const,\r\n    250: () =>\r\n        'Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.' as const,\r\n    251: ({ chartType }: { chartType: string }) =>\r\n        `AG Grid: Unable to create chart as an invalid chartType = '${chartType}' was supplied.` as const,\r\n    252: () =>\r\n        'cannot get grid to draw rows when it is in the middle of drawing rows. \\nYour code probably called a grid API method while the grid was in the render stage. \\nTo overcome this, put the API call into a timeout, e.g. instead of api.redrawRows(), call setTimeout(function() { api.redrawRows(); }, 0). \\nTo see what part of your code that caused the refresh check this stacktrace.' as const,\r\n    253: ({ version }: { version: string }) => ['Illegal version string: ', version] as const,\r\n    254: () => 'Cannot create chart: no chart themes available.' as const,\r\n    255: ({ point }: { point: number }) =>\r\n        `Lone surrogate U+${point.toString(16).toUpperCase()} is not a scalar value` as const,\r\n    256: () => 'Unable to initialise. See validation error, or load ValidationModule if missing.' as const,\r\n    257: () => missingChartsWithModule('IntegratedChartsModule'),\r\n    258: () => missingChartsWithModule('SparklinesModule'),\r\n    259: ({ part }: { part: any }) =>\r\n        `the argument to theme.withPart must be a Theming API part object, received: ${part}` as const,\r\n    260: ({\r\n        propName,\r\n        compName,\r\n        gridScoped,\r\n        gridId,\r\n        rowModelType,\r\n    }: {\r\n        propName: string;\r\n        compName: string;\r\n        gridScoped: boolean;\r\n        gridId: string;\r\n        rowModelType: RowModelType;\r\n    }) =>\r\n        missingModule({\r\n            reasonOrId: `AG Grid '${propName}' component: ${compName}`,\r\n            moduleName: USER_COMP_MODULES[compName as UserComponentName],\r\n            gridId,\r\n            gridScoped,\r\n            rowModelType,\r\n        }),\r\n    261: () => 'As of v33, `column.isHovered()` is deprecated. Use `api.isColumnHovered(column)` instead.' as const,\r\n    262: () =>\r\n        'As of v33, icon key \"smallDown\" is deprecated. Use \"advancedFilterBuilderSelect\" for Advanced Filter Builder dropdown, \"selectOpen\" for Select cell editor and dropdowns (e.g. Integrated Charts menu), \"richSelectOpen\" for Rich Select cell editor' as const,\r\n    263: () =>\r\n        'As of v33, icon key \"smallLeft\" is deprecated. Use \"panelDelimiterRtl\" for Row Group Panel / Pivot Panel, \"subMenuOpenRtl\" for sub-menus.' as const,\r\n    264: () =>\r\n        'As of v33, icon key \"smallRight\" is deprecated. Use \"panelDelimiter\" for Row Group Panel / Pivot Panel, \"subMenuOpen\" for sub-menus' as const,\r\n};\r\n\r\nexport type ErrorMap = typeof AG_GRID_ERRORS;\r\nexport type ErrorId = keyof ErrorMap;\r\n\r\ntype ErrorValue<TId extends ErrorId | null> = TId extends ErrorId ? ErrorMap[TId] : never;\r\nexport type GetErrorParams<TId extends ErrorId> =\r\n    ErrorValue<TId> extends (params: infer P) => any ? (P extends Record<string, any> ? P : undefined) : never;\r\n\r\nexport function getError<TId extends ErrorId, TParams extends GetErrorParams<TId>>(errorId: TId, args: TParams): any[] {\r\n    const msgOrFunc: ErrorMap[TId] = AG_GRID_ERRORS[errorId];\r\n\r\n    if (!msgOrFunc) {\r\n        return [`Missing error text for error id ${errorId}!`];\r\n    }\r\n\r\n    const errorBody = msgOrFunc(args as any);\r\n    const errorLink = getErrorLink(errorId, args);\r\n    const errorSuffix = `\\nSee ${errorLink}`;\r\n    return Array.isArray(errorBody) ? (errorBody.concat(errorSuffix) as string[]) : [errorBody, errorSuffix];\r\n}\r\n\r\nexport const MISSING_MODULE_REASONS = {\r\n    1: 'Charting Aggregation',\r\n    2: 'pivotResultFields',\r\n    3: 'setTooltip',\r\n} as const;\r\n\r\nexport type MissingModuleErrors = typeof MISSING_MODULE_REASONS;\r\n", "import type { UserComponentName } from '../../context/context';\r\nimport type { AbstractColDef, ColDef, ColGroupDef, ColumnMenuTab } from '../../entities/colDef';\r\nimport { DEFAULT_SORTING_ORDER } from '../../sort/sortService';\r\nimport { _errMsg, toStringWithNullUndefined } from '../logging';\r\nimport type { Deprecations, OptionsValidator, Validations } from '../validationTypes';\r\nimport { USER_COMP_MODULES } from './userCompValidations';\r\n\r\nconst COLUMN_DEFINITION_DEPRECATIONS: () => Deprecations<ColDef | ColGroupDef> = () => ({\r\n    checkboxSelection: { version: '32.2', message: 'Use `rowSelection.checkboxes` in `GridOptions` instead.' },\r\n    headerCheckboxSelection: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.headerCheckbox = true` in `GridOptions` instead.',\r\n    },\r\n    headerCheckboxSelectionFilteredOnly: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.selectAll = \"filtered\"` in `GridOptions` instead.',\r\n    },\r\n    headerCheckboxSelectionCurrentPageOnly: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.selectAll = \"currentPage\"` in `GridOptions` instead.',\r\n    },\r\n    showDisabledCheckboxes: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.hideDisabledCheckboxes = true` in `GridOptions` instead.',\r\n    },\r\n});\r\n\r\nconst COLUMN_DEFINITION_VALIDATIONS: () => Validations<ColDef | ColGroupDef> = () => ({\r\n    aggFunc: { module: 'SharedAggregation' },\r\n    autoHeight: {\r\n        supportedRowModels: ['clientSide', 'serverSide'],\r\n        module: 'RowAutoHeight',\r\n    },\r\n    cellClass: { module: 'CellStyle' },\r\n    cellClassRules: { module: 'CellStyle' },\r\n    cellEditor: ({ cellEditor, editable }) => {\r\n        if (!editable) {\r\n            return null;\r\n        }\r\n        if (typeof cellEditor === 'string') {\r\n            const module = USER_COMP_MODULES[cellEditor as UserComponentName];\r\n            if (module) {\r\n                return { module };\r\n            }\r\n        }\r\n        return { module: 'CustomEditor' };\r\n    },\r\n    cellRenderer: ({ cellRenderer }) => {\r\n        if (typeof cellRenderer !== 'string') {\r\n            return null;\r\n        }\r\n        const module = USER_COMP_MODULES[cellRenderer as UserComponentName];\r\n        if (module) {\r\n            return { module };\r\n        }\r\n        return null;\r\n    },\r\n    cellRendererParams: {\r\n        validate: (colDef) => {\r\n            const groupColumn =\r\n                colDef.rowGroup != null ||\r\n                colDef.rowGroupIndex != null ||\r\n                colDef.cellRenderer === 'agGroupCellRenderer';\r\n\r\n            if (groupColumn && 'checkbox' in colDef.cellRendererParams) {\r\n                return 'Since v33.0, `cellRendererParams.checkbox` has been deprecated. Use `rowSelection.checkboxLocation = \"autoGroupColumn\"` instead.';\r\n            }\r\n            return null;\r\n        },\r\n    },\r\n    cellStyle: { module: 'CellStyle' },\r\n    children: () => COL_DEF_VALIDATORS(),\r\n    columnChooserParams: {\r\n        module: 'ColumnMenu',\r\n    },\r\n    contextMenuItems: { module: 'ContextMenu' },\r\n    dndSource: { module: 'DragAndDrop' },\r\n    dndSourceOnRowDrag: { module: 'DragAndDrop' },\r\n    editable: ({ editable, cellEditor }) => {\r\n        if (editable && !cellEditor) {\r\n            return {\r\n                module: 'TextEditor',\r\n            };\r\n        }\r\n        return null;\r\n    },\r\n    enableCellChangeFlash: { module: 'HighlightChanges' },\r\n    enablePivot: { module: 'SharedPivot' },\r\n    enableRowGroup: { module: 'SharedRowGrouping' },\r\n    enableValue: { module: 'SharedAggregation' },\r\n    filter: ({ filter }) => {\r\n        if (filter && typeof filter !== 'string' && typeof filter !== 'boolean') {\r\n            return { module: 'CustomFilter' };\r\n        }\r\n        if (typeof filter === 'string') {\r\n            const module = USER_COMP_MODULES[filter as UserComponentName];\r\n            if (module) {\r\n                return { module };\r\n            }\r\n        }\r\n        return { module: 'ColumnFilter' };\r\n    },\r\n    floatingFilter: { module: 'ColumnFilter' },\r\n    headerCheckboxSelection: {\r\n        supportedRowModels: ['clientSide', 'serverSide'],\r\n        validate: (_options, { rowSelection }) =>\r\n            rowSelection === 'multiple' ? null : 'headerCheckboxSelection is only supported with rowSelection=multiple',\r\n    },\r\n    headerCheckboxSelectionCurrentPageOnly: {\r\n        supportedRowModels: ['clientSide'],\r\n        validate: (_options, { rowSelection }) =>\r\n            rowSelection === 'multiple'\r\n                ? null\r\n                : 'headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple',\r\n    },\r\n    headerCheckboxSelectionFilteredOnly: {\r\n        supportedRowModels: ['clientSide'],\r\n        validate: (_options, { rowSelection }) =>\r\n            rowSelection === 'multiple'\r\n                ? null\r\n                : 'headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple',\r\n    },\r\n    headerTooltip: { module: 'Tooltip' },\r\n    headerValueGetter: {\r\n        validate: (_options: AbstractColDef) => {\r\n            const headerValueGetter = _options.headerValueGetter;\r\n            if (typeof headerValueGetter === 'function' || typeof headerValueGetter === 'string') {\r\n                return null;\r\n            }\r\n            return 'headerValueGetter must be a function or a valid string expression';\r\n        },\r\n    },\r\n    icons: {\r\n        validate: ({ icons }) => {\r\n            if (icons) {\r\n                if (icons['smallDown']) {\r\n                    return _errMsg(262);\r\n                }\r\n                if (icons['smallLeft']) {\r\n                    return _errMsg(263);\r\n                }\r\n                if (icons['smallRight']) {\r\n                    return _errMsg(264);\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n    },\r\n    mainMenuItems: { module: 'ColumnMenu' },\r\n    menuTabs: (options) => {\r\n        const enterpriseMenuTabs: ColumnMenuTab[] = ['columnsMenuTab', 'generalMenuTab'];\r\n        if (options.menuTabs?.some((tab) => enterpriseMenuTabs.includes(tab))) {\r\n            return {\r\n                module: 'ColumnMenu',\r\n            };\r\n        }\r\n        return null;\r\n    },\r\n    pivot: { module: 'SharedPivot' },\r\n    pivotIndex: { module: 'SharedPivot' },\r\n    rowDrag: { module: 'RowDrag' },\r\n    rowGroup: { module: 'SharedRowGrouping' },\r\n    rowGroupIndex: { module: 'SharedRowGrouping' },\r\n    sortingOrder: {\r\n        validate: (_options) => {\r\n            const sortingOrder = _options.sortingOrder;\r\n\r\n            if (Array.isArray(sortingOrder) && sortingOrder.length > 0) {\r\n                const invalidItems = sortingOrder.filter((a) => !DEFAULT_SORTING_ORDER.includes(a));\r\n                if (invalidItems.length > 0) {\r\n                    return `sortingOrder must be an array with elements from [${DEFAULT_SORTING_ORDER.map(toStringWithNullUndefined).join()}], currently it includes [${invalidItems.map(toStringWithNullUndefined).join()}]`;\r\n                }\r\n            } else if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\r\n                return `sortingOrder must be an array with at least one element, currently it's ${sortingOrder}`;\r\n            }\r\n            return null;\r\n        },\r\n    },\r\n    tooltipField: { module: 'Tooltip' },\r\n    tooltipValueGetter: { module: 'Tooltip' },\r\n    type: {\r\n        validate: (_options) => {\r\n            const type = _options.type;\r\n\r\n            if (type instanceof Array) {\r\n                const invalidArray = type.some((a) => typeof a !== 'string');\r\n                if (invalidArray) {\r\n                    return \"if colDef.type is supplied an array it should be of type 'string[]'\";\r\n                }\r\n                return null;\r\n            }\r\n\r\n            if (typeof type === 'string') {\r\n                return null;\r\n            }\r\n            return \"colDef.type should be of type 'string' | 'string[]'\";\r\n        },\r\n    },\r\n    rowSpan: {\r\n        validate: (_options, { suppressRowTransform }) => {\r\n            if (!suppressRowTransform) {\r\n                return 'colDef.rowSpan requires suppressRowTransform to be enabled.';\r\n            }\r\n            return null;\r\n        },\r\n    },\r\n});\r\n\r\ntype ColKey = keyof ColDef | keyof ColGroupDef;\r\nconst colDefPropertyMap: Record<ColKey, undefined> = {\r\n    headerName: undefined,\r\n    columnGroupShow: undefined,\r\n    headerClass: undefined,\r\n    toolPanelClass: undefined,\r\n    headerValueGetter: undefined,\r\n    pivotKeys: undefined,\r\n    groupId: undefined,\r\n    colId: undefined,\r\n    sort: undefined,\r\n    initialSort: undefined,\r\n    field: undefined,\r\n    type: undefined,\r\n    cellDataType: undefined,\r\n    tooltipComponent: undefined,\r\n    tooltipField: undefined,\r\n    headerTooltip: undefined,\r\n    cellClass: undefined,\r\n    showRowGroup: undefined,\r\n    filter: undefined,\r\n    initialAggFunc: undefined,\r\n    defaultAggFunc: undefined,\r\n    aggFunc: undefined,\r\n    pinned: undefined,\r\n    initialPinned: undefined,\r\n    chartDataType: undefined,\r\n    cellAriaRole: undefined,\r\n    cellEditorPopupPosition: undefined,\r\n    headerGroupComponent: undefined,\r\n    headerGroupComponentParams: undefined,\r\n    cellStyle: undefined,\r\n    cellRenderer: undefined,\r\n    cellRendererParams: undefined,\r\n    cellEditor: undefined,\r\n    cellEditorParams: undefined,\r\n    filterParams: undefined,\r\n    pivotValueColumn: undefined,\r\n    headerComponent: undefined,\r\n    headerComponentParams: undefined,\r\n    floatingFilterComponent: undefined,\r\n    floatingFilterComponentParams: undefined,\r\n    tooltipComponentParams: undefined,\r\n    refData: undefined,\r\n    columnChooserParams: undefined,\r\n    children: undefined,\r\n    sortingOrder: undefined,\r\n    allowedAggFuncs: undefined,\r\n    menuTabs: undefined,\r\n    pivotTotalColumnIds: undefined,\r\n    cellClassRules: undefined,\r\n    icons: undefined,\r\n    sortIndex: undefined,\r\n    initialSortIndex: undefined,\r\n    flex: undefined,\r\n    initialFlex: undefined,\r\n    width: undefined,\r\n    initialWidth: undefined,\r\n    minWidth: undefined,\r\n    maxWidth: undefined,\r\n    rowGroupIndex: undefined,\r\n    initialRowGroupIndex: undefined,\r\n    pivotIndex: undefined,\r\n    initialPivotIndex: undefined,\r\n    suppressColumnsToolPanel: undefined,\r\n    suppressFiltersToolPanel: undefined,\r\n    openByDefault: undefined,\r\n    marryChildren: undefined,\r\n    suppressStickyLabel: undefined,\r\n    hide: undefined,\r\n    initialHide: undefined,\r\n    rowGroup: undefined,\r\n    initialRowGroup: undefined,\r\n    pivot: undefined,\r\n    initialPivot: undefined,\r\n    checkboxSelection: undefined,\r\n    showDisabledCheckboxes: undefined,\r\n    headerCheckboxSelection: undefined,\r\n    headerCheckboxSelectionFilteredOnly: undefined,\r\n    headerCheckboxSelectionCurrentPageOnly: undefined,\r\n    suppressHeaderMenuButton: undefined,\r\n    suppressMovable: undefined,\r\n    lockPosition: undefined,\r\n    lockVisible: undefined,\r\n    lockPinned: undefined,\r\n    unSortIcon: undefined,\r\n    suppressSizeToFit: undefined,\r\n    suppressAutoSize: undefined,\r\n    enableRowGroup: undefined,\r\n    enablePivot: undefined,\r\n    enableValue: undefined,\r\n    editable: undefined,\r\n    suppressPaste: undefined,\r\n    suppressNavigable: undefined,\r\n    enableCellChangeFlash: undefined,\r\n    rowDrag: undefined,\r\n    dndSource: undefined,\r\n    autoHeight: undefined,\r\n    wrapText: undefined,\r\n    sortable: undefined,\r\n    resizable: undefined,\r\n    singleClickEdit: undefined,\r\n    floatingFilter: undefined,\r\n    cellEditorPopup: undefined,\r\n    suppressFillHandle: undefined,\r\n    wrapHeaderText: undefined,\r\n    autoHeaderHeight: undefined,\r\n    dndSourceOnRowDrag: undefined,\r\n    valueGetter: undefined,\r\n    valueSetter: undefined,\r\n    filterValueGetter: undefined,\r\n    keyCreator: undefined,\r\n    valueFormatter: undefined,\r\n    valueParser: undefined,\r\n    comparator: undefined,\r\n    equals: undefined,\r\n    pivotComparator: undefined,\r\n    suppressKeyboardEvent: undefined,\r\n    suppressHeaderKeyboardEvent: undefined,\r\n    colSpan: undefined,\r\n    rowSpan: undefined,\r\n    getQuickFilterText: undefined,\r\n    onCellValueChanged: undefined,\r\n    onCellClicked: undefined,\r\n    onCellDoubleClicked: undefined,\r\n    onCellContextMenu: undefined,\r\n    rowDragText: undefined,\r\n    tooltipValueGetter: undefined,\r\n    cellRendererSelector: undefined,\r\n    cellEditorSelector: undefined,\r\n    suppressSpanHeaderHeight: undefined,\r\n    useValueFormatterForExport: undefined,\r\n    useValueParserForImport: undefined,\r\n    mainMenuItems: undefined,\r\n    contextMenuItems: undefined,\r\n    suppressFloatingFilterButton: undefined,\r\n    suppressHeaderFilterButton: undefined,\r\n    suppressHeaderContextMenu: undefined,\r\n    loadingCellRenderer: undefined,\r\n    loadingCellRendererParams: undefined,\r\n    loadingCellRendererSelector: undefined,\r\n    context: undefined,\r\n};\r\nconst ALL_PROPERTIES: () => ColKey[] = () => Object.keys(colDefPropertyMap) as ColKey[];\r\n\r\nexport const COL_DEF_VALIDATORS: () => OptionsValidator<ColDef | ColGroupDef> = () => ({\r\n    objectName: 'colDef',\r\n    allProperties: ALL_PROPERTIES(),\r\n    docsUrl: 'column-properties/',\r\n    deprecations: COLUMN_DEFINITION_DEPRECATIONS(),\r\n    validations: COLUMN_DEFINITION_VALIDATIONS(),\r\n});\r\n", "import type { DomLayoutType, GridOptions } from '../../entities/gridOptions';\r\nimport { _ALL_EVENTS } from '../../eventTypes';\r\nimport { _getCallbackForEvent } from '../../gridOptionsUtils';\r\nimport { _ALL_GRID_OPTIONS, _BOOLEAN_GRID_OPTIONS, _NUMBER_GRID_OPTIONS } from '../../propertyKeys';\r\nimport { DEFAULT_SORTING_ORDER } from '../../sort/sortService';\r\nimport { _mergeDeep } from '../../utils/object';\r\nimport { _errMsg, toStringWithNullUndefined } from '../logging';\r\nimport type { Deprecations, OptionsValidator, Validations } from '../validationTypes';\r\n\r\n/**\r\n * Deprecations have been kept separately for ease of removing them in the future.\r\n *\r\n * If the property was simply renamed, use the `renamed` property. The value will be implicitly copied to the new property.\r\n */\r\nconst GRID_OPTION_DEPRECATIONS = (): Deprecations<GridOptions> => ({\r\n    suppressLoadingOverlay: { version: '32', message: 'Use `loading`=false instead.' },\r\n\r\n    enableFillHandle: { version: '32.2', message: 'Use `cellSelection.handle` instead.' },\r\n    enableRangeHandle: { version: '32.2', message: 'Use `cellSelection.handle` instead.' },\r\n    enableRangeSelection: { version: '32.2', message: 'Use `cellSelection = true` instead.' },\r\n    suppressMultiRangeSelection: {\r\n        version: '32.2',\r\n        message: 'Use `cellSelection.suppressMultiRanges` instead.',\r\n    },\r\n    suppressClearOnFillReduction: {\r\n        version: '32.2',\r\n        message: 'Use `cellSelection.handle.suppressClearOnFillReduction` instead.',\r\n    },\r\n    fillHandleDirection: { version: '32.2', message: 'Use `cellSelection.handle.direction` instead.' },\r\n    fillOperation: { version: '32.2', message: 'Use `cellSelection.handle.setFillValue` instead.' },\r\n    suppressRowClickSelection: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.enableClickSelection` instead.',\r\n    },\r\n    suppressRowDeselection: { version: '32.2', message: 'Use `rowSelection.enableClickSelection` instead.' },\r\n    rowMultiSelectWithClick: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.enableSelectionWithoutKeys` instead.',\r\n    },\r\n    groupSelectsChildren: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.groupSelects = \"descendants\"` instead.',\r\n    },\r\n    groupSelectsFiltered: {\r\n        version: '32.2',\r\n        message: 'Use `rowSelection.groupSelects = \"filteredDescendants\"` instead.',\r\n    },\r\n    isRowSelectable: { version: '32.2', message: 'Use `selectionOptions.isRowSelectable` instead.' },\r\n    suppressCopySingleCellRanges: { version: '32.2', message: 'Use `rowSelection.copySelectedRows` instead.' },\r\n    suppressCopyRowsToClipboard: { version: '32.2', message: 'Use `rowSelection.copySelectedRows` instead.' },\r\n    onRangeSelectionChanged: { version: '32.2', message: 'Use `onCellSelectionChanged` instead.' },\r\n    onRangeDeleteStart: { version: '32.2', message: 'Use `onCellSelectionDeleteStart` instead.' },\r\n    onRangeDeleteEnd: { version: '32.2', message: 'Use `onCellSelectionDeleteEnd` instead.' },\r\n\r\n    suppressBrowserResizeObserver: {\r\n        version: '32.2',\r\n        message: \"The grid always uses the browser's ResizeObserver, this grid option has no effect.\",\r\n    },\r\n\r\n    onColumnEverythingChanged: {\r\n        version: '32.2',\r\n        message:\r\n            'Either use `onDisplayedColumnsChanged` which is fired at the same time, or use one of the more specific column events.',\r\n    },\r\n\r\n    groupRemoveSingleChildren: {\r\n        version: '33',\r\n        message: 'Use `groupHideParentOfSingleChild` instead.',\r\n    },\r\n    groupRemoveLowestSingleChildren: {\r\n        version: '33',\r\n        message: 'Use `groupHideParentOfSingleChild: \"leafGroupsOnly\"` instead.',\r\n    },\r\n\r\n    suppressRowGroupHidesColumns: {\r\n        version: '33',\r\n        message: 'Use `suppressGroupChangesColumnVisibility: \"suppressHideOnGroup\"` instead.',\r\n    },\r\n    suppressMakeColumnVisibleAfterUnGroup: {\r\n        version: '33',\r\n        message: 'Use `suppressGroupChangesColumnVisibility: \"suppressShowOnUngroup\"` instead.',\r\n    },\r\n\r\n    unSortIcon: { version: '33', message: 'Use `defaultColDef.unSortIcon` instead.' },\r\n    sortingOrder: { version: '33', message: 'Use `defaultColDef.sortingOrder` instead.' },\r\n\r\n    suppressPropertyNamesCheck: {\r\n        version: '33',\r\n        message:\r\n            '`gridOptions` and `columnDefs` both have a `context` property that should be used for arbitrary user data. This means that column definitions and gridOptions should only contain valid properties making this property redundant.',\r\n    },\r\n});\r\n\r\nfunction toConstrainedNum(\r\n    key: keyof GridOptions,\r\n    value: any,\r\n    min: number,\r\n    max: number = Number.MAX_VALUE\r\n): string | null {\r\n    if (typeof value === 'number' || value == null) {\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n\r\n        if (value >= min && value <= max) {\r\n            return null;\r\n        }\r\n        if (max === Number.MAX_VALUE) {\r\n            return `${key}: value should be greater than or equal to ${min}`;\r\n        }\r\n        return `${key}: value should be between ${min} and ${max}`;\r\n    }\r\n    return `${key}: value should be a number`;\r\n}\r\n\r\n/**\r\n * Validation rules for gridOptions\r\n */\r\nconst GRID_OPTION_VALIDATIONS: () => Validations<GridOptions> = () => {\r\n    const definedValidations: Validations<GridOptions> = {\r\n        alignedGrids: { module: 'AlignedGrids' },\r\n        allowContextMenuWithControlKey: { module: 'ContextMenu' },\r\n        autoSizePadding: {\r\n            validate({ autoSizePadding }) {\r\n                return toConstrainedNum('autoSizePadding', autoSizePadding, 0);\r\n            },\r\n        },\r\n        autoSizeStrategy: { module: 'ColumnAutoSize' },\r\n        cacheBlockSize: {\r\n            supportedRowModels: ['serverSide', 'infinite'],\r\n            validate({ cacheBlockSize }) {\r\n                return toConstrainedNum('cacheBlockSize', cacheBlockSize, 1);\r\n            },\r\n        },\r\n        cacheOverflowSize: {\r\n            validate({ cacheOverflowSize }) {\r\n                return toConstrainedNum('cacheOverflowSize', cacheOverflowSize, 1);\r\n            },\r\n        },\r\n        cellSelection: {\r\n            module: 'CellSelection',\r\n        },\r\n        columnHoverHighlight: { module: 'ColumnHover' },\r\n        datasource: {\r\n            supportedRowModels: ['infinite'],\r\n            module: 'InfiniteRowModel',\r\n        },\r\n        doesExternalFilterPass: { module: 'ExternalFilter' },\r\n        domLayout: {\r\n            validate: (options) => {\r\n                const domLayout = options.domLayout;\r\n                const validLayouts: DomLayoutType[] = ['autoHeight', 'normal', 'print'];\r\n                if (domLayout && !validLayouts.includes(domLayout)) {\r\n                    return `domLayout must be one of [${validLayouts.join()}], currently it's ${domLayout}`;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        editType: {\r\n            module: 'EditCore',\r\n        },\r\n        enableAdvancedFilter: { module: 'AdvancedFilter' },\r\n        enableCharts: { module: 'IntegratedCharts' },\r\n        enableFillHandle: {\r\n            dependencies: {\r\n                enableRangeSelection: { required: [true] },\r\n            },\r\n        },\r\n        enableRangeHandle: {\r\n            dependencies: {\r\n                enableRangeSelection: { required: [true] },\r\n            },\r\n        },\r\n        enableRangeSelection: {\r\n            module: 'CellSelection',\r\n            dependencies: {\r\n                rowDragEntireRow: { required: [false, undefined] },\r\n            },\r\n        },\r\n        getContextMenuItems: { module: 'ContextMenu' },\r\n        getLocaleText: { module: 'Locale' },\r\n        getMainMenuItems: { module: 'ColumnMenu' },\r\n        getRowClass: { module: 'RowStyle' },\r\n        getRowStyle: { module: 'RowStyle' },\r\n        grandTotalRow: { module: 'SharedRowGrouping' },\r\n        groupDefaultExpanded: {\r\n            supportedRowModels: ['clientSide'],\r\n        },\r\n        groupHideOpenParents: {\r\n            supportedRowModels: ['clientSide', 'serverSide'],\r\n            dependencies: {\r\n                groupTotalRow: { required: [undefined, 'bottom'] },\r\n                treeData: {\r\n                    required: [undefined, false],\r\n                    reason: \"Tree Data has values at the group level so it doesn't make sense to hide them.\",\r\n                },\r\n            },\r\n        },\r\n        groupHideParentOfSingleChild: {\r\n            dependencies: {\r\n                groupHideOpenParents: { required: [undefined, false] },\r\n            },\r\n        },\r\n        groupRemoveLowestSingleChildren: {\r\n            dependencies: {\r\n                groupHideOpenParents: { required: [undefined, false] },\r\n                groupRemoveSingleChildren: { required: [undefined, false] },\r\n            },\r\n        },\r\n        groupRemoveSingleChildren: {\r\n            dependencies: {\r\n                groupHideOpenParents: { required: [undefined, false] },\r\n                groupRemoveLowestSingleChildren: { required: [undefined, false] },\r\n            },\r\n        },\r\n        groupSelectsChildren: {\r\n            dependencies: {\r\n                rowSelection: { required: ['multiple'] },\r\n            },\r\n        },\r\n        icons: {\r\n            validate: ({ icons }) => {\r\n                if (icons) {\r\n                    if (icons['smallDown']) {\r\n                        return _errMsg(262);\r\n                    }\r\n                    if (icons['smallLeft']) {\r\n                        return _errMsg(263);\r\n                    }\r\n                    if (icons['smallRight']) {\r\n                        return _errMsg(264);\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        infiniteInitialRowCount: {\r\n            validate({ infiniteInitialRowCount }) {\r\n                return toConstrainedNum('infiniteInitialRowCount', infiniteInitialRowCount, 1);\r\n            },\r\n        },\r\n        initialGroupOrderComparator: {\r\n            supportedRowModels: ['clientSide'],\r\n        },\r\n        initialState: { module: 'GridState' },\r\n        isExternalFilterPresent: { module: 'ExternalFilter' },\r\n        keepDetailRowsCount: {\r\n            validate({ keepDetailRowsCount }) {\r\n                return toConstrainedNum('keepDetailRowsCount', keepDetailRowsCount, 1);\r\n            },\r\n        },\r\n        localeText: {\r\n            module: 'Locale',\r\n        },\r\n        masterDetail: { module: 'SharedMasterDetail' },\r\n        pagination: { module: 'Pagination' },\r\n        paginationPageSize: {\r\n            validate({ paginationPageSize }) {\r\n                return toConstrainedNum('paginationPageSize', paginationPageSize, 1);\r\n            },\r\n        },\r\n        paginationPageSizeSelector: {\r\n            validate: (options) => {\r\n                const values = options.paginationPageSizeSelector;\r\n                if (typeof values === 'boolean' || values == null) {\r\n                    return null;\r\n                }\r\n                if (!values.length) {\r\n                    return `'paginationPageSizeSelector' cannot be an empty array.\r\n                    If you want to hide the page size selector, set paginationPageSizeSelector to false.`;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        pinnedTopRowData: {\r\n            module: 'PinnedRow',\r\n        },\r\n        pinnedBottomRowData: {\r\n            module: 'PinnedRow',\r\n        },\r\n        pivotMode: {\r\n            dependencies: {\r\n                treeData: {\r\n                    required: [false, undefined],\r\n                    reason: 'Pivot Mode is not supported with Tree Data.',\r\n                },\r\n            },\r\n            module: 'SharedPivot',\r\n        },\r\n        pivotPanelShow: { module: 'RowGroupingPanel' },\r\n        quickFilterText: {\r\n            supportedRowModels: ['clientSide'],\r\n            module: 'QuickFilter',\r\n        },\r\n        rowBuffer: {\r\n            validate({ rowBuffer }) {\r\n                return toConstrainedNum('rowBuffer', rowBuffer, 0);\r\n            },\r\n        },\r\n        rowClass: {\r\n            validate: (options) => {\r\n                const rowClass = options.rowClass;\r\n                if (typeof rowClass === 'function') {\r\n                    return 'rowClass should not be a function, please use getRowClass instead';\r\n                }\r\n                return null;\r\n            },\r\n            module: 'RowStyle',\r\n        },\r\n        rowClassRules: { module: 'RowStyle' },\r\n        rowData: {\r\n            supportedRowModels: ['clientSide'],\r\n            module: 'ClientSideRowModel',\r\n        },\r\n        rowDragManaged: {\r\n            supportedRowModels: ['clientSide'],\r\n            dependencies: {\r\n                treeData: {\r\n                    required: [false, undefined],\r\n                },\r\n                pagination: {\r\n                    required: [false, undefined],\r\n                },\r\n            },\r\n            module: 'RowDrag',\r\n        },\r\n        rowGroupPanelShow: { module: 'RowGroupingPanel' },\r\n        rowSelection: {\r\n            validate({ rowSelection }) {\r\n                if (rowSelection && typeof rowSelection === 'string') {\r\n                    return 'As of version 32.2.1, using `rowSelection` with the values \"single\" or \"multiple\" has been deprecated. Use the object value instead.';\r\n                }\r\n                if (rowSelection && typeof rowSelection !== 'object') {\r\n                    return 'Expected `RowSelectionOptions` object for the `rowSelection` property.';\r\n                }\r\n                if (rowSelection && rowSelection.mode !== 'multiRow' && rowSelection.mode !== 'singleRow') {\r\n                    return `Selection mode \"${(rowSelection as any).mode}\" is invalid. Use one of 'singleRow' or 'multiRow'.`;\r\n                }\r\n                return null;\r\n            },\r\n            module: 'SharedRowSelection',\r\n        },\r\n        rowStyle: {\r\n            validate: (options) => {\r\n                const rowStyle = options.rowStyle;\r\n                if (rowStyle && typeof rowStyle === 'function') {\r\n                    return 'rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead';\r\n                }\r\n                return null;\r\n            },\r\n            module: 'RowStyle',\r\n        },\r\n        serverSideDatasource: {\r\n            supportedRowModels: ['serverSide'],\r\n            module: 'ServerSideRowModel',\r\n        },\r\n        serverSideInitialRowCount: {\r\n            supportedRowModels: ['serverSide'],\r\n            validate({ serverSideInitialRowCount }) {\r\n                return toConstrainedNum('serverSideInitialRowCount', serverSideInitialRowCount, 1);\r\n            },\r\n        },\r\n        serverSideOnlyRefreshFilteredGroups: {\r\n            supportedRowModels: ['serverSide'],\r\n        },\r\n        serverSideSortAllLevels: {\r\n            supportedRowModels: ['serverSide'],\r\n        },\r\n        sideBar: { module: 'SideBar' },\r\n        sortingOrder: {\r\n            validate: (_options) => {\r\n                const sortingOrder = _options.sortingOrder;\r\n\r\n                if (Array.isArray(sortingOrder) && sortingOrder.length > 0) {\r\n                    const invalidItems = sortingOrder.filter((a) => !DEFAULT_SORTING_ORDER.includes(a));\r\n                    if (invalidItems.length > 0) {\r\n                        return `sortingOrder must be an array with elements from [${DEFAULT_SORTING_ORDER.map(toStringWithNullUndefined).join()}], currently it includes [${invalidItems.map(toStringWithNullUndefined).join()}]`;\r\n                    }\r\n                } else if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\r\n                    return `sortingOrder must be an array with at least one element, currently it's ${sortingOrder}`;\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        statusBar: { module: 'StatusBar' },\r\n        tooltipHideDelay: {\r\n            validate: (options) => {\r\n                if (options.tooltipHideDelay && options.tooltipHideDelay < 0) {\r\n                    return 'tooltipHideDelay should not be lower than 0';\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        tooltipShowDelay: {\r\n            validate: (options) => {\r\n                if (options.tooltipShowDelay && options.tooltipShowDelay < 0) {\r\n                    return 'tooltipShowDelay should not be lower than 0';\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        treeData: {\r\n            supportedRowModels: ['clientSide', 'serverSide'],\r\n            module: 'SharedTreeData',\r\n            validate: (options) => {\r\n                const rowModel = options.rowModelType ?? 'clientSide';\r\n                switch (rowModel) {\r\n                    case 'clientSide': {\r\n                        const csrmWarning = `treeData requires 'getDataPath' in the ${rowModel} row model.`;\r\n                        return (options as any).treeDataChildrenField || options.getDataPath ? null : csrmWarning;\r\n                    }\r\n                    case 'serverSide': {\r\n                        const ssrmWarning = `treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ${rowModel} row model.`;\r\n                        return options.isServerSideGroup && options.getServerSideGroupKey ? null : ssrmWarning;\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n        },\r\n        ['treeDataChildrenField' as any]: {\r\n            module: 'SharedTreeData',\r\n        },\r\n        undoRedoCellEditing: { module: 'UndoRedoEdit' },\r\n        valueCache: { module: 'ValueCache' },\r\n        viewportDatasource: {\r\n            supportedRowModels: ['viewport'],\r\n            module: 'ViewportRowModel',\r\n        },\r\n        viewportRowModelBufferSize: {\r\n            validate({ viewportRowModelBufferSize }) {\r\n                return toConstrainedNum('viewportRowModelBufferSize', viewportRowModelBufferSize, 0);\r\n            },\r\n        },\r\n        viewportRowModelPageSize: {\r\n            validate({ viewportRowModelPageSize }) {\r\n                return toConstrainedNum('viewportRowModelPageSize', viewportRowModelPageSize, 1);\r\n            },\r\n        },\r\n        rowDragEntireRow: {\r\n            dependencies: {\r\n                cellSelection: { required: [undefined] },\r\n            },\r\n        },\r\n    };\r\n    const validations: Validations<GridOptions> = {};\r\n    _BOOLEAN_GRID_OPTIONS.forEach((key) => {\r\n        validations[key] = { expectedType: 'boolean' };\r\n    });\r\n    _NUMBER_GRID_OPTIONS.forEach((key) => {\r\n        validations[key] = { expectedType: 'number' };\r\n    });\r\n\r\n    _mergeDeep(validations, definedValidations);\r\n    return validations;\r\n};\r\n\r\nexport const GRID_OPTIONS_VALIDATORS: () => OptionsValidator<GridOptions> = () => ({\r\n    objectName: 'gridOptions',\r\n    allProperties: [..._ALL_GRID_OPTIONS, ..._ALL_EVENTS.map((event) => _getCallbackForEvent(event))],\r\n    propertyExceptions: ['api', 'treeDataChildrenField'],\r\n    docsUrl: 'grid-options/',\r\n    deprecations: GRID_OPTION_DEPRECATIONS(),\r\n    validations: GRID_OPTION_VALIDATIONS(),\r\n});\r\n", "import type { ValidationModuleName } from '../../interfaces/iModule';\r\nimport type { IconName, IconValue } from '../../utils/icon';\r\n\r\nexport const ICON_VALUES: Record<IconValue, 1> = {\r\n    expanded: 1,\r\n    contracted: 1,\r\n    'tree-closed': 1,\r\n    'tree-open': 1,\r\n    'tree-indeterminate': 1,\r\n    pin: 1,\r\n    'eye-slash': 1,\r\n    arrows: 1,\r\n    left: 1,\r\n    right: 1,\r\n    group: 1,\r\n    aggregation: 1,\r\n    pivot: 1,\r\n    'not-allowed': 1,\r\n    chart: 1,\r\n    cross: 1,\r\n    cancel: 1,\r\n    tick: 1,\r\n    first: 1,\r\n    previous: 1,\r\n    next: 1,\r\n    last: 1,\r\n    linked: 1,\r\n    unlinked: 1,\r\n    'color-picker': 1,\r\n    loading: 1,\r\n    menu: 1,\r\n    'menu-alt': 1,\r\n    filter: 1,\r\n    columns: 1,\r\n    maximize: 1,\r\n    minimize: 1,\r\n    copy: 1,\r\n    cut: 1,\r\n    paste: 1,\r\n    grip: 1,\r\n    save: 1,\r\n    csv: 1,\r\n    excel: 1,\r\n    'small-down': 1,\r\n    'small-left': 1,\r\n    'small-right': 1,\r\n    'small-up': 1,\r\n    asc: 1,\r\n    desc: 1,\r\n    none: 1,\r\n    up: 1,\r\n    down: 1,\r\n    plus: 1,\r\n    minus: 1,\r\n    settings: 1,\r\n    'checkbox-checked': 1,\r\n    'checkbox-indeterminate': 1,\r\n    'checkbox-unchecked': 1,\r\n    'radio-button-on': 1,\r\n    'radio-button-off': 1,\r\n    eye: 1,\r\n};\r\n\r\nexport const ICON_MODULES: Record<IconName, ValidationModuleName | ValidationModuleName[]> = {\r\n    chart: 'MenuCore',\r\n    cancel: 'EnterpriseCore',\r\n    first: 'Pagination',\r\n    previous: 'Pagination',\r\n    next: 'Pagination',\r\n    last: 'Pagination',\r\n    linked: 'IntegratedCharts',\r\n    loadingMenuItems: 'MenuCore',\r\n    unlinked: 'IntegratedCharts',\r\n    menu: 'ColumnHeaderComp',\r\n    legacyMenu: 'ColumnMenu',\r\n    filter: 'ColumnFilter',\r\n    filterActive: 'ColumnFilter',\r\n    filterTab: 'ColumnMenu',\r\n    filtersToolPanel: 'FiltersToolPanel',\r\n    columns: ['MenuCore'],\r\n    columnsToolPanel: ['ColumnsToolPanel'],\r\n    maximize: 'EnterpriseCore',\r\n    minimize: 'EnterpriseCore',\r\n    save: 'MenuCore',\r\n    columnGroupOpened: 'ColumnGroupHeaderComp',\r\n    columnGroupClosed: 'ColumnGroupHeaderComp',\r\n    accordionOpen: 'EnterpriseCore',\r\n    accordionClosed: 'EnterpriseCore',\r\n    accordionIndeterminate: 'EnterpriseCore',\r\n    columnSelectClosed: ['ColumnsToolPanel', 'ColumnMenu'],\r\n    columnSelectOpen: ['ColumnsToolPanel', 'ColumnMenu'],\r\n    columnSelectIndeterminate: ['ColumnsToolPanel', 'ColumnMenu'],\r\n    columnMovePin: 'SharedDragAndDrop',\r\n    columnMoveHide: 'SharedDragAndDrop',\r\n    columnMoveMove: 'SharedDragAndDrop',\r\n    columnMoveLeft: 'SharedDragAndDrop',\r\n    columnMoveRight: 'SharedDragAndDrop',\r\n    columnMoveGroup: 'SharedDragAndDrop',\r\n    columnMoveValue: 'SharedDragAndDrop',\r\n    columnMovePivot: 'SharedDragAndDrop',\r\n    dropNotAllowed: 'SharedDragAndDrop',\r\n    groupContracted: 'GroupCellRenderer',\r\n    groupExpanded: 'GroupCellRenderer',\r\n    setFilterGroupClosed: 'SetFilter',\r\n    setFilterGroupOpen: 'SetFilter',\r\n    setFilterGroupIndeterminate: 'SetFilter',\r\n    close: 'EnterpriseCore',\r\n    check: 'MenuItem',\r\n    colorPicker: 'CommunityCore',\r\n    groupLoading: 'LoadingCellRenderer',\r\n    menuAlt: 'ColumnHeaderComp',\r\n    menuPin: 'MenuCore',\r\n    menuValue: 'MenuCore',\r\n    menuAddRowGroup: ['MenuCore', 'ColumnsToolPanel'],\r\n    menuRemoveRowGroup: ['MenuCore', 'ColumnsToolPanel'],\r\n    clipboardCopy: 'MenuCore',\r\n    clipboardCut: 'MenuCore',\r\n    clipboardPaste: 'MenuCore',\r\n    pivotPanel: ['ColumnsToolPanel', 'RowGroupingPanel'],\r\n    rowGroupPanel: ['ColumnsToolPanel', 'RowGroupingPanel'],\r\n    valuePanel: 'ColumnsToolPanel',\r\n    columnDrag: 'EnterpriseCore',\r\n    rowDrag: ['RowDrag', 'DragAndDrop'],\r\n    csvExport: 'MenuCore',\r\n    excelExport: 'MenuCore',\r\n    smallDown: 'CommunityCore',\r\n    selectOpen: 'CommunityCore',\r\n    richSelectOpen: 'RichSelect',\r\n    richSelectRemove: 'RichSelect',\r\n    smallLeft: 'CommunityCore',\r\n    smallRight: 'CommunityCore',\r\n    subMenuOpen: 'MenuItem',\r\n    subMenuOpenRtl: 'MenuItem',\r\n    panelDelimiter: 'RowGroupingPanel',\r\n    panelDelimiterRtl: 'RowGroupingPanel',\r\n    smallUp: 'CommunityCore',\r\n    sortAscending: ['MenuCore', 'Sort'],\r\n    sortDescending: ['MenuCore', 'Sort'],\r\n    sortUnSort: ['MenuCore', 'Sort'],\r\n    advancedFilterBuilder: 'AdvancedFilter',\r\n    advancedFilterBuilderDrag: 'AdvancedFilter',\r\n    advancedFilterBuilderInvalid: 'AdvancedFilter',\r\n    advancedFilterBuilderMoveUp: 'AdvancedFilter',\r\n    advancedFilterBuilderMoveDown: 'AdvancedFilter',\r\n    advancedFilterBuilderAdd: 'AdvancedFilter',\r\n    advancedFilterBuilderRemove: 'AdvancedFilter',\r\n    advancedFilterBuilderSelectOpen: 'AdvancedFilter',\r\n    chartsMenu: 'IntegratedCharts',\r\n    chartsMenuEdit: 'IntegratedCharts',\r\n    chartsMenuAdvancedSettings: 'IntegratedCharts',\r\n    chartsMenuAdd: 'IntegratedCharts',\r\n    chartsColorPicker: 'IntegratedCharts',\r\n    chartsThemePrevious: 'IntegratedCharts',\r\n    chartsThemeNext: 'IntegratedCharts',\r\n    chartsDownload: 'IntegratedCharts',\r\n    checkboxChecked: 'CommunityCore',\r\n    checkboxIndeterminate: 'CommunityCore',\r\n    checkboxUnchecked: 'CommunityCore',\r\n    radioButtonOn: 'CommunityCore',\r\n    radioButtonOff: 'CommunityCore',\r\n};\r\n\r\nexport const DEPRECATED_ICONS_V33: Set<IconName> = new Set([\r\n    'colorPicker',\r\n    'smallUp',\r\n    'checkboxChecked',\r\n    'checkboxIndeterminate',\r\n    'checkboxUnchecked',\r\n    'radioButtonOn',\r\n    'radioButtonOff',\r\n    'smallDown',\r\n    'smallLeft',\r\n    'smallRight',\r\n]);\r\n", "import type { ValidationModuleName } from '../../interfaces/iModule';\r\nimport type { DefaultMenuItem } from '../../interfaces/menuItem';\r\n\r\nexport const MENU_ITEM_MODULES: Record<DefaultMenuItem, ValidationModuleName | ValidationModuleName[]> = {\r\n    pinSubMenu: 'PinnedColumn',\r\n    pinLeft: 'PinnedColumn',\r\n    pinRight: 'PinnedColumn',\r\n    clearPinned: 'PinnedColumn',\r\n    valueAggSubMenu: 'SharedAggregation',\r\n    autoSizeThis: 'ColumnAutoSize',\r\n    autoSizeAll: 'ColumnAutoSize',\r\n    rowGroup: 'SharedRowGrouping',\r\n    rowUnGroup: 'SharedRowGrouping',\r\n    resetColumns: 'CommunityCore',\r\n    expandAll: ['ClientSideRowModelHierarchy', 'ServerSideRowModel'],\r\n    contractAll: ['ClientSideRowModelHierarchy', 'ServerSideRowModel'],\r\n    copy: 'Clipboard',\r\n    copyWithHeaders: 'Clipboard',\r\n    copyWithGroupHeaders: 'Clipboard',\r\n    cut: 'Clipboard',\r\n    paste: 'Clipboard',\r\n    export: ['CsvExport', 'ExcelExport'],\r\n    csvExport: 'CsvExport',\r\n    excelExport: 'ExcelExport',\r\n    separator: 'CommunityCore',\r\n    pivotChart: 'IntegratedCharts',\r\n    chartRange: 'IntegratedCharts',\r\n    columnFilter: 'ColumnFilter',\r\n    columnChooser: 'ColumnMenu',\r\n    sortAscending: 'Sort',\r\n    sortDescending: 'Sort',\r\n    sortUnSort: 'Sort',\r\n};\r\n", "import type { ApiFunction, ApiFunctionName } from '../api/iApiFunction';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection, UserComponentName } from '../context/context';\r\nimport type { ColDef, ColGroupDef } from '../entities/colDef';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport { INITIAL_GRID_OPTION_KEYS } from '../gridOptionsInitial';\r\nimport type { PropertyChangedSource } from '../gridOptionsService';\r\nimport type { RowNodeEventType } from '../interfaces/iRowNode';\r\nimport type { DefaultMenuItem } from '../interfaces/menuItem';\r\nimport { _areModulesGridScoped } from '../modules/moduleRegistry';\r\nimport { _warnOnce } from '../utils/function';\r\nimport { _fuzzySuggestions } from '../utils/fuzzyMatch';\r\nimport type { IconName, IconValue } from '../utils/icon';\r\nimport { validateApiFunction } from './apiFunctionValidator';\r\nimport type { ErrorId, GetErrorParams } from './errorMessages/errorText';\r\nimport { getError } from './errorMessages/errorText';\r\nimport { _error, _warn, provideValidationServiceLogger } from './logging';\r\nimport { COL_DEF_VALIDATORS } from './rules/colDefValidations';\r\nimport { GRID_OPTIONS_VALIDATORS } from './rules/gridOptionsValidations';\r\nimport { DEPRECATED_ICONS_V33, ICON_MODULES, ICON_VALUES } from './rules/iconValidations';\r\nimport { MENU_ITEM_MODULES } from './rules/menuItemValidations';\r\nimport { USER_COMP_MODULES } from './rules/userCompValidations';\r\nimport type { DependentValues, OptionsValidation, OptionsValidator, RequiredOptions } from './validationTypes';\r\n\r\nexport class ValidationService extends BeanStub implements NamedBean {\r\n    beanName = 'validation' as const;\r\n\r\n    private gridOptions: GridOptions;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.gridOptions = beans.gridOptions;\r\n        provideValidationServiceLogger(this);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        this.processGridOptions(this.gridOptions);\r\n    }\r\n\r\n    public warnOnInitialPropertyUpdate(source: PropertyChangedSource, key: string): void {\r\n        if (source === 'api' && (INITIAL_GRID_OPTION_KEYS as any)[key]) {\r\n            _warn(22, { key });\r\n        }\r\n    }\r\n\r\n    public processGridOptions(options: GridOptions): void {\r\n        this.processOptions(options, GRID_OPTIONS_VALIDATORS());\r\n    }\r\n\r\n    public validateApiFunction<TFunctionName extends ApiFunctionName>(\r\n        functionName: TFunctionName,\r\n        apiFunction: ApiFunction<TFunctionName>\r\n    ): ApiFunction<TFunctionName> {\r\n        return validateApiFunction(functionName, apiFunction, this.beans);\r\n    }\r\n\r\n    public missingUserComponent(\r\n        propertyName: string,\r\n        componentName: string,\r\n        agGridDefaults: { [key in UserComponentName]?: any },\r\n        jsComps: { [key: string]: any }\r\n    ): void {\r\n        const moduleForComponent = USER_COMP_MODULES[componentName as UserComponentName];\r\n        if (moduleForComponent) {\r\n            this.gos.assertModuleRegistered(\r\n                moduleForComponent,\r\n                `AG Grid '${propertyName}' component: ${componentName}`\r\n            );\r\n        } else {\r\n            _warn(101, {\r\n                propertyName,\r\n                componentName,\r\n                agGridDefaults,\r\n                jsComps,\r\n            });\r\n        }\r\n    }\r\n    public checkRowEvents(eventType: RowNodeEventType): void {\r\n        if (DEPRECATED_ROW_NODE_EVENTS.has(eventType)) {\r\n            _warn(10, { eventType });\r\n        }\r\n    }\r\n\r\n    public validateIcon(iconName: IconName): void {\r\n        if (DEPRECATED_ICONS_V33.has(iconName)) {\r\n            _warn(43, { iconName });\r\n        }\r\n        if (ICON_VALUES[iconName as IconValue]) {\r\n            // directly referencing icon\r\n            return;\r\n        }\r\n        const moduleName = ICON_MODULES[iconName];\r\n        if (moduleName) {\r\n            _error(200, {\r\n                reasonOrId: `icon '${iconName}'`,\r\n                moduleName,\r\n                gridScoped: _areModulesGridScoped(),\r\n                gridId: this.beans.context.getGridId(),\r\n                rowModelType: this.gos.get('rowModelType'),\r\n                additionalText: 'Alternatively, use the CSS icon name directly.',\r\n            });\r\n            return;\r\n        }\r\n        _warn(134, { iconName });\r\n    }\r\n\r\n    public validateMenuItem(key: string): void {\r\n        const moduleName = MENU_ITEM_MODULES[key as DefaultMenuItem];\r\n        if (moduleName) {\r\n            this.gos.assertModuleRegistered(moduleName, `menu item '${key}'`);\r\n        }\r\n    }\r\n\r\n    public isProvidedUserComp(compName: string): boolean {\r\n        return !!USER_COMP_MODULES[compName as UserComponentName];\r\n    }\r\n\r\n    public validateColDef(colDef: ColDef | ColGroupDef, colId: string, skipInferenceCheck?: boolean): void {\r\n        if (skipInferenceCheck || !this.beans.dataTypeSvc?.isColPendingInference(colId)) {\r\n            this.processOptions(colDef, COL_DEF_VALIDATORS());\r\n        }\r\n    }\r\n\r\n    private processOptions<T extends object>(options: T, validator: OptionsValidator<T>): void {\r\n        const { validations, deprecations, allProperties, propertyExceptions, objectName, docsUrl } = validator;\r\n\r\n        if (allProperties && this.gridOptions.suppressPropertyNamesCheck !== true) {\r\n            this.checkProperties(\r\n                options,\r\n                [...(propertyExceptions ?? []), ...Object.keys(deprecations)],\r\n                allProperties,\r\n                objectName,\r\n                docsUrl\r\n            );\r\n        }\r\n\r\n        const warnings = new Set<string>();\r\n\r\n        const getRules = (key: keyof T): OptionsValidation<T> | undefined => {\r\n            const rulesOrGetter = validations[key];\r\n            if (!rulesOrGetter) {\r\n                return;\r\n            } else if (typeof rulesOrGetter === 'function') {\r\n                const fromGetter = rulesOrGetter(options, this.gridOptions, this.beans);\r\n                if (!fromGetter) {\r\n                    return;\r\n                }\r\n\r\n                // this is a sub validator.\r\n                if ('objectName' in fromGetter) {\r\n                    const value = options[key];\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach((item) => {\r\n                            this.processOptions(item, fromGetter);\r\n                        });\r\n                        return;\r\n                    }\r\n                    this.processOptions(options[key] as any, fromGetter);\r\n                    return;\r\n                }\r\n\r\n                return fromGetter;\r\n            } else {\r\n                return rulesOrGetter;\r\n            }\r\n        };\r\n\r\n        const optionKeys = Object.keys(options) as (keyof T)[];\r\n        optionKeys.forEach((key: keyof T) => {\r\n            const deprecation = deprecations[key];\r\n            if (deprecation) {\r\n                const { message, version } = deprecation;\r\n                warnings.add(`As of v${version}, ${String(key)} is deprecated. ${message ?? ''}`);\r\n            }\r\n\r\n            const value = options[key];\r\n            if (value == null || value === false) {\r\n                // false implies feature is disabled, don't validate.\r\n                return;\r\n            }\r\n\r\n            const rules = getRules(key);\r\n            if (!rules) {\r\n                return;\r\n            }\r\n\r\n            const { module, dependencies, validate, supportedRowModels, expectedType } = rules;\r\n\r\n            if (expectedType) {\r\n                const actualType = typeof value;\r\n                if (actualType !== expectedType) {\r\n                    warnings.add(\r\n                        `${String(key)} should be of type '${expectedType}' but received '${actualType}' (${value}).`\r\n                    );\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (supportedRowModels) {\r\n                const rowModel = this.gridOptions.rowModelType ?? 'clientSide';\r\n                if (!supportedRowModels.includes(rowModel)) {\r\n                    warnings.add(\r\n                        `${String(key)} is not supported with the '${rowModel}' row model. It is only valid with: ${supportedRowModels.join(', ')}.`\r\n                    );\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (module) {\r\n                const modules = Array.isArray(module) ? module : [module];\r\n\r\n                let allRegistered = true;\r\n                modules.forEach((m) => {\r\n                    if (!this.gos.assertModuleRegistered(m, String(key))) {\r\n                        allRegistered = false;\r\n                    }\r\n                });\r\n\r\n                if (!allRegistered) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (dependencies) {\r\n                const warning = this.checkForRequiredDependencies(key, dependencies, options);\r\n                if (warning) {\r\n                    warnings.add(warning);\r\n                    return;\r\n                }\r\n            }\r\n            if (validate) {\r\n                const warning = validate(options, this.gridOptions, this.beans);\r\n                if (warning) {\r\n                    warnings.add(warning);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        if (warnings.size > 0) {\r\n            warnings.forEach((warning) => {\r\n                _warnOnce(warning);\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkForRequiredDependencies<T extends object>(\r\n        key: keyof T,\r\n        validator: RequiredOptions<T>,\r\n        options: T\r\n    ): string | null {\r\n        const optionEntries = Object.entries<DependentValues<T, keyof T>>(validator);\r\n        const failedOptions = optionEntries.filter(([key, value]) => {\r\n            const gridOptionValue = options[key as keyof T];\r\n            return !value.required.includes(gridOptionValue);\r\n        });\r\n\r\n        if (failedOptions.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return failedOptions\r\n            .map(\r\n                ([failedKey, possibleOptions]: [string, DependentValues<any, any>]) =>\r\n                    `'${String(key)}' requires '${failedKey}' to be one of [${possibleOptions.required\r\n                        .map((o: any) => {\r\n                            if (o === null) {\r\n                                return 'null';\r\n                            } else if (o === undefined) {\r\n                                return 'undefined';\r\n                            }\r\n                            return o;\r\n                        })\r\n                        .join(', ')}]. ${possibleOptions.reason ?? ''}`\r\n            )\r\n            .join('\\n           '); // make multiple messages easier to read\r\n    }\r\n\r\n    private checkProperties<T extends object>(\r\n        object: T,\r\n        exceptions: string[], // deprecated properties generally\r\n        validProperties: string[], // properties to recommend\r\n        containerName: string,\r\n        docsUrl?: string\r\n    ): void {\r\n        // Vue adds these properties to all objects, so we ignore them when checking for invalid properties\r\n        const VUE_FRAMEWORK_PROPS = ['__ob__', '__v_skip', '__metadata__'];\r\n\r\n        const invalidProperties: { [p: string]: string[] } = _fuzzyCheckStrings(\r\n            Object.getOwnPropertyNames(object),\r\n            [...VUE_FRAMEWORK_PROPS, ...exceptions, ...validProperties],\r\n            validProperties\r\n        );\r\n\r\n        Object.entries(invalidProperties).forEach(([key, value]) => {\r\n            let message = `invalid ${containerName} property '${key}' did you mean any of these: ${value.slice(0, 8).join(', ')}.`;\r\n            if (validProperties.includes('context')) {\r\n                message += `\\nIf you are trying to annotate ${containerName} with application data, use the '${containerName}.context' property instead.`;\r\n            }\r\n            _warnOnce(message);\r\n        });\r\n\r\n        if (Object.keys(invalidProperties).length > 0 && docsUrl) {\r\n            const url = this.beans.frameworkOverrides.getDocLink(docsUrl);\r\n            _warnOnce(`to see all the valid ${containerName} properties please check: ${url}`);\r\n        }\r\n    }\r\n\r\n    public getConsoleMessage<TId extends ErrorId>(id: TId, args: GetErrorParams<TId>): any[] {\r\n        return getError(id, args);\r\n    }\r\n}\r\n\r\nexport function _fuzzyCheckStrings(\r\n    inputValues: string[],\r\n    validValues: string[],\r\n    allSuggestions: string[]\r\n): { [p: string]: string[] } {\r\n    const fuzzyMatches: { [p: string]: string[] } = {};\r\n    const invalidInputs: string[] = inputValues.filter(\r\n        (inputValue) => !validValues.some((validValue) => validValue === inputValue)\r\n    );\r\n\r\n    if (invalidInputs.length > 0) {\r\n        invalidInputs.forEach(\r\n            (invalidInput) =>\r\n                (fuzzyMatches[invalidInput] = _fuzzySuggestions({ inputValue: invalidInput, allSuggestions }).values)\r\n        );\r\n    }\r\n\r\n    return fuzzyMatches;\r\n}\r\n\r\nconst DEPRECATED_ROW_NODE_EVENTS: Set<RowNodeEventType> = new Set([\r\n    'firstChildChanged',\r\n    'lastChildChanged',\r\n    'childIndexChanged',\r\n]);\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { ValidationService } from './validationService';\r\n\r\n/**\r\n * @feature Validation\r\n */\r\nexport const ValidationModule: _ModuleWithoutApi = {\r\n    moduleName: 'Validation',\r\n    version: VERSION,\r\n    beans: [ValidationService],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { FilterManager } from '../filter/filterManager';\r\nimport type { ClientSideRowModelStage } from '../interfaces/iClientSideRowModel';\r\nimport type { IRowNodeStage, StageExecuteParams } from '../interfaces/iRowNodeStage';\r\nimport type { ChangedPath } from '../utils/changedPath';\r\n\r\nexport function updateRowNodeAfterFilter(rowNode: RowNode): void {\r\n    if (rowNode.sibling) {\r\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\r\n    }\r\n}\r\n\r\nexport class FilterStage extends BeanStub implements IRowNodeStage, NamedBean {\r\n    beanName = 'filterStage' as const;\r\n\r\n    public refreshProps: Set<keyof GridOptions<any>> = new Set(['excludeChildrenWhenTreeDataFiltering']);\r\n    public step: ClientSideRowModelStage = 'filter';\r\n\r\n    private filterManager?: FilterManager;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.filterManager = beans.filterManager;\r\n    }\r\n\r\n    public execute(params: StageExecuteParams): void {\r\n        const { changedPath } = params;\r\n        this.filter(changedPath!);\r\n    }\r\n\r\n    private filter(changedPath: ChangedPath): void {\r\n        const filterActive: boolean = !!this.filterManager?.isChildFilterPresent();\r\n        this.filterNodes(filterActive, changedPath);\r\n    }\r\n\r\n    private filterNodes(filterActive: boolean, changedPath: ChangedPath): void {\r\n        const filterCallback = (rowNode: RowNode, includeChildNodes: boolean) => {\r\n            // recursively get all children that are groups to also filter\r\n            if (rowNode.hasChildren()) {\r\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\r\n                if (filterActive && !includeChildNodes) {\r\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup!.filter((childNode) => {\r\n                        // a group is included in the result if it has any children of it's own.\r\n                        // by this stage, the child groups are already filtered\r\n                        const passBecauseChildren =\r\n                            childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\r\n\r\n                        // both leaf level nodes and tree data nodes have data. these get added if\r\n                        // the data passes the filter\r\n                        const passBecauseDataPasses =\r\n                            childNode.data && this.filterManager!.doesRowPassFilter({ rowNode: childNode });\r\n\r\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\r\n\r\n                        return passBecauseChildren || passBecauseDataPasses;\r\n                    });\r\n                } else {\r\n                    // if not filtering, the result is the original list\r\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\r\n                }\r\n            } else {\r\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\r\n            }\r\n\r\n            updateRowNodeAfterFilter(rowNode);\r\n        };\r\n\r\n        if (this.doingTreeDataFiltering()) {\r\n            const treeDataDepthFirstFilter = (rowNode: RowNode, alreadyFoundInParent: boolean) => {\r\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\r\n                // filter, and parent nodes will be include if any children exist.\r\n\r\n                if (rowNode.childrenAfterGroup) {\r\n                    for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\r\n                        const childNode = rowNode.childrenAfterGroup[i];\r\n\r\n                        // first check if current node passes filter before invoking child nodes\r\n                        const foundInParent =\r\n                            alreadyFoundInParent || this.filterManager!.doesRowPassFilter({ rowNode: childNode });\r\n                        if (childNode.childrenAfterGroup) {\r\n                            treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\r\n                        } else {\r\n                            filterCallback(childNode, foundInParent);\r\n                        }\r\n                    }\r\n                }\r\n                filterCallback(rowNode, alreadyFoundInParent);\r\n            };\r\n\r\n            const treeDataFilterCallback = (rowNode: RowNode) => treeDataDepthFirstFilter(rowNode, false);\r\n            changedPath.executeFromRootNode(treeDataFilterCallback);\r\n        } else {\r\n            const defaultFilterCallback = (rowNode: RowNode) => filterCallback(rowNode, false);\r\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\r\n        }\r\n    }\r\n\r\n    private doingTreeDataFiltering() {\r\n        return this.gos.get('treeData') && !this.gos.get('excludeChildrenWhenTreeDataFiltering');\r\n    }\r\n}\r\n", "import { setupCompBean } from '../../../components/emptyBean';\r\nimport { KeyCode } from '../../../constants/keyCode';\r\nimport type { BeanStub } from '../../../context/beanStub';\r\nimport type { AgColumn } from '../../../entities/agColumn';\r\nimport type { ColumnEvent, FilterChangedEvent } from '../../../events';\r\nimport { _getActiveDomElement, _isLegacyMenuEnabled } from '../../../gridOptionsUtils';\r\nimport type { UserCompDetails } from '../../../interfaces/iUserCompDetails';\r\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\r\nimport { _setAriaLabel } from '../../../utils/aria';\r\nimport { _isElementChildOfClass } from '../../../utils/dom';\r\nimport { _findNextFocusableElement, _focusInto } from '../../../utils/focus';\r\nimport { _createIconNoSpan } from '../../../utils/icon';\r\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\r\nimport { AbstractHeaderCellCtrl } from '../abstractCell/abstractHeaderCellCtrl';\r\nimport type { IHeaderFilterCellComp } from './iHeaderFilterCellComp';\r\n\r\nexport class HeaderFilterCellCtrl extends AbstractHeaderCellCtrl<IHeaderFilterCellComp, AgColumn> {\r\n    private eButtonShowMainFilter: HTMLElement;\r\n    private eFloatingFilterBody: HTMLElement;\r\n\r\n    private suppressFilterButton: boolean;\r\n    private highlightFilterButtonWhenActive: boolean;\r\n    private active: boolean;\r\n    private iconCreated: boolean = false;\r\n\r\n    private userCompDetails?: UserCompDetails | null;\r\n    private destroySyncListener: () => null;\r\n    private destroyFilterChangedListener: () => null;\r\n\r\n    public setComp(\r\n        comp: IHeaderFilterCellComp,\r\n        eGui: HTMLElement,\r\n        eButtonShowMainFilter: HTMLElement,\r\n        eFloatingFilterBody: HTMLElement,\r\n        compBeanInput: BeanStub | undefined\r\n    ): void {\r\n        this.comp = comp;\r\n        const compBean = setupCompBean(this, this.beans.context, compBeanInput);\r\n        this.eButtonShowMainFilter = eButtonShowMainFilter;\r\n        this.eFloatingFilterBody = eFloatingFilterBody;\r\n\r\n        this.setGui(eGui, compBean);\r\n        this.setupActive();\r\n\r\n        this.setupWidth(compBean);\r\n        this.setupLeft(compBean);\r\n        this.setupHover(compBean);\r\n        this.setupFocus(compBean);\r\n        this.setupAria();\r\n        this.setupFilterButton();\r\n        this.setupUserComp();\r\n        this.setupSyncWithFilter(compBean);\r\n        this.setupUi();\r\n\r\n        compBean.addManagedElementListeners(this.eButtonShowMainFilter, { click: this.showParentFilter.bind(this) });\r\n        this.setupFilterChangedListener(compBean);\r\n        compBean.addManagedListeners(this.column, { colDefChanged: () => this.onColDefChanged(compBean) });\r\n        // Make sure this is the last destroy func as it clears the gui and comp\r\n        compBean.addDestroyFunc(() => {\r\n            (this.eButtonShowMainFilter as any) = null;\r\n            (this.eFloatingFilterBody as any) = null;\r\n            (this.userCompDetails as any) = null;\r\n            this.clearComponent();\r\n        });\r\n    }\r\n\r\n    // empty abstract method\r\n    protected resizeHeader(): void {}\r\n\r\n    protected override moveHeader(): void {\r\n        // doesn't support move\r\n    }\r\n\r\n    private setupActive(): void {\r\n        const colDef = this.column.getColDef();\r\n        const filterExists = !!colDef.filter;\r\n        const floatingFilterExists = !!colDef.floatingFilter;\r\n        this.active = filterExists && floatingFilterExists;\r\n    }\r\n\r\n    private setupUi(): void {\r\n        this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);\r\n\r\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-full-body', this.suppressFilterButton);\r\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-body', !this.suppressFilterButton);\r\n\r\n        if (!this.active || this.iconCreated) {\r\n            return;\r\n        }\r\n\r\n        const eMenuIcon = _createIconNoSpan('filter', this.beans, this.column);\r\n\r\n        if (eMenuIcon) {\r\n            this.iconCreated = true;\r\n            this.eButtonShowMainFilter.appendChild(eMenuIcon);\r\n        }\r\n    }\r\n\r\n    private setupFocus(compBean: BeanStub): void {\r\n        compBean.createManagedBean(\r\n            new ManagedFocusFeature(this.eGui, {\r\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\r\n                onTabKeyDown: this.onTabKeyDown.bind(this),\r\n                handleKeyDown: this.handleKeyDown.bind(this),\r\n                onFocusIn: this.onFocusIn.bind(this),\r\n            })\r\n        );\r\n    }\r\n\r\n    private setupAria(): void {\r\n        const localeTextFunc = this.getLocaleTextFunc();\r\n        _setAriaLabel(this.eButtonShowMainFilter, localeTextFunc('ariaFilterMenuOpen', 'Open Filter Menu'));\r\n    }\r\n\r\n    private onTabKeyDown(e: KeyboardEvent) {\r\n        const { beans } = this;\r\n        const activeEl = _getActiveDomElement(beans);\r\n        const wrapperHasFocus = activeEl === this.eGui;\r\n\r\n        if (wrapperHasFocus) {\r\n            return;\r\n        }\r\n\r\n        const nextFocusableEl = _findNextFocusableElement(beans, this.eGui, null, e.shiftKey);\r\n\r\n        if (nextFocusableEl) {\r\n            beans.headerNavigation?.scrollToColumn(this.column);\r\n            e.preventDefault();\r\n            nextFocusableEl.focus();\r\n            return;\r\n        }\r\n\r\n        const nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);\r\n\r\n        if (!nextFocusableColumn) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            beans.focusSvc.focusHeaderPosition({\r\n                headerPosition: {\r\n                    headerRowIndex: this.rowCtrl.rowIndex,\r\n                    column: nextFocusableColumn,\r\n                },\r\n                event: e,\r\n            })\r\n        ) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    private findNextColumnWithFloatingFilter(backwards: boolean): AgColumn | null {\r\n        const presentedColsService = this.beans.visibleCols;\r\n        let nextCol: AgColumn | null = this.column;\r\n\r\n        do {\r\n            nextCol = backwards\r\n                ? presentedColsService.getColBefore(nextCol)\r\n                : presentedColsService.getColAfter(nextCol);\r\n\r\n            if (!nextCol) {\r\n                break;\r\n            }\r\n        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);\r\n\r\n        return nextCol;\r\n    }\r\n\r\n    protected override handleKeyDown(e: KeyboardEvent): void {\r\n        super.handleKeyDown(e);\r\n\r\n        const wrapperHasFocus = this.getWrapperHasFocus();\r\n\r\n        switch (e.key) {\r\n            case KeyCode.UP:\r\n            case KeyCode.DOWN:\r\n                if (!wrapperHasFocus) {\r\n                    e.preventDefault();\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case KeyCode.LEFT:\r\n            case KeyCode.RIGHT:\r\n                if (wrapperHasFocus) {\r\n                    return;\r\n                }\r\n                e.stopPropagation();\r\n            // eslint-disable-next-line no-fallthrough\r\n            case KeyCode.ENTER:\r\n                if (wrapperHasFocus) {\r\n                    if (_focusInto(this.eGui)) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            case KeyCode.ESCAPE:\r\n                if (!wrapperHasFocus) {\r\n                    this.eGui.focus();\r\n                }\r\n        }\r\n    }\r\n\r\n    private onFocusIn(e: FocusEvent): void {\r\n        const isRelatedWithin = this.eGui.contains(e.relatedTarget as HTMLElement);\r\n\r\n        // when the focus is already within the component,\r\n        // we default to the browser's behavior\r\n        if (isRelatedWithin) {\r\n            return;\r\n        }\r\n\r\n        const notFromHeaderWrapper =\r\n            !!e.relatedTarget && !(e.relatedTarget as HTMLElement).classList.contains('ag-floating-filter');\r\n        const fromWithinHeader =\r\n            !!e.relatedTarget && _isElementChildOfClass(e.relatedTarget as HTMLElement, 'ag-floating-filter');\r\n\r\n        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {\r\n            const lastFocusEvent = this.lastFocusEvent;\r\n            const fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);\r\n\r\n            if (lastFocusEvent && fromTab) {\r\n                const shouldFocusLast = lastFocusEvent.shiftKey;\r\n\r\n                _focusInto(this.eGui, shouldFocusLast);\r\n            }\r\n        }\r\n\r\n        this.focusThis();\r\n    }\r\n\r\n    private setupHover(compBean: BeanStub): void {\r\n        this.beans.colHover?.addHeaderFilterColumnHoverListener(compBean, this.comp, this.column, this.eGui);\r\n    }\r\n\r\n    private setupLeft(compBean: BeanStub): void {\r\n        const setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);\r\n        compBean.createManagedBean(setLeftFeature);\r\n    }\r\n\r\n    private setupFilterButton(): void {\r\n        this.suppressFilterButton = !this.beans.menuSvc?.isFloatingFilterButtonEnabled(this.column);\r\n        this.highlightFilterButtonWhenActive = !_isLegacyMenuEnabled(this.gos);\r\n    }\r\n\r\n    private setupUserComp(): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n\r\n        const compDetails = this.beans.filterManager?.getFloatingFilterCompDetails(this.column, () =>\r\n            this.showParentFilter()\r\n        );\r\n\r\n        if (compDetails) {\r\n            this.setCompDetails(compDetails);\r\n        }\r\n    }\r\n\r\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\r\n        this.userCompDetails = compDetails;\r\n        this.comp.setCompDetails(compDetails);\r\n    }\r\n\r\n    private showParentFilter() {\r\n        const eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;\r\n        this.beans.menuSvc?.showFilterMenu({\r\n            column: this.column,\r\n            buttonElement: eventSource,\r\n            containerType: 'floatingFilter',\r\n            positionBy: 'button',\r\n        });\r\n    }\r\n\r\n    private setupSyncWithFilter(compBean: BeanStub): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        const { filterManager } = this.beans;\r\n\r\n        const syncWithFilter = (event: ColumnEvent | null) => {\r\n            if (event?.source === 'filterDestroyed' && !this.isAlive()) {\r\n                return;\r\n            }\r\n            const compPromise = this.comp.getFloatingFilterComp();\r\n\r\n            if (!compPromise) {\r\n                return;\r\n            }\r\n\r\n            compPromise.then((comp) => {\r\n                if (comp) {\r\n                    const parentModel = filterManager?.getCurrentFloatingFilterParentModel(this.column);\r\n                    const filterChangedEvent: FilterChangedEvent | null = event\r\n                        ? {\r\n                              // event can have additional params like `afterDataChange` which need to be passed through\r\n                              ...event,\r\n                              columns: event.columns ?? [],\r\n                              source: event.source === 'api' ? 'api' : 'columnFilter',\r\n                          }\r\n                        : null;\r\n                    comp.onParentModelChanged(parentModel, filterChangedEvent);\r\n                }\r\n            });\r\n        };\r\n\r\n        [this.destroySyncListener] = compBean.addManagedListeners(this.column, { filterChanged: syncWithFilter });\r\n\r\n        if (filterManager?.isFilterActive(this.column)) {\r\n            syncWithFilter(null);\r\n        }\r\n    }\r\n\r\n    private setupWidth(compBean: BeanStub): void {\r\n        const listener = () => {\r\n            const width = `${this.column.getActualWidth()}px`;\r\n            this.comp.setWidth(width);\r\n        };\r\n\r\n        compBean.addManagedListeners(this.column, { widthChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    private setupFilterChangedListener(compBean: BeanStub): void {\r\n        if (this.active) {\r\n            [this.destroyFilterChangedListener] = compBean.addManagedListeners(this.column, {\r\n                filterChanged: this.updateFilterButton.bind(this),\r\n            });\r\n            this.updateFilterButton();\r\n        }\r\n    }\r\n\r\n    private updateFilterButton(): void {\r\n        if (!this.suppressFilterButton && this.comp) {\r\n            const isFilterAllowed = !!this.beans.filterManager?.isFilterAllowed(this.column);\r\n            this.comp.setButtonWrapperDisplayed(isFilterAllowed);\r\n            if (this.highlightFilterButtonWhenActive && isFilterAllowed) {\r\n                this.eButtonShowMainFilter.classList.toggle('ag-filter-active', this.column.isFilterActive());\r\n            }\r\n        }\r\n    }\r\n\r\n    private onColDefChanged(compBean: BeanStub): void {\r\n        const wasActive = this.active;\r\n        this.setupActive();\r\n        const becomeActive = !wasActive && this.active;\r\n        if (wasActive && !this.active) {\r\n            this.destroySyncListener();\r\n            this.destroyFilterChangedListener();\r\n        }\r\n\r\n        const newCompDetails = this.active\r\n            ? this.beans.filterManager?.getFloatingFilterCompDetails(this.column, () => this.showParentFilter())\r\n            : null;\r\n\r\n        const compPromise = this.comp.getFloatingFilterComp();\r\n        if (!compPromise || !newCompDetails) {\r\n            this.updateCompDetails(compBean, newCompDetails, becomeActive);\r\n        } else {\r\n            compPromise.then((compInstance) => {\r\n                if (\r\n                    !compInstance ||\r\n                    this.beans.filterManager?.areFilterCompsDifferent(this.userCompDetails ?? null, newCompDetails)\r\n                ) {\r\n                    this.updateCompDetails(compBean, newCompDetails, becomeActive);\r\n                } else {\r\n                    this.updateFloatingFilterParams(newCompDetails);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateCompDetails(\r\n        compBean: BeanStub,\r\n        compDetails: UserCompDetails | null | undefined,\r\n        becomeActive: boolean\r\n    ): void {\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n        this.setCompDetails(compDetails);\r\n        // filter button and UI can change based on params, so always want to update\r\n        this.setupFilterButton();\r\n        this.setupUi();\r\n        if (becomeActive) {\r\n            this.setupSyncWithFilter(compBean);\r\n            this.setupFilterChangedListener(compBean);\r\n        }\r\n    }\r\n\r\n    private updateFloatingFilterParams(userCompDetails?: UserCompDetails | null): void {\r\n        if (!userCompDetails) {\r\n            return;\r\n        }\r\n\r\n        const params = userCompDetails.params;\r\n\r\n        this.comp.getFloatingFilterComp()?.then((floatingFilter) => {\r\n            if (floatingFilter?.refresh && typeof floatingFilter.refresh === 'function') {\r\n                floatingFilter.refresh(params);\r\n                // framework wrapper always implements optional methods, but returns null if no underlying method\r\n            }\r\n        });\r\n    }\r\n\r\n    protected override addResizeAndMoveKeyboardListeners(): void {\r\n        // do nothing\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        (this.destroySyncListener as any) = null;\r\n        (this.destroyFilterChangedListener as any) = null;\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { Column } from '../../interfaces/iColumn';\r\nimport { _error } from '../../validation/logging';\r\n\r\nexport function showColumnMenu(beans: BeanCollection, colKey: string | Column): void {\r\n    const column = beans.colModel.getCol(colKey);\r\n    if (!column) {\r\n        // No column found, can't show menu\r\n        _error(12, { colKey });\r\n        return;\r\n    }\r\n    beans.menuSvc?.showColumnMenu({\r\n        column,\r\n        positionBy: 'auto',\r\n    });\r\n}\r\n\r\nexport function hidePopupMenu(beans: BeanCollection): void {\r\n    beans.menuSvc?.hidePopupMenu();\r\n}\r\n", "import type { _CommunityMenuGridApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { hidePopupMenu, showColumnMenu } from './menuApi';\r\nimport { MenuService } from './menuService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const SharedMenuModule: _ModuleWithApi<_CommunityMenuGridApi> = {\r\n    moduleName: 'SharedMenu',\r\n    version: VERSION,\r\n    beans: [MenuService],\r\n    apiFunctions: {\r\n        showColumnMenu,\r\n        hidePopupMenu,\r\n    },\r\n};\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { CssVariablesChanged } from '../events';\r\nimport type { GridCtrl } from '../gridComp/gridCtrl';\r\nimport { _getActiveDomElement, _getDocument } from '../gridOptionsUtils';\r\nimport type { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\r\nimport type { PostProcessPopupParams } from '../interfaces/iCallbackParams';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { PopupEventParams, PopupPositionParams } from '../interfaces/iPopup';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport { _setAriaLabel, _setAriaRole } from '../utils/aria';\r\nimport { _getAbsoluteHeight, _getAbsoluteWidth, _getElementRectWithOffset, _observeResize } from '../utils/dom';\r\nimport { _isElementInEventPath, _isStopPropagationForAgGrid } from '../utils/event';\r\nimport { _exists } from '../utils/generic';\r\nimport { AgPromise } from '../utils/promise';\r\nimport { _warn } from '../validation/logging';\r\n\r\ninterface AgPopup {\r\n    element: HTMLElement;\r\n    wrapper: HTMLElement;\r\n    hideFunc: (params?: PopupEventParams) => void;\r\n    isAnchored: boolean;\r\n    instanceId: number;\r\n    alignedToElement?: HTMLElement;\r\n    stopAnchoringPromise?: AgPromise<() => void>;\r\n}\r\n\r\nenum DIRECTION {\r\n    vertical,\r\n    horizontal,\r\n}\r\n\r\nlet instanceIdSeq = 0;\r\n\r\nexport interface AddPopupParams {\r\n    // if true then listens to background checking for clicks, so that when the background is clicked,\r\n    // the child is removed again, giving a model look to popups.\r\n    modal?: boolean;\r\n    // the element to place in the popup\r\n    eChild: HTMLElement;\r\n    // if hitting ESC should close the popup\r\n    closeOnEsc?: boolean;\r\n    // a callback that gets called when the popup is closed\r\n    closedCallback?: (e?: MouseEvent | TouchEvent | KeyboardEvent) => void;\r\n    // if a clicked caused the popup (eg click a button) then the click that caused it\r\n    click?: MouseEvent | Touch | null;\r\n    alwaysOnTop?: boolean;\r\n    afterGuiAttached?: (params: IAfterGuiAttachedParams) => void;\r\n    // this gets called after the popup is created. the called could just call positionCallback themselves,\r\n    // however it needs to be called first before anchorToElement is called, so must provide this callback\r\n    // here if setting anchorToElement\r\n    positionCallback?: () => void;\r\n    // if the underlying anchorToElement moves, the popup will follow it. for example if context menu\r\n    // showing, and the whole grid moves (browser is scrolled down) then we want the popup to stay above\r\n    // the cell it appeared on. make sure though if setting, don't anchor to a temporary or moving element,\r\n    // eg if cellComp element is passed, what happens if row moves (sorting, filtering etc)? best anchor against\r\n    // the grid, not the cell.\r\n    anchorToElement?: HTMLElement;\r\n\r\n    // an aria label should be added to provided context to screen readers\r\n    ariaLabel: string;\r\n}\r\n\r\nexport interface AddPopupResult {\r\n    hideFunc: (params?: PopupEventParams) => void;\r\n}\r\n\r\nconst WAIT_FOR_POPUP_CONTENT_RESIZE: number = 200;\r\n\r\ninterface Position {\r\n    initialDiff: number;\r\n    lastDiff: number;\r\n    initial: number;\r\n    last: number;\r\n    direction: DIRECTION;\r\n}\r\n\r\nexport class PopupService extends BeanStub implements NamedBean {\r\n    beanName = 'popupSvc' as const;\r\n\r\n    private gridCtrl: GridCtrl;\r\n\r\n    private popupList: AgPopup[] = [];\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridCtrl = p.gridCtrl;\r\n        });\r\n        this.addManagedEventListeners({ gridStylesChanged: this.handleThemeChange.bind(this) });\r\n    }\r\n\r\n    public getPopupParent(): HTMLElement {\r\n        const ePopupParent = this.gos.get('popupParent');\r\n\r\n        if (ePopupParent) {\r\n            return ePopupParent;\r\n        }\r\n\r\n        return this.gridCtrl.getGui();\r\n    }\r\n\r\n    public positionPopupForMenu(params: { eventSource: HTMLElement; ePopup: HTMLElement }): void {\r\n        const { eventSource, ePopup } = params;\r\n\r\n        const popupIdx = this.getPopupIndex(ePopup);\r\n\r\n        if (popupIdx !== -1) {\r\n            const popup = this.popupList[popupIdx];\r\n            popup.alignedToElement = eventSource;\r\n        }\r\n\r\n        const sourceRect = eventSource.getBoundingClientRect();\r\n        const parentRect = this.getParentRect();\r\n        const y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);\r\n\r\n        const minWidth = ePopup.clientWidth > 0 ? ePopup.clientWidth : 200;\r\n        ePopup.style.minWidth = `${minWidth}px`;\r\n        const widthOfParent = parentRect.right - parentRect.left;\r\n        const maxX = widthOfParent - minWidth;\r\n\r\n        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup\r\n        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,\r\n        // we try place it first to the left, and then if not to the right.\r\n        let x: number;\r\n        if (this.gos.get('enableRtl')) {\r\n            // for RTL, try left first\r\n            x = xLeftPosition();\r\n            if (x < 0) {\r\n                x = xRightPosition();\r\n                this.setAlignedStyles(ePopup, 'left');\r\n            }\r\n            if (x > maxX) {\r\n                x = 0;\r\n                this.setAlignedStyles(ePopup, 'right');\r\n            }\r\n        } else {\r\n            // for LTR, try right first\r\n            x = xRightPosition();\r\n            if (x > maxX) {\r\n                x = xLeftPosition();\r\n                this.setAlignedStyles(ePopup, 'right');\r\n            }\r\n            if (x < 0) {\r\n                x = 0;\r\n                this.setAlignedStyles(ePopup, 'left');\r\n            }\r\n        }\r\n\r\n        ePopup.style.left = `${x}px`;\r\n        ePopup.style.top = `${y}px`;\r\n\r\n        function xRightPosition(): number {\r\n            return sourceRect.right - parentRect.left - 2;\r\n        }\r\n\r\n        function xLeftPosition(): number {\r\n            return sourceRect.left - parentRect.left - minWidth;\r\n        }\r\n    }\r\n\r\n    public positionPopupUnderMouseEvent(\r\n        params: PopupPositionParams & { type: string; mouseEvent: MouseEvent | Touch }\r\n    ): void {\r\n        const { ePopup, nudgeX, nudgeY, skipObserver } = params;\r\n\r\n        this.positionPopup({\r\n            ePopup: ePopup,\r\n            nudgeX,\r\n            nudgeY,\r\n            keepWithinBounds: true,\r\n            skipObserver,\r\n            updatePosition: () => this.calculatePointerAlign(params.mouseEvent),\r\n            postProcessCallback: () =>\r\n                this.callPostProcessPopup(\r\n                    params.type,\r\n                    params.ePopup,\r\n                    null,\r\n                    params.mouseEvent,\r\n                    params.column,\r\n                    params.rowNode\r\n                ),\r\n        });\r\n    }\r\n\r\n    private calculatePointerAlign(e: MouseEvent | Touch): { x: number; y: number } {\r\n        const parentRect = this.getParentRect();\r\n\r\n        return {\r\n            x: e.clientX - parentRect.left,\r\n            y: e.clientY - parentRect.top,\r\n        };\r\n    }\r\n\r\n    public positionPopupByComponent(params: PopupPositionParams & { type: string; eventSource: HTMLElement }) {\r\n        const {\r\n            ePopup,\r\n            nudgeX,\r\n            nudgeY,\r\n            keepWithinBounds,\r\n            eventSource,\r\n            alignSide = 'left',\r\n            position = 'over',\r\n            column,\r\n            rowNode,\r\n            type,\r\n        } = params;\r\n\r\n        const sourceRect = eventSource.getBoundingClientRect();\r\n        const parentRect = this.getParentRect() as DOMRect;\r\n\r\n        const popupIdx = this.getPopupIndex(ePopup);\r\n\r\n        if (popupIdx !== -1) {\r\n            const popup = this.popupList[popupIdx];\r\n            popup.alignedToElement = eventSource;\r\n        }\r\n\r\n        const updatePosition = () => {\r\n            let x = sourceRect.left - parentRect.left;\r\n            if (alignSide === 'right') {\r\n                x -= ePopup.offsetWidth - sourceRect.width;\r\n            }\r\n\r\n            let y;\r\n\r\n            if (position === 'over') {\r\n                y = sourceRect.top - parentRect.top;\r\n                this.setAlignedStyles(ePopup, 'over');\r\n            } else {\r\n                this.setAlignedStyles(ePopup, 'under');\r\n                const alignSide = this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);\r\n                if (alignSide === 'under') {\r\n                    y = sourceRect.top - parentRect.top + sourceRect.height;\r\n                } else {\r\n                    y = sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2 - parentRect.top;\r\n                }\r\n            }\r\n\r\n            return { x, y };\r\n        };\r\n\r\n        this.positionPopup({\r\n            ePopup,\r\n            nudgeX,\r\n            nudgeY,\r\n            keepWithinBounds,\r\n            updatePosition,\r\n            postProcessCallback: () => this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode),\r\n        });\r\n    }\r\n\r\n    private shouldRenderUnderOrAbove(\r\n        ePopup: HTMLElement,\r\n        targetCompRect: DOMRect,\r\n        parentRect: DOMRect,\r\n        nudgeY: number\r\n    ): 'under' | 'above' {\r\n        const spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;\r\n        const spaceAvailableAbove = targetCompRect.top - parentRect.top;\r\n        const spaceRequired = ePopup.offsetHeight + nudgeY;\r\n\r\n        if (spaceAvailableUnder > spaceRequired) {\r\n            return 'under';\r\n        }\r\n\r\n        if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {\r\n            return 'above';\r\n        }\r\n\r\n        return 'under';\r\n    }\r\n\r\n    private setAlignedStyles(ePopup: HTMLElement, positioned: 'right' | 'left' | 'over' | 'above' | 'under' | null) {\r\n        const popupIdx = this.getPopupIndex(ePopup);\r\n\r\n        if (popupIdx === -1) {\r\n            return;\r\n        }\r\n\r\n        const popup = this.popupList[popupIdx];\r\n\r\n        const { alignedToElement } = popup;\r\n\r\n        if (!alignedToElement) {\r\n            return;\r\n        }\r\n\r\n        const positions = ['right', 'left', 'over', 'above', 'under'];\r\n\r\n        positions.forEach((position) => {\r\n            alignedToElement.classList.remove(`ag-has-popup-positioned-${position}`);\r\n            ePopup.classList.remove(`ag-popup-positioned-${position}`);\r\n        });\r\n\r\n        if (!positioned) {\r\n            return;\r\n        }\r\n\r\n        alignedToElement.classList.add(`ag-has-popup-positioned-${positioned}`);\r\n        ePopup.classList.add(`ag-popup-positioned-${positioned}`);\r\n    }\r\n\r\n    public callPostProcessPopup(\r\n        type: string,\r\n        ePopup: HTMLElement,\r\n        eventSource?: HTMLElement | null,\r\n        mouseEvent?: MouseEvent | Touch | null,\r\n        column?: AgColumn | null,\r\n        rowNode?: IRowNode | null\r\n    ): void {\r\n        const callback = this.gos.getCallback('postProcessPopup');\r\n        if (callback) {\r\n            const params: WithoutGridCommon<PostProcessPopupParams> = {\r\n                column,\r\n                rowNode,\r\n                ePopup,\r\n                type,\r\n                eventSource,\r\n                mouseEvent,\r\n            };\r\n            callback(params);\r\n        }\r\n    }\r\n\r\n    public positionPopup(params: PopupPositionParams): void {\r\n        const { ePopup, keepWithinBounds, nudgeX, nudgeY, skipObserver, updatePosition } = params;\r\n        const lastSize = { width: 0, height: 0 };\r\n\r\n        const updatePopupPosition = (fromResizeObserver: boolean = false) => {\r\n            let { x, y } = updatePosition!();\r\n\r\n            if (\r\n                fromResizeObserver &&\r\n                ePopup.clientWidth === lastSize.width &&\r\n                ePopup.clientHeight === lastSize.height\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            lastSize.width = ePopup.clientWidth;\r\n            lastSize.height = ePopup.clientHeight;\r\n\r\n            if (nudgeX) {\r\n                x += nudgeX;\r\n            }\r\n            if (nudgeY) {\r\n                y += nudgeY;\r\n            }\r\n\r\n            // if popup is overflowing to the bottom, move it up\r\n            if (keepWithinBounds) {\r\n                x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);\r\n                y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);\r\n            }\r\n\r\n            ePopup.style.left = `${x}px`;\r\n            ePopup.style.top = `${y}px`;\r\n\r\n            if (params.postProcessCallback) {\r\n                params.postProcessCallback();\r\n            }\r\n        };\r\n\r\n        updatePopupPosition();\r\n\r\n        // Mouse tracking will recalculate positioning when moving, so won't need to recalculate here\r\n        if (!skipObserver) {\r\n            // Since rendering popup contents can be asynchronous, use a resize observer to\r\n            // reposition the popup after initial updates to the size of the contents\r\n            const resizeObserverDestroyFunc = _observeResize(this.beans, ePopup, () => updatePopupPosition(true));\r\n            // Only need to reposition when first open, so can clean up after a bit of time\r\n            setTimeout(() => resizeObserverDestroyFunc(), WAIT_FOR_POPUP_CONTENT_RESIZE);\r\n        }\r\n    }\r\n\r\n    public getActivePopups(): HTMLElement[] {\r\n        return this.popupList.map((popup) => popup.element);\r\n    }\r\n\r\n    public getParentRect(): {\r\n        top: number;\r\n        left: number;\r\n        right: number;\r\n        bottom: number;\r\n    } {\r\n        // subtract the popup parent borders, because popupParent.getBoundingClientRect\r\n        // returns the rect outside the borders, but the 0,0 coordinate for absolute\r\n        // positioning is inside the border, leading the popup to be off by the width\r\n        // of the border\r\n        const eDocument = _getDocument(this.beans);\r\n        let popupParent = this.getPopupParent();\r\n\r\n        if (popupParent === eDocument.body) {\r\n            popupParent = eDocument.documentElement;\r\n        } else if (getComputedStyle(popupParent).position === 'static') {\r\n            popupParent = popupParent.offsetParent as HTMLElement;\r\n        }\r\n\r\n        return _getElementRectWithOffset(popupParent);\r\n    }\r\n\r\n    private keepXYWithinBounds(ePopup: HTMLElement, position: number, direction: DIRECTION): number {\r\n        const isVertical = direction === DIRECTION.vertical;\r\n        const sizeProperty = isVertical ? 'clientHeight' : 'clientWidth';\r\n        const anchorProperty = isVertical ? 'top' : 'left';\r\n        const offsetProperty = isVertical ? 'height' : 'width';\r\n        const scrollPositionProperty = isVertical ? 'scrollTop' : 'scrollLeft';\r\n\r\n        const eDocument = _getDocument(this.beans);\r\n        const docElement = eDocument.documentElement;\r\n        const popupParent = this.getPopupParent();\r\n        const popupRect = ePopup.getBoundingClientRect();\r\n        const parentRect = popupParent.getBoundingClientRect();\r\n        const documentRect = eDocument.documentElement.getBoundingClientRect();\r\n        const isBody = popupParent === eDocument.body;\r\n\r\n        const offsetSize = Math.ceil(popupRect[offsetProperty]);\r\n        const getSize = isVertical ? _getAbsoluteHeight : _getAbsoluteWidth;\r\n\r\n        let sizeOfParent = isBody\r\n            ? getSize(docElement) + docElement[scrollPositionProperty]\r\n            : popupParent[sizeProperty];\r\n\r\n        if (isBody) {\r\n            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);\r\n        }\r\n\r\n        const max = sizeOfParent - offsetSize;\r\n\r\n        return Math.min(Math.max(position, 0), Math.abs(max));\r\n    }\r\n\r\n    public addPopup(params: AddPopupParams): AddPopupResult {\r\n        const eDocument = _getDocument(this.beans);\r\n        const { eChild, ariaLabel, alwaysOnTop, positionCallback, anchorToElement } = params;\r\n\r\n        if (!eDocument) {\r\n            _warn(122);\r\n            return { hideFunc: () => {} };\r\n        }\r\n\r\n        const pos = this.getPopupIndex(eChild);\r\n\r\n        if (pos !== -1) {\r\n            const popup = this.popupList[pos];\r\n            return { hideFunc: popup.hideFunc };\r\n        }\r\n\r\n        this.initialisePopupPosition(eChild);\r\n\r\n        const wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);\r\n        const removeListeners = this.addEventListenersToPopup({ ...params, wrapperEl });\r\n\r\n        if (positionCallback) {\r\n            positionCallback();\r\n        }\r\n\r\n        this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);\r\n\r\n        return {\r\n            hideFunc: removeListeners,\r\n        };\r\n    }\r\n\r\n    private initialisePopupPosition(element: HTMLElement): void {\r\n        const ePopupParent = this.getPopupParent();\r\n        const ePopupParentRect = ePopupParent.getBoundingClientRect();\r\n\r\n        if (!_exists(element.style.top)) {\r\n            element.style.top = `${ePopupParentRect.top * -1}px`;\r\n        }\r\n        if (!_exists(element.style.left)) {\r\n            element.style.left = `${ePopupParentRect.left * -1}px`;\r\n        }\r\n    }\r\n\r\n    private createPopupWrapper(element: HTMLElement, ariaLabel: string, alwaysOnTop: boolean): HTMLElement {\r\n        const ePopupParent = this.getPopupParent();\r\n\r\n        // add env CSS class to child, in case user provided a popup parent, which means\r\n        // theme class may be missing\r\n        const eWrapper = document.createElement('div');\r\n        const { environment, gos } = this.beans;\r\n        environment.applyThemeClasses(eWrapper);\r\n\r\n        eWrapper.classList.add('ag-popup');\r\n        element.classList.add(gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr', 'ag-popup-child');\r\n\r\n        if (!element.hasAttribute('role')) {\r\n            _setAriaRole(element, 'dialog');\r\n        }\r\n\r\n        _setAriaLabel(element, ariaLabel);\r\n\r\n        eWrapper.appendChild(element);\r\n        ePopupParent.appendChild(eWrapper);\r\n\r\n        if (alwaysOnTop) {\r\n            this.setAlwaysOnTop(element, true);\r\n        } else {\r\n            this.bringPopupToFront(element);\r\n        }\r\n\r\n        return eWrapper;\r\n    }\r\n\r\n    private handleThemeChange(e: CssVariablesChanged) {\r\n        if (e.themeChanged) {\r\n            const environment = this.beans.environment;\r\n            for (const popup of this.popupList) {\r\n                environment.applyThemeClasses(popup.wrapper);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addEventListenersToPopup(\r\n        params: AddPopupParams & { wrapperEl: HTMLElement }\r\n    ): (popupParams?: PopupEventParams) => void {\r\n        const beans = this.beans;\r\n        const eDocument = _getDocument(beans);\r\n        const ePopupParent = this.getPopupParent();\r\n\r\n        const { wrapperEl, eChild: popupEl, closedCallback, afterGuiAttached, closeOnEsc, modal } = params;\r\n\r\n        let popupHidden = false;\r\n\r\n        const hidePopupOnKeyboardEvent = (event: KeyboardEvent) => {\r\n            if (!wrapperEl.contains(_getActiveDomElement(beans))) {\r\n                return;\r\n            }\r\n\r\n            const key = event.key;\r\n\r\n            if (key === KeyCode.ESCAPE && !_isStopPropagationForAgGrid(event)) {\r\n                removeListeners({ keyboardEvent: event });\r\n            }\r\n        };\r\n\r\n        const hidePopupOnMouseEvent = (event: MouseEvent) => removeListeners({ mouseEvent: event });\r\n        const hidePopupOnTouchEvent = (event: TouchEvent) => removeListeners({ touchEvent: event });\r\n\r\n        const removeListeners = (popupParams: PopupEventParams = {}) => {\r\n            const { mouseEvent, touchEvent, keyboardEvent, forceHide } = popupParams;\r\n            if (\r\n                !forceHide &&\r\n                // we don't hide popup if the event was on the child, or any\r\n                // children of this child\r\n                (this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) ||\r\n                    // this method should only be called once. the client can have different\r\n                    // paths, each one wanting to close, so this method may be called multiple times.\r\n                    popupHidden)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            popupHidden = true;\r\n\r\n            ePopupParent.removeChild(wrapperEl);\r\n\r\n            eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);\r\n            eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);\r\n            eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);\r\n            eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);\r\n\r\n            this.eventSvc.removeEventListener('dragStarted', hidePopupOnMouseEvent as any);\r\n\r\n            if (closedCallback) {\r\n                closedCallback(mouseEvent || touchEvent || keyboardEvent);\r\n            }\r\n\r\n            this.removePopupFromPopupList(popupEl);\r\n        };\r\n\r\n        if (afterGuiAttached) {\r\n            afterGuiAttached({ hidePopup: removeListeners });\r\n        }\r\n\r\n        // if we add these listeners now, then the current mouse\r\n        // click will be included, which we don't want\r\n        window.setTimeout(() => {\r\n            if (closeOnEsc) {\r\n                eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);\r\n            }\r\n\r\n            if (modal) {\r\n                eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);\r\n                this.eventSvc.addEventListener('dragStarted', hidePopupOnMouseEvent as any);\r\n                eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);\r\n                eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);\r\n            }\r\n        }, 0);\r\n\r\n        return removeListeners;\r\n    }\r\n\r\n    private addPopupToPopupList(\r\n        element: HTMLElement,\r\n        wrapperEl: HTMLElement,\r\n        removeListeners: (popupParams?: PopupEventParams) => void,\r\n        anchorToElement?: HTMLElement\r\n    ): void {\r\n        this.popupList.push({\r\n            element: element,\r\n            wrapper: wrapperEl,\r\n            hideFunc: removeListeners,\r\n            instanceId: instanceIdSeq++,\r\n            isAnchored: !!anchorToElement,\r\n        });\r\n\r\n        if (anchorToElement) {\r\n            this.setPopupPositionRelatedToElement(element, anchorToElement);\r\n        }\r\n    }\r\n\r\n    private getPopupIndex(el: HTMLElement): number {\r\n        return this.popupList.findIndex((p) => p.element === el);\r\n    }\r\n\r\n    public setPopupPositionRelatedToElement(\r\n        popupEl: HTMLElement,\r\n        relativeElement?: HTMLElement | null\r\n    ): AgPromise<() => void> | undefined {\r\n        const popupIndex = this.getPopupIndex(popupEl);\r\n\r\n        if (popupIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        const popup = this.popupList[popupIndex];\r\n\r\n        if (popup.stopAnchoringPromise) {\r\n            popup.stopAnchoringPromise.then((destroyFunc) => destroyFunc && destroyFunc());\r\n        }\r\n\r\n        popup.stopAnchoringPromise = undefined;\r\n        popup.isAnchored = false;\r\n\r\n        if (!relativeElement) {\r\n            return;\r\n        }\r\n\r\n        // keeps popup positioned under created, eg if context menu, if user scrolls\r\n        // using touchpad and the cell moves, it moves the popup to keep it with the cell.\r\n        const destroyPositionTracker = this.keepPopupPositionedRelativeTo({\r\n            element: relativeElement,\r\n            ePopup: popupEl,\r\n            hidePopup: popup.hideFunc,\r\n        });\r\n\r\n        popup.stopAnchoringPromise = destroyPositionTracker;\r\n        popup.isAnchored = true;\r\n\r\n        return destroyPositionTracker;\r\n    }\r\n\r\n    private removePopupFromPopupList(element: HTMLElement): void {\r\n        this.setAlignedStyles(element, null);\r\n        this.setPopupPositionRelatedToElement(element, null);\r\n\r\n        this.popupList = this.popupList.filter((p) => p.element !== element);\r\n    }\r\n\r\n    private keepPopupPositionedRelativeTo(params: {\r\n        ePopup: HTMLElement;\r\n        element: HTMLElement;\r\n        hidePopup: (params?: PopupEventParams) => void;\r\n    }): AgPromise<() => void> {\r\n        const eParent = this.getPopupParent();\r\n        const parentRect = eParent.getBoundingClientRect();\r\n\r\n        const { element, ePopup } = params;\r\n\r\n        const sourceRect = element.getBoundingClientRect();\r\n\r\n        const extractFromPixelValue = (pxSize: string) => parseInt(pxSize.substring(0, pxSize.length - 1), 10);\r\n        const createPosition = (prop: 'top' | 'left', direction: DIRECTION) => {\r\n            const initialDiff = parentRect[prop] - sourceRect[prop];\r\n            const initial = extractFromPixelValue(ePopup.style[prop]);\r\n            return {\r\n                initialDiff,\r\n                lastDiff: initialDiff,\r\n                initial,\r\n                last: initial,\r\n                direction,\r\n            };\r\n        };\r\n        const topPosition = createPosition('top', DIRECTION.vertical);\r\n        const leftPosition = createPosition('left', DIRECTION.horizontal);\r\n\r\n        const fwOverrides = this.beans.frameworkOverrides;\r\n        return new AgPromise<() => void>((resolve) => {\r\n            fwOverrides.wrapIncoming(() => {\r\n                fwOverrides\r\n                    .setInterval(() => {\r\n                        const pRect = eParent.getBoundingClientRect();\r\n                        const sRect = element.getBoundingClientRect();\r\n\r\n                        const elementNotInDom =\r\n                            sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;\r\n                        if (elementNotInDom) {\r\n                            params.hidePopup();\r\n                            return;\r\n                        }\r\n\r\n                        const calculateNewPosition = (position: Position, prop: 'top' | 'left') => {\r\n                            const current = extractFromPixelValue(ePopup.style[prop]);\r\n                            if (position.last !== current) {\r\n                                // some other process has moved the popup\r\n                                position.initial = current;\r\n                                position.last = current;\r\n                            }\r\n\r\n                            const currentDiff = pRect[prop] - sRect[prop];\r\n                            if (currentDiff != position.lastDiff) {\r\n                                const newValue = this.keepXYWithinBounds(\r\n                                    ePopup,\r\n                                    position.initial + position.initialDiff - currentDiff,\r\n                                    position.direction\r\n                                );\r\n                                ePopup.style[prop] = `${newValue}px`;\r\n                                position.last = newValue;\r\n                            }\r\n                            position.lastDiff = currentDiff;\r\n                        };\r\n                        calculateNewPosition(topPosition, 'top');\r\n                        calculateNewPosition(leftPosition, 'left');\r\n                    }, 200)\r\n                    .then((intervalId) => {\r\n                        const result = () => {\r\n                            if (intervalId != null) {\r\n                                window.clearInterval(intervalId);\r\n                            }\r\n                        };\r\n                        resolve(result);\r\n                    });\r\n            }, 'popupPositioning');\r\n        });\r\n    }\r\n\r\n    public hasAnchoredPopup(): boolean {\r\n        return this.popupList.some((popup) => popup.isAnchored);\r\n    }\r\n\r\n    private isEventFromCurrentPopup(params: PopupEventParams, target: HTMLElement): boolean {\r\n        const { mouseEvent, touchEvent } = params;\r\n\r\n        const event = mouseEvent ? mouseEvent : touchEvent;\r\n\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        const indexOfThisChild = this.getPopupIndex(target);\r\n\r\n        if (indexOfThisChild === -1) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = indexOfThisChild; i < this.popupList.length; i++) {\r\n            const popup = this.popupList[i];\r\n\r\n            if (_isElementInEventPath(popup.element, event)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // if the user did not write their own Custom Element to be rendered as popup\r\n        // and this component has an additional popup element, they should have the\r\n        // `ag-custom-component-popup` class to be detected as part of the Custom Component\r\n        return this.isElementWithinCustomPopup(event.target as HTMLElement);\r\n    }\r\n\r\n    public isElementWithinCustomPopup(el: HTMLElement): boolean {\r\n        const eDocument = _getDocument(this.beans);\r\n        while (el && el !== eDocument.body) {\r\n            if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {\r\n                return true;\r\n            }\r\n            el = el.parentElement;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getWrapper(ePopup: HTMLElement): HTMLElement | null {\r\n        while (!ePopup.classList.contains('ag-popup') && ePopup.parentElement) {\r\n            ePopup = ePopup.parentElement;\r\n        }\r\n\r\n        return ePopup.classList.contains('ag-popup') ? ePopup : null;\r\n    }\r\n\r\n    public setAlwaysOnTop(ePopup: HTMLElement, alwaysOnTop?: boolean): void {\r\n        const eWrapper = this.getWrapper(ePopup);\r\n\r\n        if (!eWrapper) {\r\n            return;\r\n        }\r\n\r\n        eWrapper.classList.toggle('ag-always-on-top', !!alwaysOnTop);\r\n\r\n        if (alwaysOnTop) {\r\n            this.bringPopupToFront(eWrapper);\r\n        }\r\n    }\r\n\r\n    /** @return true if moved */\r\n    public bringPopupToFront(ePopup: HTMLElement): void {\r\n        const parent = this.getPopupParent();\r\n        const popupList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));\r\n        const popupLen = popupList.length;\r\n\r\n        const eWrapper = this.getWrapper(ePopup);\r\n\r\n        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {\r\n            return;\r\n        }\r\n\r\n        const standardPopupList: HTMLElement[] = [];\r\n        const alwaysOnTopList: HTMLElement[] = [];\r\n\r\n        for (const popup of popupList) {\r\n            if (popup === eWrapper) {\r\n                continue;\r\n            }\r\n\r\n            if (popup.classList.contains('ag-always-on-top')) {\r\n                alwaysOnTopList.push(popup);\r\n            } else {\r\n                standardPopupList.push(popup);\r\n            }\r\n        }\r\n\r\n        const innerElsScrollMap: [HTMLElement, number][] = [];\r\n\r\n        const onTopLength = alwaysOnTopList.length;\r\n        const isPopupAlwaysOnTop = eWrapper.classList.contains('ag-always-on-top');\r\n        const shouldBeLast = isPopupAlwaysOnTop || !onTopLength;\r\n\r\n        const targetList: HTMLElement[] = shouldBeLast\r\n            ? [...standardPopupList, ...alwaysOnTopList, eWrapper]\r\n            : [...standardPopupList, eWrapper, ...alwaysOnTopList];\r\n\r\n        for (let i = 0; i <= popupLen; i++) {\r\n            const currentPopup = targetList[i];\r\n\r\n            if (popupList[i] === targetList[i] || currentPopup === eWrapper) {\r\n                continue;\r\n            }\r\n\r\n            const innerEls = currentPopup.querySelectorAll('div');\r\n            innerEls.forEach((el) => {\r\n                if (el.scrollTop !== 0) {\r\n                    innerElsScrollMap.push([el, el.scrollTop]);\r\n                }\r\n            });\r\n\r\n            if (i === 0) {\r\n                parent.insertAdjacentElement('afterbegin', currentPopup);\r\n            } else {\r\n                targetList[i - 1].insertAdjacentElement('afterend', currentPopup);\r\n            }\r\n        }\r\n\r\n        while (innerElsScrollMap.length) {\r\n            const currentEl = innerElsScrollMap.pop();\r\n            currentEl![0].scrollTop = currentEl![1];\r\n        }\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { PopupService } from './popupService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PopupModule: _ModuleWithoutApi = {\r\n    moduleName: 'Popup',\r\n    version: VERSION,\r\n    beans: [PopupService],\r\n};\r\n", "export const columnFiltersCSS = /*css*/ `.ag-set-filter{--ag-indentation-level:0}.ag-set-filter-item{align-items:center;display:flex;height:100%}:where(.ag-ltr) .ag-set-filter-item{padding-left:calc(var(--ag-widget-container-horizontal-padding) + var(--ag-indentation-level)*var(--ag-set-filter-indent-size))}:where(.ag-rtl) .ag-set-filter-item{padding-right:calc(var(--ag-widget-container-horizontal-padding) + var(--ag-indentation-level)*var(--ag-set-filter-indent-size))}.ag-set-filter-item-checkbox{display:flex;height:100%;width:100%}.ag-set-filter-group-icons{display:block;>*{cursor:pointer}}:where(.ag-ltr) .ag-set-filter-group-icons{margin-right:var(--ag-widget-container-horizontal-padding)}:where(.ag-rtl) .ag-set-filter-group-icons{margin-left:var(--ag-widget-container-horizontal-padding)}.ag-filter-body-wrapper{display:flex;flex-direction:column}:where(.ag-menu:not(.ag-tabs) .ag-filter) .ag-filter-body-wrapper,:where(.ag-menu:not(.ag-tabs) .ag-filter)>:not(.ag-filter-wrapper){min-width:180px}.ag-filter-filter{flex:1 1 0px}.ag-filter-condition{display:flex;justify-content:center}.ag-floating-filter-body{display:flex;flex:1 1 auto;height:100%;position:relative}.ag-floating-filter-full-body{align-items:center;display:flex;flex:1 1 auto;height:100%;overflow:hidden;width:100%}.ag-floating-filter-input{align-items:center;display:flex;width:100%;>*{flex:1 1 auto}:where(.ag-input-field-input[type=date]){width:1px}}.ag-floating-filter-button{display:flex;flex:none}.ag-set-floating-filter-input [disabled]{pointer-events:none}.ag-floating-filter-button-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;height:var(--ag-icon-size);width:var(--ag-icon-size)}.ag-filter-loading{background-color:var(--ag-chrome-background-color);height:100%;padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);position:absolute;width:100%;z-index:1;:where(.ag-menu) &{background-color:var(--ag-menu-background-color)}}.ag-filter-separator{border-top:1px solid var(--menu-separator-color)}:where(.ag-filter-select) .ag-picker-field-wrapper{width:0}.ag-filter-condition-operator{height:17px}:where(.ag-ltr) .ag-filter-condition-operator-or{margin-left:calc(var(--ag-spacing)*2)}:where(.ag-rtl) .ag-filter-condition-operator-or{margin-right:calc(var(--ag-spacing)*2)}.ag-set-filter-select-all{padding-top:var(--ag-widget-container-vertical-padding)}.ag-filter-no-matches,.ag-set-filter-list{height:calc(var(--ag-list-item-height)*6)}.ag-filter-no-matches{padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}.ag-set-filter-tree-list{height:calc(var(--ag-list-item-height)*10)}.ag-set-filter-filter{margin-left:var(--ag-widget-container-horizontal-padding);margin-right:var(--ag-widget-container-horizontal-padding);margin-top:var(--ag-widget-container-vertical-padding)}.ag-filter-to{margin-top:var(--ag-widget-vertical-spacing)}.ag-mini-filter{margin:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}:where(.ag-ltr) .ag-set-filter-add-group-indent{margin-left:calc(var(--ag-icon-size) + var(--ag-widget-container-horizontal-padding))}:where(.ag-rtl) .ag-set-filter-add-group-indent{margin-right:calc(var(--ag-icon-size) + var(--ag-widget-container-horizontal-padding))}:where(.ag-filter-menu) .ag-set-filter-list{min-width:200px}.ag-filter-virtual-list-item:focus-visible{box-shadow:inset var(--ag-focus-shadow)}.ag-filter-apply-panel{display:flex;justify-content:flex-end;overflow:hidden;padding:var(--ag-widget-vertical-spacing) var(--ag-widget-container-horizontal-padding) var(--ag-widget-container-vertical-padding)}.ag-filter-apply-panel-button{line-height:1.5}:where(.ag-ltr) .ag-filter-apply-panel-button{margin-left:calc(var(--ag-spacing)*2)}:where(.ag-rtl) .ag-filter-apply-panel-button{margin-right:calc(var(--ag-spacing)*2)}.ag-simple-filter-body-wrapper{display:flex;flex-direction:column;min-height:calc(var(--ag-list-item-height) + var(--ag-widget-container-vertical-padding) + var(--ag-widget-vertical-spacing));overflow-y:auto;padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);padding-bottom:calc(var(--ag-widget-container-vertical-padding) - var(--ag-widget-vertical-spacing));&>*{margin-bottom:var(--ag-widget-vertical-spacing)}:where(.ag-resizer-wrapper){margin:0}}.ag-multi-filter-menu-item{margin:var(--ag-spacing) 0}.ag-multi-filter-group-title-bar{background-color:transparent;color:var(--ag-header-text-color);font-weight:500;padding:calc(var(--ag-spacing)*1.5) var(--ag-spacing)}.ag-group-filter-field-select-wrapper{display:flex;flex-direction:column;gap:var(--ag-widget-vertical-spacing);padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}`;\n", "import type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { Column } from '../interfaces/iColumn';\r\nimport type { FilterModel, IFilter } from '../interfaces/iFilter';\r\nimport { _error } from '../validation/logging';\r\n\r\nexport function isColumnFilterPresent(beans: BeanCollection): boolean {\r\n    const filterManager = beans.filterManager;\r\n    return !!filterManager?.isColumnFilterPresent() || !!filterManager?.isAggregateFilterPresent();\r\n}\r\n\r\nexport function getColumnFilterInstance<TFilter extends IFilter>(\r\n    beans: BeanCollection,\r\n    key: string | Column\r\n): Promise<TFilter | null | undefined> {\r\n    return beans.filterManager?.getColumnFilterInstance(key as string | AgColumn) ?? Promise.resolve(undefined);\r\n}\r\n\r\nexport function destroyFilter(beans: BeanCollection, key: string | Column) {\r\n    const column = beans.colModel.getColDefCol(key);\r\n    if (column) {\r\n        return beans.filterManager?.destroyFilter(column, 'api');\r\n    }\r\n}\r\n\r\nexport function setFilterModel(beans: BeanCollection, model: FilterModel | null): void {\r\n    beans.frameworkOverrides.wrapIncoming(() => beans.filterManager?.setFilterModel(model));\r\n}\r\n\r\nexport function getFilterModel(beans: BeanCollection): FilterModel {\r\n    return beans.filterManager?.getFilterModel() ?? {};\r\n}\r\n\r\nexport function getColumnFilterModel<TModel>(beans: BeanCollection, column: string | Column): TModel | null {\r\n    return beans.filterManager?.getColumnFilterModel(column as string | AgColumn) ?? null;\r\n}\r\n\r\nexport function setColumnFilterModel<TModel>(\r\n    beans: BeanCollection,\r\n    column: string | Column,\r\n    model: TModel | null\r\n): Promise<void> {\r\n    return beans.filterManager?.setColumnFilterModel(column as string | AgColumn, model) ?? Promise.resolve();\r\n}\r\n\r\nexport function showColumnFilter(beans: BeanCollection, colKey: string | Column): void {\r\n    const column = beans.colModel.getCol(colKey);\r\n    if (!column) {\r\n        // Column not found, can't show filter\r\n        _error(12, { colKey });\r\n        return;\r\n    }\r\n    beans.menuSvc?.showFilterMenu({\r\n        column,\r\n        containerType: 'columnFilter',\r\n        positionBy: 'auto',\r\n    });\r\n}\r\n", "import { _unwrapUserComp } from '../components/framework/unwrapUserComp';\r\nimport {\r\n    _getFilterDetails,\r\n    _getFloatingFilterCompDetails,\r\n    _mergeFilterParamsWithApplicationProvidedParams,\r\n} from '../components/framework/userCompUtils';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanName } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColDef, ValueFormatterParams, ValueGetterParams } from '../entities/colDef';\r\nimport type {\r\n    CoreDataTypeDefinition,\r\n    DataTypeFormatValueFunc,\r\n    DateStringDataTypeDefinition,\r\n} from '../entities/dataType';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { ColumnEventType, FilterChangedEventSourceType } from '../events';\r\nimport { _getGroupAggFiltering, _isSetFilterByDefault } from '../gridOptionsUtils';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { FilterModel, IFilter, IFilterComp, IFilterParams } from '../interfaces/iFilter';\r\nimport type { UserCompDetails } from '../interfaces/iUserCompDetails';\r\nimport { _exists, _jsonEquals } from '../utils/generic';\r\nimport { AgPromise } from '../utils/promise';\r\nimport { _error, _warn } from '../validation/logging';\r\nimport type { IFloatingFilterParams, IFloatingFilterParentCallback } from './floating/floatingFilter';\r\nimport { _getDefaultFloatingFilterType } from './floating/floatingFilterMapper';\r\n\r\nconst MONTH_LOCALE_TEXT = {\r\n    january: 'January',\r\n    february: 'February',\r\n    march: 'March',\r\n    april: 'April',\r\n    may: 'May',\r\n    june: 'June',\r\n    july: 'July',\r\n    august: 'August',\r\n    september: 'September',\r\n    october: 'October',\r\n    november: 'November',\r\n    december: 'December',\r\n};\r\nconst MONTH_KEYS: (keyof typeof MONTH_LOCALE_TEXT)[] = [\r\n    'january',\r\n    'february',\r\n    'march',\r\n    'april',\r\n    'may',\r\n    'june',\r\n    'july',\r\n    'august',\r\n    'september',\r\n    'october',\r\n    'november',\r\n    'december',\r\n];\r\n\r\nfunction setFilterNumberComparator(a: string, b: string): number {\r\n    if (a == null) {\r\n        return -1;\r\n    }\r\n    if (b == null) {\r\n        return 1;\r\n    }\r\n    return parseFloat(a) - parseFloat(b);\r\n}\r\n\r\nexport class ColumnFilterService extends BeanStub implements NamedBean {\r\n    beanName: BeanName = 'colFilter';\r\n\r\n    private allColumnFilters = new Map<string, FilterWrapper>();\r\n    private allColumnListeners = new Map<string, (() => null) | undefined>();\r\n    private activeAggregateFilters: IFilterComp[] = [];\r\n    private activeColumnFilters: IFilterComp[] = [];\r\n\r\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\r\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\r\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\r\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\r\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\r\n    private processingFilterChange = false;\r\n\r\n    // when we're waiting for cell data types to be inferred, we need to defer filter model updates\r\n    private filterModelUpdateQueue: { model: FilterModel | null; source: FilterChangedEventSourceType }[] = [];\r\n    private columnFilterModelUpdateQueue: { key: string | AgColumn; model: any; resolve: () => void }[] = [];\r\n\r\n    private initialFilterModel: FilterModel;\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({\r\n            gridColumnsChanged: this.onColumnsChanged.bind(this),\r\n            beforeRefreshModel: ({ params }) => {\r\n                // We listen to both row data updated and treeData changed as the SetFilter needs it\r\n                if (params.rowDataUpdated || params.changedProps?.has('treeData')) {\r\n                    this.onNewRowsLoaded('rowDataUpdated');\r\n                }\r\n            },\r\n            dataTypesInferred: this.processFilterModelUpdateQueue.bind(this),\r\n        });\r\n\r\n        this.initialFilterModel = {\r\n            ...(this.gos.get('initialState')?.filter?.filterModel ?? {}),\r\n        };\r\n    }\r\n\r\n    public setFilterModel(model: FilterModel | null, source: FilterChangedEventSourceType = 'api'): void {\r\n        const { colModel, dataTypeSvc, filterManager } = this.beans;\r\n        if (dataTypeSvc?.isPendingInference) {\r\n            this.filterModelUpdateQueue.push({ model, source });\r\n            return;\r\n        }\r\n\r\n        const allPromises: AgPromise<void>[] = [];\r\n        const previousModel = this.getFilterModel(true);\r\n\r\n        if (model) {\r\n            // mark the filters as we set them, so any active filters left over we stop\r\n            const modelKeys = new Set(Object.keys(model));\r\n\r\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\r\n                const newModel = model[colId];\r\n\r\n                allPromises.push(setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));\r\n                modelKeys.delete(colId);\r\n            });\r\n\r\n            // at this point, processedFields contains data for which we don't have a filter working yet\r\n            modelKeys.forEach((colId) => {\r\n                const column = colModel.getColDefCol(colId) || colModel.getCol(colId);\r\n\r\n                if (!column) {\r\n                    _warn(62, { colId });\r\n                    return;\r\n                }\r\n\r\n                if (!column.isFilterAllowed()) {\r\n                    _warn(63, { colId });\r\n                    return;\r\n                }\r\n\r\n                const filterWrapper = this.getOrCreateFilterWrapper(column);\r\n                if (!filterWrapper) {\r\n                    _warn(64, { colId });\r\n                    return;\r\n                }\r\n                allPromises.push(setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));\r\n            });\r\n        } else {\r\n            this.allColumnFilters.forEach((filterWrapper) => {\r\n                allPromises.push(setModelOnFilterWrapper(filterWrapper.filterPromise, null));\r\n            });\r\n        }\r\n\r\n        AgPromise.all(allPromises).then(() => {\r\n            const currentModel = this.getFilterModel(true);\r\n\r\n            const columns: AgColumn[] = [];\r\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\r\n                const before = previousModel ? previousModel[colId] : null;\r\n                const after = currentModel ? currentModel[colId] : null;\r\n\r\n                if (!_jsonEquals(before, after)) {\r\n                    columns.push(filterWrapper.column);\r\n                }\r\n            });\r\n\r\n            if (columns.length > 0) {\r\n                filterManager?.onFilterChanged({ columns, source });\r\n            }\r\n        });\r\n    }\r\n\r\n    public getFilterModel(excludeInitialState?: boolean): FilterModel {\r\n        const result: FilterModel = {};\r\n\r\n        const {\r\n            allColumnFilters,\r\n            initialFilterModel,\r\n            beans: { colModel },\r\n        } = this;\r\n\r\n        allColumnFilters.forEach((filterWrapper, key) => {\r\n            const model = this.getModelFromFilterWrapper(filterWrapper);\r\n\r\n            if (_exists(model)) {\r\n                result[key] = model;\r\n            }\r\n        });\r\n\r\n        if (!excludeInitialState) {\r\n            Object.entries(initialFilterModel).forEach(([colId, model]) => {\r\n                if (_exists(model) && !allColumnFilters.has(colId) && colModel.getCol(colId)?.isFilterAllowed()) {\r\n                    result[colId] = model;\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getModelFromFilterWrapper(filterWrapper: FilterWrapper): any {\r\n        const { filter } = filterWrapper;\r\n        if (filter) {\r\n            if (typeof filter.getModel !== 'function') {\r\n                _warn(66);\r\n                return null;\r\n            }\r\n\r\n            return filter.getModel();\r\n        } else {\r\n            // filter still being created. return initial state if it exists and hasn't been applied yet\r\n            return this.getModelFromInitialState(filterWrapper.column);\r\n        }\r\n    }\r\n\r\n    private getModelFromInitialState(column: AgColumn): any {\r\n        return this.initialFilterModel[column.getColId()] ?? null;\r\n    }\r\n\r\n    public isColumnFilterPresent(): boolean {\r\n        return this.activeColumnFilters.length > 0;\r\n    }\r\n\r\n    public isAggregateFilterPresent(): boolean {\r\n        return !!this.activeAggregateFilters.length;\r\n    }\r\n\r\n    public disableColumnFilters(): boolean {\r\n        const { allColumnFilters } = this;\r\n        if (allColumnFilters.size) {\r\n            allColumnFilters.forEach((filterWrapper) =>\r\n                this.disposeFilterWrapper(filterWrapper, 'advancedFilterEnabled')\r\n            );\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public doAggregateFiltersPass(node: RowNode, filterToSkip?: IFilterComp) {\r\n        return this.doColumnFiltersPass(node, filterToSkip, true);\r\n    }\r\n\r\n    private updateActiveFilters(): AgPromise<void> {\r\n        const isFilterActive = (filter: IFilter | null) => {\r\n            if (!filter) {\r\n                return false;\r\n            } // this never happens, including to avoid compile error\r\n            if (!filter.isFilterActive) {\r\n                _warn(67);\r\n                return false;\r\n            }\r\n            return filter.isFilterActive();\r\n        };\r\n\r\n        const { colModel, gos } = this.beans;\r\n        const groupFilterEnabled = !!_getGroupAggFiltering(gos);\r\n\r\n        const isAggFilter = (column: AgColumn) => {\r\n            const isSecondary = !column.isPrimary();\r\n            // the only filters that can appear on secondary columns are groupAgg filters\r\n            if (isSecondary) {\r\n                return true;\r\n            }\r\n\r\n            const isShowingPrimaryColumns = !colModel.isPivotActive();\r\n            const isValueActive = column.isValueActive();\r\n\r\n            // primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns\r\n            if (!isValueActive || !isShowingPrimaryColumns) {\r\n                return false;\r\n            }\r\n\r\n            // from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true\r\n            if (colModel.isPivotMode()) {\r\n                // primary column is pretending to be a pivot column, ie pivotMode=true, but we are\r\n                // still showing primary columns\r\n                return true;\r\n            }\r\n            // we are not pivoting, so we groupFilter when it's an agg column\r\n            return groupFilterEnabled;\r\n        };\r\n\r\n        const activeAggregateFilters: IFilterComp[] = [];\r\n        const activeColumnFilters: IFilterComp[] = [];\r\n\r\n        return this.forEachColumnFilter((filter, filterWrapper) => {\r\n            const filterActive = isFilterActive(filter);\r\n            if (filterActive) {\r\n                if (isAggFilter(filterWrapper.column)) {\r\n                    activeAggregateFilters.push(filter!);\r\n                } else {\r\n                    activeColumnFilters.push(filter!);\r\n                }\r\n            }\r\n        }).then(() => {\r\n            this.activeAggregateFilters = activeAggregateFilters;\r\n            this.activeColumnFilters = activeColumnFilters;\r\n        });\r\n    }\r\n\r\n    private updateFilterFlagInColumns(\r\n        source: ColumnEventType,\r\n        additionalEventAttributes?: any\r\n    ): AgPromise<(void | null)[]> {\r\n        return this.forEachColumnFilter((filter, filterWrapper) =>\r\n            this.setColFilterActive(filterWrapper.column, filter!.isFilterActive(), source, additionalEventAttributes)\r\n        );\r\n    }\r\n\r\n    private forEachColumnFilter(\r\n        callback: (filter: IFilterComp | null, filterWrapper: FilterWrapper) => void\r\n    ): AgPromise<(void | null)[]> {\r\n        const promises: AgPromise<void>[] = [];\r\n        this.allColumnFilters.forEach((filterWrapper) => {\r\n            const filterPromise = filterWrapper.filterPromise;\r\n            if (filterPromise) {\r\n                promises.push(filterPromise.then((filter) => callback(filter, filterWrapper)));\r\n            }\r\n        });\r\n        return AgPromise.all(promises);\r\n    }\r\n\r\n    public doColumnFiltersPass(node: RowNode, filterToSkip?: IFilterComp, targetAggregates?: boolean): boolean {\r\n        const { data, aggData } = node;\r\n\r\n        const targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;\r\n        const targetedData = targetAggregates ? aggData : data;\r\n        for (let i = 0; i < targetedFilters.length; i++) {\r\n            const filter = targetedFilters[i];\r\n\r\n            if (filter == null || filter === filterToSkip) {\r\n                continue;\r\n            }\r\n\r\n            if (typeof filter.doesFilterPass !== 'function') {\r\n                // because users can do custom filters, give nice error message\r\n                _error(91);\r\n                continue;\r\n            }\r\n\r\n            if (!filter.doesFilterPass({ node, data: targetedData })) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle\r\n    // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.\r\n    // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)\r\n    // which results in React State getting applied in the main application, triggering a useEffect() to\r\n    // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was\r\n    // getting it's useEffect() triggered in this way.\r\n    private callOnFilterChangedOutsideRenderCycle(params: {\r\n        source?: FilterChangedEventSourceType;\r\n        filterInstance?: IFilterComp;\r\n        additionalEventAttributes?: any;\r\n        columns?: AgColumn[];\r\n    }): void {\r\n        const { rowRenderer, filterManager } = this.beans;\r\n        const action = () => {\r\n            if (this.isAlive()) {\r\n                filterManager?.onFilterChanged(params);\r\n            }\r\n        };\r\n        if (rowRenderer.isRefreshInProgress()) {\r\n            setTimeout(action, 0);\r\n        } else {\r\n            action();\r\n        }\r\n    }\r\n\r\n    public updateBeforeFilterChanged(\r\n        params: {\r\n            filterInstance?: IFilterComp;\r\n            additionalEventAttributes?: any;\r\n        } = {}\r\n    ): AgPromise<void> {\r\n        const { filterInstance, additionalEventAttributes } = params;\r\n\r\n        this.updateDependentFilters();\r\n        return this.updateActiveFilters().then(() =>\r\n            this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes).then(() => {\r\n                this.allColumnFilters.forEach((filterWrapper) => {\r\n                    if (!filterWrapper.filterPromise) {\r\n                        return;\r\n                    }\r\n                    filterWrapper.filterPromise.then((filter) => {\r\n                        if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {\r\n                            filter!.onAnyFilterChanged();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                // because internal events are not async in ag-grid, when the dispatchEvent\r\n                // method comes back, we know all listeners have finished executing.\r\n                this.processingFilterChange = true;\r\n            })\r\n        ) as AgPromise<void>;\r\n    }\r\n\r\n    public updateAfterFilterChanged(): void {\r\n        this.processingFilterChange = false;\r\n    }\r\n\r\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\r\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\r\n        // changes when filtering\r\n        const allowShowChangeAfterFilter = this.gos.get('allowShowChangeAfterFilter') ?? false;\r\n        return !allowShowChangeAfterFilter && this.processingFilterChange;\r\n    }\r\n\r\n    private onNewRowsLoaded(source: ColumnEventType): void {\r\n        this.forEachColumnFilter((filter) => {\r\n            filter!.onNewRowsLoaded?.();\r\n        })\r\n            .then(() => this.updateFilterFlagInColumns(source, { afterDataChange: true }))\r\n            .then(() => this.updateActiveFilters());\r\n    }\r\n\r\n    private createGetValue(filterColumn: AgColumn): IFilterParams['getValue'] {\r\n        const { filterValueSvc, colModel } = this.beans;\r\n        return (rowNode, column) => {\r\n            const columnToUse = column ? colModel.getCol(column) : filterColumn;\r\n            return columnToUse ? filterValueSvc!.getValue(columnToUse, rowNode) : undefined;\r\n        };\r\n    }\r\n\r\n    public isFilterActive(column: AgColumn): boolean {\r\n        const { filter } = this.cachedFilter(column) ?? {};\r\n        if (filter) {\r\n            return filter.isFilterActive();\r\n        }\r\n        // if not created, should only be active if there's a model\r\n        return this.getModelFromInitialState(column) != null;\r\n    }\r\n\r\n    public getOrCreateFilterWrapper(column: AgColumn): FilterWrapper | null {\r\n        if (!column.isFilterAllowed()) {\r\n            return null;\r\n        }\r\n\r\n        let filterWrapper = this.cachedFilter(column);\r\n\r\n        if (!filterWrapper) {\r\n            filterWrapper = this.createFilterWrapper(column);\r\n            this.setColumnFilterWrapper(column, filterWrapper);\r\n        }\r\n\r\n        return filterWrapper;\r\n    }\r\n\r\n    private cachedFilter(column: AgColumn): FilterWrapper | undefined {\r\n        return this.allColumnFilters.get(column.getColId());\r\n    }\r\n\r\n    private getDefaultFilter(column: AgColumn): string {\r\n        let defaultFilter;\r\n        const { gos, dataTypeSvc } = this.beans;\r\n        if (_isSetFilterByDefault(gos)) {\r\n            defaultFilter = 'agSetColumnFilter';\r\n        } else {\r\n            const cellDataType = dataTypeSvc?.getBaseDataType(column);\r\n            if (cellDataType === 'number') {\r\n                defaultFilter = 'agNumberColumnFilter';\r\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\r\n                defaultFilter = 'agDateColumnFilter';\r\n            } else {\r\n                defaultFilter = 'agTextColumnFilter';\r\n            }\r\n        }\r\n        return defaultFilter;\r\n    }\r\n\r\n    public getDefaultFloatingFilter(column: AgColumn): string {\r\n        let defaultFloatingFilterType: string;\r\n        const { gos, dataTypeSvc } = this.beans;\r\n        if (_isSetFilterByDefault(gos)) {\r\n            defaultFloatingFilterType = 'agSetColumnFloatingFilter';\r\n        } else {\r\n            const cellDataType = dataTypeSvc?.getBaseDataType(column);\r\n            if (cellDataType === 'number') {\r\n                defaultFloatingFilterType = 'agNumberColumnFloatingFilter';\r\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\r\n                defaultFloatingFilterType = 'agDateColumnFloatingFilter';\r\n            } else {\r\n                defaultFloatingFilterType = 'agTextColumnFloatingFilter';\r\n            }\r\n        }\r\n        return defaultFloatingFilterType;\r\n    }\r\n\r\n    private createFilterInstance(\r\n        column: AgColumn,\r\n        filterWrapper?: FilterWrapper\r\n    ): {\r\n        filterPromise: (() => AgPromise<IFilterComp> | null) | null;\r\n        compDetails: UserCompDetails | null;\r\n    } {\r\n        const defaultFilter = this.getDefaultFilter(column);\r\n\r\n        const colDef = column.getColDef();\r\n\r\n        let filterInstance: IFilterComp;\r\n        const params: IFilterParams = {\r\n            ...this.createFilterParams(column, colDef),\r\n            filterModifiedCallback: () => this.filterModifiedCallbackFactory(filterInstance, column)(),\r\n            filterChangedCallback: (additionalEventAttributes?: any) =>\r\n                this.filterChangedCallbackFactory(filterInstance, column)(additionalEventAttributes),\r\n            doesRowPassOtherFilter: (node) =>\r\n                this.beans.filterManager?.doesRowPassOtherFilters(filterInstance, node) ?? true,\r\n        };\r\n\r\n        const compDetails = _getFilterDetails(this.beans.userCompFactory, colDef, params, defaultFilter);\r\n        if (!compDetails) {\r\n            return { filterPromise: null, compDetails: null };\r\n        }\r\n        return {\r\n            filterPromise: () => {\r\n                const filterPromise = compDetails.newAgStackInstance();\r\n                filterPromise.then((r) => {\r\n                    filterInstance = r!;\r\n                    if (filterWrapper) {\r\n                        filterWrapper.filter = r ?? undefined;\r\n                    }\r\n                });\r\n                return filterPromise;\r\n            },\r\n            compDetails,\r\n        };\r\n    }\r\n\r\n    public createFilterParams(column: AgColumn, colDef: ColDef): IFilterParams {\r\n        const params: IFilterParams = this.gos.addGridCommonParams({\r\n            column,\r\n            colDef,\r\n            rowModel: this.beans.rowModel,\r\n            filterChangedCallback: () => {},\r\n            filterModifiedCallback: () => {},\r\n            getValue: this.createGetValue(column),\r\n            doesRowPassOtherFilter: () => true,\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    private createFilterWrapper(column: AgColumn): FilterWrapper {\r\n        const filterWrapper: FilterWrapper = {\r\n            column,\r\n            filterPromise: null,\r\n            compDetails: null,\r\n        };\r\n\r\n        const { filterPromise, compDetails } = this.createFilterInstance(column, filterWrapper);\r\n        filterWrapper.filterPromise = filterPromise?.() ?? null;\r\n        filterWrapper.compDetails = compDetails;\r\n\r\n        return filterWrapper;\r\n    }\r\n\r\n    private onColumnsChanged(): void {\r\n        const columns: AgColumn[] = [];\r\n        const { colModel, filterManager } = this.beans;\r\n\r\n        this.allColumnFilters.forEach((wrapper, colId) => {\r\n            let currentColumn: AgColumn | null;\r\n            if (wrapper.column.isPrimary()) {\r\n                currentColumn = colModel.getColDefCol(colId);\r\n            } else {\r\n                currentColumn = colModel.getCol(colId);\r\n            }\r\n            // group columns can be recreated with the same colId\r\n            if (currentColumn && currentColumn === wrapper.column) {\r\n                return;\r\n            }\r\n\r\n            columns.push(wrapper.column);\r\n            this.disposeFilterWrapper(wrapper, 'columnChanged');\r\n            this.disposeColumnListener(colId);\r\n        });\r\n\r\n        const allFiltersAreGroupFilters = columns.every(\r\n            (column) => column.getColDef().filter === 'agGroupColumnFilter'\r\n        );\r\n        // don't call `onFilterChanged` if only group column filter is present as it has no model\r\n        if (columns.length > 0 && !allFiltersAreGroupFilters) {\r\n            // When a filter changes as a side effect of a column changes,\r\n            // we report 'api' as the source, so that the client can distinguish\r\n            filterManager?.onFilterChanged({ columns, source: 'api' });\r\n        } else {\r\n            // onFilterChanged does this already\r\n            this.updateDependentFilters();\r\n        }\r\n    }\r\n\r\n    private updateDependentFilters(): void {\r\n        // Group column filters can be dependant on underlying column filters, but don't normally get created until they're used for the first time.\r\n        // Instead, create them by default when any filter changes.\r\n        this.beans.autoColSvc?.getAutoCols()?.forEach((groupColumn) => {\r\n            if (groupColumn.getColDef().filter === 'agGroupColumnFilter') {\r\n                this.getOrCreateFilterWrapper(groupColumn);\r\n            }\r\n        });\r\n    }\r\n\r\n    // for group filters, can change dynamically whether they are allowed or not\r\n    public isFilterAllowed(column: AgColumn): boolean {\r\n        const isFilterAllowed = column.isFilterAllowed();\r\n        if (!isFilterAllowed) {\r\n            return false;\r\n        }\r\n        const { filter } = this.allColumnFilters.get(column.getColId()) ?? {};\r\n        if (filter) {\r\n            // defer to filter component isFilterAllowed if it exists\r\n            return typeof (filter as any)?.isFilterAllowed === 'function' ? (filter as any).isFilterAllowed() : true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getFloatingFilterCompDetails(column: AgColumn, showParentFilter: () => void): UserCompDetails | undefined {\r\n        const parentFilterInstance = (callback: IFloatingFilterParentCallback<IFilter>) => {\r\n            const filterComponent = this.getOrCreateFilterWrapper(column)?.filterPromise;\r\n\r\n            if (filterComponent == null) {\r\n                return;\r\n            }\r\n\r\n            filterComponent.then((instance) => {\r\n                callback(_unwrapUserComp(instance!));\r\n            });\r\n        };\r\n\r\n        const colDef = column.getColDef();\r\n        const filterParams = {\r\n            ...this.createFilterParams(column, colDef),\r\n            filterChangedCallback: () =>\r\n                parentFilterInstance((filterInstance) =>\r\n                    this.filterChangedCallbackFactory(filterInstance as IFilterComp, column)()\r\n                ),\r\n        };\r\n        const { userCompFactory, frameworkOverrides } = this.beans;\r\n        const finalFilterParams = _mergeFilterParamsWithApplicationProvidedParams(\r\n            userCompFactory,\r\n            colDef,\r\n            filterParams\r\n        );\r\n\r\n        let defaultFloatingFilterType = _getDefaultFloatingFilterType(frameworkOverrides, colDef, () =>\r\n            this.getDefaultFloatingFilter(column)\r\n        );\r\n\r\n        if (defaultFloatingFilterType == null) {\r\n            defaultFloatingFilterType = 'agReadOnlyFloatingFilter';\r\n        }\r\n\r\n        const params: WithoutGridCommon<IFloatingFilterParams<IFilter>> = {\r\n            column: column,\r\n            filterParams: finalFilterParams,\r\n            currentParentModel: () => this.getCurrentFloatingFilterParentModel(column),\r\n            parentFilterInstance,\r\n            showParentFilter,\r\n        };\r\n\r\n        return _getFloatingFilterCompDetails(userCompFactory, colDef, params, defaultFloatingFilterType);\r\n    }\r\n\r\n    public getCurrentFloatingFilterParentModel(column: AgColumn): any {\r\n        return this.getModelFromFilterWrapper(this.cachedFilter(column) ?? ({ column } as FilterWrapper));\r\n    }\r\n\r\n    // destroys the filter, so it no longer takes part\r\n    public destroyFilter(column: AgColumn, source: 'api' | 'columnChanged' | 'paramsUpdated' = 'api'): void {\r\n        const colId = column.getColId();\r\n        const filterWrapper = this.allColumnFilters.get(colId);\r\n\r\n        this.disposeColumnListener(colId);\r\n\r\n        delete this.initialFilterModel[colId];\r\n\r\n        if (filterWrapper) {\r\n            this.disposeFilterWrapper(filterWrapper, source);\r\n            this.beans.filterManager?.onFilterChanged({\r\n                columns: [column],\r\n                source: 'api',\r\n            });\r\n        }\r\n    }\r\n\r\n    private disposeColumnListener(colId: string): void {\r\n        const columnListener = this.allColumnListeners.get(colId);\r\n\r\n        if (columnListener) {\r\n            this.allColumnListeners.delete(colId);\r\n            columnListener();\r\n        }\r\n    }\r\n\r\n    private disposeFilterWrapper(\r\n        filterWrapper: FilterWrapper,\r\n        source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated'\r\n    ): void {\r\n        filterWrapper.filterPromise?.then((filter) => {\r\n            this.destroyBean(filter);\r\n\r\n            this.setColFilterActive(filterWrapper.column, false, 'filterDestroyed');\r\n\r\n            this.allColumnFilters.delete(filterWrapper.column.getColId());\r\n\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'filterDestroyed',\r\n                source,\r\n                column: filterWrapper.column,\r\n            });\r\n        });\r\n    }\r\n\r\n    private filterModifiedCallbackFactory(filter: IFilterComp<any>, column: AgColumn<any>) {\r\n        return () => {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'filterModified',\r\n                column,\r\n                filterInstance: filter,\r\n            });\r\n        };\r\n    }\r\n\r\n    private filterChangedCallbackFactory(filter: IFilterComp<any>, column: AgColumn<any>) {\r\n        return (additionalEventAttributes?: any) => {\r\n            const source: FilterChangedEventSourceType = additionalEventAttributes?.source ?? 'columnFilter';\r\n            const params = {\r\n                filter,\r\n                additionalEventAttributes,\r\n                columns: [column],\r\n                source,\r\n            };\r\n            this.callOnFilterChangedOutsideRenderCycle(params);\r\n        };\r\n    }\r\n\r\n    private checkDestroyFilter(colId: string): void {\r\n        const filterWrapper = this.allColumnFilters.get(colId);\r\n        if (!filterWrapper) {\r\n            return;\r\n        }\r\n\r\n        const column = filterWrapper.column;\r\n        const { compDetails } = column.isFilterAllowed() ? this.createFilterInstance(column) : { compDetails: null };\r\n\r\n        // Case when filter component changes\r\n        if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {\r\n            this.destroyFilter(column, 'paramsUpdated');\r\n            return;\r\n        }\r\n\r\n        // Case when filter params changes\r\n        const newFilterParams = column.getColDef().filterParams;\r\n        // When filter wrapper does not have promise to retrieve FilterComp, destroy\r\n        if (!filterWrapper.filterPromise) {\r\n            this.destroyFilter(column, 'paramsUpdated');\r\n            return;\r\n        }\r\n\r\n        // Otherwise - Check for refresh method before destruction\r\n        // If refresh() method is implemented - call it and destroy filter if it returns false\r\n        // Otherwise - do nothing ( filter will not be destroyed - we assume new params are compatible with old ones )\r\n\r\n        filterWrapper.filterPromise.then((filter) => {\r\n            const shouldRefreshFilter = filter?.refresh\r\n                ? filter.refresh({\r\n                      ...this.createFilterParams(column, column.getColDef()),\r\n                      filterModifiedCallback: this.filterModifiedCallbackFactory(filter, column),\r\n                      filterChangedCallback: this.filterChangedCallbackFactory(filter, column),\r\n                      doesRowPassOtherFilter: (node) =>\r\n                          this.beans.filterManager?.doesRowPassOtherFilters(filter, node) ?? true,\r\n                      ...newFilterParams,\r\n                  })\r\n                : true;\r\n            // framework wrapper always implements optional methods, but returns null if no underlying method\r\n            if (shouldRefreshFilter === false) {\r\n                this.destroyFilter(column, 'paramsUpdated');\r\n            }\r\n        });\r\n    }\r\n\r\n    private setColumnFilterWrapper(column: AgColumn, filterWrapper: FilterWrapper): void {\r\n        const colId = column.getColId();\r\n        this.allColumnFilters.set(colId, filterWrapper);\r\n        this.allColumnListeners.set(\r\n            colId,\r\n            this.addManagedListeners(column, { colDefChanged: () => this.checkDestroyFilter(colId) })[0]\r\n        );\r\n    }\r\n\r\n    public areFilterCompsDifferent(\r\n        oldCompDetails: UserCompDetails | null,\r\n        newCompDetails: UserCompDetails | null\r\n    ): boolean {\r\n        if (!newCompDetails || !oldCompDetails) {\r\n            return true;\r\n        }\r\n        const { componentClass: oldComponentClass } = oldCompDetails;\r\n        const { componentClass: newComponentClass } = newCompDetails;\r\n        const isSameComponentClass =\r\n            oldComponentClass === newComponentClass ||\r\n            // react hooks returns new wrappers, so check nested render method\r\n            (oldComponentClass?.render &&\r\n                newComponentClass?.render &&\r\n                oldComponentClass.render === newComponentClass.render);\r\n        return !isSameComponentClass;\r\n    }\r\n\r\n    public hasFloatingFilters(): boolean {\r\n        const gridColumns = this.beans.colModel.getCols();\r\n        return gridColumns.some((col) => col.getColDef().floatingFilter);\r\n    }\r\n\r\n    public getColumnFilterInstance<TFilter extends IFilter>(\r\n        key: string | AgColumn\r\n    ): Promise<TFilter | null | undefined> {\r\n        return new Promise((resolve) => {\r\n            this.getFilterInstanceImpl(key).then((filter) => {\r\n                resolve(_unwrapUserComp(filter) as any);\r\n            });\r\n        });\r\n    }\r\n\r\n    private getFilterInstanceImpl(key: string | AgColumn): AgPromise<IFilter | null | undefined> {\r\n        const column = this.beans.colModel.getColDefCol(key);\r\n\r\n        if (!column) {\r\n            return AgPromise.resolve(undefined);\r\n        }\r\n\r\n        const filterPromise = this.getOrCreateFilterWrapper(column)?.filterPromise;\r\n        return filterPromise ?? AgPromise.resolve(null);\r\n    }\r\n\r\n    private processFilterModelUpdateQueue(): void {\r\n        this.filterModelUpdateQueue.forEach(({ model, source }) => this.setFilterModel(model, source));\r\n        this.filterModelUpdateQueue = [];\r\n        this.columnFilterModelUpdateQueue.forEach(({ key, model, resolve }) => {\r\n            this.setColumnFilterModel(key, model).then(() => resolve());\r\n        });\r\n        this.columnFilterModelUpdateQueue = [];\r\n    }\r\n\r\n    public getColumnFilterModel(key: string | AgColumn): any {\r\n        const filterWrapper = this.getFilterWrapper(key);\r\n        return filterWrapper ? this.getModelFromFilterWrapper(filterWrapper) : null;\r\n    }\r\n\r\n    public setColumnFilterModel(key: string | AgColumn, model: any): Promise<void> {\r\n        const { colModel, dataTypeSvc } = this.beans;\r\n        if (dataTypeSvc?.isPendingInference) {\r\n            let resolve: () => void = () => {};\r\n            const promise = new Promise<void>((res) => {\r\n                resolve = res;\r\n            });\r\n            this.columnFilterModelUpdateQueue.push({ key, model, resolve });\r\n            return promise;\r\n        }\r\n\r\n        const column = colModel.getColDefCol(key);\r\n        const filterWrapper = column ? this.getOrCreateFilterWrapper(column) : null;\r\n        const convertPromise = <T>(promise: AgPromise<T>): Promise<T> => {\r\n            return new Promise((resolve) => {\r\n                promise.then((result) => resolve(result!));\r\n            });\r\n        };\r\n        return filterWrapper\r\n            ? convertPromise(setModelOnFilterWrapper(filterWrapper.filterPromise, model))\r\n            : Promise.resolve();\r\n    }\r\n\r\n    private getFilterWrapper(key: string | AgColumn): FilterWrapper | null {\r\n        const column = this.beans.colModel.getColDefCol(key);\r\n        return column ? this.cachedFilter(column) ?? null : null;\r\n    }\r\n\r\n    public setColDefPropertiesForDataType(\r\n        colDef: ColDef,\r\n        dataTypeDefinition: CoreDataTypeDefinition,\r\n        formatValue: DataTypeFormatValueFunc\r\n    ): void {\r\n        const usingSetFilter = _isSetFilterByDefault(this.gos);\r\n        const translate = this.getLocaleTextFunc();\r\n        const mergeFilterParams = (params: any) => {\r\n            const { filterParams } = colDef;\r\n            colDef.filterParams =\r\n                typeof filterParams === 'object'\r\n                    ? {\r\n                          ...filterParams,\r\n                          ...params,\r\n                      }\r\n                    : params;\r\n        };\r\n        switch (dataTypeDefinition.baseDataType) {\r\n            case 'number': {\r\n                if (usingSetFilter) {\r\n                    mergeFilterParams({\r\n                        comparator: setFilterNumberComparator,\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n            case 'boolean': {\r\n                if (usingSetFilter) {\r\n                    mergeFilterParams({\r\n                        valueFormatter: (params: ValueFormatterParams) => {\r\n                            if (!_exists(params.value)) {\r\n                                return translate('blanks', '(Blanks)');\r\n                            }\r\n                            return translate(String(params.value), params.value ? 'True' : 'False');\r\n                        },\r\n                    });\r\n                } else {\r\n                    mergeFilterParams({\r\n                        maxNumConditions: 1,\r\n                        debounceMs: 0,\r\n                        filterOptions: [\r\n                            'empty',\r\n                            {\r\n                                displayKey: 'true',\r\n                                displayName: 'True',\r\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue,\r\n                                numberOfInputs: 0,\r\n                            },\r\n                            {\r\n                                displayKey: 'false',\r\n                                displayName: 'False',\r\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue === false,\r\n                                numberOfInputs: 0,\r\n                            },\r\n                        ],\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n            case 'date': {\r\n                if (usingSetFilter) {\r\n                    mergeFilterParams({\r\n                        valueFormatter: (params: ValueFormatterParams) => {\r\n                            const valueFormatted = formatValue(params);\r\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\r\n                        },\r\n                        treeList: true,\r\n                        treeListFormatter: (pathKey: string | null, level: number) => {\r\n                            if (level === 1 && pathKey != null) {\r\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\r\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\r\n                            }\r\n                            return pathKey ?? translate('blanks', '(Blanks)');\r\n                        },\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n            case 'dateString': {\r\n                const convertToDate = (dataTypeDefinition as DateStringDataTypeDefinition).dateParser!;\r\n                if (usingSetFilter) {\r\n                    mergeFilterParams({\r\n                        valueFormatter: (params: ValueFormatterParams) => {\r\n                            const valueFormatted = formatValue(params);\r\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\r\n                        },\r\n                        treeList: true,\r\n                        treeListPathGetter: (value: string | null) => {\r\n                            const date = convertToDate(value ?? undefined);\r\n                            return date\r\n                                ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())]\r\n                                : null;\r\n                        },\r\n                        treeListFormatter: (pathKey: string | null, level: number) => {\r\n                            if (level === 1 && pathKey != null) {\r\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\r\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\r\n                            }\r\n                            return pathKey ?? translate('blanks', '(Blanks)');\r\n                        },\r\n                    });\r\n                } else {\r\n                    mergeFilterParams({\r\n                        comparator: (filterDate: Date, cellValue: string | undefined) => {\r\n                            const cellAsDate = convertToDate(cellValue)!;\r\n                            if (cellValue == null || cellAsDate < filterDate) {\r\n                                return -1;\r\n                            }\r\n                            if (cellAsDate > filterDate) {\r\n                                return 1;\r\n                            }\r\n                            return 0;\r\n                        },\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n            case 'object': {\r\n                if (usingSetFilter) {\r\n                    mergeFilterParams({\r\n                        valueFormatter: (params: ValueFormatterParams) => {\r\n                            const valueFormatted = formatValue(params);\r\n                            return _exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\r\n                        },\r\n                    });\r\n                } else {\r\n                    colDef.filterValueGetter = (params: ValueGetterParams) =>\r\n                        formatValue({\r\n                            column: params.column,\r\n                            node: params.node,\r\n                            value: this.beans.valueSvc.getValue(params.column as AgColumn, params.node),\r\n                        });\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\r\n    public setColFilterActive(\r\n        column: AgColumn,\r\n        active: boolean,\r\n        source: ColumnEventType,\r\n        additionalEventAttributes?: any\r\n    ): void {\r\n        if (column.filterActive !== active) {\r\n            column.filterActive = active;\r\n            column.dispatchColEvent('filterActiveChanged', source);\r\n        }\r\n        column.dispatchColEvent('filterChanged', source, additionalEventAttributes);\r\n    }\r\n\r\n    public override destroy() {\r\n        super.destroy();\r\n        this.allColumnFilters.forEach((filterWrapper) => this.disposeFilterWrapper(filterWrapper, 'gridDestroyed'));\r\n        // don't need to destroy the listeners as they are managed listeners\r\n        this.allColumnListeners.clear();\r\n    }\r\n}\r\n\r\nfunction setModelOnFilterWrapper(filterPromise: AgPromise<IFilterComp> | null, newModel: any): AgPromise<void> {\r\n    if (!filterPromise) {\r\n        return AgPromise.resolve();\r\n    }\r\n    return new AgPromise<void>((resolve) => {\r\n        filterPromise.then((filter) => {\r\n            if (typeof filter!.setModel !== 'function') {\r\n                _warn(65);\r\n                resolve();\r\n            }\r\n\r\n            (filter!.setModel(newModel) || AgPromise.resolve()).then(() => resolve());\r\n        });\r\n    });\r\n}\r\n\r\nexport interface FilterWrapper {\r\n    column: AgColumn;\r\n    filterPromise: AgPromise<IFilterComp> | null;\r\n    filter?: IFilterComp;\r\n    compDetails: UserCompDetails | null;\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { FilterChangedEventSourceType } from '../events';\r\n\r\nexport function isAnyFilterPresent(beans: BeanCollection): boolean {\r\n    return !!beans.filterManager?.isAnyFilterPresent();\r\n}\r\n\r\nexport function onFilterChanged(beans: BeanCollection, source: FilterChangedEventSourceType = 'api') {\r\n    beans.filterManager?.onFilterChanged({ source });\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { CoreDataTypeDefinition, DataTypeFormatValueFunc } from '../entities/dataType';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { FilterChangedEvent, FilterChangedEventSourceType } from '../events';\r\nimport { _getGroupAggFiltering } from '../gridOptionsUtils';\r\nimport type { AdvancedFilterModel } from '../interfaces/advancedFilterModel';\r\nimport type { IAdvancedFilterService } from '../interfaces/iAdvancedFilterService';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { FilterModel, IFilter, IFilterComp, IFilterParams } from '../interfaces/iFilter';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport type { UserCompDetails } from '../interfaces/iUserCompDetails';\r\nimport { _mergeDeep } from '../utils/object';\r\nimport { AgPromise } from '../utils/promise';\r\nimport { _warn } from '../validation/logging';\r\nimport type { ColumnFilterService, FilterWrapper } from './columnFilterService';\r\nimport type { QuickFilterService } from './quickFilterService';\r\n\r\nexport class FilterManager extends BeanStub implements NamedBean {\r\n    beanName = 'filterManager' as const;\r\n\r\n    private quickFilter?: QuickFilterService;\r\n    private advancedFilter: IAdvancedFilterService;\r\n    private colFilter?: ColumnFilterService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.quickFilter = beans.quickFilter;\r\n        this.advancedFilter = beans.advancedFilter;\r\n        this.colFilter = beans.colFilter;\r\n    }\r\n\r\n    // A cached version of gridOptions.isExternalFilterPresent so its not called for every row\r\n    private externalFilterPresent: boolean;\r\n\r\n    private aggFiltering: boolean;\r\n\r\n    // when we're waiting for cell data types to be inferred, we need to defer filter model updates\r\n    private advFilterModelUpdateQueue: (AdvancedFilterModel | null | undefined)[] = [];\r\n\r\n    private alwaysPassFilter?: (rowNode: IRowNode) => boolean;\r\n\r\n    public postConstruct(): void {\r\n        const refreshFiltersForAggregations = this.refreshFiltersForAggregations.bind(this);\r\n        const updateAdvFilterColumns = this.updateAdvFilterColumns.bind(this);\r\n        this.addManagedEventListeners({\r\n            columnValueChanged: refreshFiltersForAggregations,\r\n            columnPivotChanged: refreshFiltersForAggregations,\r\n            columnPivotModeChanged: refreshFiltersForAggregations,\r\n            newColumnsLoaded: updateAdvFilterColumns,\r\n            columnVisible: updateAdvFilterColumns,\r\n            advancedFilterEnabledChanged: ({ enabled }) => this.onAdvFilterEnabledChanged(enabled),\r\n            dataTypesInferred: this.processFilterModelUpdateQueue.bind(this),\r\n        });\r\n\r\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\r\n        this.addManagedPropertyListeners(['isExternalFilterPresent', 'doesExternalFilterPass'], () => {\r\n            this.onFilterChanged({ source: 'api' });\r\n        });\r\n\r\n        this.updateAggFiltering();\r\n        this.addManagedPropertyListener('groupAggFiltering', () => {\r\n            this.updateAggFiltering();\r\n            this.onFilterChanged();\r\n        });\r\n\r\n        if (this.quickFilter) {\r\n            this.addManagedListeners(this.quickFilter, {\r\n                quickFilterChanged: () => this.onFilterChanged({ source: 'quickFilter' }),\r\n            });\r\n        }\r\n\r\n        const { gos } = this;\r\n        this.alwaysPassFilter = gos.get('alwaysPassFilter');\r\n        this.addManagedPropertyListener('alwaysPassFilter', () => {\r\n            this.alwaysPassFilter = gos.get('alwaysPassFilter');\r\n            this.onFilterChanged({ source: 'api' });\r\n        });\r\n    }\r\n\r\n    private isExternalFilterPresentCallback() {\r\n        const isFilterPresent = this.gos.getCallback('isExternalFilterPresent');\r\n        return typeof isFilterPresent === 'function' && isFilterPresent({});\r\n    }\r\n\r\n    private doesExternalFilterPass(node: RowNode) {\r\n        const doesFilterPass = this.gos.get('doesExternalFilterPass');\r\n        return typeof doesFilterPass === 'function' && doesFilterPass(node);\r\n    }\r\n\r\n    public setFilterModel(model: FilterModel | null, source: FilterChangedEventSourceType = 'api'): void {\r\n        if (this.isAdvFilterEnabled()) {\r\n            this.warnAdvFilters();\r\n            return;\r\n        }\r\n\r\n        this.colFilter?.setFilterModel(model, source);\r\n    }\r\n\r\n    public getFilterModel(): FilterModel {\r\n        return this.colFilter?.getFilterModel() ?? {};\r\n    }\r\n\r\n    public isColumnFilterPresent(): boolean {\r\n        return !!this.colFilter?.isColumnFilterPresent();\r\n    }\r\n\r\n    public isAggregateFilterPresent(): boolean {\r\n        return !!this.colFilter?.isAggregateFilterPresent();\r\n    }\r\n\r\n    public isChildFilterPresent(): boolean {\r\n        return (\r\n            this.isColumnFilterPresent() ||\r\n            this.isQuickFilterPresent() ||\r\n            this.externalFilterPresent ||\r\n            this.isAdvFilterPresent()\r\n        );\r\n    }\r\n    public isAnyFilterPresent(): boolean {\r\n        return this.isChildFilterPresent() || this.isAggregateFilterPresent();\r\n    }\r\n\r\n    private isAdvFilterPresent(): boolean {\r\n        return this.isAdvFilterEnabled() && this.advancedFilter.isFilterPresent();\r\n    }\r\n\r\n    private onAdvFilterEnabledChanged(enabled: boolean): void {\r\n        if (enabled) {\r\n            if (this.colFilter?.disableColumnFilters()) {\r\n                this.onFilterChanged({ source: 'advancedFilter' });\r\n            }\r\n        } else {\r\n            if (this.advancedFilter?.isFilterPresent()) {\r\n                this.advancedFilter.setModel(null);\r\n                this.onFilterChanged({ source: 'advancedFilter' });\r\n            }\r\n        }\r\n    }\r\n\r\n    public isAdvFilterEnabled(): boolean {\r\n        return !!this.advancedFilter?.isEnabled();\r\n    }\r\n\r\n    public isAdvFilterHeaderActive(): boolean {\r\n        return this.isAdvFilterEnabled() && this.advancedFilter.isHeaderActive();\r\n    }\r\n\r\n    public resetQuickFilterCache(): void {\r\n        this.quickFilter?.resetCache();\r\n    }\r\n\r\n    private refreshFiltersForAggregations() {\r\n        const isAggFiltering = _getGroupAggFiltering(this.gos);\r\n        if (isAggFiltering) {\r\n            this.onFilterChanged();\r\n        }\r\n    }\r\n\r\n    public onFilterChanged(\r\n        params: {\r\n            source?: FilterChangedEventSourceType;\r\n            filterInstance?: IFilterComp;\r\n            additionalEventAttributes?: any;\r\n            columns?: AgColumn[];\r\n        } = {}\r\n    ): void {\r\n        const { source, additionalEventAttributes, columns = [] } = params;\r\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\r\n        (this.colFilter ? this.colFilter.updateBeforeFilterChanged(params) : AgPromise.resolve()).then(() => {\r\n            const filterChangedEvent: WithoutGridCommon<FilterChangedEvent> = {\r\n                source,\r\n                type: 'filterChanged',\r\n                columns,\r\n            };\r\n\r\n            if (additionalEventAttributes) {\r\n                _mergeDeep(filterChangedEvent, additionalEventAttributes);\r\n            }\r\n\r\n            this.eventSvc.dispatchEvent(filterChangedEvent);\r\n\r\n            this.colFilter?.updateAfterFilterChanged();\r\n        });\r\n    }\r\n\r\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\r\n        return !!this.colFilter?.isSuppressFlashingCellsBecauseFiltering();\r\n    }\r\n\r\n    public isQuickFilterPresent(): boolean {\r\n        return !!this.quickFilter?.isFilterPresent();\r\n    }\r\n\r\n    private updateAggFiltering(): void {\r\n        this.aggFiltering = !!_getGroupAggFiltering(this.gos);\r\n    }\r\n\r\n    public isAggregateQuickFilterPresent(): boolean {\r\n        return this.isQuickFilterPresent() && this.shouldApplyQuickFilterAfterAgg();\r\n    }\r\n\r\n    private isNonAggregateQuickFilterPresent(): boolean {\r\n        return this.isQuickFilterPresent() && !this.shouldApplyQuickFilterAfterAgg();\r\n    }\r\n\r\n    private shouldApplyQuickFilterAfterAgg(): boolean {\r\n        return (\r\n            (this.aggFiltering || this.beans.colModel.isPivotMode()) &&\r\n            !this.gos.get('applyQuickFilterBeforePivotOrAgg')\r\n        );\r\n    }\r\n\r\n    public doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean {\r\n        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });\r\n    }\r\n\r\n    public doesRowPassAggregateFilters(params: { rowNode: RowNode; filterInstanceToSkip?: IFilterComp }): boolean {\r\n        const { rowNode } = params;\r\n\r\n        if (this.alwaysPassFilter?.(rowNode)) {\r\n            return true;\r\n        }\r\n\r\n        // check quick filter\r\n        if (this.isAggregateQuickFilterPresent() && !this.quickFilter!.doesRowPass(rowNode)) {\r\n            return false;\r\n        }\r\n\r\n        if (\r\n            this.isAggregateFilterPresent() &&\r\n            !this.colFilter!.doAggregateFiltersPass(rowNode, params.filterInstanceToSkip)\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        // got this far, all filters pass\r\n        return true;\r\n    }\r\n\r\n    public doesRowPassFilter(params: { rowNode: RowNode; filterInstanceToSkip?: IFilterComp }): boolean {\r\n        const { rowNode } = params;\r\n\r\n        if (this.alwaysPassFilter?.(rowNode)) {\r\n            return true;\r\n        }\r\n\r\n        // the row must pass ALL of the filters, so if any of them fail,\r\n        // we return true. that means if a row passes the quick filter,\r\n        // but fails the column filter, it fails overall\r\n        // first up, check quick filter\r\n        if (this.isNonAggregateQuickFilterPresent() && !this.quickFilter!.doesRowPass(rowNode)) {\r\n            return false;\r\n        }\r\n\r\n        // secondly, give the client a chance to reject this row\r\n        if (this.externalFilterPresent && !this.doesExternalFilterPass(rowNode)) {\r\n            return false;\r\n        }\r\n\r\n        // lastly, check column filter\r\n        if (\r\n            this.isColumnFilterPresent() &&\r\n            !this.colFilter!.doColumnFiltersPass(rowNode, params.filterInstanceToSkip)\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isAdvFilterPresent() && !this.advancedFilter.doesFilterPass(rowNode)) {\r\n            return false;\r\n        }\r\n\r\n        // got this far, all filters pass\r\n        return true;\r\n    }\r\n\r\n    public isFilterActive(column: AgColumn): boolean {\r\n        return !!this.colFilter?.isFilterActive(column);\r\n    }\r\n\r\n    public getOrCreateFilterWrapper(column: AgColumn): FilterWrapper | null {\r\n        return this.colFilter?.getOrCreateFilterWrapper(column) ?? null;\r\n    }\r\n\r\n    public getDefaultFloatingFilter(column: AgColumn): string {\r\n        return this.colFilter!.getDefaultFloatingFilter(column);\r\n    }\r\n\r\n    public createFilterParams(column: AgColumn, colDef: ColDef): IFilterParams {\r\n        return this.colFilter!.createFilterParams(column, colDef);\r\n    }\r\n\r\n    // for group filters, can change dynamically whether they are allowed or not\r\n    public isFilterAllowed(column: AgColumn): boolean {\r\n        if (this.isAdvFilterEnabled()) {\r\n            return false;\r\n        }\r\n        return !!this.colFilter?.isFilterAllowed(column);\r\n    }\r\n\r\n    public getFloatingFilterCompDetails(column: AgColumn, showParentFilter: () => void): UserCompDetails | undefined {\r\n        return this.colFilter?.getFloatingFilterCompDetails(column, showParentFilter);\r\n    }\r\n\r\n    public getCurrentFloatingFilterParentModel(column: AgColumn): any {\r\n        return this.colFilter?.getCurrentFloatingFilterParentModel(column);\r\n    }\r\n\r\n    // destroys the filter, so it no longer takes part\r\n    public destroyFilter(column: AgColumn, source: 'api' | 'columnChanged' | 'paramsUpdated' = 'api'): void {\r\n        this.colFilter?.destroyFilter(column, source);\r\n    }\r\n\r\n    public areFilterCompsDifferent(\r\n        oldCompDetails: UserCompDetails | null,\r\n        newCompDetails: UserCompDetails | null\r\n    ): boolean {\r\n        return !!this.colFilter?.areFilterCompsDifferent(oldCompDetails, newCompDetails);\r\n    }\r\n\r\n    public getAdvFilterModel(): AdvancedFilterModel | null {\r\n        return this.isAdvFilterEnabled() ? this.advancedFilter.getModel() : null;\r\n    }\r\n\r\n    public setAdvFilterModel(expression: AdvancedFilterModel | null | undefined): void {\r\n        if (!this.isAdvFilterEnabled()) {\r\n            return;\r\n        }\r\n        if (this.beans.dataTypeSvc?.isPendingInference) {\r\n            this.advFilterModelUpdateQueue.push(expression);\r\n            return;\r\n        }\r\n        this.advancedFilter.setModel(expression ?? null);\r\n        this.onFilterChanged({ source: 'advancedFilter' });\r\n    }\r\n\r\n    public toggleAdvFilterBuilder(show: boolean, source: 'api' | 'ui'): void {\r\n        if (!this.isAdvFilterEnabled()) {\r\n            return;\r\n        }\r\n        this.advancedFilter.getCtrl().toggleFilterBuilder({ source, force: show });\r\n    }\r\n\r\n    private updateAdvFilterColumns(): void {\r\n        if (!this.isAdvFilterEnabled()) {\r\n            return;\r\n        }\r\n        if (this.advancedFilter.updateValidity()) {\r\n            this.onFilterChanged({ source: 'advancedFilter' });\r\n        }\r\n    }\r\n\r\n    public hasFloatingFilters(): boolean {\r\n        if (this.isAdvFilterEnabled()) {\r\n            return false;\r\n        }\r\n        return !!this.colFilter?.hasFloatingFilters();\r\n    }\r\n\r\n    public getColumnFilterInstance<TFilter extends IFilter>(\r\n        key: string | AgColumn\r\n    ): Promise<TFilter | null | undefined> {\r\n        if (this.isAdvFilterEnabled()) {\r\n            this.warnAdvFilters();\r\n            return Promise.resolve(undefined);\r\n        }\r\n        return this.colFilter?.getColumnFilterInstance(key) ?? Promise.resolve(undefined);\r\n    }\r\n\r\n    private warnAdvFilters(): void {\r\n        // Column Filter API methods have been disabled as Advanced Filters are enabled\r\n        _warn(68);\r\n    }\r\n\r\n    public setupAdvFilterHeaderComp(eCompToInsertBefore: HTMLElement): void {\r\n        this.advancedFilter?.getCtrl().setupHeaderComp(eCompToInsertBefore);\r\n    }\r\n\r\n    public getHeaderRowCount(): number {\r\n        return this.isAdvFilterHeaderActive() ? 1 : 0;\r\n    }\r\n\r\n    public getHeaderHeight(): number {\r\n        return this.isAdvFilterHeaderActive() ? this.advancedFilter.getCtrl().getHeaderHeight() : 0;\r\n    }\r\n\r\n    private processFilterModelUpdateQueue(): void {\r\n        this.advFilterModelUpdateQueue.forEach((model) => this.setAdvFilterModel(model));\r\n        this.advFilterModelUpdateQueue = [];\r\n    }\r\n\r\n    public getColumnFilterModel(key: string | AgColumn): any {\r\n        return this.colFilter?.getColumnFilterModel(key);\r\n    }\r\n\r\n    public setColumnFilterModel(key: string | AgColumn, model: any): Promise<void> {\r\n        if (this.isAdvFilterEnabled()) {\r\n            this.warnAdvFilters();\r\n            return Promise.resolve();\r\n        }\r\n        return this.colFilter?.setColumnFilterModel(key, model) ?? Promise.resolve();\r\n    }\r\n\r\n    public setColDefPropertiesForDataType(\r\n        colDef: ColDef,\r\n        dataTypeDefinition: CoreDataTypeDefinition,\r\n        formatValue: DataTypeFormatValueFunc\r\n    ): void {\r\n        this.colFilter?.setColDefPropertiesForDataType(colDef, dataTypeDefinition, formatValue);\r\n    }\r\n}\r\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _isColumnMenuAnchoringEnabled, _isLegacyMenuEnabled } from '../gridOptionsUtils';\r\nimport type { ContainerType } from '../interfaces/iAfterGuiAttachedParams';\r\nimport type { IMenuFactory } from '../interfaces/iMenuFactory';\r\nimport { _setColMenuVisible } from '../misc/menu/menuService';\r\nimport { _setAriaRole } from '../utils/aria';\r\nimport { _isVisible } from '../utils/dom';\r\nimport { _findNextFocusableElement, _findTabbableParent, _focusInto } from '../utils/focus';\r\nimport { _error } from '../validation/logging';\r\nimport type { PopupService } from '../widgets/popupService';\r\nimport { FilterWrapperComp } from './filterWrapperComp';\r\n\r\nexport class FilterMenuFactory extends BeanStub implements NamedBean, IMenuFactory {\r\n    beanName = 'filterMenuFactory' as const;\r\n\r\n    private popupSvc?: PopupService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.popupSvc = beans.popupSvc;\r\n    }\r\n\r\n    private hidePopup: () => void;\r\n    private tabListener: null | (() => null);\r\n    private activeMenu?: FilterWrapperComp;\r\n\r\n    public hideActiveMenu(): void {\r\n        this.hidePopup?.();\r\n    }\r\n\r\n    public showMenuAfterMouseEvent(\r\n        column: AgColumn | undefined,\r\n        mouseEvent: MouseEvent | Touch,\r\n        containerType: ContainerType\r\n    ): void {\r\n        this.showPopup(\r\n            column,\r\n            (eMenu) => {\r\n                this.popupSvc?.positionPopupUnderMouseEvent({\r\n                    column,\r\n                    type: containerType,\r\n                    mouseEvent,\r\n                    ePopup: eMenu,\r\n                });\r\n            },\r\n            containerType,\r\n            mouseEvent.target as HTMLElement,\r\n            _isLegacyMenuEnabled(this.gos)\r\n        );\r\n    }\r\n\r\n    public showMenuAfterButtonClick(\r\n        column: AgColumn | undefined,\r\n        eventSource: HTMLElement,\r\n        containerType: ContainerType\r\n    ): void {\r\n        let multiplier = -1;\r\n        let alignSide: 'left' | 'right' = 'left';\r\n\r\n        const isLegacyMenuEnabled = _isLegacyMenuEnabled(this.gos);\r\n        if (!isLegacyMenuEnabled && this.gos.get('enableRtl')) {\r\n            multiplier = 1;\r\n            alignSide = 'right';\r\n        }\r\n        const nudgeX = isLegacyMenuEnabled ? undefined : 4 * multiplier;\r\n        const nudgeY = isLegacyMenuEnabled ? undefined : 4;\r\n\r\n        this.showPopup(\r\n            column,\r\n            (eMenu) => {\r\n                this.popupSvc?.positionPopupByComponent({\r\n                    type: containerType,\r\n                    eventSource,\r\n                    ePopup: eMenu,\r\n                    nudgeX,\r\n                    nudgeY,\r\n                    alignSide,\r\n                    keepWithinBounds: true,\r\n                    position: 'under',\r\n                    column,\r\n                });\r\n            },\r\n            containerType,\r\n            eventSource,\r\n            isLegacyMenuEnabled\r\n        );\r\n    }\r\n\r\n    private showPopup(\r\n        column: AgColumn | undefined,\r\n        positionCallback: (eMenu: HTMLElement) => void,\r\n        containerType: ContainerType,\r\n        eventSource: HTMLElement,\r\n        isLegacyMenuEnabled: boolean\r\n    ): void {\r\n        const comp = column ? this.createBean(new FilterWrapperComp(column, 'COLUMN_MENU')) : undefined;\r\n        this.activeMenu = comp;\r\n        if (!comp?.hasFilter() || !column) {\r\n            _error(57);\r\n            return;\r\n        }\r\n\r\n        const eMenu = document.createElement('div');\r\n\r\n        _setAriaRole(eMenu, 'presentation');\r\n        eMenu.classList.add('ag-menu');\r\n        if (!isLegacyMenuEnabled) {\r\n            eMenu.classList.add('ag-filter-menu');\r\n        }\r\n\r\n        [this.tabListener] = this.addManagedElementListeners(eMenu, {\r\n            keydown: (e: KeyboardEvent) => this.trapFocusWithin(e, eMenu),\r\n        });\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\r\n        eMenu.appendChild(comp?.getGui()!);\r\n\r\n        let hidePopup: () => void;\r\n\r\n        const afterGuiDetached = () => comp?.afterGuiDetached();\r\n\r\n        const anchorToElement = _isColumnMenuAnchoringEnabled(this.gos)\r\n            ? eventSource ?? this.beans.ctrlsSvc.getGridBodyCtrl().eGridBody\r\n            : undefined;\r\n        const closedCallback = (e: MouseEvent | TouchEvent | KeyboardEvent) => {\r\n            _setColMenuVisible(column, false, 'contextMenu');\r\n            const isKeyboardEvent = e instanceof KeyboardEvent;\r\n\r\n            if (this.tabListener) {\r\n                this.tabListener = this.tabListener();\r\n            }\r\n\r\n            if (isKeyboardEvent && eventSource && _isVisible(eventSource)) {\r\n                const focusableEl = _findTabbableParent(eventSource);\r\n                focusableEl?.focus({ preventScroll: true });\r\n            }\r\n            afterGuiDetached();\r\n            this.destroyBean(this.activeMenu);\r\n            this.dispatchVisibleChangedEvent(false, containerType, column);\r\n        };\r\n\r\n        const translate = this.getLocaleTextFunc();\r\n\r\n        const ariaLabel =\r\n            isLegacyMenuEnabled && containerType !== 'columnFilter'\r\n                ? translate('ariaLabelColumnMenu', 'Column Menu')\r\n                : translate('ariaLabelColumnFilter', 'Column Filter');\r\n\r\n        const addPopupRes = this.popupSvc?.addPopup({\r\n            modal: true,\r\n            eChild: eMenu,\r\n            closeOnEsc: true,\r\n            closedCallback,\r\n            positionCallback: () => positionCallback(eMenu),\r\n            anchorToElement,\r\n            ariaLabel,\r\n        });\r\n\r\n        if (addPopupRes) {\r\n            this.hidePopup = hidePopup = addPopupRes.hideFunc;\r\n        }\r\n\r\n        comp.afterInit().then(() => {\r\n            // need to make sure the filter is present before positioning, as only\r\n            // after filter it is visible can we find out what the width of it is\r\n            positionCallback(eMenu);\r\n\r\n            comp.afterGuiAttached({ container: containerType, hidePopup });\r\n        });\r\n\r\n        _setColMenuVisible(column, true, 'contextMenu');\r\n\r\n        this.dispatchVisibleChangedEvent(true, containerType, column);\r\n    }\r\n\r\n    private trapFocusWithin(e: KeyboardEvent, menu: HTMLElement) {\r\n        if (\r\n            e.key !== KeyCode.TAB ||\r\n            e.defaultPrevented ||\r\n            _findNextFocusableElement(this.beans, menu, false, e.shiftKey)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        _focusInto(menu, e.shiftKey);\r\n    }\r\n\r\n    private dispatchVisibleChangedEvent(visible: boolean, containerType: ContainerType, column?: AgColumn): void {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'columnMenuVisibleChanged',\r\n            visible,\r\n            switchingTab: false,\r\n            key: containerType as 'columnMenu' | 'columnFilter' | 'floatingFilter',\r\n            column: column ?? null,\r\n            columnGroup: null,\r\n        });\r\n    }\r\n\r\n    public isMenuEnabled(column: AgColumn): boolean {\r\n        // for standard, we show menu if filter is enabled, and the menu is not suppressed by passing an empty array\r\n        return column.isFilterAllowed() && (column.getColDef().menuTabs ?? ['filterMenuTab']).includes('filterMenuTab');\r\n    }\r\n\r\n    public showMenuAfterContextMenuEvent(): void {\r\n        // not supported in standard menu\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.destroyBean(this.activeMenu);\r\n        super.destroy();\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanName } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { ColDef, ValueGetterParams } from '../entities/colDef';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport class FilterValueService extends BeanStub implements NamedBean {\r\n    beanName: BeanName = 'filterValueSvc';\r\n\r\n    public getValue(column: AgColumn, rowNode?: IRowNode | null) {\r\n        if (!rowNode) {\r\n            return;\r\n        }\r\n        const colDef = column.getColDef();\r\n        const { filterValueGetter } = colDef;\r\n        if (filterValueGetter) {\r\n            return this.executeFilterValueGetter(filterValueGetter, rowNode.data, column, rowNode, colDef);\r\n        }\r\n        return this.beans.valueSvc.getValue(column, rowNode);\r\n    }\r\n\r\n    private executeFilterValueGetter(\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        valueGetter: string | Function,\r\n        data: any,\r\n        column: AgColumn,\r\n        node: IRowNode,\r\n        colDef: ColDef\r\n    ): any {\r\n        const { expressionSvc, valueSvc } = this.beans;\r\n        const params: ValueGetterParams = this.gos.addGridCommonParams({\r\n            data,\r\n            node,\r\n            column,\r\n            colDef,\r\n            getValue: valueSvc.getValueCallback.bind(this, node),\r\n        });\r\n\r\n        if (typeof valueGetter === 'function') {\r\n            return valueGetter(params);\r\n        }\r\n        return expressionSvc?.evaluate(valueGetter, params);\r\n    }\r\n}\r\n", "import type { AgColumn } from '../../../entities/agColumn';\r\nimport type { IFilter } from '../../../interfaces/iFilter';\r\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\r\nimport { Component, RefPlaceholder } from '../../../widgets/component';\r\nimport type { IFloatingFilterComp, IFloatingFilterParams, IFloatingFilterParent } from '../floatingFilter';\r\n\r\n// optional floating filter for user provided filters - instead of providing a floating filter,\r\n// they can provide a getModelAsString() method on the filter instead. this class just displays\r\n// the string returned from getModelAsString()\r\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp<IFilter & IFloatingFilterParent> {\r\n    private readonly eFloatingFilterText: AgInputTextField = RefPlaceholder;\r\n\r\n    private params: IFloatingFilterParams;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */ `\r\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\r\n                <ag-input-text-field data-ref=\"eFloatingFilterText\"></ag-input-text-field>\r\n            </div>`,\r\n            [AgInputTextFieldSelector]\r\n        );\r\n    }\r\n\r\n    public init(params: IFloatingFilterParams): void {\r\n        this.params = params;\r\n        const displayName = this.beans.colNames.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\r\n        this.eFloatingFilterText\r\n            .setDisabled(true)\r\n            .setInputAriaLabel(`${displayName} ${this.getLocaleTextFunc()('ariaFilterInput', 'Filter Input')}`);\r\n    }\r\n\r\n    public onParentModelChanged(parentModel: any): void {\r\n        if (parentModel == null) {\r\n            this.eFloatingFilterText.setValue('');\r\n            return;\r\n        }\r\n\r\n        this.params.parentFilterInstance((filterInstance) => {\r\n            // it would be nice to check if getModelAsString was present before creating this component,\r\n            // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until\r\n            // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns\r\n            // are drawn, but the parent filters are only created when needed).\r\n            if (filterInstance.getModelAsString) {\r\n                const modelAsString = filterInstance.getModelAsString(parentModel);\r\n                this.eFloatingFilterText.setValue(modelAsString);\r\n            }\r\n        });\r\n    }\r\n\r\n    public refresh(params: IFloatingFilterParams): void {\r\n        this.init(params);\r\n    }\r\n}\r\n", "import type { IFilterOptionDef } from '../../interfaces/iFilter';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { ScalarFilterParams } from './iScalarFilter';\r\nimport type { SimpleFilterParams } from './iSimpleFilter';\r\n\r\n/* Common logic for options, used by both filters and floating filters. */\r\nexport class OptionsFactory {\r\n    protected customFilterOptions: { [name: string]: IFilterOptionDef } = {};\r\n    public filterOptions: (IFilterOptionDef | string)[];\r\n    public defaultOption: string;\r\n\r\n    public init(params: ScalarFilterParams, defaultOptions: string[]): void {\r\n        this.filterOptions = params.filterOptions || defaultOptions;\r\n        this.mapCustomOptions();\r\n        this.selectDefaultItem(params);\r\n    }\r\n\r\n    private mapCustomOptions(): void {\r\n        const { filterOptions } = this;\r\n        if (!filterOptions) {\r\n            return;\r\n        }\r\n\r\n        filterOptions.forEach((filterOption) => {\r\n            if (typeof filterOption === 'string') {\r\n                return;\r\n            }\r\n\r\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\r\n            const propertyCheck = (keys: [keyof IFilterOptionDef]) => {\r\n                if (!keys.some((key) => filterOption[key] != null)) {\r\n                    _warn(72, { keys });\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            };\r\n\r\n            if (!requiredProperties.every(propertyCheck)) {\r\n                this.filterOptions = filterOptions.filter((v) => v === filterOption) || [];\r\n                return;\r\n            }\r\n\r\n            this.customFilterOptions[filterOption.displayKey] = filterOption;\r\n        });\r\n    }\r\n\r\n    private selectDefaultItem(params: SimpleFilterParams): void {\r\n        const { filterOptions } = this;\r\n        if (params.defaultOption) {\r\n            this.defaultOption = params.defaultOption;\r\n        } else if (filterOptions.length >= 1) {\r\n            const firstFilterOption = filterOptions[0];\r\n\r\n            if (typeof firstFilterOption === 'string') {\r\n                this.defaultOption = firstFilterOption;\r\n            } else if (firstFilterOption.displayKey) {\r\n                this.defaultOption = firstFilterOption.displayKey;\r\n            } else {\r\n                // invalid FilterOptionDef supplied as it doesn't contain a 'displayKey\r\n                _warn(73);\r\n            }\r\n        } else {\r\n            //no filter options for filter\r\n            _warn(74);\r\n        }\r\n    }\r\n\r\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\r\n        return this.customFilterOptions[name!];\r\n    }\r\n}\r\n", "import type { IFilterOptionDef } from '../../interfaces/iFilter';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { JoinOperator, Tuple } from './iSimpleFilter';\r\n\r\nexport function removeItems<T>(items: T[], startPosition: number, deleteCount?: number): T[] {\r\n    return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);\r\n}\r\n\r\nexport function isBlank<V>(cellValue: V) {\r\n    return cellValue == null || (typeof cellValue === 'string' && cellValue.trim().length === 0);\r\n}\r\n\r\nexport function getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator {\r\n    return defaultJoinOperator === 'AND' || defaultJoinOperator === 'OR' ? defaultJoinOperator : 'AND';\r\n}\r\n\r\nexport function evaluateCustomFilter<V>(\r\n    customFilterOption: IFilterOptionDef | undefined,\r\n    values: Tuple<V>,\r\n    cellValue: V | null | undefined\r\n): boolean | undefined {\r\n    if (customFilterOption == null) {\r\n        return;\r\n    }\r\n\r\n    const { predicate } = customFilterOption;\r\n    // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\r\n    if (predicate != null && !values.some((v) => v == null)) {\r\n        return predicate(values, cellValue);\r\n    }\r\n\r\n    // No custom filter invocation, indicate that to the caller.\r\n    return;\r\n}\r\n\r\nexport function validateAndUpdateConditions<M>(conditions: M[], maxNumConditions: number): number {\r\n    let numConditions = conditions.length;\r\n    if (numConditions > maxNumConditions) {\r\n        conditions.splice(maxNumConditions);\r\n        // 'Filter Model contains more conditions than \"filterParams.maxNumConditions\". Additional conditions have been ignored.'\r\n        _warn(78);\r\n        numConditions = maxNumConditions;\r\n    }\r\n    return numConditions;\r\n}\r\n", "import type { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\r\nimport type { IDoesFilterPassParams, IFilterOptionDef } from '../../interfaces/iFilter';\r\nimport { _areEqual } from '../../utils/array';\r\nimport { _removeFromParent, _setDisabled, _setDisplayed } from '../../utils/dom';\r\nimport { AgPromise } from '../../utils/promise';\r\nimport { _warn } from '../../validation/logging';\r\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField';\r\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\r\nimport type { ListOption } from '../../widgets/agList';\r\nimport { AgRadioButton } from '../../widgets/agRadioButton';\r\nimport { AgSelect } from '../../widgets/agSelect';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { Component } from '../../widgets/component';\r\nimport type { FILTER_LOCALE_TEXT } from '../filterLocaleText';\r\nimport type {\r\n    ICombinedSimpleModel,\r\n    ISimpleFilter,\r\n    ISimpleFilterModel,\r\n    ISimpleFilterModelType,\r\n    JoinOperator,\r\n    SimpleFilterParams,\r\n    Tuple,\r\n} from './iSimpleFilter';\r\nimport { OptionsFactory } from './optionsFactory';\r\nimport { ProvidedFilter } from './providedFilter';\r\nimport {\r\n    evaluateCustomFilter,\r\n    getDefaultJoinOperator,\r\n    removeItems,\r\n    validateAndUpdateConditions,\r\n} from './simpleFilterUtils';\r\n\r\n/**\r\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\r\n *\r\n * @param M type of filter-model managed by the concrete sub-class that extends this type\r\n * @param V type of value managed by the concrete sub-class that extends this type\r\n * @param E type of UI element used for collecting user-input\r\n */\r\nexport abstract class SimpleFilter<M extends ISimpleFilterModel, V, E = AgInputTextField>\r\n    extends ProvidedFilter<M | ICombinedSimpleModel<M>, V>\r\n    implements ISimpleFilter\r\n{\r\n    protected readonly eTypes: AgSelect[] = [];\r\n    protected readonly eJoinOperatorPanels: HTMLElement[] = [];\r\n    protected readonly eJoinOperatorsAnd: AgRadioButton[] = [];\r\n    protected readonly eJoinOperatorsOr: AgRadioButton[] = [];\r\n    protected readonly eConditionBodies: HTMLElement[] = [];\r\n    private readonly listener = () => this.onUiChanged();\r\n\r\n    private maxNumConditions: number;\r\n    private numAlwaysVisibleConditions: number;\r\n    private defaultJoinOperator: JoinOperator;\r\n    private filterPlaceholder: SimpleFilterParams['filterPlaceholder'];\r\n    private lastUiCompletePosition: number | null = null;\r\n    private joinOperatorId = 0;\r\n    private filterListOptions: ListOption[];\r\n\r\n    protected optionsFactory: OptionsFactory;\r\n    protected abstract getDefaultFilterOptions(): string[];\r\n\r\n    protected abstract createValueElement(): HTMLElement;\r\n\r\n    protected abstract removeValueElements(startPosition: number, deleteCount?: number): void;\r\n\r\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\r\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\r\n\r\n    // getModel() calls this to create the two conditions. if only one condition,\r\n    // the result is returned by getModel(), otherwise is called twice and both results\r\n    // returned in a CombinedFilter object.\r\n    protected abstract createCondition(position: number): M;\r\n\r\n    // because the sub-class filter models have different attribute names, we have to map\r\n    protected abstract mapValuesFromModel(filterModel: ISimpleFilterModel | null): Tuple<V>;\r\n\r\n    // allow value-type specific handling of null cell values.\r\n    protected abstract evaluateNullValue(filterType?: ISimpleFilterModelType | null): boolean;\r\n\r\n    // allow value-type specific handling of non-null cell values.\r\n    protected abstract evaluateNonNullValue(\r\n        range: Tuple<V>,\r\n        cellValue: V,\r\n        filterModel: M,\r\n        params: IDoesFilterPassParams\r\n    ): boolean;\r\n\r\n    // allow iteration of all condition inputs managed by sub-classes.\r\n    protected abstract getInputs(position: number): Tuple<E>;\r\n\r\n    // allow retrieval of all condition input values.\r\n    protected abstract getValues(position: number): Tuple<V>;\r\n\r\n    protected getNumberOfInputs(type?: ISimpleFilterModelType | null): number {\r\n        const customOpts = this.optionsFactory.getCustomOption(type);\r\n        if (customOpts) {\r\n            const { numberOfInputs } = customOpts;\r\n            return numberOfInputs != null ? numberOfInputs : 1;\r\n        }\r\n\r\n        const zeroInputTypes: ISimpleFilterModelType[] = ['empty', 'notBlank', 'blank'];\r\n\r\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\r\n            return 0;\r\n        } else if (type === 'inRange') {\r\n            return 2;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    // floating filter calls this when user applies filter from floating filter\r\n    public onFloatingFilterChanged(type: string | null | undefined, value: V | null): void {\r\n        this.setTypeFromFloatingFilter(type);\r\n        this.setValueFromFloatingFilter(value);\r\n        this.onUiChanged(true);\r\n    }\r\n\r\n    private setTypeFromFloatingFilter(type?: string | null): void {\r\n        this.eTypes.forEach((eType, position) => {\r\n            const value = position === 0 ? type : this.optionsFactory.defaultOption;\r\n            eType.setValue(value, true);\r\n        });\r\n    }\r\n\r\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\r\n        const conditions = this.getUiCompleteConditions();\r\n        if (conditions.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        if (this.maxNumConditions > 1 && conditions.length > 1) {\r\n            return {\r\n                filterType: this.filterType,\r\n                operator: this.getJoinOperator(),\r\n                conditions,\r\n            };\r\n        }\r\n\r\n        return conditions[0];\r\n    }\r\n\r\n    protected getConditionTypes(): (ISimpleFilterModelType | null)[] {\r\n        return this.eTypes.map((eType) => eType.getValue() as ISimpleFilterModelType);\r\n    }\r\n\r\n    protected getConditionType(position: number): ISimpleFilterModelType | null {\r\n        return this.eTypes[position].getValue() as ISimpleFilterModelType;\r\n    }\r\n\r\n    protected getJoinOperator(): JoinOperator {\r\n        const { eJoinOperatorsOr, defaultJoinOperator } = this;\r\n\r\n        return eJoinOperatorsOr.length === 0\r\n            ? defaultJoinOperator\r\n            : eJoinOperatorsOr[0].getValue() === true\r\n              ? 'OR'\r\n              : 'AND';\r\n    }\r\n\r\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\r\n        // both are missing\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n\r\n        // one is missing, other present\r\n        if ((!a && b) || (a && !b)) {\r\n            return false;\r\n        }\r\n\r\n        // one is combined, the other is not\r\n        const aIsSimple = !(a as any).operator;\r\n        const bIsSimple = !(b as any).operator;\r\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\r\n        if (oneSimpleOneCombined) {\r\n            return false;\r\n        }\r\n\r\n        let res: boolean;\r\n\r\n        // otherwise both present, so compare\r\n        if (aIsSimple) {\r\n            const aSimple = a as M;\r\n            const bSimple = b as M;\r\n\r\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\r\n        } else {\r\n            const aCombined = a as ICombinedSimpleModel<M>;\r\n            const bCombined = b as ICombinedSimpleModel<M>;\r\n\r\n            res =\r\n                aCombined.operator === bCombined.operator &&\r\n                _areEqual(aCombined.conditions, bCombined.conditions, (aModel, bModel) =>\r\n                    this.areSimpleModelsEqual(aModel, bModel)\r\n                );\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    private shouldRefresh(newParams: SimpleFilterParams): boolean {\r\n        const model = this.getModel();\r\n        const conditions: ISimpleFilterModel[] | null = model ? (<any>model).conditions ?? [model] : null;\r\n\r\n        // Do Not refresh when one of the existing condition options is not in new options list\r\n        const newOptionsList =\r\n            newParams.filterOptions?.map((option) => (typeof option === 'string' ? option : option.displayKey)) ??\r\n            this.getDefaultFilterOptions();\r\n\r\n        const allConditionsExistInNewOptionsList =\r\n            !conditions ||\r\n            conditions.every((condition) => newOptionsList.find((option) => option === condition.type) !== undefined);\r\n        if (!allConditionsExistInNewOptionsList) {\r\n            return false;\r\n        }\r\n\r\n        // Check number of conditions vs maxNumConditions\r\n        if (\r\n            typeof newParams.maxNumConditions === 'number' &&\r\n            conditions &&\r\n            conditions.length > newParams.maxNumConditions\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    override refresh(newParams: SimpleFilterParams): boolean {\r\n        if (!this.shouldRefresh(newParams)) {\r\n            return false;\r\n        }\r\n\r\n        const parentRefreshed = super.refresh(newParams);\r\n        if (!parentRefreshed) {\r\n            return false;\r\n        }\r\n\r\n        this.setParams(newParams);\r\n        this.removeConditionsAndOperators(0);\r\n        this.createOption();\r\n        this.setModel(this.getModel());\r\n\r\n        return true;\r\n    }\r\n\r\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\r\n        const isCombined = (model as any).operator;\r\n\r\n        if (isCombined) {\r\n            const combinedModel = model as ICombinedSimpleModel<M>;\r\n\r\n            let conditions = combinedModel.conditions;\r\n            if (conditions == null) {\r\n                conditions = [];\r\n                _warn(77);\r\n            }\r\n\r\n            const numConditions = validateAndUpdateConditions<M>(conditions, this.maxNumConditions);\r\n            const numPrevConditions = this.getNumConditions();\r\n            if (numConditions < numPrevConditions) {\r\n                this.removeConditionsAndOperators(numConditions);\r\n            } else if (numConditions > numPrevConditions) {\r\n                for (let i = numPrevConditions; i < numConditions; i++) {\r\n                    this.createJoinOperatorPanel();\r\n                    this.createOption();\r\n                }\r\n            }\r\n\r\n            const orChecked = combinedModel.operator === 'OR';\r\n            this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd) => eJoinOperatorAnd.setValue(!orChecked, true));\r\n            this.eJoinOperatorsOr.forEach((eJoinOperatorOr) => eJoinOperatorOr.setValue(orChecked, true));\r\n\r\n            conditions.forEach((condition, position) => {\r\n                this.eTypes[position].setValue(condition.type, true);\r\n                this.setConditionIntoUi(condition, position);\r\n            });\r\n        } else {\r\n            const simpleModel = model as M;\r\n\r\n            if (this.getNumConditions() > 1) {\r\n                this.removeConditionsAndOperators(1);\r\n            }\r\n\r\n            this.eTypes[0].setValue(simpleModel.type, true);\r\n            this.setConditionIntoUi(simpleModel, 0);\r\n        }\r\n\r\n        this.lastUiCompletePosition = this.getNumConditions() - 1;\r\n\r\n        this.createMissingConditionsAndOperators();\r\n\r\n        this.onUiChanged();\r\n\r\n        return AgPromise.resolve();\r\n    }\r\n\r\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n        const model = this.getModel();\r\n\r\n        if (model == null) {\r\n            return true;\r\n        }\r\n\r\n        const { operator } = model as ICombinedSimpleModel<M>;\r\n        const models: M[] = [];\r\n\r\n        if (operator) {\r\n            const combinedModel = model as ICombinedSimpleModel<M>;\r\n\r\n            models.push(...(combinedModel.conditions ?? []));\r\n        } else {\r\n            models.push(model as M);\r\n        }\r\n\r\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\r\n\r\n        return models[combineFunction]((m) => this.individualConditionPasses(params, m));\r\n    }\r\n\r\n    protected override setParams(params: SimpleFilterParams): void {\r\n        super.setParams(params);\r\n\r\n        this.setNumConditions(params);\r\n\r\n        this.defaultJoinOperator = getDefaultJoinOperator(params.defaultJoinOperator);\r\n        this.filterPlaceholder = params.filterPlaceholder;\r\n\r\n        this.optionsFactory = new OptionsFactory();\r\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\r\n        this.createFilterListOptions();\r\n\r\n        this.createOption();\r\n        this.createMissingConditionsAndOperators();\r\n\r\n        if (this.isReadOnly()) {\r\n            // only do this when read only (so no other focusable elements), otherwise the tab order breaks\r\n            // as the tabbed layout managed focus feature will focus the body when it shouldn't\r\n            this.eFilterBody.setAttribute('tabindex', '-1');\r\n        }\r\n    }\r\n\r\n    private setNumConditions(params: SimpleFilterParams): void {\r\n        let maxNumConditions = params.maxNumConditions ?? 2;\r\n        if (maxNumConditions < 1) {\r\n            _warn(79);\r\n            maxNumConditions = 1;\r\n        }\r\n        this.maxNumConditions = maxNumConditions;\r\n\r\n        let numAlwaysVisibleConditions = params.numAlwaysVisibleConditions ?? 1;\r\n        if (numAlwaysVisibleConditions < 1) {\r\n            _warn(80);\r\n            numAlwaysVisibleConditions = 1;\r\n        }\r\n        if (numAlwaysVisibleConditions > maxNumConditions) {\r\n            _warn(81);\r\n            numAlwaysVisibleConditions = maxNumConditions;\r\n        }\r\n        this.numAlwaysVisibleConditions = numAlwaysVisibleConditions;\r\n    }\r\n\r\n    private createOption(): void {\r\n        const eType = this.createManagedBean(new AgSelect());\r\n        this.eTypes.push(eType);\r\n        eType.addCssClass('ag-filter-select');\r\n        this.eFilterBody.appendChild(eType.getGui());\r\n\r\n        const eConditionBody = this.createValueElement();\r\n        this.eConditionBodies.push(eConditionBody);\r\n        this.eFilterBody.appendChild(eConditionBody);\r\n\r\n        this.putOptionsIntoDropdown(eType);\r\n        this.resetType(eType);\r\n        const position = this.getNumConditions() - 1;\r\n        this.forEachPositionInput(position, (element) => this.resetInput(element));\r\n        this.addChangedListeners(eType, position);\r\n    }\r\n\r\n    private createJoinOperatorPanel(): void {\r\n        const eJoinOperatorPanel = document.createElement('div');\r\n        this.eJoinOperatorPanels.push(eJoinOperatorPanel);\r\n        eJoinOperatorPanel.classList.add('ag-filter-condition');\r\n\r\n        const eJoinOperatorAnd = this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, 'and');\r\n        const eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, 'or');\r\n\r\n        this.eFilterBody.appendChild(eJoinOperatorPanel);\r\n\r\n        const index = this.eJoinOperatorPanels.length - 1;\r\n        const uniqueGroupId = this.joinOperatorId++;\r\n        this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);\r\n        this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);\r\n\r\n        if (!this.isReadOnly()) {\r\n            eJoinOperatorAnd.onValueChange(this.listener);\r\n            eJoinOperatorOr.onValueChange(this.listener);\r\n        }\r\n    }\r\n\r\n    private createJoinOperator(\r\n        eJoinOperators: AgRadioButton[],\r\n        eJoinOperatorPanel: HTMLElement,\r\n        andOr: string\r\n    ): AgRadioButton {\r\n        const eJoinOperator = this.createManagedBean(new AgRadioButton());\r\n        eJoinOperators.push(eJoinOperator);\r\n        const baseClass = 'ag-filter-condition-operator';\r\n        eJoinOperator.addCssClass(baseClass);\r\n        eJoinOperator.addCssClass(`${baseClass}-${andOr}`);\r\n        eJoinOperatorPanel.appendChild(eJoinOperator.getGui());\r\n        return eJoinOperator;\r\n    }\r\n\r\n    private createFilterListOptions(): void {\r\n        this.filterListOptions = this.optionsFactory.filterOptions.map((option) =>\r\n            typeof option === 'string' ? this.createBoilerplateListOption(option) : this.createCustomListOption(option)\r\n        );\r\n    }\r\n\r\n    private putOptionsIntoDropdown(eType: AgSelect): void {\r\n        const { filterListOptions } = this;\r\n        // Add specified options to condition drop-down.\r\n        filterListOptions.forEach((listOption) => {\r\n            eType.addOption(listOption);\r\n        });\r\n\r\n        // Make drop-downs read-only if there is only one option.\r\n        eType.setDisabled(filterListOptions.length <= 1);\r\n    }\r\n\r\n    private createBoilerplateListOption(option: string): ListOption {\r\n        return { value: option, text: this.translate(option as keyof typeof FILTER_LOCALE_TEXT) };\r\n    }\r\n\r\n    private createCustomListOption(option: IFilterOptionDef): ListOption {\r\n        const { displayKey } = option;\r\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\r\n        return {\r\n            value: displayKey,\r\n            text: customOption\r\n                ? this.getLocaleTextFunc()(customOption.displayKey, customOption.displayName)\r\n                : this.translate(displayKey as keyof typeof FILTER_LOCALE_TEXT),\r\n        };\r\n    }\r\n\r\n    protected createBodyTemplate(): string {\r\n        // created dynamically\r\n        return '';\r\n    }\r\n    protected getAgComponents(): ComponentSelector[] {\r\n        // created dynamically\r\n        return [];\r\n    }\r\n\r\n    protected getCssIdentifier() {\r\n        return 'simple-filter';\r\n    }\r\n\r\n    protected updateUiVisibility(): void {\r\n        const joinOperator = this.getJoinOperator();\r\n        this.updateNumConditions();\r\n\r\n        // from here, the number of elements in all the collections is correct, so can just update the values/statuses\r\n        this.updateConditionStatusesAndValues(this.lastUiCompletePosition!, joinOperator);\r\n    }\r\n\r\n    private updateNumConditions(): void {\r\n        // Collection sizes are already correct if updated via API, so only need to handle UI updates here\r\n        let lastUiCompletePosition = -1;\r\n        let areAllConditionsUiComplete = true;\r\n        for (let position = 0; position < this.getNumConditions(); position++) {\r\n            if (this.isConditionUiComplete(position)) {\r\n                lastUiCompletePosition = position;\r\n            } else {\r\n                areAllConditionsUiComplete = false;\r\n            }\r\n        }\r\n        if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {\r\n            this.createJoinOperatorPanel();\r\n            this.createOption();\r\n        } else {\r\n            const activePosition = this.lastUiCompletePosition ?? this.getNumConditions() - 2;\r\n            if (lastUiCompletePosition < activePosition) {\r\n                // remove any incomplete conditions at the end, excluding the active position\r\n                this.removeConditionsAndOperators(activePosition + 1);\r\n                const removeStartPosition = lastUiCompletePosition + 1;\r\n                const numConditionsToRemove = activePosition - removeStartPosition;\r\n                if (numConditionsToRemove > 0) {\r\n                    this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);\r\n                }\r\n                this.createMissingConditionsAndOperators();\r\n            }\r\n        }\r\n        this.lastUiCompletePosition = lastUiCompletePosition;\r\n    }\r\n\r\n    private updateConditionStatusesAndValues(lastUiCompletePosition: number, joinOperator?: JoinOperator): void {\r\n        this.eTypes.forEach((eType, position) => {\r\n            const disabled = this.isConditionDisabled(position, lastUiCompletePosition);\r\n\r\n            eType.setDisabled(disabled || this.filterListOptions.length <= 1);\r\n            if (position === 1) {\r\n                _setDisabled(this.eJoinOperatorPanels[0], disabled);\r\n                this.eJoinOperatorsAnd[0].setDisabled(disabled);\r\n                this.eJoinOperatorsOr[0].setDisabled(disabled);\r\n            }\r\n        });\r\n\r\n        this.eConditionBodies.forEach((element, index) => {\r\n            _setDisplayed(element, this.isConditionBodyVisible(index));\r\n        });\r\n\r\n        const orChecked = (joinOperator ?? this.getJoinOperator()) === 'OR';\r\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd) => {\r\n            eJoinOperatorAnd.setValue(!orChecked, true);\r\n        });\r\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr) => {\r\n            eJoinOperatorOr.setValue(orChecked, true);\r\n        });\r\n\r\n        this.forEachInput((element, index, position, numberOfInputs) => {\r\n            this.setElementDisplayed(element, index < numberOfInputs);\r\n            this.setElementDisabled(element, this.isConditionDisabled(position, lastUiCompletePosition));\r\n        });\r\n\r\n        this.resetPlaceholder();\r\n    }\r\n\r\n    private shouldAddNewConditionAtEnd(areAllConditionsUiComplete: boolean): boolean {\r\n        return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();\r\n    }\r\n\r\n    private removeConditionsAndOperators(startPosition: number, deleteCount?: number): void {\r\n        if (startPosition >= this.getNumConditions()) {\r\n            return;\r\n        }\r\n        const { eTypes, eConditionBodies, eJoinOperatorPanels, eJoinOperatorsAnd, eJoinOperatorsOr } = this;\r\n\r\n        this.removeComponents(eTypes, startPosition, deleteCount);\r\n        this.removeElements(eConditionBodies, startPosition, deleteCount);\r\n        this.removeValueElements(startPosition, deleteCount);\r\n        const joinOperatorIndex = Math.max(startPosition - 1, 0);\r\n        this.removeElements(eJoinOperatorPanels, joinOperatorIndex, deleteCount);\r\n        this.removeComponents(eJoinOperatorsAnd, joinOperatorIndex, deleteCount);\r\n        this.removeComponents(eJoinOperatorsOr, joinOperatorIndex, deleteCount);\r\n    }\r\n\r\n    private removeElements(elements: HTMLElement[], startPosition: number, deleteCount?: number): void {\r\n        const removedElements = removeItems(elements, startPosition, deleteCount);\r\n        removedElements.forEach((element) => _removeFromParent(element));\r\n    }\r\n\r\n    protected removeComponents<TEventType extends string>(\r\n        components: Component<TEventType>[],\r\n        startPosition: number,\r\n        deleteCount?: number\r\n    ): void {\r\n        const removedComponents = removeItems(components, startPosition, deleteCount);\r\n        removedComponents.forEach((comp) => {\r\n            _removeFromParent(comp.getGui());\r\n            this.destroyBean(comp);\r\n        });\r\n    }\r\n\r\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams) {\r\n        super.afterGuiAttached(params);\r\n\r\n        this.resetPlaceholder();\r\n\r\n        if (!params?.suppressFocus) {\r\n            const { eFilterBody, eTypes } = this;\r\n            let elementToFocus: HTMLElement | undefined;\r\n            if (!this.isReadOnly()) {\r\n                const firstInput = this.getInputs(0)[0];\r\n                if (firstInput instanceof AgAbstractInputField && this.isConditionBodyVisible(0)) {\r\n                    elementToFocus = firstInput.getInputElement();\r\n                } else {\r\n                    // focus the dropdown instead\r\n                    elementToFocus = eTypes[0]?.getFocusableElement();\r\n                }\r\n            }\r\n            // something needs focus otherwise keyboard navigation breaks, so focus the filter body if missing\r\n            (elementToFocus ?? eFilterBody).focus({ preventScroll: true });\r\n        }\r\n    }\r\n\r\n    public override afterGuiDetached(): void {\r\n        super.afterGuiDetached();\r\n\r\n        const appliedModel = this.getModel();\r\n\r\n        // Reset temporary UI state that was applied to the DOM but not committed to the model\r\n        this.resetUiToActiveModel(appliedModel);\r\n\r\n        // remove incomplete positions\r\n        let lastUiCompletePosition = -1;\r\n        // as we remove incomplete positions, the last UI complete position will change\r\n        let updatedLastUiCompletePosition = -1;\r\n        let conditionsRemoved = false;\r\n        const joinOperator = this.getJoinOperator();\r\n        for (let position = this.getNumConditions() - 1; position >= 0; position--) {\r\n            if (this.isConditionUiComplete(position)) {\r\n                if (lastUiCompletePosition === -1) {\r\n                    lastUiCompletePosition = position;\r\n                    updatedLastUiCompletePosition = position;\r\n                }\r\n            } else {\r\n                const shouldRemovePositionAtEnd =\r\n                    position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);\r\n                const positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;\r\n                if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {\r\n                    this.removeConditionsAndOperators(position, 1);\r\n                    conditionsRemoved = true;\r\n                    if (positionBeforeLastUiCompletePosition) {\r\n                        updatedLastUiCompletePosition--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let shouldUpdateConditionStatusesAndValues = false;\r\n        if (this.getNumConditions() < this.numAlwaysVisibleConditions) {\r\n            // if conditions have been removed, need to recreate new ones at the end up to the number required\r\n            this.createMissingConditionsAndOperators();\r\n            shouldUpdateConditionStatusesAndValues = true;\r\n        }\r\n        if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {\r\n            this.createJoinOperatorPanel();\r\n            this.createOption();\r\n            shouldUpdateConditionStatusesAndValues = true;\r\n        }\r\n        if (shouldUpdateConditionStatusesAndValues) {\r\n            this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);\r\n        }\r\n        if (conditionsRemoved) {\r\n            this.updateJoinOperatorsDisabled();\r\n        }\r\n        this.lastUiCompletePosition = updatedLastUiCompletePosition;\r\n    }\r\n\r\n    private getPlaceholderText(defaultPlaceholder: keyof typeof FILTER_LOCALE_TEXT, position: number): string {\r\n        let placeholder = this.translate(defaultPlaceholder);\r\n        if (typeof this.filterPlaceholder === 'function') {\r\n            const filterOptionKey = this.eTypes[position].getValue() as ISimpleFilterModelType;\r\n            const filterOption = this.translate(filterOptionKey);\r\n            placeholder = this.filterPlaceholder({\r\n                filterOptionKey,\r\n                filterOption,\r\n                placeholder,\r\n            });\r\n        } else if (typeof this.filterPlaceholder === 'string') {\r\n            placeholder = this.filterPlaceholder;\r\n        }\r\n\r\n        return placeholder;\r\n    }\r\n\r\n    // allow sub-classes to reset HTML placeholders after UI update.\r\n    protected resetPlaceholder(): void {\r\n        const globalTranslate = this.getLocaleTextFunc();\r\n\r\n        this.forEachInput((element, index, position, numberOfInputs) => {\r\n            if (!(element instanceof AgAbstractInputField)) {\r\n                return;\r\n            }\r\n\r\n            const placeholder =\r\n                index === 0 && numberOfInputs > 1 ? 'inRangeStart' : index === 0 ? 'filterOoo' : 'inRangeEnd';\r\n            const ariaLabel =\r\n                index === 0 && numberOfInputs > 1\r\n                    ? globalTranslate('ariaFilterFromValue', 'Filter from value')\r\n                    : index === 0\r\n                      ? globalTranslate('ariaFilterValue', 'Filter Value')\r\n                      : globalTranslate('ariaFilterToValue', 'Filter to Value');\r\n\r\n            element.setInputPlaceholder(this.getPlaceholderText(placeholder, position));\r\n            element.setInputAriaLabel(ariaLabel);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected setElementValue(element: E, value: V | null, fromFloatingFilter?: boolean): void {\r\n        if (element instanceof AgAbstractInputField) {\r\n            element.setValue(value != null ? String(value) : null, true);\r\n        }\r\n    }\r\n\r\n    protected setElementDisplayed(element: E, displayed: boolean): void {\r\n        if (element instanceof Component) {\r\n            _setDisplayed(element.getGui(), displayed);\r\n        }\r\n    }\r\n\r\n    protected setElementDisabled(element: E, disabled: boolean): void {\r\n        if (element instanceof Component) {\r\n            _setDisabled(element.getGui(), disabled);\r\n        }\r\n    }\r\n\r\n    protected attachElementOnChange(element: E, listener: () => void): void {\r\n        if (element instanceof AgAbstractInputField) {\r\n            element.onValueChange(listener);\r\n        }\r\n    }\r\n\r\n    protected forEachInput(cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\r\n        this.getConditionTypes().forEach((type, position) => {\r\n            this.forEachPositionTypeInput(position, type, cb);\r\n        });\r\n    }\r\n\r\n    protected forEachPositionInput(\r\n        position: number,\r\n        cb: (element: E, index: number, position: number, numberOfInputs: number) => void\r\n    ): void {\r\n        const type = this.getConditionType(position);\r\n        this.forEachPositionTypeInput(position, type, cb);\r\n    }\r\n\r\n    private forEachPositionTypeInput(\r\n        position: number,\r\n        type: ISimpleFilterModelType | null,\r\n        cb: (element: E, index: number, position: number, numberOfInputs: number) => void\r\n    ): void {\r\n        const numberOfInputs = this.getNumberOfInputs(type);\r\n        const inputs = this.getInputs(position);\r\n        for (let index = 0; index < inputs.length; index++) {\r\n            const input = inputs[index];\r\n            if (input != null) {\r\n                cb(input, index, position, numberOfInputs);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isConditionDisabled(position: number, lastUiCompletePosition: number): boolean {\r\n        if (this.isReadOnly()) {\r\n            return true;\r\n        } // Read-only mode trumps everything.\r\n        if (position === 0) {\r\n            return false;\r\n        } // Position 0 should typically be editable.\r\n\r\n        // Only allow editing of a 2nd or later condition if the previous condition is complete and no subsequent conditions are complete.\r\n        return position > lastUiCompletePosition + 1;\r\n    }\r\n\r\n    private isConditionBodyVisible(position: number): boolean {\r\n        // Check that the condition needs inputs.\r\n        const type = this.getConditionType(position);\r\n        const numberOfInputs = this.getNumberOfInputs(type);\r\n        return numberOfInputs > 0;\r\n    }\r\n\r\n    // returns true if the UI represents a working filter, eg all parts are filled out.\r\n    // eg if text filter and textfield blank then returns false.\r\n    protected isConditionUiComplete(position: number): boolean {\r\n        if (position >= this.getNumConditions()) {\r\n            return false;\r\n        } // Condition doesn't exist.\r\n\r\n        const type = this.getConditionType(position);\r\n\r\n        if (type === 'empty') {\r\n            return false;\r\n        }\r\n\r\n        if (this.getValues(position).some((v) => v == null)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private getNumConditions(): number {\r\n        return this.eTypes.length;\r\n    }\r\n\r\n    private getUiCompleteConditions(): M[] {\r\n        const conditions: M[] = [];\r\n        for (let position = 0; position < this.getNumConditions(); position++) {\r\n            if (this.isConditionUiComplete(position)) {\r\n                conditions.push(this.createCondition(position));\r\n            }\r\n        }\r\n        return conditions;\r\n    }\r\n\r\n    private createMissingConditionsAndOperators(): void {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        } // don't show incomplete conditions when read only\r\n        for (let i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {\r\n            this.createJoinOperatorPanel();\r\n            this.createOption();\r\n        }\r\n    }\r\n\r\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\r\n        this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);\r\n\r\n        this.eTypes.forEach((eType) => this.resetType(eType));\r\n\r\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) =>\r\n            this.resetJoinOperatorAnd(eJoinOperatorAnd, index, this.joinOperatorId + index)\r\n        );\r\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) =>\r\n            this.resetJoinOperatorOr(eJoinOperatorOr, index, this.joinOperatorId + index)\r\n        );\r\n        this.joinOperatorId++;\r\n\r\n        this.forEachInput((element) => this.resetInput(element));\r\n\r\n        this.resetPlaceholder();\r\n\r\n        this.createMissingConditionsAndOperators();\r\n\r\n        this.lastUiCompletePosition = null;\r\n\r\n        if (!silent) {\r\n            this.onUiChanged();\r\n        }\r\n\r\n        return AgPromise.resolve();\r\n    }\r\n\r\n    private resetType(eType: AgSelect): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\r\n        eType\r\n            .setValue(this.optionsFactory.defaultOption, true)\r\n            .setAriaLabel(filteringLabel)\r\n            .setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);\r\n    }\r\n\r\n    private resetJoinOperatorAnd(eJoinOperatorAnd: AgRadioButton, index: number, uniqueGroupId: number): void {\r\n        this.resetJoinOperator(\r\n            eJoinOperatorAnd,\r\n            index,\r\n            this.defaultJoinOperator === 'AND',\r\n            this.translate('andCondition'),\r\n            uniqueGroupId\r\n        );\r\n    }\r\n\r\n    private resetJoinOperatorOr(eJoinOperatorOr: AgRadioButton, index: number, uniqueGroupId: number): void {\r\n        this.resetJoinOperator(\r\n            eJoinOperatorOr,\r\n            index,\r\n            this.defaultJoinOperator === 'OR',\r\n            this.translate('orCondition'),\r\n            uniqueGroupId\r\n        );\r\n    }\r\n\r\n    private resetJoinOperator(\r\n        eJoinOperator: AgRadioButton,\r\n        index: number,\r\n        value: boolean,\r\n        label: string,\r\n        uniqueGroupId: number\r\n    ): void {\r\n        this.updateJoinOperatorDisabled(\r\n            eJoinOperator\r\n                .setValue(value, true)\r\n                .setName(`ag-simple-filter-and-or-${this.getCompId()}-${uniqueGroupId}`)\r\n                .setLabel(label),\r\n            index\r\n        );\r\n    }\r\n\r\n    private updateJoinOperatorsDisabled(): void {\r\n        const updater = (eJoinOperator: AgRadioButton, index: number) =>\r\n            this.updateJoinOperatorDisabled(eJoinOperator, index);\r\n        this.eJoinOperatorsAnd.forEach(updater);\r\n        this.eJoinOperatorsOr.forEach(updater);\r\n    }\r\n\r\n    private updateJoinOperatorDisabled(eJoinOperator: AgRadioButton, index: number): void {\r\n        eJoinOperator.setDisabled(this.isReadOnly() || index > 0);\r\n    }\r\n\r\n    private resetInput(element: E): void {\r\n        this.setElementValue(element, null);\r\n        this.setElementDisabled(element, this.isReadOnly());\r\n    }\r\n\r\n    // puts model values into the UI\r\n    private setConditionIntoUi(model: M | null, position: number): void {\r\n        const values = this.mapValuesFromModel(model);\r\n        this.forEachInput((element, index, elPosition) => {\r\n            if (elPosition !== position) {\r\n                return;\r\n            }\r\n\r\n            this.setElementValue(element, values[index] != null ? values[index] : null);\r\n        });\r\n    }\r\n\r\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\r\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\r\n    private setValueFromFloatingFilter(value: V | null): void {\r\n        this.forEachInput((element, index, position) => {\r\n            this.setElementValue(element, index === 0 && position === 0 ? value : null, true);\r\n        });\r\n    }\r\n\r\n    private addChangedListeners(eType: AgSelect, position: number) {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n\r\n        eType.onValueChange(this.listener);\r\n\r\n        this.forEachPositionInput(position, (element) => {\r\n            this.attachElementOnChange(element, this.listener);\r\n        });\r\n    }\r\n\r\n    /** returns true if the row passes the said condition */\r\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: M) {\r\n        const cellValue = this.getCellValue(params.node);\r\n        const values = this.mapValuesFromModel(filterModel);\r\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\r\n\r\n        const customFilterResult = evaluateCustomFilter<V>(customFilterOption, values, cellValue);\r\n        if (customFilterResult != null) {\r\n            return customFilterResult;\r\n        }\r\n\r\n        if (cellValue == null) {\r\n            return this.evaluateNullValue(filterModel.type);\r\n        }\r\n\r\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\r\n    }\r\n\r\n    protected hasInvalidInputs(): boolean {\r\n        return false;\r\n    }\r\n}\r\n", "import { _warn } from '../../validation/logging';\r\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\r\nimport type { Comparator, ScalarFilterParams } from './iScalarFilter';\r\nimport type { ISimpleFilterModel, ISimpleFilterModelType, Tuple } from './iSimpleFilter';\r\nimport { SimpleFilter } from './simpleFilter';\r\nimport { isBlank } from './simpleFilterUtils';\r\n\r\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends SimpleFilter<\r\n    M,\r\n    V,\r\n    E\r\n> {\r\n    private scalarFilterParams: ScalarFilterParams;\r\n\r\n    protected abstract comparator(): Comparator<V>;\r\n\r\n    protected override setParams(params: ScalarFilterParams): void {\r\n        super.setParams(params);\r\n        this.scalarFilterParams = params;\r\n    }\r\n\r\n    protected evaluateNullValue(filterType?: ISimpleFilterModelType | null) {\r\n        const {\r\n            includeBlanksInEquals,\r\n            includeBlanksInNotEqual,\r\n            includeBlanksInGreaterThan,\r\n            includeBlanksInLessThan,\r\n            includeBlanksInRange,\r\n        } = this.scalarFilterParams;\r\n        switch (filterType) {\r\n            case 'equals':\r\n                if (includeBlanksInEquals) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'notEqual':\r\n                if (includeBlanksInNotEqual) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'greaterThan':\r\n            case 'greaterThanOrEqual':\r\n                if (includeBlanksInGreaterThan) {\r\n                    return true;\r\n                }\r\n                break;\r\n\r\n            case 'lessThan':\r\n            case 'lessThanOrEqual':\r\n                if (includeBlanksInLessThan) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'inRange':\r\n                if (includeBlanksInRange) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'blank':\r\n                return true;\r\n            case 'notBlank':\r\n                return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected evaluateNonNullValue(values: Tuple<V>, cellValue: V, filterModel: M): boolean {\r\n        const comparator = this.comparator();\r\n        const compareResult = values[0] != null ? comparator(values[0]!, cellValue) : 0;\r\n\r\n        switch (filterModel.type) {\r\n            case 'equals':\r\n                return compareResult === 0;\r\n\r\n            case 'notEqual':\r\n                return compareResult !== 0;\r\n\r\n            case 'greaterThan':\r\n                return compareResult > 0;\r\n\r\n            case 'greaterThanOrEqual':\r\n                return compareResult >= 0;\r\n\r\n            case 'lessThan':\r\n                return compareResult < 0;\r\n\r\n            case 'lessThanOrEqual':\r\n                return compareResult <= 0;\r\n\r\n            case 'inRange': {\r\n                const compareToResult = comparator(values[1]!, cellValue);\r\n\r\n                return this.scalarFilterParams.inRangeInclusive\r\n                    ? compareResult >= 0 && compareToResult <= 0\r\n                    : compareResult > 0 && compareToResult < 0;\r\n            }\r\n\r\n            case 'blank':\r\n                return isBlank(cellValue);\r\n\r\n            case 'notBlank':\r\n                return !isBlank(cellValue);\r\n\r\n            default:\r\n                _warn(76, { filterModelType: filterModel.type });\r\n                return true;\r\n        }\r\n    }\r\n}\r\n", "import { _getDateCompDetails } from '../../../components/framework/userCompUtils';\r\nimport type { UserComponentFactory } from '../../../components/framework/userComponentFactory';\r\nimport type { Context } from '../../../context/context';\r\nimport type { IDateComp, IDateParams } from '../../../interfaces/dateComponent';\r\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\r\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\n\r\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\r\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\r\nexport class DateCompWrapper {\r\n    private dateComp: IDateComp | null | undefined;\r\n    private tempValue: Date | null;\r\n    private disabled: boolean | null;\r\n    private alive = true;\r\n    private context: Context;\r\n    private eParent: HTMLElement;\r\n\r\n    constructor(\r\n        context: Context,\r\n        userCompFactory: UserComponentFactory,\r\n        dateComponentParams: WithoutGridCommon<IDateParams>,\r\n        eParent: HTMLElement,\r\n        onReady?: (comp: DateCompWrapper) => void\r\n    ) {\r\n        this.context = context;\r\n        this.eParent = eParent;\r\n\r\n        const compDetails = _getDateCompDetails(userCompFactory, dateComponentParams);\r\n        if (!compDetails) {\r\n            return;\r\n        }\r\n        compDetails.newAgStackInstance().then((dateComp) => {\r\n            // because async, check the filter still exists after component comes back\r\n            if (!this.alive) {\r\n                context.destroyBean(dateComp);\r\n                return;\r\n            }\r\n\r\n            this.dateComp = dateComp;\r\n\r\n            if (!dateComp) {\r\n                return;\r\n            }\r\n\r\n            eParent.appendChild(dateComp.getGui());\r\n\r\n            dateComp?.afterGuiAttached?.();\r\n\r\n            const { tempValue, disabled } = this;\r\n            if (tempValue) {\r\n                dateComp.setDate(tempValue);\r\n            }\r\n            if (disabled != null) {\r\n                dateComp.setDisabled?.(disabled);\r\n            }\r\n\r\n            onReady?.(this);\r\n        });\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.alive = false;\r\n        this.dateComp = this.context.destroyBean(this.dateComp);\r\n    }\r\n\r\n    public getDate(): Date | null {\r\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\r\n    }\r\n\r\n    public setDate(value: Date | null): void {\r\n        const dateComp = this.dateComp;\r\n        if (dateComp) {\r\n            dateComp.setDate(value);\r\n        } else {\r\n            this.tempValue = value;\r\n        }\r\n    }\r\n\r\n    public setDisabled(disabled: boolean): void {\r\n        const dateComp = this.dateComp;\r\n        if (dateComp) {\r\n            dateComp.setDisabled?.(disabled);\r\n        } else {\r\n            this.disabled = disabled;\r\n        }\r\n    }\r\n\r\n    public setDisplayed(displayed: boolean) {\r\n        _setDisplayed(this.eParent, displayed);\r\n    }\r\n\r\n    public setInputPlaceholder(placeholder: string): void {\r\n        this.dateComp?.setInputPlaceholder?.(placeholder);\r\n    }\r\n\r\n    public setInputAriaLabel(label: string): void {\r\n        this.dateComp?.setInputAriaLabel?.(label);\r\n    }\r\n\r\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n        this.dateComp?.afterGuiAttached?.(params);\r\n    }\r\n\r\n    public updateParams(params: IDateParams): void {\r\n        this.dateComp?.refresh?.(params);\r\n    }\r\n}\r\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\r\n\r\nexport const DEFAULT_DATE_FILTER_OPTIONS: ISimpleFilterModelType[] = [\r\n    'equals',\r\n    'notEqual',\r\n    'lessThan',\r\n    'greaterThan',\r\n    'inRange',\r\n    'blank',\r\n    'notBlank',\r\n];\r\n", "import type { IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\r\nimport type { LocaleTextFunc } from '../../misc/locale/localeUtils';\r\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\r\nimport type { ICombinedSimpleModel, ISimpleFilterModel } from './iSimpleFilter';\r\nimport type { OptionsFactory } from './optionsFactory';\r\n\r\nexport abstract class SimpleFilterModelFormatter<TValue = any> {\r\n    constructor(\r\n        private readonly getLocaleTextFunc: () => LocaleTextFunc,\r\n        private optionsFactory: OptionsFactory,\r\n        protected readonly valueFormatter?: (value: TValue | null) => string | null\r\n    ) {}\r\n\r\n    // used by:\r\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\r\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\r\n    public getModelAsString(model: ISimpleFilterModel | null): string | null {\r\n        if (!model) {\r\n            return null;\r\n        }\r\n        const isCombined = (model as any).operator != null;\r\n        const translate = this.getLocaleTextFunc();\r\n        if (isCombined) {\r\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\r\n            const conditions = combinedModel.conditions ?? [];\r\n            const customOptions = conditions.map((condition) => this.getModelAsString(condition));\r\n            const joinOperatorTranslateKey = combinedModel.operator === 'AND' ? 'andCondition' : 'orCondition';\r\n            return customOptions.join(\r\n                ` ${translate(joinOperatorTranslateKey, FILTER_LOCALE_TEXT[joinOperatorTranslateKey])} `\r\n            );\r\n        } else if (model.type === 'blank' || model.type === 'notBlank') {\r\n            return translate(model.type, model.type);\r\n        } else {\r\n            const condition = model as ISimpleFilterModel;\r\n            const customOption = this.optionsFactory.getCustomOption(condition.type);\r\n\r\n            // For custom filter options we display the Name of the filter instead\r\n            // of displaying the `from` value, as it wouldn't be relevant\r\n            const { displayKey, displayName, numberOfInputs } = customOption || {};\r\n            if (displayKey && displayName && numberOfInputs === 0) {\r\n                translate(displayKey, displayName);\r\n                return displayName;\r\n            }\r\n            return this.conditionToString(condition, customOption);\r\n        }\r\n    }\r\n\r\n    // creates text equivalent of FilterModel. if it's a combined model, this takes just one condition.\r\n    protected abstract conditionToString(condition: ProvidedFilterModel, opts?: IFilterOptionDef): string;\r\n\r\n    public updateParams(params: { optionsFactory: OptionsFactory }) {\r\n        this.optionsFactory = params.optionsFactory;\r\n    }\r\n\r\n    protected formatValue(value?: TValue | null): string {\r\n        const valueFormatter = this.valueFormatter;\r\n        return valueFormatter ? valueFormatter(value ?? null) ?? '' : String(value);\r\n    }\r\n}\r\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\r\nimport type { LocaleTextFunc } from '../../../misc/locale/localeUtils';\r\nimport { _dateToFormattedString, _parseDateTimeFromString } from '../../../utils/date';\r\nimport type { OptionsFactory } from '../optionsFactory';\r\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\r\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\r\n\r\nexport class DateFilterModelFormatter extends SimpleFilterModelFormatter {\r\n    constructor(\r\n        private dateFilterParams: DateFilterParams,\r\n        getLocaleTextFunc: () => LocaleTextFunc,\r\n        optionsFactory: OptionsFactory\r\n    ) {\r\n        super(getLocaleTextFunc, optionsFactory);\r\n    }\r\n\r\n    protected conditionToString(condition: DateFilterModel, options?: IFilterOptionDef): string {\r\n        const { type } = condition;\r\n        const { numberOfInputs } = options || {};\r\n        const isRange = type == 'inRange' || numberOfInputs === 2;\r\n\r\n        const dateFrom = _parseDateTimeFromString(condition.dateFrom);\r\n        const dateTo = _parseDateTimeFromString(condition.dateTo);\r\n\r\n        const format = this.dateFilterParams.inRangeFloatingFilterDateFormat;\r\n        if (isRange) {\r\n            const formattedFrom = dateFrom !== null ? _dateToFormattedString(dateFrom, format) : 'null';\r\n            const formattedTo = dateTo !== null ? _dateToFormattedString(dateTo, format) : 'null';\r\n            return `${formattedFrom}-${formattedTo}`;\r\n        }\r\n\r\n        if (dateFrom != null) {\r\n            return _dateToFormattedString(dateFrom, format);\r\n        }\r\n\r\n        // cater for when the type doesn't need a value\r\n        return `${type}`;\r\n    }\r\n\r\n    public override updateParams(params: { dateFilterParams: DateFilterParams; optionsFactory: OptionsFactory }): void {\r\n        super.updateParams(params);\r\n        this.dateFilterParams = params.dateFilterParams;\r\n    }\r\n}\r\n", "import { _getDocument } from '../../../gridOptionsUtils';\r\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\r\nimport { _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\r\nimport { _warn } from '../../../validation/logging';\r\nimport type { FILTER_LOCALE_TEXT } from '../../filterLocaleText';\r\nimport type { Comparator } from '../iScalarFilter';\r\nimport type { ISimpleFilterModel, Tuple } from '../iSimpleFilter';\r\nimport { ScalarFilter } from '../scalarFilter';\r\nimport { removeItems } from '../simpleFilterUtils';\r\nimport { DateCompWrapper } from './dateCompWrapper';\r\nimport { DEFAULT_DATE_FILTER_OPTIONS } from './dateFilterConstants';\r\nimport { DateFilterModelFormatter } from './dateFilterModelFormatter';\r\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\r\n\r\nconst DEFAULT_MIN_YEAR = 1000;\r\nconst DEFAULT_MAX_YEAR = Infinity;\r\n\r\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date, DateCompWrapper> {\r\n    private readonly eConditionPanelsFrom: HTMLElement[] = [];\r\n    private readonly eConditionPanelsTo: HTMLElement[] = [];\r\n\r\n    private readonly dateConditionFromComps: DateCompWrapper[] = [];\r\n    private readonly dateConditionToComps: DateCompWrapper[] = [];\r\n\r\n    private dateFilterParams: DateFilterParams;\r\n    private minValidYear: number = DEFAULT_MIN_YEAR;\r\n    private maxValidYear: number = DEFAULT_MAX_YEAR;\r\n    private minValidDate: Date | null = null;\r\n    private maxValidDate: Date | null = null;\r\n    private filterModelFormatter: DateFilterModelFormatter;\r\n\r\n    protected filterType = 'date' as const;\r\n\r\n    constructor() {\r\n        super('dateFilter');\r\n    }\r\n\r\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n        super.afterGuiAttached(params);\r\n\r\n        this.dateConditionFromComps[0].afterGuiAttached(params);\r\n    }\r\n\r\n    protected mapValuesFromModel(filterModel: DateFilterModel | null): Tuple<Date> {\r\n        // unlike the other filters, we do two things here:\r\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\r\n        //    are in different locations in Date and Number filter models)\r\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\r\n        //\r\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\r\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\r\n        //       the model. When we recreate the date again here, it's without a timezone.\r\n        const { dateFrom, dateTo, type } = filterModel || {};\r\n        return [\r\n            (dateFrom && _parseDateTimeFromString(dateFrom)) || null,\r\n            (dateTo && _parseDateTimeFromString(dateTo)) || null,\r\n        ].slice(0, this.getNumberOfInputs(type));\r\n    }\r\n\r\n    protected comparator(): Comparator<Date> {\r\n        return this.dateFilterParams.comparator ?? defaultDateComparator;\r\n    }\r\n\r\n    protected override setParams(params: DateFilterParams): void {\r\n        this.dateFilterParams = params;\r\n\r\n        super.setParams(params);\r\n\r\n        const yearParser = (param: keyof DateFilterParams, fallback: number) => {\r\n            if (params[param] != null) {\r\n                if (!isNaN(params[param])) {\r\n                    return params[param] == null ? fallback : Number(params[param]);\r\n                } else {\r\n                    _warn(82, { param });\r\n                }\r\n            }\r\n\r\n            return fallback;\r\n        };\r\n\r\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\r\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\r\n\r\n        if (this.minValidYear > this.maxValidYear) {\r\n            _warn(83);\r\n        }\r\n\r\n        this.minValidDate = params.minValidDate\r\n            ? params.minValidDate instanceof Date\r\n                ? params.minValidDate\r\n                : _parseDateTimeFromString(params.minValidDate)\r\n            : null;\r\n\r\n        this.maxValidDate = params.maxValidDate\r\n            ? params.maxValidDate instanceof Date\r\n                ? params.maxValidDate\r\n                : _parseDateTimeFromString(params.maxValidDate)\r\n            : null;\r\n\r\n        if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {\r\n            _warn(84);\r\n        }\r\n\r\n        this.filterModelFormatter = new DateFilterModelFormatter(\r\n            this.dateFilterParams,\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory\r\n        );\r\n    }\r\n\r\n    createDateCompWrapper(element: HTMLElement): DateCompWrapper {\r\n        const { userCompFactory, context } = this.beans;\r\n        const dateCompWrapper = new DateCompWrapper(\r\n            context,\r\n            userCompFactory,\r\n            {\r\n                onDateChanged: () => this.onUiChanged(),\r\n                filterParams: this.dateFilterParams,\r\n                location: 'filter',\r\n            },\r\n            element\r\n        );\r\n        this.addDestroyFunc(() => dateCompWrapper.destroy());\r\n        return dateCompWrapper;\r\n    }\r\n\r\n    protected override setElementValue(element: DateCompWrapper, value: Date | null): void {\r\n        element.setDate(value);\r\n    }\r\n\r\n    protected override setElementDisplayed(element: DateCompWrapper, displayed: boolean): void {\r\n        element.setDisplayed(displayed);\r\n    }\r\n\r\n    protected override setElementDisabled(element: DateCompWrapper, disabled: boolean): void {\r\n        element.setDisabled(disabled);\r\n    }\r\n\r\n    protected getDefaultFilterOptions(): string[] {\r\n        return DEFAULT_DATE_FILTER_OPTIONS;\r\n    }\r\n\r\n    protected createValueElement(): HTMLElement {\r\n        const eDocument = _getDocument(this.beans);\r\n        const eCondition = eDocument.createElement('div');\r\n        eCondition.classList.add('ag-filter-body');\r\n\r\n        this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, 'from');\r\n        this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, 'to');\r\n\r\n        return eCondition;\r\n    }\r\n\r\n    private createFromToElement(\r\n        eCondition: HTMLElement,\r\n        eConditionPanels: HTMLElement[],\r\n        dateConditionComps: DateCompWrapper[],\r\n        fromTo: string\r\n    ): void {\r\n        const eDocument = _getDocument(this.beans);\r\n        const eConditionPanel = eDocument.createElement('div');\r\n        eConditionPanel.classList.add(`ag-filter-${fromTo}`);\r\n        eConditionPanel.classList.add(`ag-filter-date-${fromTo}`);\r\n        eConditionPanels.push(eConditionPanel);\r\n        eCondition.appendChild(eConditionPanel);\r\n        dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));\r\n    }\r\n\r\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\r\n        this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);\r\n        this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);\r\n        removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);\r\n        removeItems(this.eConditionPanelsTo, startPosition, deleteCount);\r\n    }\r\n\r\n    protected removeDateComps(components: DateCompWrapper[], startPosition: number, deleteCount?: number): void {\r\n        const removedComponents = removeItems(components, startPosition, deleteCount);\r\n        removedComponents.forEach((comp) => comp.destroy());\r\n    }\r\n\r\n    private isValidDateValue(value: Date | null): boolean {\r\n        if (value === null) {\r\n            return false;\r\n        }\r\n\r\n        const { minValidDate, maxValidDate, minValidYear, maxValidYear } = this;\r\n\r\n        if (minValidDate) {\r\n            if (value < minValidDate) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (value.getUTCFullYear() < minValidYear) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (maxValidDate) {\r\n            if (value > maxValidDate) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (value.getUTCFullYear() > maxValidYear) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected override isConditionUiComplete(position: number): boolean {\r\n        if (!super.isConditionUiComplete(position)) {\r\n            return false;\r\n        }\r\n\r\n        let valid = true;\r\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\r\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\r\n                return;\r\n            }\r\n            valid = valid && this.isValidDateValue(element.getDate());\r\n        });\r\n\r\n        return valid;\r\n    }\r\n\r\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\r\n        return (\r\n            aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type\r\n        );\r\n    }\r\n\r\n    protected createCondition(position: number): DateFilterModel {\r\n        const type = this.getConditionType(position);\r\n        const model: Partial<DateFilterModel> = {};\r\n\r\n        const values = this.getValues(position);\r\n        if (values.length > 0) {\r\n            model.dateFrom = _serialiseDate(values[0]);\r\n        }\r\n        if (values.length > 1) {\r\n            model.dateTo = _serialiseDate(values[1]);\r\n        }\r\n\r\n        return {\r\n            dateFrom: null,\r\n            dateTo: null,\r\n            filterType: this.filterType,\r\n            type,\r\n            ...model,\r\n        };\r\n    }\r\n\r\n    protected override resetPlaceholder(): void {\r\n        const globalTranslate = this.getLocaleTextFunc();\r\n        const placeholder = this.translate('dateFormatOoo');\r\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\r\n\r\n        this.forEachInput((element) => {\r\n            element.setInputPlaceholder(placeholder);\r\n            element.setInputAriaLabel(ariaLabel);\r\n        });\r\n    }\r\n\r\n    protected getInputs(position: number): Tuple<DateCompWrapper> {\r\n        const { dateConditionFromComps, dateConditionToComps } = this;\r\n        if (position >= dateConditionFromComps.length) {\r\n            return [null, null];\r\n        }\r\n        return [dateConditionFromComps[position], dateConditionToComps[position]];\r\n    }\r\n\r\n    protected getValues(position: number): Tuple<Date> {\r\n        const result: Tuple<Date> = [];\r\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\r\n            if (index < numberOfInputs) {\r\n                result.push(element.getDate());\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    protected override translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\r\n        if (key === 'lessThan') {\r\n            return super.translate('before');\r\n        }\r\n        if (key === 'greaterThan') {\r\n            return super.translate('after');\r\n        }\r\n        return super.translate(key);\r\n    }\r\n\r\n    public getModelAsString(model: ISimpleFilterModel): string {\r\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\r\n    }\r\n}\r\n\r\nfunction defaultDateComparator(filterDate: Date, cellValue: any): number {\r\n    // The default comparator assumes that the cellValue is a date\r\n    const cellAsDate = cellValue as Date;\r\n\r\n    if (cellValue == null || cellAsDate < filterDate) {\r\n        return -1;\r\n    }\r\n    if (cellAsDate > filterDate) {\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n", "import type { AgColumn } from '../../../entities/agColumn';\r\nimport type { FilterChangedEvent } from '../../../events';\r\nimport type { ProvidedFilterModel } from '../../../interfaces/iFilter';\r\nimport { Component } from '../../../widgets/component';\r\nimport type { ProvidedFilterParams } from '../../provided/iProvidedFilter';\r\nimport type { ScalarFilterParams } from '../../provided/iScalarFilter';\r\nimport type {\r\n    ICombinedSimpleModel,\r\n    ISimpleFilter,\r\n    ISimpleFilterModel,\r\n    ISimpleFilterModelType,\r\n} from '../../provided/iSimpleFilter';\r\nimport { OptionsFactory } from '../../provided/optionsFactory';\r\nimport type { SimpleFilterModelFormatter } from '../../provided/simpleFilterModelFormatter';\r\nimport type { IFloatingFilterComp, IFloatingFilterParams } from '../floatingFilter';\r\n\r\nexport abstract class SimpleFloatingFilter extends Component implements IFloatingFilterComp<ISimpleFilter> {\r\n    // this method is on IFloatingFilterComp. because it's not implemented at this level, we have to\r\n    // define it as an abstract method. it gets implemented in sub classes.\r\n    public abstract onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void;\r\n\r\n    protected abstract getDefaultOptions(): string[];\r\n    protected abstract setEditable(editable: boolean): void;\r\n\r\n    protected abstract filterModelFormatter: SimpleFilterModelFormatter;\r\n\r\n    protected lastType: string | null | undefined;\r\n    protected optionsFactory: OptionsFactory;\r\n    protected readOnly: boolean;\r\n    protected defaultDebounceMs: number = 0;\r\n\r\n    protected setLastTypeFromModel(model: ProvidedFilterModel): void {\r\n        // if no model provided by the parent filter use default\r\n        if (!model) {\r\n            this.lastType = this.optionsFactory.defaultOption;\r\n            return;\r\n        }\r\n\r\n        const isCombined = (model as any).operator;\r\n\r\n        let condition: ISimpleFilterModel;\r\n\r\n        if (isCombined) {\r\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\r\n            condition = combinedModel.conditions![0];\r\n        } else {\r\n            condition = model as ISimpleFilterModel;\r\n        }\r\n\r\n        this.lastType = condition.type;\r\n    }\r\n\r\n    protected canWeEditAfterModelFromParentFilter(model: ProvidedFilterModel): boolean {\r\n        if (!model) {\r\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\r\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\r\n            return this.isTypeEditable(this.lastType);\r\n        }\r\n\r\n        // never allow editing if the filter is combined (ie has two parts)\r\n        const isCombined = (model as any).operator;\r\n\r\n        if (isCombined) {\r\n            return false;\r\n        }\r\n\r\n        const simpleModel = model as ISimpleFilterModel;\r\n\r\n        return this.isTypeEditable(simpleModel.type);\r\n    }\r\n\r\n    public init(params: IFloatingFilterParams): void {\r\n        this.setSimpleParams(params, false);\r\n    }\r\n\r\n    private setSimpleParams(params: IFloatingFilterParams, update: boolean = true): void {\r\n        const optionsFactory = new OptionsFactory();\r\n        this.optionsFactory = optionsFactory;\r\n        optionsFactory.init(params.filterParams as ScalarFilterParams, this.getDefaultOptions());\r\n\r\n        const defaultOption = optionsFactory.defaultOption;\r\n        // Initial call\r\n        if (!update) {\r\n            this.lastType = defaultOption;\r\n        }\r\n\r\n        // readOnly is a property of ProvidedFilterParams - we need to find a better (type-safe)\r\n        // way to support reading this in the future.\r\n        this.readOnly = !!(params.filterParams as ProvidedFilterParams).readOnly;\r\n\r\n        // we are editable if:\r\n        // 1) there is a type (user has configured filter wrong if not type)\r\n        //  AND\r\n        // 2) the default type is not 'inRange'\r\n        const editable = this.isTypeEditable(defaultOption);\r\n        this.setEditable(editable);\r\n    }\r\n\r\n    public refresh(params: IFloatingFilterParams): void {\r\n        this.setSimpleParams(params);\r\n    }\r\n\r\n    private hasSingleInput(filterType: string) {\r\n        const numberOfInputs = this.optionsFactory.getCustomOption(filterType)?.numberOfInputs;\r\n        return numberOfInputs == null || numberOfInputs == 1;\r\n    }\r\n\r\n    private isTypeEditable(type?: string | null): boolean {\r\n        const uneditableTypes: ISimpleFilterModelType[] = ['inRange', 'empty', 'blank', 'notBlank'];\r\n        return (\r\n            !!type &&\r\n            !this.readOnly &&\r\n            this.hasSingleInput(type) &&\r\n            uneditableTypes.indexOf(type as ISimpleFilterModelType) < 0\r\n        );\r\n    }\r\n\r\n    protected getAriaLabel(params: IFloatingFilterParams): string {\r\n        const displayName = this.beans.colNames.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\r\n        return `${displayName} ${this.getLocaleTextFunc()('ariaFilterInput', 'Filter Input')}`;\r\n    }\r\n}\r\n", "import type { FilterChangedEvent } from '../../../events';\r\nimport type { IDateParams } from '../../../interfaces/dateComponent';\r\nimport type { WithoutGridCommon } from '../../../interfaces/iCommon';\r\nimport { _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\r\nimport { _setDisplayed } from '../../../utils/dom';\r\nimport { _debounce } from '../../../utils/function';\r\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport type { IFloatingFilterParams } from '../../floating/floatingFilter';\r\nimport { getDebounceMs } from '../../floating/provided/providedFilterUtils';\r\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter';\r\nimport type { ISimpleFilterModel } from '../iSimpleFilter';\r\nimport { DateCompWrapper } from './dateCompWrapper';\r\nimport type { DateFilter } from './dateFilter';\r\nimport { DEFAULT_DATE_FILTER_OPTIONS } from './dateFilterConstants';\r\nimport { DateFilterModelFormatter } from './dateFilterModelFormatter';\r\nimport type { DateFilterModel, DateFilterParams } from './iDateFilter';\r\n\r\nexport class DateFloatingFilter extends SimpleFloatingFilter {\r\n    private readonly eReadOnlyText: AgInputTextField = RefPlaceholder;\r\n    private readonly eDateWrapper: HTMLInputElement = RefPlaceholder;\r\n\r\n    private dateComp: DateCompWrapper;\r\n    private params: IFloatingFilterParams<DateFilter>;\r\n    private filterParams: DateFilterParams;\r\n    protected filterModelFormatter: DateFilterModelFormatter;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */ `\r\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\r\n                <ag-input-text-field data-ref=\"eReadOnlyText\"></ag-input-text-field>\r\n                <div data-ref=\"eDateWrapper\" style=\"display: flex;\"></div>\r\n            </div>`,\r\n            [AgInputTextFieldSelector]\r\n        );\r\n    }\r\n\r\n    protected getDefaultOptions(): string[] {\r\n        return DEFAULT_DATE_FILTER_OPTIONS;\r\n    }\r\n\r\n    public override init(params: IFloatingFilterParams<DateFilter>): void {\r\n        super.init(params);\r\n        this.params = params;\r\n        this.filterParams = params.filterParams;\r\n\r\n        this.createDateComponent();\r\n        this.filterModelFormatter = new DateFilterModelFormatter(\r\n            this.filterParams,\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory\r\n        );\r\n        const translate = this.getLocaleTextFunc();\r\n        this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));\r\n    }\r\n\r\n    public override refresh(params: IFloatingFilterParams<DateFilter>): void {\r\n        super.refresh(params);\r\n        this.params = params;\r\n        this.filterParams = params.filterParams;\r\n\r\n        const dateParams = this.gos.addGridCommonParams(this.getDateComponentParams());\r\n        this.dateComp.updateParams(dateParams);\r\n\r\n        this.filterModelFormatter.updateParams({\r\n            optionsFactory: this.optionsFactory,\r\n            dateFilterParams: this.filterParams,\r\n        });\r\n        this.updateCompOnModelChange(params.currentParentModel());\r\n    }\r\n\r\n    private updateCompOnModelChange(model: any): void {\r\n        // Update the read-only text field\r\n        const allowEditing = !this.readOnly && this.canWeEditAfterModelFromParentFilter(model);\r\n        this.setEditable(allowEditing);\r\n\r\n        if (allowEditing) {\r\n            const dateModel = (model as DateFilterModel) ? _parseDateTimeFromString(model.dateFrom) : null;\r\n            this.dateComp.setDate(dateModel);\r\n\r\n            this.eReadOnlyText.setValue('');\r\n        } else {\r\n            this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));\r\n            this.dateComp.setDate(null);\r\n        }\r\n    }\r\n\r\n    protected setEditable(editable: boolean): void {\r\n        _setDisplayed(this.eDateWrapper, editable);\r\n        _setDisplayed(this.eReadOnlyText.getGui(), !editable);\r\n    }\r\n\r\n    public onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void {\r\n        // We don't want to update the floating filter if the floating filter caused the change,\r\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\r\n        // as it would be updating as the user is typing.\r\n        // This is similar for data changes, which don't affect provided date floating filters\r\n        if (event?.afterFloatingFilter || event?.afterDataChange) {\r\n            return;\r\n        }\r\n\r\n        super.setLastTypeFromModel(model);\r\n        this.updateCompOnModelChange(model);\r\n    }\r\n\r\n    private onDateChanged(): void {\r\n        const filterValueDate = this.dateComp.getDate();\r\n        const filterValueText = _serialiseDate(filterValueDate);\r\n\r\n        this.params.parentFilterInstance((filterInstance) => {\r\n            if (filterInstance) {\r\n                const date = _parseDateTimeFromString(filterValueText);\r\n                filterInstance.onFloatingFilterChanged(this.lastType || null, date);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getDateComponentParams(): WithoutGridCommon<IDateParams> {\r\n        const { filterParams, column } = this.params;\r\n        const debounceMs = getDebounceMs(filterParams, this.defaultDebounceMs);\r\n        return {\r\n            onDateChanged: _debounce(this, this.onDateChanged.bind(this), debounceMs),\r\n            filterParams: column.getColDef().filterParams,\r\n            location: 'floatingFilter',\r\n        };\r\n    }\r\n\r\n    private createDateComponent(): void {\r\n        const {\r\n            beans: { context, userCompFactory },\r\n            eDateWrapper,\r\n        } = this;\r\n        this.dateComp = new DateCompWrapper(\r\n            context,\r\n            userCompFactory,\r\n            this.getDateComponentParams(),\r\n            eDateWrapper,\r\n            (dateComp) => {\r\n                dateComp.setInputAriaLabel(this.getAriaLabel(this.params));\r\n            }\r\n        );\r\n\r\n        this.addDestroyFunc(() => this.dateComp.destroy());\r\n    }\r\n}\r\n", "import { _getActiveDomElement } from '../../../gridOptionsUtils';\r\nimport type { IDateComp, IDateParams } from '../../../interfaces/dateComponent';\r\nimport type { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\r\nimport { _isBrowserSafari } from '../../../utils/browser';\r\nimport { _dateToFormattedString, _parseDateTimeFromString, _serialiseDate } from '../../../utils/date';\r\nimport { _warn } from '../../../validation/logging';\r\nimport type { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport { AgInputTextFieldSelector } from '../../../widgets/agInputTextField';\r\nimport { Component, RefPlaceholder } from '../../../widgets/component';\r\n\r\nexport class DefaultDateComponent extends Component implements IDateComp {\r\n    private readonly eDateInput: AgInputTextField = RefPlaceholder;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */ `\r\n            <div class=\"ag-filter-filter\">\r\n                <ag-input-text-field class=\"ag-date-filter\" data-ref=\"eDateInput\"></ag-input-text-field>\r\n            </div>`,\r\n            [AgInputTextFieldSelector]\r\n        );\r\n    }\r\n\r\n    private params: IDateParams;\r\n    private usingSafariDatePicker: boolean;\r\n    private isApply: boolean = false;\r\n    private applyOnFocusOut: boolean = false;\r\n\r\n    public init(params: IDateParams): void {\r\n        this.params = params;\r\n        this.setParams(params);\r\n\r\n        const inputElement = this.eDateInput.getInputElement();\r\n\r\n        this.addManagedListeners(inputElement, {\r\n            // ensures that the input element is focussed when a clear button is clicked,\r\n            // unless using safari as there is no clear button and focus does not work properly\r\n            mouseDown: () => {\r\n                if (this.eDateInput.isDisabled() || this.usingSafariDatePicker) {\r\n                    return;\r\n                }\r\n                inputElement.focus({ preventScroll: true });\r\n            },\r\n            input: this.handleInput.bind(this, false),\r\n            change: this.handleInput.bind(this, true),\r\n            focusout: this.handleFocusOut.bind(this),\r\n        });\r\n    }\r\n\r\n    private handleInput(isChange: boolean, e: InputEvent): void {\r\n        if (e.target !== _getActiveDomElement(this.beans)) {\r\n            return;\r\n        }\r\n        if (this.eDateInput.isDisabled()) {\r\n            return;\r\n        }\r\n\r\n        if (this.isApply) {\r\n            // If it's input event, queue up apply on focus out.\r\n            // If it's change, clear and run.\r\n            this.applyOnFocusOut = !isChange;\r\n            if (isChange) {\r\n                this.params.onDateChanged();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!isChange) {\r\n            // if not apply, execute on input\r\n            this.params.onDateChanged();\r\n        }\r\n    }\r\n\r\n    private handleFocusOut(): void {\r\n        if (this.applyOnFocusOut) {\r\n            this.applyOnFocusOut = false;\r\n            this.params.onDateChanged();\r\n        }\r\n    }\r\n\r\n    private setParams(params: IDateParams): void {\r\n        const inputElement = this.eDateInput.getInputElement();\r\n\r\n        const shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);\r\n        this.usingSafariDatePicker = shouldUseBrowserDatePicker && _isBrowserSafari();\r\n\r\n        inputElement.type = shouldUseBrowserDatePicker ? 'date' : 'text';\r\n\r\n        const { minValidYear, maxValidYear, minValidDate, maxValidDate, buttons } = params.filterParams || {};\r\n\r\n        if (minValidDate && minValidYear) {\r\n            _warn(85);\r\n        }\r\n\r\n        if (maxValidDate && maxValidYear) {\r\n            _warn(86);\r\n        }\r\n\r\n        if (minValidDate && maxValidDate) {\r\n            const [parsedMinValidDate, parsedMaxValidDate] = [minValidDate, maxValidDate].map((v) =>\r\n                v instanceof Date ? v : _parseDateTimeFromString(v)\r\n            );\r\n\r\n            if (\r\n                parsedMinValidDate &&\r\n                parsedMaxValidDate &&\r\n                parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()\r\n            ) {\r\n                _warn(87);\r\n            }\r\n        }\r\n\r\n        if (minValidDate) {\r\n            if (minValidDate instanceof Date) {\r\n                inputElement.min = _dateToFormattedString(minValidDate);\r\n            } else {\r\n                inputElement.min = minValidDate;\r\n            }\r\n        } else {\r\n            if (minValidYear) {\r\n                inputElement.min = `${minValidYear}-01-01`;\r\n            }\r\n        }\r\n\r\n        if (maxValidDate) {\r\n            if (maxValidDate instanceof Date) {\r\n                inputElement.max = _dateToFormattedString(maxValidDate);\r\n            } else {\r\n                inputElement.max = maxValidDate;\r\n            }\r\n        } else {\r\n            if (maxValidYear) {\r\n                inputElement.max = `${maxValidYear}-12-31`;\r\n            }\r\n        }\r\n\r\n        this.isApply = params.location === 'floatingFilter' && !!buttons?.includes('apply');\r\n    }\r\n\r\n    public refresh(params: IDateParams): void {\r\n        this.params = params;\r\n        this.setParams(params);\r\n    }\r\n\r\n    public getDate(): Date | null {\r\n        return _parseDateTimeFromString(this.eDateInput.getValue());\r\n    }\r\n\r\n    public setDate(date: Date): void {\r\n        this.eDateInput.setValue(_serialiseDate(date, false));\r\n    }\r\n\r\n    public setInputPlaceholder(placeholder: string): void {\r\n        this.eDateInput.setInputPlaceholder(placeholder);\r\n    }\r\n\r\n    public setInputAriaLabel(ariaLabel: string): void {\r\n        this.eDateInput.setAriaLabel(ariaLabel);\r\n    }\r\n\r\n    public setDisabled(disabled: boolean): void {\r\n        this.eDateInput.setDisabled(disabled);\r\n    }\r\n\r\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n        if (!params || !params.suppressFocus) {\r\n            this.eDateInput.getInputElement().focus({ preventScroll: true });\r\n        }\r\n    }\r\n\r\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\r\n        return params?.filterParams?.browserDatePicker ?? true;\r\n    }\r\n}\r\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\r\n\r\nexport const DEFAULT_NUMBER_FILTER_OPTIONS: ISimpleFilterModelType[] = [\r\n    'equals',\r\n    'notEqual',\r\n    'greaterThan',\r\n    'greaterThanOrEqual',\r\n    'lessThan',\r\n    'lessThanOrEqual',\r\n    'inRange',\r\n    'blank',\r\n    'notBlank',\r\n];\r\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\r\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\r\nimport type { NumberFilterModel } from './iNumberFilter';\r\n\r\nexport class NumberFilterModelFormatter extends SimpleFilterModelFormatter<number> {\r\n    protected conditionToString(condition: NumberFilterModel, options?: IFilterOptionDef): string {\r\n        const { numberOfInputs } = options || {};\r\n        const { filter, filterTo, type } = condition;\r\n\r\n        const isRange = type == 'inRange' || numberOfInputs === 2;\r\n        const formatValue = this.formatValue.bind(this);\r\n\r\n        if (isRange) {\r\n            return `${formatValue(filter)}-${formatValue(filterTo)}`;\r\n        }\r\n\r\n        // cater for when the type doesn't need a value\r\n        if (filter != null) {\r\n            return formatValue(filter);\r\n        }\r\n\r\n        return `${type}`;\r\n    }\r\n}\r\n", "import type { NumberFilterParams } from './iNumberFilter';\r\n\r\nexport function getAllowedCharPattern(filterParams?: NumberFilterParams): string | null {\r\n    const { allowedCharPattern } = filterParams ?? {};\r\n\r\n    return allowedCharPattern ?? null;\r\n}\r\n", "import { _setAriaRole } from '../../../utils/aria';\r\nimport { _makeNull } from '../../../utils/generic';\r\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\r\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport type { Comparator } from '../iScalarFilter';\r\nimport type { ISimpleFilterModel, Tuple } from '../iSimpleFilter';\r\nimport { ScalarFilter } from '../scalarFilter';\r\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\r\nimport type { NumberFilterModel, NumberFilterParams } from './iNumberFilter';\r\nimport { DEFAULT_NUMBER_FILTER_OPTIONS } from './numberFilterConstants';\r\nimport { NumberFilterModelFormatter } from './numberFilterModelFormatter';\r\nimport { getAllowedCharPattern } from './numberFilterUtils';\r\n\r\nexport class NumberFilter extends ScalarFilter<NumberFilterModel, number> {\r\n    private readonly eValuesFrom: (AgInputTextField | AgInputNumberField)[] = [];\r\n    private readonly eValuesTo: (AgInputTextField | AgInputNumberField)[] = [];\r\n\r\n    private numberFilterParams: NumberFilterParams;\r\n    private filterModelFormatter: SimpleFilterModelFormatter;\r\n\r\n    protected filterType = 'number' as const;\r\n\r\n    constructor() {\r\n        super('numberFilter');\r\n    }\r\n\r\n    override refresh(params: NumberFilterParams): boolean {\r\n        if (this.numberFilterParams.allowedCharPattern !== params.allowedCharPattern) {\r\n            return false;\r\n        }\r\n\r\n        return super.refresh(params);\r\n    }\r\n\r\n    protected mapValuesFromModel(filterModel: NumberFilterModel | null): Tuple<number> {\r\n        const { filter, filterTo, type } = filterModel || {};\r\n        return [this.processValue(filter), this.processValue(filterTo)].slice(0, this.getNumberOfInputs(type));\r\n    }\r\n\r\n    protected override defaultDebounceMs: number = 500;\r\n\r\n    protected comparator(): Comparator<number> {\r\n        return (left: number, right: number): number => {\r\n            if (left === right) {\r\n                return 0;\r\n            }\r\n\r\n            return left < right ? 1 : -1;\r\n        };\r\n    }\r\n\r\n    protected override setParams(params: NumberFilterParams): void {\r\n        this.numberFilterParams = params;\r\n\r\n        super.setParams(params);\r\n        this.filterModelFormatter = new NumberFilterModelFormatter(\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory,\r\n            this.numberFilterParams.numberFormatter\r\n        );\r\n    }\r\n\r\n    protected getDefaultFilterOptions(): string[] {\r\n        return DEFAULT_NUMBER_FILTER_OPTIONS;\r\n    }\r\n\r\n    protected override setElementValue(\r\n        element: AgInputTextField | AgInputNumberField,\r\n        value: number | null,\r\n        fromFloatingFilter?: boolean\r\n    ): void {\r\n        // values from floating filter are directly from the input, not from the model\r\n        const { numberFormatter } = this.numberFilterParams;\r\n        const valueToSet = !fromFloatingFilter && numberFormatter ? numberFormatter(value ?? null) : value;\r\n        super.setElementValue(element, valueToSet as any);\r\n    }\r\n\r\n    protected createValueElement(): HTMLElement {\r\n        const allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);\r\n\r\n        const eCondition = document.createElement('div');\r\n        eCondition.classList.add('ag-filter-body');\r\n        _setAriaRole(eCondition, 'presentation');\r\n\r\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from', allowedCharPattern);\r\n        this.createFromToElement(eCondition, this.eValuesTo, 'to', allowedCharPattern);\r\n\r\n        return eCondition;\r\n    }\r\n\r\n    private createFromToElement(\r\n        eCondition: HTMLElement,\r\n        eValues: (AgInputTextField | AgInputNumberField)[],\r\n        fromTo: string,\r\n        allowedCharPattern: string | null\r\n    ): void {\r\n        const eValue = this.createManagedBean(\r\n            allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField()\r\n        );\r\n        eValue.addCssClass(`ag-filter-${fromTo}`);\r\n        eValue.addCssClass('ag-filter-filter');\r\n        eValues.push(eValue);\r\n        eCondition.appendChild(eValue.getGui());\r\n    }\r\n\r\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\r\n        const removeComps = (eGui: (AgInputTextField | AgInputNumberField)[]) =>\r\n            this.removeComponents(eGui, startPosition, deleteCount);\r\n\r\n        removeComps(this.eValuesFrom);\r\n        removeComps(this.eValuesTo);\r\n    }\r\n\r\n    protected getValues(position: number): Tuple<number> {\r\n        const result: Tuple<number> = [];\r\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\r\n            if (index < numberOfInputs) {\r\n                result.push(this.processValue(this.stringToFloat(element.getValue())));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    protected areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean {\r\n        return (\r\n            aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type\r\n        );\r\n    }\r\n\r\n    private processValue(value?: number | null): number | null {\r\n        if (value == null) {\r\n            return null;\r\n        }\r\n        return isNaN(value) ? null : value;\r\n    }\r\n\r\n    private stringToFloat(value?: string | number | null): number | null {\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n\r\n        let filterText = _makeNull(value);\r\n\r\n        if (filterText != null && filterText.trim() === '') {\r\n            filterText = null;\r\n        }\r\n\r\n        const numberParser = this.numberFilterParams.numberParser;\r\n        if (numberParser) {\r\n            return numberParser(filterText);\r\n        }\r\n\r\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\r\n    }\r\n\r\n    protected createCondition(position: number): NumberFilterModel {\r\n        const type = this.getConditionType(position);\r\n        const model: NumberFilterModel = {\r\n            filterType: this.filterType,\r\n            type,\r\n        };\r\n\r\n        const values = this.getValues(position);\r\n        if (values.length > 0) {\r\n            model.filter = values[0];\r\n        }\r\n        if (values.length > 1) {\r\n            model.filterTo = values[1];\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    protected getInputs(position: number): Tuple<AgInputTextField | AgInputNumberField> {\r\n        const { eValuesFrom, eValuesTo } = this;\r\n        if (position >= eValuesFrom.length) {\r\n            return [null, null];\r\n        }\r\n        return [eValuesFrom[position], eValuesTo[position]];\r\n    }\r\n\r\n    public getModelAsString(model: ISimpleFilterModel): string {\r\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\r\n    }\r\n\r\n    protected override hasInvalidInputs(): boolean {\r\n        let invalidInputs = false;\r\n        this.forEachInput((element) => {\r\n            if (!element.getInputElement().validity.valid) {\r\n                invalidInputs = true;\r\n                return;\r\n            }\r\n        });\r\n        return invalidInputs;\r\n    }\r\n}\r\n", "import { BeanStub } from '../../../context/beanStub';\r\nimport type { AgInputTextFieldParams } from '../../../widgets/agInputTextField';\r\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport type { FloatingFilterInputService } from './iFloatingFilterInputService';\r\n\r\nexport class FloatingFilterTextInputService extends BeanStub implements FloatingFilterInputService {\r\n    private eInput: AgInputTextField = RefPlaceholder;\r\n    private onValueChanged: (e: KeyboardEvent) => void = () => {};\r\n\r\n    constructor(private params?: { config?: AgInputTextFieldParams }) {\r\n        super();\r\n    }\r\n\r\n    public setupGui(parentElement: HTMLElement): void {\r\n        this.eInput = this.createManagedBean(new AgInputTextField(this.params?.config));\r\n\r\n        const eInput = this.eInput.getGui();\r\n\r\n        parentElement.appendChild(eInput);\r\n\r\n        const listener = (e: KeyboardEvent) => this.onValueChanged(e);\r\n        this.addManagedListeners(eInput, {\r\n            input: listener,\r\n            keydown: listener,\r\n        });\r\n    }\r\n\r\n    public setEditable(editable: boolean): void {\r\n        this.eInput.setDisabled(!editable);\r\n    }\r\n\r\n    public getValue(): string | null | undefined {\r\n        return this.eInput.getValue();\r\n    }\r\n\r\n    public setValue(value: string | null | undefined, silent?: boolean): void {\r\n        this.eInput.setValue(value, silent);\r\n    }\r\n\r\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\r\n        this.onValueChanged = listener;\r\n    }\r\n\r\n    public setParams({ ariaLabel, autoComplete }: { ariaLabel: string; autoComplete?: boolean | string }): void {\r\n        const { eInput } = this;\r\n        eInput.setInputAriaLabel(ariaLabel);\r\n\r\n        if (autoComplete !== undefined) {\r\n            eInput.setAutoComplete(autoComplete);\r\n        }\r\n    }\r\n}\r\n", "export function trimInputForFilter(value?: string | null): string | null | undefined {\r\n    const trimmedInput = value?.trim();\r\n\r\n    // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\r\n    return trimmedInput === '' ? value : trimmedInput;\r\n}\r\n", "import { KeyCode } from '../../../constants/keyCode';\r\nimport type { FilterChangedEvent } from '../../../events';\r\nimport { _clearElement } from '../../../utils/dom';\r\nimport { _debounce } from '../../../utils/function';\r\nimport { RefPlaceholder } from '../../../widgets/component';\r\nimport type { NumberFilterModel } from '../../provided/number/iNumberFilter';\r\nimport type {\r\n    ITextInputFloatingFilterParams,\r\n    TextFilterModel,\r\n    TextFilterParams,\r\n} from '../../provided/text/iTextFilter';\r\nimport { trimInputForFilter } from '../../provided/text/textFilterUtils';\r\nimport type { FloatingFilterInputService } from './iFloatingFilterInputService';\r\nimport { getDebounceMs, isUseApplyButton } from './providedFilterUtils';\r\nimport { SimpleFloatingFilter } from './simpleFloatingFilter';\r\n\r\ntype ModelUnion = TextFilterModel | NumberFilterModel;\r\nexport abstract class TextInputFloatingFilter<M extends ModelUnion> extends SimpleFloatingFilter {\r\n    private readonly eFloatingFilterInputContainer: HTMLElement = RefPlaceholder;\r\n    private inputSvc: FloatingFilterInputService;\r\n\r\n    protected params: ITextInputFloatingFilterParams;\r\n\r\n    private applyActive: boolean;\r\n\r\n    protected abstract createFloatingFilterInputService(\r\n        params: ITextInputFloatingFilterParams\r\n    ): FloatingFilterInputService;\r\n\r\n    public postConstruct(): void {\r\n        this.setTemplate(/* html */ `\r\n            <div class=\"ag-floating-filter-input\" role=\"presentation\" data-ref=\"eFloatingFilterInputContainer\"></div>\r\n        `);\r\n    }\r\n    protected override defaultDebounceMs: number = 500;\r\n\r\n    public onParentModelChanged(model: M, event: FilterChangedEvent): void {\r\n        if (event?.afterFloatingFilter || event?.afterDataChange) {\r\n            // if the floating filter triggered the change, it is already in sync.\r\n            // Data changes also do not affect provided text floating filters\r\n            return;\r\n        }\r\n\r\n        this.setLastTypeFromModel(model);\r\n        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));\r\n        this.inputSvc.setValue(this.filterModelFormatter.getModelAsString(model));\r\n    }\r\n\r\n    public override init(params: ITextInputFloatingFilterParams): void {\r\n        this.setupFloatingFilterInputService(params);\r\n        super.init(params);\r\n        this.setTextInputParams(params);\r\n    }\r\n\r\n    private setupFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\r\n        this.inputSvc = this.createFloatingFilterInputService(params);\r\n        this.inputSvc.setupGui(this.eFloatingFilterInputContainer);\r\n    }\r\n\r\n    private setTextInputParams(params: ITextInputFloatingFilterParams): void {\r\n        this.params = params;\r\n\r\n        const autoComplete = params.browserAutoComplete ?? false;\r\n        const { inputSvc, defaultDebounceMs, readOnly } = this;\r\n\r\n        inputSvc.setParams({\r\n            ariaLabel: this.getAriaLabel(params),\r\n            autoComplete,\r\n        });\r\n\r\n        this.applyActive = isUseApplyButton(params.filterParams);\r\n\r\n        if (!readOnly) {\r\n            const debounceMs = getDebounceMs(params.filterParams, defaultDebounceMs);\r\n            const toDebounce: (e: KeyboardEvent) => void = _debounce(\r\n                this,\r\n                this.syncUpWithParentFilter.bind(this),\r\n                debounceMs\r\n            );\r\n\r\n            inputSvc.setValueChangedListener(toDebounce);\r\n        }\r\n    }\r\n\r\n    public override refresh(params: ITextInputFloatingFilterParams): void {\r\n        super.refresh(params);\r\n        this.setTextInputParams(params);\r\n    }\r\n\r\n    protected recreateFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\r\n        const { inputSvc } = this;\r\n        const value = inputSvc.getValue();\r\n        _clearElement(this.eFloatingFilterInputContainer);\r\n        this.destroyBean(inputSvc);\r\n        this.setupFloatingFilterInputService(params);\r\n        inputSvc.setValue(value, true);\r\n    }\r\n\r\n    private syncUpWithParentFilter(e: KeyboardEvent): void {\r\n        const isEnterKey = e.key === KeyCode.ENTER;\r\n\r\n        if (this.applyActive && !isEnterKey) {\r\n            return;\r\n        }\r\n\r\n        const { inputSvc, params } = this;\r\n        let value = inputSvc.getValue();\r\n\r\n        if ((params.filterParams as TextFilterParams).trimInput) {\r\n            value = trimInputForFilter(value);\r\n            inputSvc.setValue(value, true); // ensure visible value is trimmed\r\n        }\r\n\r\n        params.parentFilterInstance((filterInstance) => {\r\n            // NumberFilter is typed as number, but actually receives string values\r\n            filterInstance?.onFloatingFilterChanged(this.lastType || null, (value as never) || null);\r\n        });\r\n    }\r\n\r\n    protected setEditable(editable: boolean): void {\r\n        this.inputSvc.setEditable(editable);\r\n    }\r\n}\r\n", "import { BeanStub } from '../../../context/beanStub';\r\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\r\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport { FloatingFilterTextInputService } from '../../floating/provided/floatingFilterTextInputService';\r\nimport type { FloatingFilterInputService } from '../../floating/provided/iFloatingFilterInputService';\r\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\r\nimport type { INumberFloatingFilterParams, NumberFilterModel, NumberFilterParams } from './iNumberFilter';\r\nimport { DEFAULT_NUMBER_FILTER_OPTIONS } from './numberFilterConstants';\r\nimport { NumberFilterModelFormatter } from './numberFilterModelFormatter';\r\nimport { getAllowedCharPattern } from './numberFilterUtils';\r\n\r\nclass FloatingFilterNumberInputService extends BeanStub implements FloatingFilterInputService {\r\n    private eTextInput: AgInputTextField;\r\n    private eNumberInput: AgInputNumberField;\r\n    private onValueChanged: (e: KeyboardEvent) => void = () => {};\r\n\r\n    private numberInputActive = true;\r\n\r\n    public setupGui(parentElement: HTMLElement): void {\r\n        this.eNumberInput = this.createManagedBean(new AgInputNumberField());\r\n        this.eTextInput = this.createManagedBean(new AgInputTextField());\r\n\r\n        this.eTextInput.setDisabled(true);\r\n\r\n        const eNumberInput = this.eNumberInput.getGui();\r\n        const eTextInput = this.eTextInput.getGui();\r\n\r\n        parentElement.appendChild(eNumberInput);\r\n        parentElement.appendChild(eTextInput);\r\n\r\n        this.setupListeners(eNumberInput, (e: KeyboardEvent) => this.onValueChanged(e));\r\n        this.setupListeners(eTextInput, (e: KeyboardEvent) => this.onValueChanged(e));\r\n    }\r\n\r\n    public setEditable(editable: boolean): void {\r\n        this.numberInputActive = editable;\r\n        this.eNumberInput.setDisplayed(this.numberInputActive);\r\n        this.eTextInput.setDisplayed(!this.numberInputActive);\r\n    }\r\n\r\n    public setAutoComplete(autoComplete: boolean | string): void {\r\n        this.eNumberInput.setAutoComplete(autoComplete);\r\n        this.eTextInput.setAutoComplete(autoComplete);\r\n    }\r\n\r\n    public getValue(): string | null | undefined {\r\n        return this.getActiveInputElement().getValue();\r\n    }\r\n\r\n    public setValue(value: string | null | undefined, silent?: boolean): void {\r\n        this.getActiveInputElement().setValue(value, silent);\r\n    }\r\n\r\n    private getActiveInputElement(): AgInputTextField | AgInputNumberField {\r\n        return this.numberInputActive ? this.eNumberInput : this.eTextInput;\r\n    }\r\n\r\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\r\n        this.onValueChanged = listener;\r\n    }\r\n\r\n    private setupListeners(element: HTMLElement, listener: (e: KeyboardEvent) => void): void {\r\n        this.addManagedListeners(element, {\r\n            input: listener,\r\n            keydown: listener,\r\n        });\r\n    }\r\n\r\n    public setParams(params: { ariaLabel: string; autoComplete?: boolean | string }): void {\r\n        this.setAriaLabel(params.ariaLabel);\r\n\r\n        if (params.autoComplete !== undefined) {\r\n            this.setAutoComplete(params.autoComplete);\r\n        }\r\n    }\r\n\r\n    private setAriaLabel(ariaLabel: string): void {\r\n        this.eNumberInput.setInputAriaLabel(ariaLabel);\r\n        this.eTextInput.setInputAriaLabel(ariaLabel);\r\n    }\r\n}\r\n\r\nexport class NumberFloatingFilter extends TextInputFloatingFilter<NumberFilterModel> {\r\n    protected filterModelFormatter: NumberFilterModelFormatter;\r\n    private allowedCharPattern: string | null;\r\n\r\n    public override init(params: INumberFloatingFilterParams): void {\r\n        super.init(params);\r\n        this.filterModelFormatter = new NumberFilterModelFormatter(\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory,\r\n            (params.filterParams as NumberFilterParams)?.numberFormatter\r\n        );\r\n    }\r\n\r\n    public override refresh(params: INumberFloatingFilterParams): void {\r\n        const allowedCharPattern = getAllowedCharPattern(params.filterParams);\r\n        if (allowedCharPattern !== this.allowedCharPattern) {\r\n            this.recreateFloatingFilterInputService(params);\r\n        }\r\n        super.refresh(params);\r\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\r\n    }\r\n\r\n    protected getDefaultOptions(): string[] {\r\n        return DEFAULT_NUMBER_FILTER_OPTIONS;\r\n    }\r\n\r\n    protected createFloatingFilterInputService(params: INumberFloatingFilterParams): FloatingFilterInputService {\r\n        this.allowedCharPattern = getAllowedCharPattern(params.filterParams);\r\n        if (this.allowedCharPattern) {\r\n            // need to use text input\r\n            return this.createManagedBean(\r\n                new FloatingFilterTextInputService({\r\n                    config: { allowedCharPattern: this.allowedCharPattern },\r\n                })\r\n            );\r\n        }\r\n        return this.createManagedBean(new FloatingFilterNumberInputService());\r\n    }\r\n}\r\n", "import type { ISimpleFilterModelType } from '../iSimpleFilter';\r\n\r\nexport const DEFAULT_TEXT_FILTER_OPTIONS: ISimpleFilterModelType[] = [\r\n    'contains',\r\n    'notContains',\r\n    'equals',\r\n    'notEqual',\r\n    'startsWith',\r\n    'endsWith',\r\n    'blank',\r\n    'notBlank',\r\n];\r\n", "import type { IFilterOptionDef } from '../../../interfaces/iFilter';\r\nimport { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\r\nimport type { TextFilterModel } from './iTextFilter';\r\n\r\nexport class TextFilterModelFormatter extends SimpleFilterModelFormatter {\r\n    protected conditionToString(condition: TextFilterModel, options?: IFilterOptionDef): string {\r\n        const { numberOfInputs } = options || {};\r\n        const { filter, filterTo, type } = condition;\r\n\r\n        const isRange = type == 'inRange' || numberOfInputs === 2;\r\n\r\n        if (isRange) {\r\n            return `${filter}-${filterTo}`;\r\n        }\r\n\r\n        // cater for when the type doesn't need a value\r\n        if (filter != null) {\r\n            return `${filter}`;\r\n        }\r\n\r\n        return `${type}`;\r\n    }\r\n}\r\n", "import type { IDoesFilterPassParams } from '../../../interfaces/iFilter';\r\nimport { _setAriaRole } from '../../../utils/aria';\r\nimport { _makeNull } from '../../../utils/generic';\r\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\r\nimport type { ISimpleFilterModel, ISimpleFilterModelType, Tuple } from '../iSimpleFilter';\r\nimport { SimpleFilter } from '../simpleFilter';\r\nimport { isBlank } from '../simpleFilterUtils';\r\nimport type { TextFilterModel, TextFilterParams, TextFormatter, TextMatcher } from './iTextFilter';\r\nimport { DEFAULT_TEXT_FILTER_OPTIONS } from './textFilterConstants';\r\nimport { TextFilterModelFormatter } from './textFilterModelFormatter';\r\nimport { trimInputForFilter } from './textFilterUtils';\r\n\r\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\r\n    protected filterType = 'text' as const;\r\n\r\n    private readonly defaultFormatter: TextFormatter = (from: string) => from;\r\n\r\n    private readonly defaultLowercaseFormatter: TextFormatter = (from: string) =>\r\n        from == null ? null : from.toString().toLowerCase();\r\n\r\n    private readonly defaultMatcher: TextMatcher = ({ filterOption, value, filterText }) => {\r\n        if (filterText == null) {\r\n            return false;\r\n        }\r\n\r\n        switch (filterOption) {\r\n            case 'contains':\r\n                return value.indexOf(filterText) >= 0;\r\n            case 'notContains':\r\n                return value.indexOf(filterText) < 0;\r\n            case 'equals':\r\n                return value === filterText;\r\n            case 'notEqual':\r\n                return value != filterText;\r\n            case 'startsWith':\r\n                return value.indexOf(filterText) === 0;\r\n            case 'endsWith': {\r\n                const index = value.lastIndexOf(filterText);\r\n                return index >= 0 && index === value.length - filterText.length;\r\n            }\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    private readonly eValuesFrom: AgInputTextField[] = [];\r\n    private readonly eValuesTo: AgInputTextField[] = [];\r\n\r\n    private matcher: TextMatcher;\r\n    private formatter: TextFormatter;\r\n\r\n    private textFilterParams: TextFilterParams;\r\n    private filterModelFormatter: TextFilterModelFormatter;\r\n\r\n    constructor() {\r\n        super('textFilter');\r\n    }\r\n\r\n    protected override defaultDebounceMs: number = 500;\r\n\r\n    protected override setParams(params: TextFilterParams): void {\r\n        this.textFilterParams = params;\r\n\r\n        super.setParams(params);\r\n\r\n        this.matcher = params.textMatcher || this.defaultMatcher;\r\n        this.formatter =\r\n            params.textFormatter || (params.caseSensitive ? this.defaultFormatter : this.defaultLowercaseFormatter);\r\n        this.filterModelFormatter = new TextFilterModelFormatter(\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory\r\n        );\r\n    }\r\n\r\n    protected createCondition(position: number): TextFilterModel {\r\n        const type = this.getConditionType(position);\r\n\r\n        const model: TextFilterModel = {\r\n            filterType: this.filterType,\r\n            type,\r\n        };\r\n\r\n        const values = this.getValuesWithSideEffects(position, true);\r\n        if (values.length > 0) {\r\n            model.filter = values[0];\r\n        }\r\n        if (values.length > 1) {\r\n            model.filterTo = values[1];\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\r\n        return (\r\n            aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type\r\n        );\r\n    }\r\n\r\n    protected getInputs(position: number): Tuple<AgInputTextField> {\r\n        const { eValuesFrom, eValuesTo } = this;\r\n        if (position >= eValuesFrom.length) {\r\n            return [null, null];\r\n        }\r\n        return [eValuesFrom[position], eValuesTo[position]];\r\n    }\r\n\r\n    protected getValues(position: number): Tuple<string> {\r\n        return this.getValuesWithSideEffects(position, false);\r\n    }\r\n\r\n    private getValuesWithSideEffects(position: number, applySideEffects: boolean): Tuple<string> {\r\n        const result: Tuple<string> = [];\r\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\r\n            if (index < numberOfInputs) {\r\n                let value = _makeNull(element.getValue());\r\n                if (applySideEffects && this.textFilterParams.trimInput) {\r\n                    value = trimInputForFilter(value) ?? null;\r\n                    element.setValue(value, true); // ensure clean value is visible\r\n                }\r\n                result.push(value);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    protected getDefaultFilterOptions(): string[] {\r\n        return DEFAULT_TEXT_FILTER_OPTIONS;\r\n    }\r\n\r\n    protected createValueElement(): HTMLElement {\r\n        const eCondition = document.createElement('div');\r\n        eCondition.classList.add('ag-filter-body');\r\n        _setAriaRole(eCondition, 'presentation');\r\n\r\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from');\r\n        this.createFromToElement(eCondition, this.eValuesTo, 'to');\r\n\r\n        return eCondition;\r\n    }\r\n\r\n    private createFromToElement(eCondition: HTMLElement, eValues: AgInputTextField[], fromTo: string): void {\r\n        const eValue = this.createManagedBean(new AgInputTextField());\r\n        eValue.addCssClass(`ag-filter-${fromTo}`);\r\n        eValue.addCssClass('ag-filter-filter');\r\n        eValues.push(eValue);\r\n        eCondition.appendChild(eValue.getGui());\r\n    }\r\n\r\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\r\n        const removeComps = (eGui: AgInputTextField[]) => this.removeComponents(eGui, startPosition, deleteCount);\r\n        removeComps(this.eValuesFrom);\r\n        removeComps(this.eValuesTo);\r\n    }\r\n\r\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\r\n        const { filter, filterTo, type } = filterModel || {};\r\n        return [filter || null, filterTo || null].slice(0, this.getNumberOfInputs(type));\r\n    }\r\n\r\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\r\n        const filterTypesAllowNulls: ISimpleFilterModelType[] = ['notEqual', 'notContains', 'blank'];\r\n\r\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\r\n    }\r\n\r\n    protected evaluateNonNullValue(\r\n        values: Tuple<string>,\r\n        cellValue: string,\r\n        filterModel: TextFilterModel,\r\n        params: IDoesFilterPassParams\r\n    ): boolean {\r\n        const formattedValues = values.map((v) => this.formatter(v)) || [];\r\n        const cellValueFormatted = this.formatter(cellValue);\r\n        const { api, colDef, column, context, textFormatter } = this.textFilterParams;\r\n\r\n        if (filterModel.type === 'blank') {\r\n            return isBlank(cellValue);\r\n        } else if (filterModel.type === 'notBlank') {\r\n            return !isBlank(cellValue);\r\n        }\r\n\r\n        const matcherParams = {\r\n            api,\r\n            colDef,\r\n            column,\r\n            context,\r\n            node: params.node,\r\n            data: params.data,\r\n            filterOption: filterModel.type,\r\n            value: cellValueFormatted,\r\n            textFormatter,\r\n        };\r\n\r\n        return formattedValues.some((v) => this.matcher({ ...matcherParams, filterText: v }));\r\n    }\r\n\r\n    public getModelAsString(model: ISimpleFilterModel): string {\r\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\r\n    }\r\n}\r\n", "import { FloatingFilterTextInputService } from '../../floating/provided/floatingFilterTextInputService';\r\nimport type { FloatingFilterInputService } from '../../floating/provided/iFloatingFilterInputService';\r\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\r\nimport type { SimpleFilterModelFormatter } from '../simpleFilterModelFormatter';\r\nimport type { ITextFloatingFilterParams, TextFilterModel } from './iTextFilter';\r\nimport { DEFAULT_TEXT_FILTER_OPTIONS } from './textFilterConstants';\r\nimport { TextFilterModelFormatter } from './textFilterModelFormatter';\r\n\r\nexport class TextFloatingFilter extends TextInputFloatingFilter<TextFilterModel> {\r\n    protected filterModelFormatter: SimpleFilterModelFormatter;\r\n    public override init(params: ITextFloatingFilterParams): void {\r\n        super.init(params);\r\n        this.filterModelFormatter = new TextFilterModelFormatter(\r\n            this.getLocaleTextFunc.bind(this),\r\n            this.optionsFactory\r\n        );\r\n    }\r\n\r\n    public override refresh(params: ITextFloatingFilterParams): void {\r\n        super.refresh(params);\r\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\r\n    }\r\n\r\n    protected getDefaultOptions(): string[] {\r\n        return DEFAULT_TEXT_FILTER_OPTIONS;\r\n    }\r\n\r\n    protected createFloatingFilterInputService(): FloatingFilterInputService {\r\n        return this.createManagedBean(new FloatingFilterTextInputService());\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\n\r\nexport function isQuickFilterPresent(beans: BeanCollection): boolean {\r\n    return !!beans.filterManager?.isQuickFilterPresent();\r\n}\r\n\r\nexport function getQuickFilter(beans: BeanCollection): string | undefined {\r\n    return beans.gos.get('quickFilterText');\r\n}\r\n\r\nexport function resetQuickFilter(beans: BeanCollection): void {\r\n    beans.filterManager?.resetQuickFilterCache();\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { GetQuickFilterTextParams } from '../entities/colDef';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _exists } from '../utils/generic';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport type QuickFilterServiceEvent = 'quickFilterChanged';\r\nexport class QuickFilterService extends BeanStub<QuickFilterServiceEvent> implements NamedBean {\r\n    beanName = 'quickFilter' as const;\r\n\r\n    // the columns the quick filter should use. this will be all primary columns plus the autoGroupColumns if any exist\r\n    private colsToUse: AgColumn[];\r\n\r\n    private quickFilter: string | null = null;\r\n    private quickFilterParts: string[] | null = null;\r\n    private parser?: (quickFilter: string) => string[];\r\n    private matcher?: (quickFilterParts: string[], rowQuickFilterAggregateText: string) => boolean;\r\n\r\n    public postConstruct(): void {\r\n        const resetListener = this.resetCache.bind(this);\r\n        const gos = this.gos;\r\n        this.addManagedEventListeners({\r\n            columnPivotModeChanged: resetListener,\r\n            newColumnsLoaded: resetListener,\r\n            columnRowGroupChanged: resetListener,\r\n            columnVisible: () => {\r\n                if (!gos.get('includeHiddenColumnsInQuickFilter')) {\r\n                    this.resetCache();\r\n                }\r\n            },\r\n        });\r\n\r\n        this.addManagedPropertyListener('quickFilterText', (e) => this.setFilter(e.currentValue));\r\n        this.addManagedPropertyListeners(\r\n            ['includeHiddenColumnsInQuickFilter', 'applyQuickFilterBeforePivotOrAgg'],\r\n            () => this.onColumnConfigChanged()\r\n        );\r\n\r\n        this.quickFilter = this.parseFilter(gos.get('quickFilterText'));\r\n        this.parser = gos.get('quickFilterParser');\r\n        this.matcher = gos.get('quickFilterMatcher');\r\n        this.setFilterParts();\r\n\r\n        this.addManagedPropertyListeners(['quickFilterMatcher', 'quickFilterParser'], () => this.setParserAndMatcher());\r\n    }\r\n\r\n    // if we are using autoGroupCols, then they should be included for quick filter. this covers the\r\n    // following scenarios:\r\n    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on\r\n    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this\r\n    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)\r\n    public refreshCols(): void {\r\n        const { autoColSvc, colModel, gos, pivotResultCols } = this.beans;\r\n        const pivotMode = colModel.isPivotMode();\r\n        const groupAutoCols = autoColSvc?.getAutoCols();\r\n        const providedCols = colModel.getColDefCols();\r\n\r\n        let columnsForQuickFilter =\r\n            (pivotMode && !gos.get('applyQuickFilterBeforePivotOrAgg')\r\n                ? pivotResultCols?.getPivotResultCols()?.list\r\n                : providedCols) ?? [];\r\n        if (groupAutoCols) {\r\n            columnsForQuickFilter = columnsForQuickFilter.concat(groupAutoCols);\r\n        }\r\n        this.colsToUse = gos.get('includeHiddenColumnsInQuickFilter')\r\n            ? columnsForQuickFilter\r\n            : columnsForQuickFilter.filter((col) => col.isVisible() || col.isRowGroupActive());\r\n    }\r\n\r\n    public isFilterPresent(): boolean {\r\n        return this.quickFilter !== null;\r\n    }\r\n\r\n    public doesRowPass(node: RowNode): boolean {\r\n        const usingCache = this.gos.get('cacheQuickFilter');\r\n\r\n        if (this.matcher) {\r\n            return this.doesRowPassMatcher(usingCache, node);\r\n        }\r\n\r\n        // each part must pass, if any fails, then the whole filter fails\r\n        return this.quickFilterParts!.every((part) =>\r\n            usingCache ? this.doesRowPassCache(node, part) : this.doesRowPassNoCache(node, part)\r\n        );\r\n    }\r\n\r\n    public resetCache(): void {\r\n        this.beans.rowModel.forEachNode((node) => (node.quickFilterAggregateText = null));\r\n    }\r\n\r\n    private setFilterParts(): void {\r\n        const { quickFilter, parser } = this;\r\n        if (quickFilter) {\r\n            this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(' ');\r\n        } else {\r\n            this.quickFilterParts = null;\r\n        }\r\n    }\r\n\r\n    private parseFilter(newFilter?: string): string | null {\r\n        if (!_exists(newFilter)) {\r\n            return null;\r\n        }\r\n\r\n        return newFilter.toUpperCase();\r\n    }\r\n\r\n    private setFilter(newFilter: string | undefined): void {\r\n        if (newFilter != null && typeof newFilter !== 'string') {\r\n            _warn(70, { newFilter });\r\n            return;\r\n        }\r\n\r\n        const parsedFilter = this.parseFilter(newFilter);\r\n\r\n        if (this.quickFilter !== parsedFilter) {\r\n            this.quickFilter = parsedFilter;\r\n            this.setFilterParts();\r\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\r\n        }\r\n    }\r\n\r\n    private setParserAndMatcher(): void {\r\n        const parser = this.gos.get('quickFilterParser');\r\n        const matcher = this.gos.get('quickFilterMatcher');\r\n        const hasChanged = parser !== this.parser || matcher !== this.matcher;\r\n        this.parser = parser;\r\n        this.matcher = matcher;\r\n        if (hasChanged) {\r\n            this.setFilterParts();\r\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\r\n        }\r\n    }\r\n\r\n    private onColumnConfigChanged(): void {\r\n        this.refreshCols();\r\n        this.resetCache();\r\n        if (this.isFilterPresent()) {\r\n            this.dispatchLocalEvent({ type: 'quickFilterChanged' });\r\n        }\r\n    }\r\n\r\n    private doesRowPassNoCache(node: RowNode, filterPart: string): boolean {\r\n        return this.colsToUse.some((column) => {\r\n            const part = this.getTextForColumn(column, node);\r\n\r\n            return _exists(part) && part.indexOf(filterPart) >= 0;\r\n        });\r\n    }\r\n\r\n    private doesRowPassCache(node: RowNode, filterPart: string): boolean {\r\n        this.checkGenerateAggText(node);\r\n\r\n        return node.quickFilterAggregateText!.indexOf(filterPart) >= 0;\r\n    }\r\n\r\n    private doesRowPassMatcher(usingCache: boolean, node: RowNode): boolean {\r\n        let quickFilterAggregateText: string;\r\n        if (usingCache) {\r\n            this.checkGenerateAggText(node);\r\n            quickFilterAggregateText = node.quickFilterAggregateText!;\r\n        } else {\r\n            quickFilterAggregateText = this.getAggText(node);\r\n        }\r\n        const { quickFilterParts, matcher } = this;\r\n        return matcher!(quickFilterParts!, quickFilterAggregateText);\r\n    }\r\n\r\n    private checkGenerateAggText(node: RowNode): void {\r\n        if (!node.quickFilterAggregateText) {\r\n            node.quickFilterAggregateText = this.getAggText(node);\r\n        }\r\n    }\r\n\r\n    private getTextForColumn(column: AgColumn, node: RowNode): string {\r\n        let value = this.beans.filterValueSvc!.getValue(column, node);\r\n        const colDef = column.getColDef();\r\n\r\n        if (colDef.getQuickFilterText) {\r\n            const params: GetQuickFilterTextParams = this.gos.addGridCommonParams({\r\n                value,\r\n                node,\r\n                data: node.data,\r\n                column,\r\n                colDef,\r\n            });\r\n\r\n            value = colDef.getQuickFilterText(params);\r\n        }\r\n\r\n        return _exists(value) ? value.toString().toUpperCase() : null;\r\n    }\r\n\r\n    private getAggText(node: RowNode): string {\r\n        const stringParts: string[] = [];\r\n\r\n        this.colsToUse.forEach((column) => {\r\n            const part = this.getTextForColumn(column, node);\r\n\r\n            if (_exists(part)) {\r\n                stringParts.push(part);\r\n            }\r\n        });\r\n\r\n        return stringParts.join('\\n');\r\n    }\r\n}\r\n", "import type { _ColumnFilterGridApi, _FilterGridApi, _QuickFilterGridApi } from '../api/gridApi';\r\nimport { FilterStage } from '../clientSideRowModel/filterStage';\r\nimport { HeaderFilterCellCtrl } from '../headerRendering/cells/floatingFilter/headerFilterCellCtrl';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { SharedMenuModule } from '../misc/menu/sharedMenuModule';\r\nimport { VERSION } from '../version';\r\nimport { PopupModule } from '../widgets/popupModule';\r\nimport { columnFiltersCSS } from './column-filters.css-GENERATED';\r\nimport {\r\n    destroyFilter,\r\n    getColumnFilterInstance,\r\n    getColumnFilterModel,\r\n    getFilterModel,\r\n    isColumnFilterPresent,\r\n    setColumnFilterModel,\r\n    setFilterModel,\r\n    showColumnFilter,\r\n} from './columnFilterApi';\r\nimport { ColumnFilterService } from './columnFilterService';\r\nimport { isAnyFilterPresent, onFilterChanged } from './filterApi';\r\nimport { FilterManager } from './filterManager';\r\nimport { FilterMenuFactory } from './filterMenuFactory';\r\nimport { FilterValueService } from './filterValueService';\r\nimport { ReadOnlyFloatingFilter } from './floating/provided/readOnlyFloatingFilter';\r\nimport { DateFilter } from './provided/date/dateFilter';\r\nimport { DateFloatingFilter } from './provided/date/dateFloatingFilter';\r\nimport { DefaultDateComponent } from './provided/date/defaultDateComponent';\r\nimport { NumberFilter } from './provided/number/numberFilter';\r\nimport { NumberFloatingFilter } from './provided/number/numberFloatingFilter';\r\nimport { TextFilter } from './provided/text/textFilter';\r\nimport { TextFloatingFilter } from './provided/text/textFloatingFilter';\r\nimport { getQuickFilter, isQuickFilterPresent, resetQuickFilter } from './quickFilterApi';\r\nimport { QuickFilterService } from './quickFilterService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const ClientSideRowModelFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'ClientSideRowModelFilter',\r\n    version: VERSION,\r\n    rowModels: ['clientSide'],\r\n    beans: [FilterStage],\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const FilterCoreModule: _ModuleWithApi<_FilterGridApi> = {\r\n    moduleName: 'FilterCore',\r\n    version: VERSION,\r\n    beans: [FilterManager],\r\n    apiFunctions: {\r\n        isAnyFilterPresent,\r\n        onFilterChanged,\r\n    },\r\n    css: [columnFiltersCSS],\r\n    dependsOn: [ClientSideRowModelFilterModule],\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const FilterValueModule: _ModuleWithoutApi = {\r\n    moduleName: 'FilterValue',\r\n    version: VERSION,\r\n    beans: [FilterValueService],\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const ColumnFilterModule: _ModuleWithApi<_ColumnFilterGridApi> = {\r\n    moduleName: 'ColumnFilter',\r\n    version: VERSION,\r\n    beans: [ColumnFilterService, FilterMenuFactory],\r\n    dynamicBeans: { headerFilterCellCtrl: HeaderFilterCellCtrl as any },\r\n    icons: {\r\n        // open filter button - header, floating filter, menu\r\n        filter: 'filter',\r\n        // filter is applied - header (legacy column menu), filter tool panel\r\n        filterActive: 'filter',\r\n    },\r\n    apiFunctions: {\r\n        isColumnFilterPresent,\r\n        getColumnFilterInstance,\r\n        destroyFilter,\r\n        setFilterModel,\r\n        getFilterModel,\r\n        getColumnFilterModel,\r\n        setColumnFilterModel,\r\n        showColumnFilter,\r\n    },\r\n    dependsOn: [FilterCoreModule, PopupModule, FilterValueModule, SharedMenuModule],\r\n};\r\n\r\n/**\r\n * @feature Filtering -> Custom Column Filters\r\n */\r\nexport const CustomFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'CustomFilter',\r\n    version: VERSION,\r\n    userComponents: { agReadOnlyFloatingFilter: ReadOnlyFloatingFilter },\r\n    dependsOn: [ColumnFilterModule],\r\n};\r\n\r\n/**\r\n * @feature Filtering -> Text Filter\r\n */\r\nexport const TextFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'TextFilter',\r\n    version: VERSION,\r\n    dependsOn: [ColumnFilterModule],\r\n    userComponents: {\r\n        agTextColumnFilter: TextFilter,\r\n        agTextColumnFloatingFilter: TextFloatingFilter,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Filtering -> Number Filter\r\n */\r\nexport const NumberFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'NumberFilter',\r\n    version: VERSION,\r\n    dependsOn: [ColumnFilterModule],\r\n    userComponents: {\r\n        agNumberColumnFilter: NumberFilter,\r\n        agNumberColumnFloatingFilter: NumberFloatingFilter,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Filtering -> Date Filter\r\n */\r\nexport const DateFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'DateFilter',\r\n    version: VERSION,\r\n    dependsOn: [ColumnFilterModule],\r\n    userComponents: {\r\n        agDateColumnFilter: DateFilter,\r\n        agDateInput: DefaultDateComponent,\r\n        agDateColumnFloatingFilter: DateFloatingFilter,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Filtering -> Quick Filter\r\n * @gridOption quickFilterText\r\n */\r\nexport const QuickFilterModule: _ModuleWithApi<_QuickFilterGridApi> = {\r\n    moduleName: 'QuickFilter',\r\n    version: VERSION,\r\n    rowModels: ['clientSide'],\r\n    beans: [QuickFilterService],\r\n    apiFunctions: {\r\n        isQuickFilterPresent,\r\n        getQuickFilter,\r\n        resetQuickFilter,\r\n    },\r\n    dependsOn: [FilterCoreModule, FilterValueModule],\r\n};\r\n\r\n/**\r\n * @feature Filtering -> External Filter\r\n * @gridOption doesExternalFilterPass\r\n */\r\nexport const ExternalFilterModule: _ModuleWithoutApi = {\r\n    moduleName: 'ExternalFilter',\r\n    version: VERSION,\r\n    dependsOn: [FilterCoreModule],\r\n};\r\n", "import type { CellRange } from '../interfaces/IRangeService';\r\nimport type { CellValueChange } from './iUndoRedo';\r\n\r\nexport class UndoRedoAction {\r\n    cellValueChanges: CellValueChange[];\r\n\r\n    constructor(cellValueChanges: CellValueChange[]) {\r\n        this.cellValueChanges = cellValueChanges;\r\n    }\r\n}\r\n\r\nexport class RangeUndoRedoAction extends UndoRedoAction {\r\n    constructor(\r\n        cellValueChanges: CellValueChange[],\r\n        public readonly initialRange?: CellRange,\r\n        public readonly finalRange?: CellRange,\r\n        public readonly ranges?: CellRange[]\r\n    ) {\r\n        super(cellValueChanges);\r\n    }\r\n}\r\n\r\nconst DEFAULT_STACK_SIZE = 10;\r\nexport class UndoRedoStack {\r\n    private readonly maxStackSize: number;\r\n\r\n    private actionStack: UndoRedoAction[] = [];\r\n\r\n    constructor(maxStackSize?: number) {\r\n        this.maxStackSize = maxStackSize ? maxStackSize : DEFAULT_STACK_SIZE;\r\n        this.actionStack = new Array<UndoRedoAction>(this.maxStackSize);\r\n    }\r\n\r\n    public pop(): UndoRedoAction | undefined {\r\n        return this.actionStack.pop();\r\n    }\r\n\r\n    public push(item: UndoRedoAction): void {\r\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\r\n\r\n        if (!shouldAddActions) {\r\n            return;\r\n        }\r\n\r\n        if (this.actionStack.length === this.maxStackSize) {\r\n            this.actionStack.shift();\r\n        }\r\n\r\n        this.actionStack.push(item);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.actionStack = [];\r\n    }\r\n\r\n    public getCurrentStackSize(): number {\r\n        return this.actionStack.length;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _areCellsEqual, _getRowNode, _isSameRow } from '../entities/positionUtils';\r\nimport type { CellValueChangedEvent } from '../events';\r\nimport type { GridBodyCtrl } from '../gridBodyComp/gridBodyCtrl';\r\nimport { _isCellSelectionEnabled } from '../gridOptionsUtils';\r\nimport type { CellRange, CellRangeParams } from '../interfaces/IRangeService';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport type { CellValueChange, LastFocusedCell } from './iUndoRedo';\r\nimport { RangeUndoRedoAction, UndoRedoAction, UndoRedoStack } from './undoRedoStack';\r\n\r\nexport class UndoRedoService extends BeanStub implements NamedBean {\r\n    beanName = 'undoRedo' as const;\r\n\r\n    private gridBodyCtrl: GridBodyCtrl;\r\n\r\n    private cellValueChanges: CellValueChange[] = [];\r\n\r\n    private undoStack: UndoRedoStack;\r\n    private redoStack: UndoRedoStack;\r\n\r\n    private activeCellEdit: CellPosition | null = null;\r\n    private activeRowEdit: RowPosition | null = null;\r\n\r\n    private isPasting = false;\r\n    private isRangeInAction = false;\r\n\r\n    public postConstruct(): void {\r\n        const { gos, ctrlsSvc } = this.beans;\r\n        if (!gos.get('undoRedoCellEditing')) {\r\n            return;\r\n        }\r\n\r\n        const undoRedoLimit = gos.get('undoRedoCellEditingLimit');\r\n\r\n        if (undoRedoLimit <= 0) {\r\n            return;\r\n        }\r\n\r\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\r\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\r\n\r\n        this.addListeners();\r\n\r\n        const listener = this.clearStacks.bind(this);\r\n        this.addManagedEventListeners({\r\n            cellValueChanged: this.onCellValueChanged.bind(this),\r\n            // undo / redo is restricted to actual editing so we clear the stacks when other operations are\r\n            // performed that change the order of the row / cols.\r\n            modelUpdated: (e) => {\r\n                if (!e.keepUndoRedoStack) {\r\n                    this.clearStacks();\r\n                }\r\n            },\r\n            columnPivotModeChanged: listener,\r\n            newColumnsLoaded: listener,\r\n            columnGroupOpened: listener,\r\n            columnRowGroupChanged: listener,\r\n            columnMoved: listener,\r\n            columnPinned: listener,\r\n            columnVisible: listener,\r\n            rowDragEnd: listener,\r\n        });\r\n\r\n        ctrlsSvc.whenReady(this, (p) => {\r\n            this.gridBodyCtrl = p.gridBodyCtrl;\r\n        });\r\n    }\r\n\r\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\r\n        const eventCell: CellPosition = { column: event.column, rowIndex: event.rowIndex!, rowPinned: event.rowPinned };\r\n        const isCellEditing = this.activeCellEdit !== null && _areCellsEqual(this.activeCellEdit, eventCell);\r\n        const isRowEditing = this.activeRowEdit !== null && _isSameRow(this.activeRowEdit, eventCell);\r\n\r\n        const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isRangeInAction;\r\n\r\n        if (!shouldCaptureAction) {\r\n            return;\r\n        }\r\n\r\n        const { rowPinned, rowIndex, column, oldValue, value } = event;\r\n\r\n        const cellValueChange: CellValueChange = {\r\n            rowPinned,\r\n            rowIndex: rowIndex!,\r\n            columnId: column.getColId(),\r\n            newValue: value,\r\n            oldValue,\r\n        };\r\n\r\n        this.cellValueChanges.push(cellValueChange);\r\n    };\r\n\r\n    private clearStacks = () => {\r\n        this.undoStack.clear();\r\n        this.redoStack.clear();\r\n    };\r\n\r\n    public getCurrentUndoStackSize(): number {\r\n        return this.undoStack?.getCurrentStackSize() ?? 0;\r\n    }\r\n\r\n    public getCurrentRedoStackSize(): number {\r\n        return this.redoStack?.getCurrentStackSize() ?? 0;\r\n    }\r\n\r\n    public undo(source: 'api' | 'ui'): void {\r\n        const { eventSvc, undoStack, redoStack } = this;\r\n        eventSvc.dispatchEvent({\r\n            type: 'undoStarted',\r\n            source,\r\n        });\r\n\r\n        const operationPerformed = this.undoRedo(undoStack, redoStack, 'initialRange', 'oldValue', 'undo');\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'undoEnded',\r\n            source,\r\n            operationPerformed,\r\n        });\r\n    }\r\n\r\n    public redo(source: 'api' | 'ui'): void {\r\n        const { eventSvc, undoStack, redoStack } = this;\r\n        eventSvc.dispatchEvent({\r\n            type: 'redoStarted',\r\n            source,\r\n        });\r\n\r\n        const operationPerformed = this.undoRedo(redoStack, undoStack, 'finalRange', 'newValue', 'redo');\r\n\r\n        eventSvc.dispatchEvent({\r\n            type: 'redoEnded',\r\n            source,\r\n            operationPerformed,\r\n        });\r\n    }\r\n\r\n    private undoRedo(\r\n        undoRedoStack: UndoRedoStack,\r\n        opposingUndoRedoStack: UndoRedoStack,\r\n        rangeProperty: 'initialRange' | 'finalRange',\r\n        cellValueChangeProperty: 'oldValue' | 'newValue',\r\n        source: 'undo' | 'redo'\r\n    ): boolean {\r\n        if (!undoRedoStack) {\r\n            return false;\r\n        }\r\n\r\n        const undoRedoAction: UndoRedoAction | undefined = undoRedoStack.pop();\r\n\r\n        if (!undoRedoAction || !undoRedoAction.cellValueChanges) {\r\n            return false;\r\n        }\r\n\r\n        this.processAction(\r\n            undoRedoAction,\r\n            (cellValueChange: CellValueChange) => cellValueChange[cellValueChangeProperty],\r\n            source\r\n        );\r\n\r\n        if (undoRedoAction instanceof RangeUndoRedoAction) {\r\n            this.processRange(undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);\r\n        } else {\r\n            this.processCell(undoRedoAction.cellValueChanges);\r\n        }\r\n\r\n        opposingUndoRedoStack.push(undoRedoAction);\r\n\r\n        return true;\r\n    }\r\n\r\n    private processAction(\r\n        action: UndoRedoAction,\r\n        valueExtractor: (cellValueChange: CellValueChange) => any,\r\n        source: string\r\n    ) {\r\n        action.cellValueChanges.forEach((cellValueChange) => {\r\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\r\n            const rowPosition: RowPosition = { rowIndex, rowPinned };\r\n            const currentRow = _getRowNode(this.beans, rowPosition);\r\n\r\n            // checks if the row has been filtered out\r\n            if (!currentRow!.displayed) {\r\n                return;\r\n            }\r\n\r\n            currentRow!.setDataValue(columnId, valueExtractor(cellValueChange), source);\r\n        });\r\n    }\r\n\r\n    private processRange(ranges: (CellRange | undefined)[]) {\r\n        let lastFocusedCell: LastFocusedCell;\r\n        const rangeSvc = this.beans.rangeSvc!;\r\n\r\n        rangeSvc.removeAllCellRanges(true);\r\n        ranges.forEach((range, idx) => {\r\n            if (!range) {\r\n                return;\r\n            }\r\n\r\n            const startRow = range.startRow;\r\n            const endRow = range.endRow;\r\n\r\n            if (idx === ranges.length - 1) {\r\n                lastFocusedCell = {\r\n                    rowPinned: startRow!.rowPinned,\r\n                    rowIndex: startRow!.rowIndex,\r\n                    columnId: range.startColumn.getColId(),\r\n                };\r\n\r\n                this.setLastFocusedCell(lastFocusedCell);\r\n            }\r\n\r\n            const cellRangeParams: CellRangeParams = {\r\n                rowStartIndex: startRow!.rowIndex,\r\n                rowStartPinned: startRow!.rowPinned,\r\n                rowEndIndex: endRow!.rowIndex,\r\n                rowEndPinned: endRow!.rowPinned,\r\n                columnStart: range.startColumn,\r\n                columns: range.columns,\r\n            };\r\n\r\n            rangeSvc.addCellRange(cellRangeParams);\r\n        });\r\n    }\r\n\r\n    private processCell(cellValueChanges: CellValueChange[]) {\r\n        const cellValueChange = cellValueChanges[0];\r\n        const { rowIndex, rowPinned } = cellValueChange;\r\n        const rowPosition: RowPosition = { rowIndex, rowPinned };\r\n        const row = _getRowNode(this.beans, rowPosition);\r\n\r\n        const lastFocusedCell: LastFocusedCell = {\r\n            rowPinned: cellValueChange.rowPinned,\r\n            rowIndex: row!.rowIndex!,\r\n            columnId: cellValueChange.columnId,\r\n        };\r\n\r\n        // when single cells are being processed, they should be considered\r\n        // as ranges when the rangeSvc is present (singleCellRanges).\r\n        // otherwise focus will be restore but the range will not.\r\n        this.setLastFocusedCell(lastFocusedCell);\r\n    }\r\n\r\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell) {\r\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\r\n        const { colModel, focusSvc, rangeSvc } = this.beans;\r\n\r\n        const column: AgColumn | null = colModel.getCol(columnId);\r\n\r\n        if (!column) {\r\n            return;\r\n        }\r\n\r\n        const { scrollFeature } = this.gridBodyCtrl;\r\n        scrollFeature.ensureIndexVisible(rowIndex);\r\n        scrollFeature.ensureColumnVisible(column);\r\n\r\n        const cellPosition: CellPosition = { rowIndex, column, rowPinned };\r\n        focusSvc.setFocusedCell({ ...cellPosition, forceBrowserFocus: true });\r\n\r\n        rangeSvc?.setRangeToCell(cellPosition);\r\n    }\r\n\r\n    private addListeners(): void {\r\n        this.addManagedEventListeners({\r\n            rowEditingStarted: (e) => {\r\n                this.activeRowEdit = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\r\n            },\r\n            rowEditingStopped: () => {\r\n                const action = new UndoRedoAction(this.cellValueChanges);\r\n                this.pushActionsToUndoStack(action);\r\n                this.activeRowEdit = null;\r\n            },\r\n            cellEditingStarted: (e) => {\r\n                this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\r\n            },\r\n            cellEditingStopped: (e) => {\r\n                this.activeCellEdit = null;\r\n\r\n                const shouldPushAction =\r\n                    e.valueChanged && !this.activeRowEdit && !this.isPasting && !this.isRangeInAction;\r\n\r\n                if (shouldPushAction) {\r\n                    const action = new UndoRedoAction(this.cellValueChanges);\r\n                    this.pushActionsToUndoStack(action);\r\n                }\r\n            },\r\n            pasteStart: () => {\r\n                this.isPasting = true;\r\n            },\r\n            pasteEnd: () => {\r\n                const action = new UndoRedoAction(this.cellValueChanges);\r\n                this.pushActionsToUndoStack(action);\r\n                this.isPasting = false;\r\n            },\r\n            fillStart: () => {\r\n                this.isRangeInAction = true;\r\n            },\r\n            fillEnd: (event) => {\r\n                const action = new RangeUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\r\n                this.pushActionsToUndoStack(action);\r\n                this.isRangeInAction = false;\r\n            },\r\n            keyShortcutChangedCellStart: () => {\r\n                this.isRangeInAction = true;\r\n            },\r\n            keyShortcutChangedCellEnd: () => {\r\n                let action: UndoRedoAction;\r\n                const { rangeSvc, gos } = this.beans;\r\n                if (rangeSvc && _isCellSelectionEnabled(gos)) {\r\n                    action = new RangeUndoRedoAction(this.cellValueChanges, undefined, undefined, [\r\n                        ...rangeSvc.getCellRanges(),\r\n                    ]);\r\n                } else {\r\n                    action = new UndoRedoAction(this.cellValueChanges);\r\n                }\r\n                this.pushActionsToUndoStack(action);\r\n                this.isRangeInAction = false;\r\n            },\r\n        });\r\n    }\r\n\r\n    private pushActionsToUndoStack(action: UndoRedoAction) {\r\n        this.undoStack.push(action);\r\n\r\n        this.cellValueChanges = [];\r\n        this.redoStack.clear();\r\n    }\r\n}\r\n", "export const cellEditingCSS = /*css*/ `.ag-cell-inline-editing{border:var(--ag-cell-editing-border)!important;border-radius:var(--ag-border-radius);box-shadow:var(--ag-cell-editing-shadow);padding:0;z-index:1;.ag-cell-edit-wrapper,.ag-cell-editor,.ag-cell-wrapper,:where(.ag-cell-editor) .ag-input-field-input,:where(.ag-cell-editor) .ag-wrapper{height:100%;line-height:normal;width:100%}}:where(.ag-popup-editor) .ag-large-text{background-color:var(--ag-background-color);border-radius:var(--ag-border-radius);box-shadow:var(--ag-dropdown-shadow);padding:0}.ag-large-text-input{height:auto;padding:var(--ag-cell-horizontal-padding)}:where(.ag-rtl .ag-large-text-input) textarea{resize:none}:where(.ag-ltr) .ag-checkbox-edit{padding-left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-checkbox-edit{padding-right:var(--ag-cell-horizontal-padding)}`;\n", "import type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport { _getAriaCheckboxStateName } from '../../utils/aria';\r\nimport type { AgCheckbox } from '../../widgets/agCheckbox';\r\nimport { AgCheckboxSelector } from '../../widgets/agCheckbox';\r\nimport { RefPlaceholder } from '../../widgets/component';\r\nimport { PopupComponent } from '../../widgets/popupComponent';\r\n\r\nexport class CheckboxCellEditor extends PopupComponent implements ICellEditorComp {\r\n    constructor() {\r\n        super(\r\n            /* html */ `\r\n            <div class=\"ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit\">\r\n                <ag-checkbox role=\"presentation\" data-ref=\"eCheckbox\"></ag-checkbox>\r\n            </div>`,\r\n            [AgCheckboxSelector]\r\n        );\r\n    }\r\n\r\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\r\n    private params: ICellEditorParams<any, boolean>;\r\n\r\n    public init(params: ICellEditorParams<any, boolean>): void {\r\n        this.params = params;\r\n        const isSelected = params.value ?? undefined;\r\n\r\n        const eCheckbox = this.eCheckbox;\r\n        eCheckbox.setValue(isSelected);\r\n\r\n        const inputEl = eCheckbox.getInputElement();\r\n        inputEl.setAttribute('tabindex', '-1');\r\n\r\n        this.setAriaLabel(isSelected);\r\n\r\n        this.addManagedListeners(eCheckbox, {\r\n            fieldValueChanged: (event: { selected?: boolean }) => this.setAriaLabel(event.selected),\r\n        });\r\n    }\r\n\r\n    public getValue(): boolean | undefined {\r\n        return this.eCheckbox.getValue();\r\n    }\r\n\r\n    public focusIn(): void {\r\n        this.eCheckbox.getFocusableElement().focus();\r\n    }\r\n\r\n    public afterGuiAttached(): void {\r\n        if (this.params.cellStartedEdit) {\r\n            this.focusIn();\r\n        }\r\n    }\r\n\r\n    public override isPopup() {\r\n        return false;\r\n    }\r\n\r\n    private setAriaLabel(isSelected?: boolean): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const stateName = _getAriaCheckboxStateName(translate, isSelected);\r\n        const ariaLabel = translate('ariaToggleCellValue', 'Press SPACE to toggle cell value');\r\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\r\n    }\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport type { DefaultProvidedCellEditorParams, ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport { _isBrowserSafari } from '../../utils/browser';\r\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\r\nimport { RefPlaceholder } from '../../widgets/component';\r\nimport { PopupComponent } from '../../widgets/popupComponent';\r\nimport type { CellEditorInput } from './iCellEditorInput';\r\n\r\nexport class SimpleCellEditor<\r\n        TValue,\r\n        P extends ICellEditorParams & DefaultProvidedCellEditorParams,\r\n        I extends AgInputTextField,\r\n    >\r\n    extends PopupComponent\r\n    implements ICellEditorComp\r\n{\r\n    private highlightAllOnFocus: boolean;\r\n    private focusAfterAttached: boolean;\r\n    protected params: ICellEditorParams;\r\n    protected readonly eInput: I = RefPlaceholder;\r\n\r\n    constructor(protected cellEditorInput: CellEditorInput<TValue, P, I>) {\r\n        super(\r\n            /* html */ `\r\n            <div class=\"ag-cell-edit-wrapper\">\r\n                ${cellEditorInput.getTemplate()}\r\n            </div>`,\r\n            cellEditorInput.getAgComponents()\r\n        );\r\n    }\r\n\r\n    public init(params: P): void {\r\n        this.params = params;\r\n        const { cellStartedEdit, eventKey, suppressPreventDefault } = params;\r\n\r\n        const eInput = this.eInput;\r\n        this.cellEditorInput.init(eInput, params);\r\n        let startValue: string | null | undefined;\r\n        let shouldSetStartValue = true;\r\n\r\n        // cellStartedEdit is only false if we are doing fullRow editing\r\n        if (cellStartedEdit) {\r\n            this.focusAfterAttached = true;\r\n\r\n            if (eventKey === KeyCode.BACKSPACE || eventKey === KeyCode.DELETE) {\r\n                startValue = '';\r\n            } else if (eventKey && eventKey.length === 1) {\r\n                if (suppressPreventDefault) {\r\n                    shouldSetStartValue = false;\r\n                } else {\r\n                    startValue = eventKey;\r\n                }\r\n            } else {\r\n                startValue = this.cellEditorInput.getStartValue();\r\n\r\n                if (eventKey !== KeyCode.F2) {\r\n                    this.highlightAllOnFocus = true;\r\n                }\r\n            }\r\n        } else {\r\n            this.focusAfterAttached = false;\r\n            startValue = this.cellEditorInput.getStartValue();\r\n        }\r\n\r\n        if (shouldSetStartValue && startValue != null) {\r\n            eInput.setStartValue(startValue);\r\n        }\r\n\r\n        this.addManagedElementListeners(eInput.getGui(), {\r\n            keydown: (event: KeyboardEvent) => {\r\n                const { key } = event;\r\n\r\n                if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {\r\n                    event.preventDefault();\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    public afterGuiAttached(): void {\r\n        const translate = this.getLocaleTextFunc();\r\n        const eInput = this.eInput;\r\n\r\n        eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\r\n\r\n        if (!this.focusAfterAttached) {\r\n            return;\r\n        }\r\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\r\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\r\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\r\n        if (!_isBrowserSafari()) {\r\n            eInput.getFocusableElement().focus();\r\n        }\r\n\r\n        const inputEl = eInput.getInputElement();\r\n\r\n        if (this.highlightAllOnFocus) {\r\n            inputEl.select();\r\n        } else {\r\n            this.cellEditorInput.setCaret?.();\r\n        }\r\n    }\r\n\r\n    // gets called when tabbing through cells and in full row edit mode\r\n    public focusIn(): void {\r\n        const eInput = this.eInput;\r\n        const focusEl = eInput.getFocusableElement();\r\n        const inputEl = eInput.getInputElement();\r\n\r\n        focusEl.focus();\r\n        inputEl.select();\r\n    }\r\n\r\n    public getValue(): TValue | null | undefined {\r\n        return this.cellEditorInput.getValue();\r\n    }\r\n\r\n    public override isPopup() {\r\n        return false;\r\n    }\r\n}\r\n", "import { _serialiseDate } from '../../utils/date';\r\nimport { _exists } from '../../utils/generic';\r\nimport type { AgInputDateField } from '../../widgets/agInputDateField';\r\nimport { AgInputDateFieldSelector } from '../../widgets/agInputDateField';\r\nimport type { CellEditorInput } from './iCellEditorInput';\r\nimport type { IDateCellEditorParams } from './iDateCellEditor';\r\nimport { SimpleCellEditor } from './simpleCellEditor';\r\n\r\nclass DateCellEditorInput implements CellEditorInput<Date, IDateCellEditorParams, AgInputDateField> {\r\n    private eInput: AgInputDateField;\r\n    private params: IDateCellEditorParams;\r\n\r\n    public getTemplate() {\r\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-date-field>`;\r\n    }\r\n    public getAgComponents() {\r\n        return [AgInputDateFieldSelector];\r\n    }\r\n\r\n    public init(eInput: AgInputDateField, params: IDateCellEditorParams): void {\r\n        this.eInput = eInput;\r\n        this.params = params;\r\n        const { min, max, step } = params;\r\n        if (min != null) {\r\n            eInput.setMin(min);\r\n        }\r\n        if (max != null) {\r\n            eInput.setMax(max);\r\n        }\r\n        if (step != null) {\r\n            eInput.setStep(step);\r\n        }\r\n    }\r\n\r\n    getValue(): Date | null | undefined {\r\n        const { eInput, params } = this;\r\n        const value = eInput.getDate();\r\n        if (!_exists(value) && !_exists(params.value)) {\r\n            return params.value;\r\n        }\r\n        return value ?? null;\r\n    }\r\n\r\n    public getStartValue(): string | null | undefined {\r\n        const { value } = this.params;\r\n        if (!(value instanceof Date)) {\r\n            return undefined;\r\n        }\r\n        return _serialiseDate(value, false);\r\n    }\r\n}\r\n\r\nexport class DateCellEditor extends SimpleCellEditor<Date, IDateCellEditorParams, AgInputDateField> {\r\n    constructor() {\r\n        super(new DateCellEditorInput());\r\n    }\r\n}\r\n", "import type { DataTypeService } from '../../columns/dataTypeService';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { _parseDateTimeFromString, _serialiseDate } from '../../utils/date';\r\nimport { _exists } from '../../utils/generic';\r\nimport type { AgInputDateField } from '../../widgets/agInputDateField';\r\nimport { AgInputDateFieldSelector } from '../../widgets/agInputDateField';\r\nimport type { CellEditorInput } from './iCellEditorInput';\r\nimport type { IDateStringCellEditorParams } from './iDateStringCellEditor';\r\nimport { SimpleCellEditor } from './simpleCellEditor';\r\n\r\nclass DateStringCellEditorInput implements CellEditorInput<string, IDateStringCellEditorParams, AgInputDateField> {\r\n    private eInput: AgInputDateField;\r\n    private params: IDateStringCellEditorParams;\r\n\r\n    constructor(private getDataTypeService: () => DataTypeService | undefined) {}\r\n\r\n    public getTemplate() {\r\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-date-field>`;\r\n    }\r\n    public getAgComponents() {\r\n        return [AgInputDateFieldSelector];\r\n    }\r\n\r\n    public init(eInput: AgInputDateField, params: IDateStringCellEditorParams): void {\r\n        this.eInput = eInput;\r\n        this.params = params;\r\n        const { min, max, step } = params;\r\n        if (min != null) {\r\n            eInput.setMin(min);\r\n        }\r\n        if (max != null) {\r\n            eInput.setMax(max);\r\n        }\r\n        if (step != null) {\r\n            eInput.setStep(step);\r\n        }\r\n    }\r\n\r\n    public getValue(): string | null | undefined {\r\n        const { params, eInput } = this;\r\n        const value = this.formatDate(eInput.getDate());\r\n        if (!_exists(value) && !_exists(params.value)) {\r\n            return params.value;\r\n        }\r\n        return params.parseValue(value ?? '');\r\n    }\r\n\r\n    public getStartValue(): string | null | undefined {\r\n        return _serialiseDate(this.parseDate(this.params.value ?? undefined) ?? null, false);\r\n    }\r\n\r\n    private parseDate(value: string | undefined): Date | undefined {\r\n        const dataTypeSvc = this.getDataTypeService();\r\n        return dataTypeSvc\r\n            ? dataTypeSvc.getDateParserFunction(this.params.column as AgColumn)(value)\r\n            : _parseDateTimeFromString(value) ?? undefined;\r\n    }\r\n\r\n    private formatDate(value: Date | undefined): string | undefined {\r\n        const dataTypeSvc = this.getDataTypeService();\r\n        return dataTypeSvc\r\n            ? dataTypeSvc.getDateFormatterFunction(this.params.column as AgColumn)(value)\r\n            : _serialiseDate(value ?? null, false) ?? undefined;\r\n    }\r\n}\r\n\r\nexport class DateStringCellEditor extends SimpleCellEditor<string, IDateStringCellEditorParams, AgInputDateField> {\r\n    constructor() {\r\n        super(new DateStringCellEditorInput(() => this.beans.dataTypeSvc));\r\n    }\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport type { ICellEditorComp } from '../../interfaces/iCellEditor';\r\nimport { _exists } from '../../utils/generic';\r\nimport type { AgInputTextArea } from '../../widgets/agInputTextArea';\r\nimport { AgInputTextAreaSelector } from '../../widgets/agInputTextArea';\r\nimport { RefPlaceholder } from '../../widgets/component';\r\nimport { PopupComponent } from '../../widgets/popupComponent';\r\nimport type { ILargeTextEditorParams } from './iLargeTextCellEditor';\r\n\r\nexport class LargeTextCellEditor extends PopupComponent implements ICellEditorComp {\r\n    private readonly eTextArea: AgInputTextArea = RefPlaceholder;\r\n    private params: ILargeTextEditorParams;\r\n    private focusAfterAttached: boolean;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */ `<div class=\"ag-large-text\">\r\n        <ag-input-text-area data-ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\r\n        </div>`,\r\n            [AgInputTextAreaSelector]\r\n        );\r\n    }\r\n\r\n    public init(params: ILargeTextEditorParams): void {\r\n        this.params = params;\r\n        this.focusAfterAttached = params.cellStartedEdit;\r\n\r\n        this.eTextArea\r\n            .setMaxLength(params.maxLength || 200)\r\n            .setCols(params.cols || 60)\r\n            .setRows(params.rows || 10);\r\n\r\n        if (params.value != null) {\r\n            this.eTextArea.setValue(params.value.toString(), true);\r\n        }\r\n\r\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\r\n        this.activateTabIndex();\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent): void {\r\n        const key = event.key;\r\n\r\n        if (\r\n            key === KeyCode.LEFT ||\r\n            key === KeyCode.UP ||\r\n            key === KeyCode.RIGHT ||\r\n            key === KeyCode.DOWN ||\r\n            (event.shiftKey && key === KeyCode.ENTER)\r\n        ) {\r\n            // shift+enter allows for newlines\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    public afterGuiAttached(): void {\r\n        const translate = this.getLocaleTextFunc();\r\n\r\n        this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\r\n\r\n        if (this.focusAfterAttached) {\r\n            this.eTextArea.getFocusableElement().focus();\r\n        }\r\n    }\r\n\r\n    public getValue(): any {\r\n        const value = this.eTextArea.getValue();\r\n        const params = this.params;\r\n        if (!_exists(value) && !_exists(params.value)) {\r\n            return params.value;\r\n        }\r\n        return params.parseValue(value!);\r\n    }\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport { _isBrowserSafari } from '../../utils/browser';\r\nimport { _exists } from '../../utils/generic';\r\nimport type { AgInputNumberField } from '../../widgets/agInputNumberField';\r\nimport { AgInputNumberFieldSelector } from '../../widgets/agInputNumberField';\r\nimport type { CellEditorInput } from './iCellEditorInput';\r\nimport type { INumberCellEditorParams } from './iNumberCellEditor';\r\nimport { SimpleCellEditor } from './simpleCellEditor';\r\n\r\nclass NumberCellEditorInput implements CellEditorInput<number, INumberCellEditorParams, AgInputNumberField> {\r\n    private eInput: AgInputNumberField;\r\n    private params: INumberCellEditorParams;\r\n\r\n    public getTemplate() {\r\n        return /* html */ `<ag-input-number-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-number-field>`;\r\n    }\r\n    public getAgComponents() {\r\n        return [AgInputNumberFieldSelector];\r\n    }\r\n\r\n    public init(eInput: AgInputNumberField, params: INumberCellEditorParams): void {\r\n        this.eInput = eInput;\r\n        this.params = params;\r\n        const { max, min, precision, step } = params;\r\n        if (max != null) {\r\n            eInput.setMax(max);\r\n        }\r\n        if (min != null) {\r\n            eInput.setMin(min);\r\n        }\r\n        if (precision != null) {\r\n            eInput.setPrecision(precision);\r\n        }\r\n        if (step != null) {\r\n            eInput.setStep(step);\r\n        }\r\n\r\n        const inputEl = eInput.getInputElement();\r\n        if (params.preventStepping) {\r\n            eInput.addManagedElementListeners(inputEl, { keydown: this.preventStepping });\r\n        } else if (params.showStepperButtons) {\r\n            inputEl.classList.add('ag-number-field-input-stepper');\r\n        }\r\n    }\r\n\r\n    private preventStepping(e: KeyboardEvent): void {\r\n        if (e.key === KeyCode.UP || e.key === KeyCode.DOWN) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    public getValue(): number | null | undefined {\r\n        const { eInput, params } = this;\r\n        const value = eInput.getValue();\r\n        if (!_exists(value) && !_exists(params.value)) {\r\n            return params.value;\r\n        }\r\n        let parsedValue = params.parseValue(value!);\r\n        if (parsedValue == null) {\r\n            return parsedValue;\r\n        }\r\n        if (typeof parsedValue === 'string') {\r\n            if (parsedValue === '') {\r\n                return null;\r\n            }\r\n            parsedValue = Number(parsedValue);\r\n        }\r\n        return isNaN(parsedValue) ? null : parsedValue;\r\n    }\r\n\r\n    public getStartValue(): string | null | undefined {\r\n        return this.params.value as any;\r\n    }\r\n\r\n    public setCaret(): void {\r\n        if (_isBrowserSafari()) {\r\n            // If not safari, input is already focused.\r\n            // For safari we need to focus only for this use case to avoid AG-3238,\r\n            // but still ensure the input has focus.\r\n            this.eInput.getInputElement().focus({ preventScroll: true });\r\n        }\r\n    }\r\n}\r\n\r\nexport class NumberCellEditor extends SimpleCellEditor<number, INumberCellEditorParams, AgInputNumberField> {\r\n    constructor() {\r\n        super(new NumberCellEditorInput());\r\n    }\r\n}\r\n", "import { KeyCode } from '../../constants/keyCode';\r\nimport type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { ICellEditorComp, ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport { _missing } from '../../utils/generic';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { ValueService } from '../../valueService/valueService';\r\nimport type { ListOption } from '../../widgets/agList';\r\nimport type { AgSelect } from '../../widgets/agSelect';\r\nimport { AgSelectSelector } from '../../widgets/agSelect';\r\nimport { RefPlaceholder } from '../../widgets/component';\r\nimport { PopupComponent } from '../../widgets/popupComponent';\r\nimport type { ISelectCellEditorParams } from './iSelectCellEditor';\r\n\r\ninterface SelectCellEditorParams<TData = any, TValue = any, TContext = any>\r\n    extends ISelectCellEditorParams<TValue>,\r\n        ICellEditorParams<TData, TValue, TContext> {}\r\n\r\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\r\n    private focusAfterAttached: boolean;\r\n\r\n    private valueSvc: ValueService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.valueSvc = beans.valueSvc;\r\n    }\r\n\r\n    private readonly eSelect: AgSelect = RefPlaceholder;\r\n\r\n    private startedByEnter: boolean = false;\r\n\r\n    constructor() {\r\n        super(\r\n            /* html */\r\n            `<div class=\"ag-cell-edit-wrapper\">\r\n                <ag-select class=\"ag-cell-editor\" data-ref=\"eSelect\"></ag-select>\r\n            </div>`,\r\n            [AgSelectSelector]\r\n        );\r\n    }\r\n\r\n    public init(params: SelectCellEditorParams): void {\r\n        this.focusAfterAttached = params.cellStartedEdit;\r\n\r\n        const { eSelect, valueSvc, gos } = this;\r\n        const { values, value, eventKey } = params;\r\n\r\n        if (_missing(values)) {\r\n            _warn(58);\r\n            return;\r\n        }\r\n\r\n        this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;\r\n\r\n        let hasValue = false;\r\n        values.forEach((currentValue: any) => {\r\n            const option: ListOption = { value: currentValue };\r\n            const valueFormatted = valueSvc.formatValue(params.column as AgColumn, null, currentValue);\r\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\r\n            option.text = valueFormattedExits ? valueFormatted : currentValue;\r\n\r\n            eSelect.addOption(option);\r\n            hasValue = hasValue || value === currentValue;\r\n        });\r\n\r\n        if (hasValue) {\r\n            eSelect.setValue(params.value, true);\r\n        } else if (params.values.length) {\r\n            eSelect.setValue(params.values[0], true);\r\n        }\r\n\r\n        const { valueListGap, valueListMaxWidth, valueListMaxHeight } = params;\r\n\r\n        if (valueListGap != null) {\r\n            eSelect.setPickerGap(valueListGap);\r\n        }\r\n\r\n        if (valueListMaxHeight != null) {\r\n            eSelect.setPickerMaxHeight(valueListMaxHeight);\r\n        }\r\n\r\n        if (valueListMaxWidth != null) {\r\n            eSelect.setPickerMaxWidth(valueListMaxWidth);\r\n        }\r\n\r\n        // we don't want to add this if full row editing, otherwise selecting will stop the\r\n        // full row editing.\r\n        if (gos.get('editType') !== 'fullRow') {\r\n            this.addManagedListeners(this.eSelect, { selectedItem: () => params.stopEditing() });\r\n        }\r\n    }\r\n\r\n    public afterGuiAttached() {\r\n        if (this.focusAfterAttached) {\r\n            this.eSelect.getFocusableElement().focus();\r\n        }\r\n\r\n        if (this.startedByEnter) {\r\n            setTimeout(() => {\r\n                if (this.isAlive()) {\r\n                    this.eSelect.showPicker();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public focusIn(): void {\r\n        this.eSelect.getFocusableElement().focus();\r\n    }\r\n\r\n    public getValue(): any {\r\n        return this.eSelect.getValue();\r\n    }\r\n\r\n    public override isPopup() {\r\n        return false;\r\n    }\r\n}\r\n", "import { _exists } from '../../utils/generic';\r\nimport type { AgInputTextField } from '../../widgets/agInputTextField';\r\nimport { AgInputTextFieldSelector } from '../../widgets/agInputTextField';\r\nimport type { CellEditorInput } from './iCellEditorInput';\r\nimport type { ITextCellEditorParams } from './iTextCellEditor';\r\nimport { SimpleCellEditor } from './simpleCellEditor';\r\n\r\nclass TextCellEditorInput<TValue = any>\r\n    implements CellEditorInput<TValue, ITextCellEditorParams<any, TValue>, AgInputTextField>\r\n{\r\n    private eInput: AgInputTextField;\r\n    private params: ITextCellEditorParams<any, TValue>;\r\n\r\n    public getTemplate() {\r\n        return /* html */ `<ag-input-text-field class=\"ag-cell-editor\" data-ref=\"eInput\"></ag-input-text-field>`;\r\n    }\r\n    public getAgComponents() {\r\n        return [AgInputTextFieldSelector];\r\n    }\r\n\r\n    public init(eInput: AgInputTextField, params: ITextCellEditorParams<any, TValue>): void {\r\n        this.eInput = eInput;\r\n        this.params = params;\r\n        const maxLength = params.maxLength;\r\n        if (maxLength != null) {\r\n            eInput.setMaxLength(maxLength);\r\n        }\r\n    }\r\n\r\n    public getValue(): TValue | null | undefined {\r\n        const { eInput, params } = this;\r\n        const value = eInput.getValue();\r\n        if (!_exists(value) && !_exists(params.value)) {\r\n            return params.value;\r\n        }\r\n        return params.parseValue(value!);\r\n    }\r\n\r\n    public getStartValue(): string | null | undefined {\r\n        const params = this.params;\r\n        const formatValue = params.useFormatter || params.column.getColDef().refData;\r\n        return formatValue ? params.formatValue(params.value) : (params.value as any);\r\n    }\r\n\r\n    public setCaret(): void {\r\n        // when we started editing, we want the caret at the end, not the start.\r\n        // this comes into play in two scenarios:\r\n        //   a) when user hits F2\r\n        //   b) when user hits a printable character\r\n        const eInput = this.eInput;\r\n        const value = eInput.getValue();\r\n        const len = (_exists(value) && value.length) || 0;\r\n\r\n        if (len) {\r\n            eInput.getInputElement().setSelectionRange(len, len);\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextCellEditor extends SimpleCellEditor<any, ITextCellEditorParams, AgInputTextField> {\r\n    constructor() {\r\n        super(new TextCellEditorInput());\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { Column } from '../interfaces/iColumn';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport function getVerticalPixelRange(beans: BeanCollection): { top: number; bottom: number } {\r\n    return beans.ctrlsSvc.getScrollFeature().getVScrollPosition();\r\n}\r\n\r\nexport function getHorizontalPixelRange(beans: BeanCollection): { left: number; right: number } {\r\n    return beans.ctrlsSvc.getScrollFeature().getHScrollPosition();\r\n}\r\n\r\nexport function ensureColumnVisible(\r\n    beans: BeanCollection,\r\n    key: string | Column,\r\n    position: 'auto' | 'start' | 'middle' | 'end' = 'auto'\r\n) {\r\n    beans.frameworkOverrides.wrapIncoming(\r\n        () => beans.ctrlsSvc.getScrollFeature().ensureColumnVisible(key, position),\r\n        'ensureVisible'\r\n    );\r\n}\r\n\r\nexport function ensureIndexVisible(\r\n    beans: BeanCollection,\r\n    index: number,\r\n    position?: 'top' | 'bottom' | 'middle' | null\r\n) {\r\n    beans.frameworkOverrides.wrapIncoming(\r\n        () => beans.ctrlsSvc.getScrollFeature().ensureIndexVisible(index, position),\r\n        'ensureVisible'\r\n    );\r\n}\r\n\r\nexport function ensureNodeVisible<TData = any>(\r\n    beans: BeanCollection,\r\n    nodeSelector: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\r\n    position: 'top' | 'bottom' | 'middle' | null = null\r\n) {\r\n    beans.frameworkOverrides.wrapIncoming(\r\n        () => beans.ctrlsSvc.getScrollFeature().ensureNodeVisible(nodeSelector, position),\r\n        'ensureVisible'\r\n    );\r\n}\r\n", "import type { StartEditingCellParams } from '../api/gridApi';\r\nimport { ensureColumnVisible, ensureIndexVisible } from '../api/scrollApi';\r\nimport { _unwrapUserComp } from '../components/framework/unwrapUserComp';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _getCellByPosition } from '../entities/positionUtils';\r\nimport { _getActiveDomElement } from '../gridOptionsUtils';\r\nimport type { GetCellEditorInstancesParams, ICellEditor } from '../interfaces/iCellEditor';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport function undoCellEditing(beans: BeanCollection): void {\r\n    beans.undoRedo?.undo('api');\r\n}\r\n\r\nexport function redoCellEditing(beans: BeanCollection): void {\r\n    beans.undoRedo?.redo('api');\r\n}\r\n\r\nexport function getCellEditorInstances<TData = any>(\r\n    beans: BeanCollection,\r\n    params: GetCellEditorInstancesParams<TData> = {}\r\n): ICellEditor[] {\r\n    const res: ICellEditor[] = [];\r\n\r\n    beans.rowRenderer.getCellCtrls(params.rowNodes, params.columns as AgColumn[]).forEach((cellCtrl) => {\r\n        const cellEditor = cellCtrl.comp?.getCellEditor() as ICellEditor;\r\n\r\n        if (cellEditor) {\r\n            res.push(_unwrapUserComp(cellEditor));\r\n        }\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport function getEditingCells(beans: BeanCollection): CellPosition[] {\r\n    const res: CellPosition[] = [];\r\n\r\n    beans.rowRenderer.getAllCellCtrls().forEach((cellCtrl) => {\r\n        if (cellCtrl.editing) {\r\n            const { cellPosition } = cellCtrl;\r\n            res.push(cellPosition);\r\n        }\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport function stopEditing(beans: BeanCollection, cancel: boolean = false): void {\r\n    beans.editSvc?.stopAllEditing(cancel);\r\n}\r\n\r\nexport function startEditingCell(beans: BeanCollection, params: StartEditingCellParams): void {\r\n    const column = beans.colModel.getCol(params.colKey);\r\n    if (!column) {\r\n        _warn(12, { colKey: params.colKey });\r\n        return;\r\n    }\r\n    const cellPosition: CellPosition = {\r\n        rowIndex: params.rowIndex,\r\n        rowPinned: params.rowPinned || null,\r\n        column: column,\r\n    };\r\n    const notPinned = params.rowPinned == null;\r\n    if (notPinned) {\r\n        ensureIndexVisible(beans, params.rowIndex);\r\n    }\r\n\r\n    ensureColumnVisible(beans, params.colKey);\r\n\r\n    const cell = _getCellByPosition(beans, cellPosition);\r\n    if (!cell) {\r\n        return;\r\n    }\r\n    const { focusSvc, gos, editSvc } = beans;\r\n    const isFocusWithinCell = () => {\r\n        const activeElement = _getActiveDomElement(beans);\r\n        const eCell = cell.eGui;\r\n        return activeElement !== eCell && !!eCell?.contains(activeElement);\r\n    };\r\n    const forceBrowserFocus = gos.get('stopEditingWhenCellsLoseFocus') && isFocusWithinCell();\r\n    if (forceBrowserFocus || !focusSvc.isCellFocused(cellPosition)) {\r\n        focusSvc.setFocusedCell({\r\n            ...cellPosition,\r\n            forceBrowserFocus,\r\n            preventScrollOnBrowserFocus: true,\r\n        });\r\n    }\r\n    editSvc?.startRowOrCellEdit(cell, params.key);\r\n}\r\n\r\nexport function getCurrentUndoSize(beans: BeanCollection): number {\r\n    return beans.undoRedo?.getCurrentUndoStackSize() ?? 0;\r\n}\r\n\r\nexport function getCurrentRedoSize(beans: BeanCollection): number {\r\n    return beans.undoRedo?.getCurrentRedoStackSize() ?? 0;\r\n}\r\n", "import type { AgColumn } from '../../entities/agColumn';\r\nimport { _setDomData } from '../../gridOptionsUtils';\r\nimport type { ICellEditorParams } from '../../interfaces/iCellEditor';\r\nimport { _isUserSuppressingKeyboardEvent } from '../../utils/keyboard';\r\nimport { PopupComponent } from '../../widgets/popupComponent';\r\n\r\nexport class PopupEditorWrapper extends PopupComponent {\r\n    constructor(private readonly params: ICellEditorParams) {\r\n        super(/* html */ `<div class=\"ag-popup-editor\" tabindex=\"-1\"/>`);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        _setDomData(this.gos, this.getGui(), 'popupEditorWrapper', true);\r\n        this.addKeyDownListener();\r\n    }\r\n\r\n    private addKeyDownListener(): void {\r\n        const eGui = this.getGui();\r\n        const params = this.params;\r\n        const listener = (event: KeyboardEvent) => {\r\n            if (!_isUserSuppressingKeyboardEvent(this.gos, event, params.node, params.column as AgColumn, true)) {\r\n                params.onKeyDown(event);\r\n            }\r\n        };\r\n\r\n        this.addManagedElementListeners(eGui, { keydown: listener });\r\n    }\r\n}\r\n", "import { _getCellEditorDetails } from '../components/framework/userCompUtils';\r\nimport { KeyCode } from '../constants/keyCode';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _isElementInThisGrid } from '../gridBodyComp/mouseEventUtils';\r\nimport type { DefaultProvidedCellEditorParams, ICellEditorParams } from '../interfaces/iCellEditor';\r\nimport type { CellPosition } from '../interfaces/iCellPosition';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport type { UserCompDetails } from '../interfaces/iUserCompDetails';\r\nimport type { CellCtrl, ICellComp } from '../rendering/cell/cellCtrl';\r\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\r\nimport { _getTabIndex } from '../utils/browser';\r\nimport { PopupEditorWrapper } from './cellEditors/popupEditorWrapper';\r\n\r\nexport class EditService extends BeanStub implements NamedBean {\r\n    beanName = 'editSvc' as const;\r\n\r\n    public startEditing(\r\n        cellCtrl: CellCtrl,\r\n        key: string | null = null,\r\n        cellStartedEdit = false,\r\n        event: KeyboardEvent | MouseEvent | null = null\r\n    ): boolean {\r\n        if (!cellCtrl.isCellEditable() || cellCtrl.editing) {\r\n            return true;\r\n        }\r\n\r\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\r\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\r\n        if (!cellCtrl.comp) {\r\n            cellCtrl.onCompAttachedFuncs.push(() => {\r\n                this.startEditing(cellCtrl, key, cellStartedEdit, event);\r\n            });\r\n            return true;\r\n        }\r\n\r\n        const editorParams = this.createCellEditorParams(cellCtrl, key, cellStartedEdit);\r\n        const colDef = cellCtrl.column.getColDef();\r\n        const compDetails = _getCellEditorDetails(this.beans.userCompFactory, colDef, editorParams);\r\n\r\n        // if cellEditorSelector was used, we give preference to popup and popupPosition from the selector\r\n        const popup = compDetails?.popupFromSelector != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;\r\n        const position: 'over' | 'under' | undefined =\r\n            compDetails?.popupPositionFromSelector != null\r\n                ? compDetails.popupPositionFromSelector\r\n                : colDef.cellEditorPopupPosition;\r\n\r\n        setEditing(cellCtrl, true, compDetails);\r\n        cellCtrl.comp.setEditDetails(compDetails, popup, position, this.gos.get('reactiveCustomComponents'));\r\n\r\n        this.eventSvc.dispatchEvent(cellCtrl.createEvent(event, 'cellEditingStarted'));\r\n\r\n        return !(compDetails?.params as DefaultProvidedCellEditorParams)?.suppressPreventDefault;\r\n    }\r\n\r\n    /**\r\n     * Ends the Cell Editing\r\n     * @param cancel `True` if the edit process is being canceled.\r\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\r\n     */\r\n    public stopEditing(cellCtrl: CellCtrl, cancel: boolean = false): boolean {\r\n        cellCtrl.onEditorAttachedFuncs = [];\r\n        if (!cellCtrl.editing) {\r\n            return false;\r\n        }\r\n\r\n        const { comp: cellComp, column, rowNode } = cellCtrl;\r\n        const { newValue, newValueExists } = takeValueFromCellEditor(cancel, cellComp);\r\n        const oldValue = this.beans.valueSvc.getValueForDisplay(column, rowNode);\r\n        let valueChanged = false;\r\n\r\n        if (newValueExists) {\r\n            valueChanged = saveNewValue(cellCtrl, oldValue, newValue, rowNode, column);\r\n        }\r\n\r\n        setEditing(cellCtrl, false, undefined);\r\n        cellComp.setEditDetails(); // passing nothing stops editing\r\n\r\n        cellCtrl.updateAndFormatValue(false);\r\n        cellCtrl.refreshCell({ forceRefresh: true, suppressFlash: true });\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            ...cellCtrl.createEvent(null, 'cellEditingStopped'),\r\n            oldValue,\r\n            newValue,\r\n            valueChanged,\r\n        });\r\n\r\n        return valueChanged;\r\n    }\r\n\r\n    public handleColDefChanged(cellCtrl: CellCtrl): void {\r\n        const cellEditor = cellCtrl.comp?.getCellEditor();\r\n        if (cellEditor?.refresh) {\r\n            const { eventKey, cellStartedEdit } = cellCtrl.editCompDetails!.params;\r\n            const editorParams = this.createCellEditorParams(cellCtrl, eventKey, cellStartedEdit);\r\n            const colDef = cellCtrl.column.getColDef();\r\n            const compDetails = _getCellEditorDetails(this.beans.userCompFactory, colDef, editorParams);\r\n            cellEditor.refresh(compDetails!.params);\r\n        }\r\n    }\r\n\r\n    public setFocusOutOnEditor(cellCtrl: CellCtrl): void {\r\n        if (!cellCtrl.editing) {\r\n            return;\r\n        }\r\n        const cellEditor = cellCtrl.comp.getCellEditor();\r\n\r\n        if (cellEditor && cellEditor.focusOut) {\r\n            cellEditor.focusOut();\r\n        }\r\n    }\r\n\r\n    public setFocusInOnEditor(cellCtrl: CellCtrl): void {\r\n        if (!cellCtrl.editing) {\r\n            return;\r\n        }\r\n        const cellComp = cellCtrl.comp;\r\n        const cellEditor = cellComp.getCellEditor();\r\n\r\n        if (cellEditor?.focusIn) {\r\n            // if the editor is present, then we just focus it\r\n            cellEditor.focusIn();\r\n        } else {\r\n            // if the editor is not present, it means async cell editor (e.g. React)\r\n            // and we are trying to set focus before the cell editor is present, so we\r\n            // focus the cell instead\r\n            cellCtrl.focusCell(true);\r\n            cellCtrl.onEditorAttachedFuncs.push(() => cellComp.getCellEditor()?.focusIn?.());\r\n        }\r\n    }\r\n\r\n    public stopEditingAndFocus(cellCtrl: CellCtrl, suppressNavigateAfterEdit = false, shiftKey: boolean = false): void {\r\n        this.stopRowOrCellEdit(cellCtrl);\r\n        cellCtrl.focusCell(true);\r\n\r\n        if (!suppressNavigateAfterEdit) {\r\n            this.navigateAfterEdit(shiftKey, cellCtrl.cellPosition);\r\n        }\r\n    }\r\n\r\n    public createPopupEditorWrapper(params: ICellEditorParams): PopupEditorWrapper {\r\n        return new PopupEditorWrapper(params);\r\n    }\r\n\r\n    public stopAllEditing(cancel: boolean = false): void {\r\n        this.beans.rowRenderer.getAllRowCtrls().forEach((rowCtrl) => this.stopRowEditing(rowCtrl, cancel));\r\n    }\r\n\r\n    public stopRowEditing(rowCtrl: RowCtrl, cancel: boolean = false): void {\r\n        // if we are already stopping row edit, there is\r\n        // no need to start this process again.\r\n        if (rowCtrl.stoppingRowEdit) {\r\n            return;\r\n        }\r\n\r\n        const cellControls = rowCtrl.getAllCellCtrls();\r\n        const isRowEdit = rowCtrl.editing;\r\n\r\n        rowCtrl.stoppingRowEdit = true;\r\n\r\n        let fireRowEditEvent = false;\r\n        for (const ctrl of cellControls) {\r\n            const valueChanged = ctrl.stopEditing(cancel);\r\n            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {\r\n                fireRowEditEvent = true;\r\n            }\r\n        }\r\n\r\n        if (fireRowEditEvent) {\r\n            this.eventSvc.dispatchEvent(rowCtrl.createRowEvent('rowValueChanged'));\r\n        }\r\n\r\n        if (isRowEdit) {\r\n            this.beans.rowEditSvc?.setEditing(rowCtrl, false);\r\n        }\r\n\r\n        rowCtrl.stoppingRowEdit = false;\r\n    }\r\n\r\n    public addStopEditingWhenGridLosesFocus(viewports: HTMLElement[]): void {\r\n        if (!this.gos.get('stopEditingWhenCellsLoseFocus')) {\r\n            return;\r\n        }\r\n\r\n        const focusOutListener = (event: FocusEvent): void => {\r\n            // this is the element the focus is moving to\r\n            const elementWithFocus = event.relatedTarget as HTMLElement;\r\n\r\n            if (_getTabIndex(elementWithFocus) === null) {\r\n                this.stopAllEditing();\r\n                return;\r\n            }\r\n\r\n            let clickInsideGrid =\r\n                // see if click came from inside the viewports\r\n                viewports.some((viewport) => viewport.contains(elementWithFocus)) &&\r\n                // and also that it's not from a detail grid\r\n                _isElementInThisGrid(this.gos, elementWithFocus);\r\n\r\n            if (!clickInsideGrid) {\r\n                const popupSvc = this.beans.popupSvc;\r\n\r\n                clickInsideGrid =\r\n                    !!popupSvc &&\r\n                    (popupSvc.getActivePopups().some((popup) => popup.contains(elementWithFocus)) ||\r\n                        popupSvc.isElementWithinCustomPopup(elementWithFocus));\r\n            }\r\n\r\n            if (!clickInsideGrid) {\r\n                this.stopAllEditing();\r\n            }\r\n        };\r\n\r\n        viewports.forEach((viewport) => this.addManagedElementListeners(viewport, { focusout: focusOutListener }));\r\n    }\r\n\r\n    public setInlineEditingCss(rowCtrl: RowCtrl): void {\r\n        const editing = rowCtrl.editing || rowCtrl.getAllCellCtrls().some((cellCtrl) => cellCtrl.editing);\r\n        rowCtrl.forEachGui(undefined, (gui) => {\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-inline-editing', editing);\r\n            gui.rowComp.addOrRemoveCssClass('ag-row-not-inline-editing', !editing);\r\n        });\r\n    }\r\n\r\n    public isCellEditable(column: AgColumn, rowNode: IRowNode): boolean {\r\n        if (rowNode.group) {\r\n            // This is a group - it could be a tree group or a grouping group...\r\n            if (this.gos.get('treeData')) {\r\n                // tree - allow editing of groups with data by default.\r\n                // Allow editing filler nodes (node without data) only if enableGroupEdit is true.\r\n                if (!rowNode.data && !this.gos.get('enableGroupEdit')) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // grouping - allow editing of groups if the user has enableGroupEdit option enabled\r\n                if (!this.gos.get('enableGroupEdit')) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return column.isColumnFunc(rowNode, column.colDef.editable);\r\n    }\r\n\r\n    // called by rowRenderer when user navigates via tab key\r\n    public startRowOrCellEdit(\r\n        cellCtrl: CellCtrl,\r\n        key?: string | null,\r\n        event: KeyboardEvent | MouseEvent | null = null\r\n    ): boolean {\r\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\r\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\r\n        if (!cellCtrl.comp) {\r\n            cellCtrl.onCompAttachedFuncs.push(() => {\r\n                this.startRowOrCellEdit(cellCtrl, key, event);\r\n            });\r\n            return true;\r\n        }\r\n\r\n        if (this.gos.get('editType') === 'fullRow') {\r\n            return this.beans.rowEditSvc?.startEditing(cellCtrl.rowCtrl, key, cellCtrl) ?? true;\r\n        } else {\r\n            return this.startEditing(cellCtrl, key, true, event);\r\n        }\r\n    }\r\n\r\n    // pass in 'true' to cancel the editing.\r\n    public stopRowOrCellEdit(cellCtrl: CellCtrl, cancel: boolean = false) {\r\n        if (this.gos.get('editType') === 'fullRow') {\r\n            this.stopRowEditing(cellCtrl.rowCtrl, cancel);\r\n        } else {\r\n            this.stopEditing(cellCtrl, cancel);\r\n        }\r\n    }\r\n\r\n    private createCellEditorParams(\r\n        cellCtrl: CellCtrl,\r\n        key: string | null,\r\n        cellStartedEdit: boolean\r\n    ): ICellEditorParams {\r\n        const {\r\n            column,\r\n            rowNode,\r\n            eGui,\r\n            cellPosition: { rowIndex },\r\n        } = cellCtrl;\r\n        const { valueSvc, gos } = this.beans;\r\n        return gos.addGridCommonParams({\r\n            value: valueSvc.getValueForDisplay(column, rowNode),\r\n            eventKey: key,\r\n            column,\r\n            colDef: column.getColDef(),\r\n            rowIndex,\r\n            node: rowNode,\r\n            data: rowNode.data,\r\n            cellStartedEdit: cellStartedEdit,\r\n            onKeyDown: cellCtrl.onKeyDown.bind(cellCtrl),\r\n            stopEditing: cellCtrl.stopEditingAndFocus.bind(cellCtrl),\r\n            eGridCell: eGui,\r\n            parseValue: (newValue: any) => valueSvc.parseValue(column, rowNode, newValue, cellCtrl.value),\r\n            formatValue: cellCtrl.formatValue.bind(cellCtrl),\r\n        });\r\n    }\r\n\r\n    private navigateAfterEdit(shiftKey: boolean, cellPosition: CellPosition): void {\r\n        const enterNavigatesVerticallyAfterEdit = this.gos.get('enterNavigatesVerticallyAfterEdit');\r\n\r\n        if (enterNavigatesVerticallyAfterEdit) {\r\n            const key = shiftKey ? KeyCode.UP : KeyCode.DOWN;\r\n            this.beans.navigation?.navigateToNextCell(null, key, cellPosition, false);\r\n        }\r\n    }\r\n}\r\n\r\nfunction setEditing(cellCtrl: CellCtrl, editing: boolean, compDetails: UserCompDetails | undefined): void {\r\n    cellCtrl.editCompDetails = compDetails;\r\n    if (cellCtrl.editing === editing) {\r\n        return;\r\n    }\r\n\r\n    cellCtrl.editing = editing;\r\n}\r\n\r\nfunction takeValueFromCellEditor(cancel: boolean, cellComp: ICellComp): { newValue?: any; newValueExists: boolean } {\r\n    const noValueResult = { newValueExists: false };\r\n\r\n    if (cancel) {\r\n        return noValueResult;\r\n    }\r\n\r\n    const cellEditor = cellComp.getCellEditor();\r\n\r\n    if (!cellEditor) {\r\n        return noValueResult;\r\n    }\r\n\r\n    const userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();\r\n\r\n    if (userWantsToCancel) {\r\n        return noValueResult;\r\n    }\r\n\r\n    const newValue = cellEditor.getValue();\r\n\r\n    return {\r\n        newValue: newValue,\r\n        newValueExists: true,\r\n    };\r\n}\r\n\r\n/**\r\n * @returns `True` if the value changes, otherwise `False`.\r\n */\r\nfunction saveNewValue(cellCtrl: CellCtrl, oldValue: any, newValue: any, rowNode: RowNode, column: AgColumn): boolean {\r\n    if (newValue === oldValue) {\r\n        return false;\r\n    }\r\n\r\n    // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection\r\n    // getting triggered, which results in all cells getting refreshed. we do not want this refresh\r\n    // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.\r\n    // if we only did this refresh (and not the one below) then the cell would flash and not be forced.\r\n    cellCtrl.suppressRefreshCell = true;\r\n    const valueChanged = rowNode.setDataValue(column, newValue, 'edit');\r\n    cellCtrl.suppressRefreshCell = false;\r\n\r\n    return valueChanged;\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowEditingStartedEvent, RowEditingStoppedEvent } from '../events';\r\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\r\n\r\nexport class RowEditService extends BeanStub implements NamedBean {\r\n    beanName = 'rowEditSvc' as const;\r\n\r\n    public startEditing(\r\n        rowCtrl: RowCtrl,\r\n        key: string | null = null,\r\n        sourceRenderedCell: CellCtrl | null = null,\r\n        event: KeyboardEvent | null = null\r\n    ): boolean {\r\n        // don't do it if already editing\r\n        if (rowCtrl.editing) {\r\n            return true;\r\n        }\r\n\r\n        let preventDefault = true;\r\n        let atLeastOneEditing = false;\r\n        const { editSvc } = this.beans;\r\n        rowCtrl.getAllCellCtrls().forEach((cellCtrl: CellCtrl) => {\r\n            const cellStartedEdit = cellCtrl === sourceRenderedCell;\r\n            if (cellStartedEdit) {\r\n                preventDefault = editSvc?.startEditing(cellCtrl, key, cellStartedEdit, event) ?? true;\r\n            } else {\r\n                editSvc?.startEditing(cellCtrl, null, cellStartedEdit, event);\r\n            }\r\n            atLeastOneEditing ||= cellCtrl.editing;\r\n        });\r\n\r\n        if (atLeastOneEditing) {\r\n            this.setEditing(rowCtrl, true);\r\n        }\r\n        return preventDefault;\r\n    }\r\n\r\n    public setEditing(rowCtrl: RowCtrl, value: boolean): void {\r\n        rowCtrl.editing = value;\r\n        rowCtrl.forEachGui(undefined, (gui) => gui.rowComp.addOrRemoveCssClass('ag-row-editing', value));\r\n\r\n        const event: RowEditingStartedEvent | RowEditingStoppedEvent = value\r\n            ? rowCtrl.createRowEvent('rowEditingStarted')\r\n            : rowCtrl.createRowEvent('rowEditingStopped');\r\n\r\n        this.eventSvc.dispatchEvent(event);\r\n    }\r\n}\r\n", "import type { _EditGridApi, _UndoRedoGridApi } from '../api/gridApi';\r\nimport type { DefaultProvidedCellEditorParams } from '../interfaces/iCellEditor';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { UndoRedoService } from '../undoRedo/undoRedoService';\r\nimport { VERSION } from '../version';\r\nimport { PopupModule } from '../widgets/popupModule';\r\nimport { cellEditingCSS } from './cell-editing.css-GENERATED';\r\nimport { CheckboxCellEditor } from './cellEditors/checkboxCellEditor';\r\nimport { DateCellEditor } from './cellEditors/dateCellEditor';\r\nimport { DateStringCellEditor } from './cellEditors/dateStringCellEditor';\r\nimport { LargeTextCellEditor } from './cellEditors/largeTextCellEditor';\r\nimport { NumberCellEditor } from './cellEditors/numberCellEditor';\r\nimport { SelectCellEditor } from './cellEditors/selectCellEditor';\r\nimport { TextCellEditor } from './cellEditors/textCellEditor';\r\nimport {\r\n    getCellEditorInstances,\r\n    getCurrentRedoSize,\r\n    getCurrentUndoSize,\r\n    getEditingCells,\r\n    redoCellEditing,\r\n    startEditingCell,\r\n    stopEditing,\r\n    undoCellEditing,\r\n} from './editApi';\r\nimport { EditService } from './editService';\r\nimport { RowEditService } from './rowEditService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const EditCoreModule: _ModuleWithApi<_EditGridApi<any>> = {\r\n    moduleName: 'EditCore',\r\n    version: VERSION,\r\n    beans: [EditService, RowEditService],\r\n    apiFunctions: {\r\n        getCellEditorInstances,\r\n        getEditingCells,\r\n        stopEditing,\r\n        startEditingCell,\r\n    },\r\n    dependsOn: [PopupModule],\r\n    css: [cellEditingCSS],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Undo / Redo Edits\r\n */\r\nexport const UndoRedoEditModule: _ModuleWithApi<_UndoRedoGridApi> = {\r\n    moduleName: 'UndoRedoEdit',\r\n    version: VERSION,\r\n    beans: [UndoRedoService],\r\n    apiFunctions: {\r\n        undoCellEditing,\r\n        redoCellEditing,\r\n        getCurrentUndoSize,\r\n        getCurrentRedoSize,\r\n    },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Text Editor\r\n */\r\nexport const TextEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'TextEditor',\r\n    version: VERSION,\r\n    userComponents: { agCellEditor: TextCellEditor, agTextCellEditor: TextCellEditor },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Number Editor\r\n */\r\nexport const NumberEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'NumberEditor',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agNumberCellEditor: {\r\n            classImp: NumberCellEditor,\r\n            params: {\r\n                suppressPreventDefault: true,\r\n            } as DefaultProvidedCellEditorParams,\r\n        },\r\n    },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Date Editor\r\n */\r\nexport const DateEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'DateEditor',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agDateCellEditor: DateCellEditor,\r\n        agDateStringCellEditor: DateStringCellEditor,\r\n    },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Checkbox Editor\r\n */\r\nexport const CheckboxEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'CheckboxEditor',\r\n    version: VERSION,\r\n    userComponents: {\r\n        agCheckboxCellEditor: CheckboxCellEditor,\r\n    },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Select Editor\r\n */\r\nexport const SelectEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'SelectEditor',\r\n    version: VERSION,\r\n    userComponents: { agSelectCellEditor: SelectCellEditor },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing -> Large Text Editor\r\n */\r\nexport const LargeTextEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'LargeTextEditor',\r\n    version: VERSION,\r\n    userComponents: { agLargeTextCellEditor: LargeTextCellEditor },\r\n    dependsOn: [EditCoreModule],\r\n};\r\n\r\n/**\r\n * @feature Editing\r\n */\r\nexport const CustomEditorModule: _ModuleWithoutApi = {\r\n    moduleName: 'CustomEditor',\r\n    version: VERSION,\r\n    dependsOn: [EditCoreModule],\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { SelectAllMode } from '../entities/gridOptions';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { SelectionEventSourceType } from '../events';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport function setNodesSelected(\r\n    beans: BeanCollection,\r\n    params: { nodes: IRowNode[]; newValue: boolean; source?: SelectionEventSourceType }\r\n) {\r\n    const allNodesValid = params.nodes.every((node) => {\r\n        if (node.rowPinned) {\r\n            _warn(59);\r\n            return false;\r\n        }\r\n\r\n        if (node.id === undefined) {\r\n            _warn(60);\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n\r\n    if (!allNodesValid) {\r\n        return;\r\n    }\r\n\r\n    const { nodes, source, newValue } = params;\r\n    const nodesAsRowNode = nodes as RowNode[];\r\n    beans.selectionSvc?.setNodesSelected({ nodes: nodesAsRowNode, source: source ?? 'api', newValue });\r\n}\r\n\r\nexport function selectAll(\r\n    beans: BeanCollection,\r\n    selectAll?: SelectAllMode,\r\n    source: SelectionEventSourceType = 'apiSelectAll'\r\n) {\r\n    beans.selectionSvc?.selectAllRowNodes({ source, selectAll });\r\n}\r\n\r\nexport function deselectAll(\r\n    beans: BeanCollection,\r\n    selectAll?: SelectAllMode,\r\n    source: SelectionEventSourceType = 'apiSelectAll'\r\n) {\r\n    beans.selectionSvc?.deselectAllRowNodes({ source, selectAll });\r\n}\r\n\r\n/** @deprecated v33 */\r\nexport function selectAllFiltered(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAllFiltered') {\r\n    beans.selectionSvc?.selectAllRowNodes({ source, selectAll: 'filtered' });\r\n}\r\n\r\n/** @deprecated v33 */\r\nexport function deselectAllFiltered(beans: BeanCollection, source: SelectionEventSourceType = 'apiSelectAllFiltered') {\r\n    beans.selectionSvc?.deselectAllRowNodes({ source, selectAll: 'filtered' });\r\n}\r\n\r\n/** @deprecated v33 */\r\nexport function selectAllOnCurrentPage(\r\n    beans: BeanCollection,\r\n    source: SelectionEventSourceType = 'apiSelectAllCurrentPage'\r\n) {\r\n    beans.selectionSvc?.selectAllRowNodes({ source, selectAll: 'currentPage' });\r\n}\r\n\r\n/** @deprecated v33 */\r\nexport function deselectAllOnCurrentPage(\r\n    beans: BeanCollection,\r\n    source: SelectionEventSourceType = 'apiSelectAllCurrentPage'\r\n) {\r\n    beans.selectionSvc?.deselectAllRowNodes({ source, selectAll: 'currentPage' });\r\n}\r\n\r\nexport function getSelectedNodes<TData = any>(beans: BeanCollection): IRowNode<TData>[] {\r\n    return beans.selectionSvc?.getSelectedNodes() ?? [];\r\n}\r\n\r\nexport function getSelectedRows<TData = any>(beans: BeanCollection): TData[] {\r\n    return beans.selectionSvc?.getSelectedRows() ?? [];\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport type { RowSelectionMode, SelectAllMode } from '../entities/gridOptions';\r\nimport { RowNode } from '../entities/rowNode';\r\nimport type { RowSelectedEvent, SelectionEventSourceType } from '../events';\r\nimport {\r\n    _getGroupSelection,\r\n    _getGroupSelectsDescendants,\r\n    _getRowSelectionMode,\r\n    _isClientSideRowModel,\r\n    _isMultiRowSelection,\r\n    _isRowSelection,\r\n    _isUsingNewRowSelectionAPI,\r\n} from '../gridOptionsUtils';\r\nimport type { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\r\nimport type { ISelectionService, ISetNodesSelectedParams } from '../interfaces/iSelectionService';\r\nimport type { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from '../interfaces/selectionState';\r\nimport { ChangedPath } from '../utils/changedPath';\r\nimport { _error, _warn } from '../validation/logging';\r\nimport { BaseSelectionService } from './baseSelectionService';\r\n\r\nexport class SelectionService extends BaseSelectionService implements NamedBean, ISelectionService {\r\n    beanName = 'selectionSvc' as const;\r\n\r\n    private selectedNodes: Map<string, RowNode> = new Map();\r\n\r\n    private groupSelectsDescendants: boolean;\r\n    private groupSelectsFiltered: boolean;\r\n    private mode?: RowSelectionMode;\r\n\r\n    public override postConstruct(): void {\r\n        super.postConstruct();\r\n        const { gos } = this;\r\n\r\n        this.mode = _getRowSelectionMode(gos);\r\n        this.groupSelectsDescendants = _getGroupSelectsDescendants(gos);\r\n        this.groupSelectsFiltered = _getGroupSelection(gos) === 'filteredDescendants';\r\n\r\n        this.addManagedPropertyListeners(['groupSelectsChildren', 'groupSelectsFiltered', 'rowSelection'], () => {\r\n            const groupSelectsDescendants = _getGroupSelectsDescendants(gos);\r\n            const selectionMode = _getRowSelectionMode(gos);\r\n            const groupSelectsFiltered = _getGroupSelection(gos) === 'filteredDescendants';\r\n\r\n            if (\r\n                groupSelectsDescendants !== this.groupSelectsDescendants ||\r\n                groupSelectsFiltered !== this.groupSelectsFiltered ||\r\n                selectionMode !== this.mode\r\n            ) {\r\n                this.deselectAllRowNodes({ source: 'api' });\r\n                this.groupSelectsDescendants = groupSelectsDescendants;\r\n                this.groupSelectsFiltered = groupSelectsFiltered;\r\n                this.mode = selectionMode;\r\n            }\r\n        });\r\n\r\n        this.addManagedEventListeners({ rowSelected: this.onRowSelected.bind(this) });\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        this.resetNodes();\r\n    }\r\n\r\n    public handleSelectionEvent(\r\n        event: MouseEvent | KeyboardEvent,\r\n        rowNode: RowNode,\r\n        source: SelectionEventSourceType\r\n    ): number {\r\n        if (this.isRowSelectionBlocked(rowNode)) return 0;\r\n\r\n        const selection = this.inferNodeSelections(rowNode, event.shiftKey, event.metaKey || event.ctrlKey, source);\r\n\r\n        if (selection == null) {\r\n            return 0;\r\n        }\r\n\r\n        if ('select' in selection) {\r\n            if (selection.reset) {\r\n                this.resetNodes();\r\n            } else {\r\n                this.selectRange(selection.deselect, false, source);\r\n            }\r\n            return this.selectRange(selection.select, true, source);\r\n        } else {\r\n            return this.setNodesSelected({\r\n                nodes: [selection.node],\r\n                newValue: selection.newValue,\r\n                clearSelection: selection.clearSelection,\r\n                event,\r\n                source,\r\n            });\r\n        }\r\n    }\r\n\r\n    public setNodesSelected({\r\n        newValue,\r\n        clearSelection,\r\n        suppressFinishActions,\r\n        nodes,\r\n        event,\r\n        source,\r\n    }: ISetNodesSelectedParams): number {\r\n        if (!_isRowSelection(this.gos) && newValue) {\r\n            _warn(132);\r\n            return 0;\r\n        }\r\n\r\n        if (nodes.length === 0) return 0;\r\n\r\n        if (nodes.length > 1 && !this.isMultiSelect()) {\r\n            _warn(130);\r\n            return 0;\r\n        }\r\n\r\n        let updatedCount = 0;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const rowNode = nodes[i];\r\n            // if node is a footer, we don't do selection, just pass the info\r\n            // to the sibling (the parent of the group)\r\n            const node = rowNode.footer ? rowNode.sibling : rowNode;\r\n\r\n            // when groupSelectsFiltered, then this node may end up indeterminate despite\r\n            // trying to set it to true / false. this group will be calculated further on\r\n            // down when we call updateGroupsFromChildrenSelections(). we need to skip it\r\n            // here, otherwise the updatedCount would include it.\r\n            const skipThisNode = this.groupSelectsFiltered && node.group;\r\n\r\n            if (node.rowPinned) {\r\n                _warn(59);\r\n                continue;\r\n            }\r\n\r\n            if (node.id === undefined) {\r\n                _warn(60);\r\n                continue;\r\n            }\r\n\r\n            if (!skipThisNode) {\r\n                const thisNodeWasSelected = this.selectRowNode(node, newValue, event, source);\r\n                if (thisNodeWasSelected) {\r\n                    updatedCount++;\r\n                }\r\n            }\r\n\r\n            if (this.groupSelectsDescendants && node.childrenAfterGroup?.length) {\r\n                updatedCount += this.selectChildren(node, newValue, source);\r\n            }\r\n        }\r\n\r\n        // clear other nodes if not doing multi select\r\n        if (!suppressFinishActions) {\r\n            const clearOtherNodes = newValue && (clearSelection || !this.isMultiSelect());\r\n            if (clearOtherNodes) {\r\n                updatedCount += this.clearOtherNodes(nodes[0], source);\r\n            }\r\n\r\n            // only if we selected something, then update groups and fire events\r\n            if (updatedCount > 0) {\r\n                this.updateGroupsFromChildrenSelections(source);\r\n\r\n                // this is the very end of the 'action node', so we finished all the updates,\r\n                // including any parent / child changes that this method caused\r\n                this.dispatchSelectionChanged(source);\r\n            }\r\n        }\r\n        return updatedCount;\r\n    }\r\n\r\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\r\n    // holding down 'shift'.\r\n    private selectRange(nodesToSelect: readonly RowNode[], value: boolean, source: SelectionEventSourceType): number {\r\n        let updatedCount = 0;\r\n\r\n        nodesToSelect.forEach((rowNode) => {\r\n            if (rowNode.group && this.groupSelectsDescendants) {\r\n                return;\r\n            }\r\n\r\n            const nodeWasSelected = this.selectRowNode(rowNode, value, undefined, source);\r\n            if (nodeWasSelected) {\r\n                updatedCount++;\r\n            }\r\n        });\r\n\r\n        if (updatedCount > 0) {\r\n            this.updateGroupsFromChildrenSelections(source);\r\n\r\n            this.dispatchSelectionChanged(source);\r\n        }\r\n\r\n        return updatedCount;\r\n    }\r\n\r\n    private selectChildren(node: RowNode, newValue: boolean, source: SelectionEventSourceType): number {\r\n        const children = this.groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;\r\n\r\n        if (!children) {\r\n            return 0;\r\n        }\r\n\r\n        return this.setNodesSelected({\r\n            newValue: newValue,\r\n            clearSelection: false,\r\n            suppressFinishActions: true,\r\n            source,\r\n            nodes: children,\r\n        });\r\n    }\r\n\r\n    public getSelectedNodes(): RowNode[] {\r\n        return Array.from(this.selectedNodes.values());\r\n    }\r\n\r\n    public getSelectedRows(): any[] {\r\n        const selectedRows: any[] = [];\r\n        this.selectedNodes.forEach((rowNode) => selectedRows.push(rowNode.data));\r\n        return selectedRows;\r\n    }\r\n\r\n    public getSelectionCount(): number {\r\n        return this.selectedNodes.size;\r\n    }\r\n\r\n    /**\r\n     * This method is used by the CSRM to remove groups which are being disposed of,\r\n     * events do not need fired in this case\r\n     */\r\n    public filterFromSelection(predicate: (node: RowNode) => boolean): void {\r\n        const newSelectedNodes: Map<string, RowNode> = new Map();\r\n        this.selectedNodes.forEach((rowNode, key) => {\r\n            if (predicate(rowNode)) {\r\n                newSelectedNodes.set(key, rowNode);\r\n            }\r\n        });\r\n        this.selectedNodes = newSelectedNodes;\r\n    }\r\n\r\n    public override updateGroupsFromChildrenSelections(\r\n        source: SelectionEventSourceType,\r\n        changedPath?: ChangedPath\r\n    ): boolean {\r\n        // we only do this when group selection state depends on selected children\r\n        if (!this.groupSelectsDescendants) {\r\n            return false;\r\n        }\r\n        const { gos, rowModel } = this.beans;\r\n        // also only do it if CSRM (code should never allow this anyway)\r\n        if (!_isClientSideRowModel(gos, rowModel)) {\r\n            return false;\r\n        }\r\n\r\n        const rootNode = rowModel.rootNode;\r\n        if (!rootNode) {\r\n            return false;\r\n        }\r\n\r\n        if (!changedPath) {\r\n            changedPath = new ChangedPath(true, rootNode);\r\n            changedPath.active = false;\r\n        }\r\n\r\n        let selectionChanged = false;\r\n\r\n        changedPath.forEachChangedNodeDepthFirst((rowNode) => {\r\n            if (rowNode !== rootNode) {\r\n                const selected = this.calculateSelectedFromChildren(rowNode);\r\n                selectionChanged =\r\n                    this.selectRowNode(rowNode, selected === null ? false : selected, undefined, source) ||\r\n                    selectionChanged;\r\n            }\r\n        });\r\n\r\n        return selectionChanged;\r\n    }\r\n\r\n    private clearOtherNodes(rowNodeToKeepSelected: RowNode, source: SelectionEventSourceType): number {\r\n        const groupsToRefresh = new Map<string, RowNode>();\r\n        let updatedCount = 0;\r\n        this.selectedNodes.forEach((otherRowNode) => {\r\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\r\n                const rowNode = this.selectedNodes.get(otherRowNode.id!)!;\r\n                updatedCount += this.setNodesSelected({\r\n                    nodes: [rowNode],\r\n                    newValue: false,\r\n                    clearSelection: false,\r\n                    suppressFinishActions: true,\r\n                    source,\r\n                });\r\n\r\n                if (this.groupSelectsDescendants && otherRowNode.parent) {\r\n                    groupsToRefresh.set(otherRowNode.parent.id!, otherRowNode.parent);\r\n                }\r\n            }\r\n        });\r\n\r\n        groupsToRefresh.forEach((group) => {\r\n            const selected = this.calculateSelectedFromChildren(group);\r\n            this.selectRowNode(group, selected === null ? false : selected, undefined, source);\r\n        });\r\n\r\n        return updatedCount;\r\n    }\r\n\r\n    private onRowSelected(event: RowSelectedEvent): void {\r\n        const rowNode = event.node;\r\n\r\n        // we do not store the group rows when the groups select children\r\n        if (this.groupSelectsDescendants && rowNode.group) {\r\n            return;\r\n        }\r\n\r\n        if (rowNode.isSelected()) {\r\n            this.selectedNodes.set(rowNode.id!, rowNode as RowNode);\r\n        } else {\r\n            this.selectedNodes.delete(rowNode.id!);\r\n        }\r\n    }\r\n\r\n    public syncInRowNode(rowNode: RowNode, oldNode?: RowNode): void {\r\n        this.syncInOldRowNode(rowNode, oldNode);\r\n        this.syncInNewRowNode(rowNode);\r\n    }\r\n\r\n    public createDaemonNode(rowNode: RowNode): RowNode | undefined {\r\n        if (!rowNode.id) {\r\n            return undefined;\r\n        }\r\n        const oldNode = new RowNode(this.beans);\r\n\r\n        // just copy the id and data, this is enough for the node to be used\r\n        // in the selection service\r\n        oldNode.id = rowNode.id;\r\n        oldNode.data = rowNode.data;\r\n        oldNode.__daemon = true;\r\n        oldNode.__selected = rowNode.__selected;\r\n        oldNode.level = rowNode.level;\r\n\r\n        return oldNode;\r\n    }\r\n\r\n    // if the id has changed for the node, then this means the rowNode\r\n    // is getting used for a different data item, which breaks\r\n    // our selectedNodes, as the node now is mapped by the old id\r\n    // which is inconsistent. so to keep the old node as selected,\r\n    // we swap in the clone (with the old id and old data). this means\r\n    // the oldNode is effectively a daemon we keep a reference to,\r\n    // so if client calls api.getSelectedNodes(), it gets the daemon\r\n    // in the result. when the client un-selects, the reference to the\r\n    // daemon is removed. the daemon, because it's an oldNode, is not\r\n    // used by the grid for rendering, it's a copy of what the node used\r\n    // to be like before the id was changed.\r\n    private syncInOldRowNode(rowNode: RowNode, oldNode?: RowNode): void {\r\n        if (oldNode && rowNode.id !== oldNode.id) {\r\n            const oldNodeSelected = this.selectedNodes.get(oldNode.id!) == rowNode;\r\n            if (oldNodeSelected) {\r\n                this.selectedNodes.set(oldNode.id!, oldNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    private syncInNewRowNode(rowNode: RowNode): void {\r\n        if (this.selectedNodes.has(rowNode.id!)) {\r\n            rowNode.__selected = true;\r\n            this.selectedNodes.set(rowNode.id!, rowNode);\r\n        } else {\r\n            rowNode.__selected = false;\r\n        }\r\n    }\r\n\r\n    public reset(source: SelectionEventSourceType): void {\r\n        const selectionCount = this.getSelectionCount();\r\n        this.resetNodes();\r\n        if (selectionCount) {\r\n            this.dispatchSelectionChanged(source);\r\n        }\r\n    }\r\n\r\n    private resetNodes(): void {\r\n        this.selectedNodes.forEach((node) => {\r\n            this.selectRowNode(node, false);\r\n        });\r\n        this.selectedNodes.clear();\r\n    }\r\n\r\n    // returns a list of all nodes at 'best cost' - a feature to be used\r\n    // with groups / trees. if a group has all it's children selected,\r\n    // then the group appears in the result, but not the children.\r\n    // Designed for use with 'children' as the group selection type,\r\n    // where groups don't actually appear in the selection normally.\r\n    public getBestCostNodeSelection(): RowNode[] | undefined {\r\n        const { gos, rowModel } = this.beans;\r\n        if (!_isClientSideRowModel(gos, rowModel)) {\r\n            // Error logged as part of gridApi as that is only call point for this method.\r\n            return;\r\n        }\r\n\r\n        const topLevelNodes = rowModel.getTopLevelNodes();\r\n        if (topLevelNodes === null) {\r\n            return;\r\n        }\r\n\r\n        const result: RowNode[] = [];\r\n\r\n        // recursive function, to find the selected nodes\r\n        function traverse(nodes: RowNode[]) {\r\n            for (let i = 0, l = nodes.length; i < l; i++) {\r\n                const node = nodes[i];\r\n                if (node.isSelected()) {\r\n                    result.push(node);\r\n                } else {\r\n                    // if not selected, then if it's a group, and the group\r\n                    // has children, continue to search for selections\r\n                    if (node.group && node.childrenAfterGroup) {\r\n                        traverse(node.childrenAfterGroup);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        traverse(topLevelNodes);\r\n\r\n        return result;\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.getSelectionCount() === 0;\r\n    }\r\n\r\n    public deselectAllRowNodes(params: { source: SelectionEventSourceType; selectAll?: SelectAllMode }) {\r\n        const callback = (rowNode: RowNode) =>\r\n            this.selectRowNode(rowNode.footer ? rowNode.sibling : rowNode, false, undefined, source);\r\n        const rowModelClientSide = _isClientSideRowModel(this.gos);\r\n\r\n        const { source, selectAll } = params;\r\n\r\n        if (selectAll === 'currentPage' || selectAll === 'filtered') {\r\n            if (!rowModelClientSide) {\r\n                _error(102);\r\n                return;\r\n            }\r\n            this.getNodesToSelect(selectAll).forEach(callback);\r\n        } else {\r\n            this.selectedNodes.forEach(callback);\r\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\r\n            this.reset(source);\r\n        }\r\n\r\n        // the above does not clean up the parent rows if they are selected\r\n        if (rowModelClientSide && this.groupSelectsDescendants) {\r\n            this.updateGroupsFromChildrenSelections(source);\r\n        }\r\n\r\n        this.dispatchSelectionChanged(source);\r\n    }\r\n\r\n    private getSelectedCounts(selectAll?: SelectAllMode): {\r\n        selectedCount: number;\r\n        notSelectedCount: number;\r\n    } {\r\n        let selectedCount = 0;\r\n        let notSelectedCount = 0;\r\n\r\n        const callback = (node: RowNode) => {\r\n            if (this.groupSelectsDescendants && node.group) {\r\n                return;\r\n            }\r\n\r\n            if (node.isSelected()) {\r\n                selectedCount++;\r\n            } else if (!node.selectable) {\r\n                // don't count non-selectable nodes!\r\n            } else {\r\n                notSelectedCount++;\r\n            }\r\n        };\r\n\r\n        this.getNodesToSelect(selectAll).forEach(callback);\r\n        return { selectedCount, notSelectedCount };\r\n    }\r\n\r\n    public getSelectAllState(selectAll?: SelectAllMode): boolean | null {\r\n        const { selectedCount, notSelectedCount } = this.getSelectedCounts(selectAll);\r\n        // if no rows, always have it unselected\r\n        if (selectedCount === 0 && notSelectedCount === 0) {\r\n            return false;\r\n        }\r\n\r\n        // if mix of selected and unselected, this is indeterminate\r\n        if (selectedCount > 0 && notSelectedCount > 0) {\r\n            return null;\r\n        }\r\n\r\n        // only selected\r\n        return selectedCount > 0;\r\n    }\r\n\r\n    public hasNodesToSelect(selectAll: SelectAllMode): boolean {\r\n        return this.getNodesToSelect(selectAll).filter((node) => node.selectable).length > 0;\r\n    }\r\n\r\n    /**\r\n     * @param selectAll See `MultiRowSelectionOptions.selectAll`\r\n     * @returns all nodes including unselectable nodes which are the target of this selection attempt\r\n     */\r\n    private getNodesToSelect(selectAll?: SelectAllMode): RowNode[] {\r\n        if (!this.canSelectAll()) {\r\n            return [];\r\n        }\r\n\r\n        const nodes: RowNode[] = [];\r\n        if (selectAll === 'currentPage') {\r\n            this.forEachNodeOnPage((node) => {\r\n                if (!node.group) {\r\n                    nodes.push(node);\r\n                    return;\r\n                }\r\n\r\n                if (!node.expanded && !node.footer) {\r\n                    // even with groupSelectsChildren, do this recursively as only the filtered children\r\n                    // are considered as the current page\r\n                    const recursivelyAddChildren = (child: RowNode) => {\r\n                        nodes.push(child);\r\n                        if (child.childrenAfterFilter?.length) {\r\n                            child.childrenAfterFilter.forEach(recursivelyAddChildren);\r\n                        }\r\n                    };\r\n                    recursivelyAddChildren(node);\r\n                    return;\r\n                }\r\n\r\n                // if the group node is expanded, the pagination proxy will include the visible nodes to select\r\n                if (!this.groupSelectsDescendants) {\r\n                    nodes.push(node);\r\n                }\r\n            });\r\n            return nodes;\r\n        }\r\n\r\n        const clientSideRowModel = this.beans.rowModel as IClientSideRowModel;\r\n        if (selectAll === 'filtered') {\r\n            clientSideRowModel.forEachNodeAfterFilter((node) => {\r\n                nodes.push(node);\r\n            });\r\n            return nodes;\r\n        }\r\n\r\n        clientSideRowModel.forEachNode((node) => {\r\n            nodes.push(node);\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    private forEachNodeOnPage(callback: (rowNode: RowNode) => void) {\r\n        const { pageBounds, rowModel } = this.beans;\r\n        const firstRow = pageBounds.getFirstRow();\r\n        const lastRow = pageBounds.getLastRow();\r\n        for (let i = firstRow; i <= lastRow; i++) {\r\n            const node = rowModel.getRow(i);\r\n            if (node) {\r\n                callback(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    public selectAllRowNodes(params: { source: SelectionEventSourceType; selectAll?: SelectAllMode }) {\r\n        const { gos } = this;\r\n        if (!_isRowSelection(gos)) {\r\n            _warn(132);\r\n            return;\r\n        }\r\n\r\n        if (_isUsingNewRowSelectionAPI(gos) && !_isMultiRowSelection(gos)) {\r\n            _warn(130);\r\n            return;\r\n        }\r\n        if (!this.canSelectAll()) {\r\n            return;\r\n        }\r\n\r\n        const { source, selectAll } = params;\r\n\r\n        this.getNodesToSelect(selectAll).forEach((rowNode) => {\r\n            this.selectRowNode(rowNode.footer ? rowNode.sibling : rowNode, true, undefined, source);\r\n        });\r\n\r\n        // the above does not clean up the parent rows if they are selected\r\n        if (_isClientSideRowModel(gos) && this.groupSelectsDescendants) {\r\n            this.updateGroupsFromChildrenSelections(source);\r\n        }\r\n\r\n        this.dispatchSelectionChanged(source);\r\n    }\r\n\r\n    public getSelectionState(): string[] | null {\r\n        const selectedIds: string[] = [];\r\n        this.selectedNodes.forEach((node) => {\r\n            if (node?.id) {\r\n                selectedIds.push(node.id);\r\n            }\r\n        });\r\n        return selectedIds.length ? selectedIds : null;\r\n    }\r\n\r\n    public setSelectionState(\r\n        state: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState,\r\n        source: SelectionEventSourceType\r\n    ): void {\r\n        if (!Array.isArray(state)) {\r\n            _error(103);\r\n            return;\r\n        }\r\n        const rowIds = new Set(state);\r\n        const nodes: RowNode[] = [];\r\n        this.beans.rowModel.forEachNode((node) => {\r\n            if (rowIds.has(node.id!)) {\r\n                nodes.push(node);\r\n            }\r\n        });\r\n        this.setNodesSelected({\r\n            newValue: true,\r\n            nodes,\r\n            source,\r\n        });\r\n    }\r\n\r\n    private canSelectAll(): boolean {\r\n        const { gos, rowModel } = this.beans;\r\n        if (!_isClientSideRowModel(gos)) {\r\n            _error(100, { rowModelType: rowModel.getType() });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Updates the selectable state for a node by invoking isRowSelectable callback.\r\n     * If the node is not selectable, it will be deselected.\r\n     *\r\n     * Callers:\r\n     *  - property isRowSelectable changed\r\n     *  - after grouping / treeData via `updateSelectableAfterGrouping`\r\n     */\r\n    protected updateSelectable(changedPath?: ChangedPath) {\r\n        const { gos, rowModel } = this.beans;\r\n\r\n        if (!_isRowSelection(gos)) {\r\n            return;\r\n        }\r\n\r\n        const source: SelectionEventSourceType = 'selectableChanged';\r\n        const skipLeafNodes = changedPath !== undefined;\r\n        const isCSRMGroupSelectsDescendants = _isClientSideRowModel(gos) && this.groupSelectsDescendants;\r\n\r\n        const nodesToDeselect: RowNode[] = [];\r\n\r\n        const nodeCallback = (node: RowNode): void => {\r\n            if (skipLeafNodes && !node.group) {\r\n                return;\r\n            }\r\n\r\n            // Only in the CSRM, we allow group node selection if a child has a selectable=true when using groupSelectsChildren\r\n            if (isCSRMGroupSelectsDescendants && node.group) {\r\n                const hasSelectableChild = node.childrenAfterGroup?.some((rowNode) => rowNode.selectable) ?? false;\r\n                this.setRowSelectable(node, hasSelectableChild, true);\r\n                return;\r\n            }\r\n\r\n            const rowSelectable = this.updateRowSelectable(node, true);\r\n\r\n            if (!rowSelectable && node.isSelected()) {\r\n                nodesToDeselect.push(node);\r\n            }\r\n        };\r\n\r\n        // Needs to be depth first in this case, so that parents can be updated based on child.\r\n        if (isCSRMGroupSelectsDescendants) {\r\n            if (changedPath === undefined) {\r\n                const rootNode = (rowModel as IClientSideRowModel).rootNode;\r\n                changedPath = rootNode ? new ChangedPath(false, rootNode) : undefined;\r\n            }\r\n            changedPath?.forEachChangedNodeDepthFirst(nodeCallback, !skipLeafNodes, !skipLeafNodes);\r\n        } else {\r\n            // Normal case, update all rows\r\n            rowModel.forEachNode(nodeCallback);\r\n        }\r\n\r\n        if (nodesToDeselect.length) {\r\n            this.setNodesSelected({\r\n                nodes: nodesToDeselect,\r\n                newValue: false,\r\n                source,\r\n            });\r\n        }\r\n\r\n        // if csrm and group selects children, update the groups after deselecting leaf nodes.\r\n        if (!skipLeafNodes && isCSRMGroupSelectsDescendants) {\r\n            this.updateGroupsFromChildrenSelections?.(source);\r\n        }\r\n    }\r\n\r\n    // only called by CSRM\r\n    public updateSelectableAfterGrouping(changedPath: ChangedPath | undefined): void {\r\n        this.updateSelectable(changedPath);\r\n\r\n        if (this.groupSelectsDescendants) {\r\n            const selectionChanged = this.updateGroupsFromChildrenSelections?.('rowGroupChanged', changedPath);\r\n            if (selectionChanged) {\r\n                this.eventSvc.dispatchEvent({\r\n                    type: 'selectionChanged',\r\n                    source: 'rowGroupChanged',\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { _RowSelectionGridApi } from '../api/gridApi';\r\nimport { SelectionColService } from '../columns/selectionColService';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport {\r\n    deselectAll,\r\n    deselectAllFiltered,\r\n    deselectAllOnCurrentPage,\r\n    getSelectedNodes,\r\n    getSelectedRows,\r\n    selectAll,\r\n    selectAllFiltered,\r\n    selectAllOnCurrentPage,\r\n    setNodesSelected,\r\n} from './rowSelectionApi';\r\nimport { SelectionService } from './selectionService';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const SharedRowSelectionModule: _ModuleWithApi<_RowSelectionGridApi> = {\r\n    moduleName: 'SharedRowSelection',\r\n    version: VERSION,\r\n    beans: [SelectionColService],\r\n    apiFunctions: {\r\n        setNodesSelected,\r\n        selectAll,\r\n        deselectAll,\r\n        selectAllFiltered,\r\n        deselectAllFiltered,\r\n        selectAllOnCurrentPage,\r\n        deselectAllOnCurrentPage,\r\n        getSelectedNodes,\r\n        getSelectedRows,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Selection -> Row Selection\r\n */\r\nexport const RowSelectionModule: _ModuleWithoutApi = {\r\n    moduleName: 'RowSelection',\r\n    version: VERSION,\r\n    rowModels: ['clientSide', 'infinite', 'viewport'],\r\n    beans: [SelectionService],\r\n    dependsOn: [SharedRowSelectionModule],\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport { _getClientSideRowModel, _getServerSideRowModel } from './rowModelApiUtils';\r\n\r\nexport function expandAll(beans: BeanCollection) {\r\n    beans.expansionSvc?.expandAll(true);\r\n}\r\n\r\nexport function collapseAll(beans: BeanCollection) {\r\n    beans.expansionSvc?.expandAll(false);\r\n}\r\n\r\nexport function onRowHeightChanged(beans: BeanCollection) {\r\n    const clientSideRowModel = _getClientSideRowModel(beans);\r\n    const serverSideRowModel = _getServerSideRowModel(beans);\r\n    if (clientSideRowModel) {\r\n        clientSideRowModel.onRowHeightChanged();\r\n    } else if (serverSideRowModel) {\r\n        serverSideRowModel.onRowHeightChanged();\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport { _isServerSideRowModel } from '../gridOptionsUtils';\r\nimport type { IServerSideRowModel } from '../interfaces/iServerSideRowModel';\r\nimport { _error } from '../validation/logging';\r\nimport { _getInfiniteRowModel, _getServerSideRowModel } from './rowModelApiUtils';\r\n\r\nexport function setRowCount(beans: BeanCollection, rowCount: number, maxRowFound?: boolean): void {\r\n    const serverSideRowModel = _getServerSideRowModel(beans);\r\n    if (serverSideRowModel) {\r\n        if (beans.rowGroupColsSvc?.columns.length === 0) {\r\n            if (rowCount < 0) {\r\n                _error(238);\r\n                return;\r\n            }\r\n            serverSideRowModel.setRowCount(rowCount, maxRowFound);\r\n            return;\r\n        }\r\n        _error(28);\r\n        return;\r\n    }\r\n\r\n    const infiniteRowModel = _getInfiniteRowModel(beans);\r\n    if (infiniteRowModel) {\r\n        infiniteRowModel.setRowCount(rowCount, maxRowFound);\r\n        return;\r\n    }\r\n}\r\n\r\nexport function getCacheBlockState(beans: BeanCollection): any {\r\n    if (_isServerSideRowModel(beans.gos)) {\r\n        const ssrm = beans.rowModel as IServerSideRowModel;\r\n        return ssrm.getBlockStates();\r\n    }\r\n\r\n    return beans.rowNodeBlockLoader?.getBlockState() ?? {};\r\n}\r\n\r\nexport function isLastRowIndexKnown(beans: BeanCollection): boolean | undefined {\r\n    return beans.rowModel.isLastRowIndexKnown();\r\n}\r\n", "import type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { collapseAll, expandAll, onRowHeightChanged } from './csrmSsrmSharedApi';\r\nimport type { _CsrmSsrmSharedGridApi, _SsrmInfiniteSharedGridApi } from './gridApi';\r\nimport { getCacheBlockState, isLastRowIndexKnown, setRowCount } from './ssrmInfiniteSharedApi';\r\n\r\n// these modules are not used in core, but are shared between multiple other modules\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const CsrmSsrmSharedApiModule: _ModuleWithApi<_CsrmSsrmSharedGridApi> = {\r\n    moduleName: 'CsrmSsrmSharedApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        expandAll,\r\n        collapseAll,\r\n        onRowHeightChanged,\r\n    },\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const SsrmInfiniteSharedApiModule: _ModuleWithApi<_SsrmInfiniteSharedGridApi> = {\r\n    moduleName: 'SsrmInfiniteSharedApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        setRowCount,\r\n        getCacheBlockState,\r\n        isLastRowIndexKnown,\r\n    },\r\n};\r\n", "import type { GridApi } from '../api/gridApi';\r\nimport { _applyColumnState } from '../columns/columnStateUtils';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgProvidedColumnGroup } from '../entities/agProvidedColumnGroup';\r\nimport type {\r\n    AgEvent,\r\n    AlignedGridColumnEvent,\r\n    AlignedGridScrollEvent,\r\n    BodyScrollEvent,\r\n    ColumnEvent,\r\n    ColumnGroupOpenedEvent,\r\n    ColumnResizedEvent,\r\n} from '../events';\r\nimport type { AlignedGrid } from '../interfaces/iAlignedGrid';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport { _error, _warn } from '../validation/logging';\r\n\r\nexport class AlignedGridsService extends BeanStub implements NamedBean {\r\n    beanName = 'alignedGridsSvc' as const;\r\n\r\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\r\n    // while processing a master event) we mark this if consuming an event, and if we are, then\r\n    // we don't fire back any events.\r\n    private consuming = false;\r\n\r\n    private getAlignedGridApis(): GridApi[] {\r\n        let alignedGrids = this.gos.get('alignedGrids') ?? [];\r\n        const isCallbackConfig = typeof alignedGrids === 'function';\r\n        if (typeof alignedGrids === 'function') {\r\n            alignedGrids = alignedGrids();\r\n        }\r\n        const apis = alignedGrids\r\n            .map((alignedGrid) => {\r\n                if (!alignedGrid) {\r\n                    _error(18);\r\n                    if (!isCallbackConfig) {\r\n                        _error(20);\r\n                    }\r\n                    return;\r\n                }\r\n                if (this.isGridApi(alignedGrid)) {\r\n                    return alignedGrid;\r\n                }\r\n                // Extract the GridApi from a ref or component\r\n                const refOrComp = alignedGrid;\r\n                if ('current' in refOrComp) {\r\n                    return refOrComp.current?.api;\r\n                }\r\n\r\n                if (!refOrComp.api) {\r\n                    _error(19);\r\n                }\r\n                return refOrComp.api;\r\n            })\r\n            .filter((api) => !!api && !api.isDestroyed());\r\n\r\n        return apis as GridApi[];\r\n    }\r\n\r\n    private isGridApi(ref: AlignedGrid): ref is GridApi {\r\n        return !!ref && !!(ref as GridApi).dispatchEvent;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const fireColumnEvent = this.fireColumnEvent.bind(this);\r\n        this.addManagedEventListeners({\r\n            columnMoved: fireColumnEvent,\r\n            columnVisible: fireColumnEvent,\r\n            columnPinned: fireColumnEvent,\r\n            columnGroupOpened: fireColumnEvent,\r\n            columnResized: fireColumnEvent,\r\n            bodyScroll: this.fireScrollEvent.bind(this),\r\n            alignedGridColumn: ({ event }) => this.onColumnEvent(event),\r\n            alignedGridScroll: ({ event }) => this.onScrollEvent(event),\r\n        });\r\n    }\r\n\r\n    // common logic across all the fire methods\r\n    private fireEvent(event: WithoutGridCommon<AlignedGridColumnEvent | AlignedGridScrollEvent>): void {\r\n        // if we are already consuming, then we are acting on an event from a master,\r\n        // so we don't cause a cyclic firing of events\r\n        if (this.consuming) {\r\n            return;\r\n        }\r\n\r\n        this.getAlignedGridApis().forEach((api) => {\r\n            if (api.isDestroyed()) {\r\n                return;\r\n            }\r\n            api.dispatchEvent(event);\r\n        });\r\n    }\r\n\r\n    // common logic across all consume methods. very little common logic, however extracting\r\n    // guarantees consistency across the methods.\r\n    private onEvent(callback: () => void): void {\r\n        this.consuming = true;\r\n        callback();\r\n        this.consuming = false;\r\n    }\r\n\r\n    private fireColumnEvent(columnEvent: ColumnEvent | ColumnGroupOpenedEvent): void {\r\n        this.fireEvent({\r\n            type: 'alignedGridColumn',\r\n            event: columnEvent,\r\n        });\r\n    }\r\n\r\n    private fireScrollEvent(scrollEvent: BodyScrollEvent): void {\r\n        if (scrollEvent.direction !== 'horizontal') {\r\n            return;\r\n        }\r\n        this.fireEvent({\r\n            type: 'alignedGridScroll',\r\n            event: scrollEvent,\r\n        });\r\n    }\r\n\r\n    private onScrollEvent(event: BodyScrollEvent): void {\r\n        this.onEvent(() => {\r\n            this.beans.ctrlsSvc.getScrollFeature().setHorizontalScrollPosition(event.left, true);\r\n        });\r\n    }\r\n\r\n    private extractDataFromEvent<T extends AgColumn | string>(event: ColumnEvent, func: (col: AgColumn) => T): T[] {\r\n        const result: T[] = [];\r\n        if (event.columns) {\r\n            event.columns.forEach((column: AgColumn) => {\r\n                result.push(func(column));\r\n            });\r\n        } else if (event.column) {\r\n            result.push(func(event.column as AgColumn));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getMasterColumns(event: ColumnEvent): AgColumn[] {\r\n        return this.extractDataFromEvent(event, (col) => col);\r\n    }\r\n\r\n    public getColumnIds(event: ColumnEvent): string[] {\r\n        return this.extractDataFromEvent(event, (col) => col.getColId());\r\n    }\r\n\r\n    public onColumnEvent(event: AgEvent): void {\r\n        this.onEvent(() => {\r\n            switch (event.type) {\r\n                case 'columnMoved':\r\n                case 'columnVisible':\r\n                case 'columnPinned':\r\n                case 'columnResized': {\r\n                    this.processColumnEvent(event as ColumnEvent);\r\n                    break;\r\n                }\r\n                case 'columnGroupOpened': {\r\n                    this.processGroupOpenedEvent(event as ColumnGroupOpenedEvent);\r\n                    break;\r\n                }\r\n                case 'columnPivotChanged':\r\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\r\n                    // grids will have columns created based on the row data of the grid.\r\n                    _warn(21);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    private processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void {\r\n        const { colGroupSvc } = this.beans;\r\n        if (!colGroupSvc) {\r\n            return;\r\n        }\r\n        groupOpenedEvent.columnGroups.forEach((masterGroup) => {\r\n            // likewise for column group\r\n            let otherColumnGroup: AgProvidedColumnGroup | null = null;\r\n\r\n            if (masterGroup) {\r\n                otherColumnGroup = colGroupSvc.getProvidedColGroup(masterGroup.getGroupId());\r\n            }\r\n\r\n            if (masterGroup && !otherColumnGroup) {\r\n                return;\r\n            }\r\n\r\n            colGroupSvc.setColumnGroupOpened(otherColumnGroup, masterGroup.isExpanded(), 'alignedGridChanged');\r\n        });\r\n    }\r\n\r\n    private processColumnEvent(colEvent: ColumnEvent): void {\r\n        // the column in the event is from the master grid. need to\r\n        // look up the equivalent from this (other) grid\r\n        const masterColumn = colEvent.column;\r\n        let otherColumn: AgColumn | null = null;\r\n\r\n        const beans = this.beans;\r\n        const { colResize, ctrlsSvc, colModel } = beans;\r\n        if (masterColumn) {\r\n            otherColumn = colModel.getColDefCol(masterColumn.getColId());\r\n        }\r\n        // if event was with respect to a master column, that is not present in this\r\n        // grid, then we ignore the event\r\n        if (masterColumn && !otherColumn) {\r\n            return;\r\n        }\r\n\r\n        // in time, all the methods below should use the column ids, it's a more generic way\r\n        // of handling columns, and also allows for single or multi column events\r\n        const masterColumns = this.getMasterColumns(colEvent);\r\n        switch (colEvent.type) {\r\n            case 'columnMoved':\r\n                // when the user moves columns via applyColumnState, we can't depend on moving specific columns\r\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\r\n                // so only way to be sure is match the order of all columns using Column State.\r\n                {\r\n                    const srcColState = colEvent.api.getColumnState();\r\n                    const destColState = srcColState.map((s) => ({ colId: s.colId }));\r\n                    _applyColumnState(beans, { state: destColState, applyOrder: true }, 'alignedGridChanged');\r\n                }\r\n                break;\r\n            case 'columnVisible':\r\n                // when the user changes visibility via applyColumnState, we can't depend on visibility flag in event\r\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\r\n                // so only way to be sure is match the visibility of all columns using Column State.\r\n                {\r\n                    const srcColState = colEvent.api.getColumnState();\r\n                    const destColState = srcColState.map((s) => ({ colId: s.colId, hide: s.hide }));\r\n                    _applyColumnState(beans, { state: destColState }, 'alignedGridChanged');\r\n                }\r\n                break;\r\n            case 'columnPinned':\r\n                {\r\n                    const srcColState = colEvent.api.getColumnState();\r\n                    const destColState = srcColState.map((s) => ({ colId: s.colId, pinned: s.pinned }));\r\n                    _applyColumnState(beans, { state: destColState }, 'alignedGridChanged');\r\n                }\r\n                break;\r\n            case 'columnResized': {\r\n                const resizedEvent = colEvent as ColumnResizedEvent;\r\n\r\n                const columnWidths: {\r\n                    [key: string]: {\r\n                        key: string | AgColumn;\r\n                        newWidth: number;\r\n                    };\r\n                } = {};\r\n                masterColumns.forEach((column) => {\r\n                    columnWidths[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };\r\n                });\r\n                // don't set flex columns width\r\n                resizedEvent.flexColumns?.forEach((col) => {\r\n                    if (columnWidths[col.getId()]) {\r\n                        delete columnWidths[col.getId()];\r\n                    }\r\n                });\r\n                colResize?.setColumnWidths(\r\n                    Object.values(columnWidths),\r\n                    false,\r\n                    resizedEvent.finished,\r\n                    'alignedGridChanged'\r\n                );\r\n                break;\r\n            }\r\n        }\r\n        const gridBodyCon = ctrlsSvc.getGridBodyCtrl();\r\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\r\n        this.getAlignedGridApis().forEach((api) => {\r\n            api.setGridOption('alwaysShowVerticalScroll', isVerticalScrollShowing);\r\n        });\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { AlignedGridsService } from './alignedGridsService';\r\n\r\n/**\r\n * @feature Other -> Aligned Grids\r\n * @gridOption alignedGrids\r\n */\r\nexport const AlignedGridsModule: _ModuleWithoutApi = {\r\n    moduleName: 'AlignedGrids',\r\n    version: VERSION,\r\n    beans: [AlignedGridsService],\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { AbstractClientSideNodeManager } from './abstractClientSideNodeManager';\r\n\r\nexport class ClientSideNodeManager<TData> extends AbstractClientSideNodeManager<TData> implements NamedBean {\r\n    beanName = 'csrmNodeSvc' as const;\r\n}\r\n", "import type { RowNode } from '../entities/rowNode';\r\nimport type { IChangedRowNodes } from '../interfaces/iClientSideRowModel';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport class ChangedRowNodes<TData = any> implements IChangedRowNodes<TData> {\r\n    public readonly removals = new Set<RowNode<TData>>();\r\n    public readonly updates = new Map<RowNode<TData>, boolean>();\r\n\r\n    /** Marks a row as removed. Order of operations is: remove, update, add */\r\n    public remove(node: IRowNode<TData>): void {\r\n        this.removals.add(node as RowNode<TData>);\r\n        this.updates.delete(node as RowNode<TData>);\r\n    }\r\n\r\n    /** Marks a row as updated. Order of operations is: remove, update, add */\r\n    public update(node: IRowNode<TData>): void {\r\n        const updates = this.updates;\r\n        if (!updates.has(node as RowNode<TData>)) {\r\n            this.removals.delete(node as RowNode<TData>);\r\n            this.updates.set(node as RowNode<TData>, false);\r\n        }\r\n    }\r\n\r\n    /** Marks a row as added. Order of operation is: remove, update, add */\r\n    public add(node: IRowNode<TData>): void {\r\n        this.removals.delete(node as RowNode<TData>);\r\n        this.updates.set(node as RowNode<TData>, true);\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _isColumnsSortingCoupledToGroup } from '../gridOptionsUtils';\r\nimport type { PostSortRowsParams } from '../interfaces/iCallbackParams';\r\nimport type { ClientSideRowModelStage, IChangedRowNodes } from '../interfaces/iClientSideRowModel';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { IRowNodeStage, StageExecuteParams } from '../interfaces/iRowNodeStage';\r\nimport type { SortOption } from '../interfaces/iSortOption';\r\nimport type { RowNodeSorter, SortedRowNode } from '../sort/rowNodeSorter';\r\nimport type { ChangedPath } from '../utils/changedPath';\r\nimport { _exists, _missing } from '../utils/generic';\r\n\r\nfunction updateChildIndexes(rowNode: RowNode): void {\r\n    if (_missing(rowNode.childrenAfterSort)) {\r\n        return;\r\n    }\r\n\r\n    const listToSort = rowNode.childrenAfterSort;\r\n    for (let i = 0; i < listToSort.length; i++) {\r\n        const child = listToSort[i];\r\n        const firstChild = i === 0;\r\n        const lastChild = i === rowNode.childrenAfterSort.length - 1;\r\n        child.setFirstChild(firstChild);\r\n        if (child.lastChild !== lastChild) {\r\n            child.lastChild = lastChild;\r\n            child.dispatchRowEvent('lastChildChanged');\r\n        }\r\n        if (child.childIndex !== i) {\r\n            child.childIndex = i;\r\n            child.dispatchRowEvent('childIndexChanged');\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateRowNodeAfterSort(rowNode: RowNode): void {\r\n    if (rowNode.sibling) {\r\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\r\n    }\r\n\r\n    updateChildIndexes(rowNode);\r\n}\r\n\r\nexport class SortStage extends BeanStub implements NamedBean, IRowNodeStage {\r\n    beanName = 'sortStage' as const;\r\n\r\n    public refreshProps: Set<keyof GridOptions<any>> = new Set(['postSortRows', 'groupDisplayType', 'accentedSort']);\r\n    public step: ClientSideRowModelStage = 'sort';\r\n\r\n    public execute(params: StageExecuteParams): void {\r\n        const beans = this.beans;\r\n        const sortOptions: SortOption[] = beans.sortSvc!.getSortOptions();\r\n\r\n        const sortActive = _exists(sortOptions) && sortOptions.length > 0;\r\n        const deltaSort =\r\n            sortActive &&\r\n            !!params.changedRowNodes &&\r\n            // in time we can remove this check, so that delta sort is always\r\n            // on if transactions are present. it's off for now so that we can\r\n            // selectively turn it on and test it with some select users before\r\n            // rolling out to everyone.\r\n            this.gos.get('deltaSort');\r\n\r\n        const sortContainsGroupColumns = sortOptions.some(({ column }) => {\r\n            const isSortingCoupled = _isColumnsSortingCoupledToGroup(beans.gos);\r\n            if (isSortingCoupled) {\r\n                return column.isPrimary() && column.isRowGroupActive();\r\n            }\r\n            return !!column.getColDef().showRowGroup;\r\n        });\r\n        this.sort(\r\n            beans,\r\n            sortOptions,\r\n            sortActive,\r\n            deltaSort,\r\n            params.changedRowNodes,\r\n            params.changedPath,\r\n            sortContainsGroupColumns\r\n        );\r\n    }\r\n\r\n    private sort(\r\n        beans: BeanCollection,\r\n        sortOptions: SortOption[],\r\n        sortActive: boolean,\r\n        useDeltaSort: boolean,\r\n        changedRowNodes: IChangedRowNodes | undefined,\r\n        changedPath: ChangedPath | undefined,\r\n        sortContainsGroupColumns: boolean\r\n    ): void {\r\n        const { gos, colModel, rowGroupColsSvc, groupHideOpenParentsSvc, rowNodeSorter } = beans;\r\n        const groupMaintainOrder = gos.get('groupMaintainOrder');\r\n        const groupColumnsPresent = colModel.getCols().some((c) => c.isRowGroupActive());\r\n\r\n        const isPivotMode = colModel.isPivotMode();\r\n        const postSortFunc = gos.getCallback('postSortRows');\r\n\r\n        const callback = (rowNode: RowNode) => {\r\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\r\n            groupHideOpenParentsSvc?.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\r\n\r\n            // It's pointless to sort rows which aren't being displayed. in pivot mode we don't need to sort the leaf group children.\r\n            const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\r\n\r\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\r\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\r\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\r\n            const skipSortingGroups =\r\n                groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\r\n            let newChildrenAfterSort: RowNode[];\r\n            if (skipSortingGroups) {\r\n                const nextGroup = rowGroupColsSvc?.columns?.[rowNode.level + 1];\r\n                // if the sort is null, then sort was explicitly removed, so remove sort from this group.\r\n                const wasSortExplicitlyRemoved = nextGroup?.getSort() === null;\r\n\r\n                const childrenToBeSorted = rowNode.childrenAfterAggFilter!.slice(0);\r\n                if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\r\n                    const indexedOrders: { [key: string]: number } = {};\r\n                    rowNode.childrenAfterSort.forEach((node, idx) => {\r\n                        indexedOrders[node.id!] = idx;\r\n                    });\r\n                    childrenToBeSorted.sort(\r\n                        (row1, row2) => (indexedOrders[row1.id!] ?? 0) - (indexedOrders[row2.id!] ?? 0)\r\n                    );\r\n                }\r\n                newChildrenAfterSort = childrenToBeSorted;\r\n            } else if (!sortActive || skipSortingPivotLeafs) {\r\n                // if there's no sort to make, skip this step\r\n                newChildrenAfterSort = rowNode.childrenAfterAggFilter!.slice(0);\r\n            } else if (useDeltaSort && changedRowNodes) {\r\n                newChildrenAfterSort = doDeltaSort(rowNodeSorter!, rowNode, changedRowNodes, changedPath, sortOptions);\r\n            } else {\r\n                newChildrenAfterSort = rowNodeSorter!.doFullSort(rowNode.childrenAfterAggFilter!, sortOptions);\r\n            }\r\n            rowNode.childrenAfterSort = newChildrenAfterSort;\r\n\r\n            updateRowNodeAfterSort(rowNode);\r\n\r\n            if (postSortFunc) {\r\n                const params: WithoutGridCommon<PostSortRowsParams> = { nodes: rowNode.childrenAfterSort };\r\n                postSortFunc(params);\r\n            }\r\n        };\r\n\r\n        changedPath?.forEachChangedNodeDepthFirst(callback);\r\n    }\r\n}\r\n\r\nfunction doDeltaSort(\r\n    rowNodeSorter: RowNodeSorter,\r\n    rowNode: RowNode,\r\n    changedRowNodes: IChangedRowNodes,\r\n    changedPath: ChangedPath | undefined,\r\n    sortOptions: SortOption[]\r\n): RowNode[] {\r\n    const unsortedRows = rowNode.childrenAfterAggFilter!;\r\n    const oldSortedRows = rowNode.childrenAfterSort;\r\n    if (!oldSortedRows) {\r\n        return rowNodeSorter.doFullSort(unsortedRows, sortOptions);\r\n    }\r\n\r\n    const untouchedRows = new Set<string>();\r\n    const touchedRows: SortedRowNode[] = [];\r\n\r\n    const updates = changedRowNodes.updates;\r\n    for (let i = 0, len = unsortedRows.length; i < len; ++i) {\r\n        const row = unsortedRows[i];\r\n        if (updates.has(row) || (changedPath && !changedPath.canSkip(row))) {\r\n            touchedRows.push({\r\n                currentPos: touchedRows.length,\r\n                rowNode: row,\r\n            });\r\n        } else {\r\n            untouchedRows.add(row.id!);\r\n        }\r\n    }\r\n\r\n    const sortedUntouchedRows = oldSortedRows\r\n        .filter((child) => untouchedRows.has(child.id!))\r\n        .map((rowNode: RowNode, currentPos: number): SortedRowNode => ({ currentPos, rowNode }));\r\n\r\n    touchedRows.sort((a, b) => rowNodeSorter.compareRowNodes(sortOptions, a, b));\r\n\r\n    return mergeSortedArrays(rowNodeSorter, sortOptions, touchedRows, sortedUntouchedRows);\r\n}\r\n\r\n// Merge two sorted arrays into each other\r\nfunction mergeSortedArrays(\r\n    rowNodeSorter: RowNodeSorter,\r\n    sortOptions: SortOption[],\r\n    arr1: SortedRowNode[],\r\n    arr2: SortedRowNode[]\r\n): RowNode[] {\r\n    const res: RowNode[] = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    const arr1Length = arr1.length;\r\n    const arr2Length = arr2.length;\r\n\r\n    // Traverse both array, adding them in order\r\n    while (i < arr1Length && j < arr2Length) {\r\n        const a = arr1[i];\r\n        const b = arr2[j];\r\n        // Check if current element of first array is smaller than current element\r\n        // of second array. If yes, store first array element and increment first array index.\r\n        // Otherwise do same with second array\r\n        const compareResult = rowNodeSorter.compareRowNodes(sortOptions, a, b);\r\n        let chosen: SortedRowNode;\r\n        if (compareResult < 0) {\r\n            chosen = a;\r\n            ++i;\r\n        } else {\r\n            chosen = b;\r\n            ++j;\r\n        }\r\n        res.push(chosen.rowNode);\r\n    }\r\n\r\n    // add remaining from arr1\r\n    while (i < arr1Length) {\r\n        res.push(arr1[i++].rowNode);\r\n    }\r\n\r\n    // add remaining from arr2\r\n    while (j < arr2Length) {\r\n        res.push(arr2[j++].rowNode);\r\n    }\r\n\r\n    return res;\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { GridOptions } from '../entities/gridOptions';\r\nimport type { RowHighlightPosition } from '../entities/rowNode';\r\nimport { ROW_ID_PREFIX_ROW_GROUP, RowNode } from '../entities/rowNode';\r\nimport type { CssVariablesChanged, FilterChangedEvent } from '../events';\r\nimport { _getGroupSelectsDescendants, _getRowHeightForNode, _isAnimateRows, _isDomLayout } from '../gridOptionsUtils';\r\nimport type { IClientSideNodeManager } from '../interfaces/iClientSideNodeManager';\r\nimport type {\r\n    ClientSideRowModelStage,\r\n    IChangedRowNodes,\r\n    IClientSideRowModel,\r\n    RefreshModelParams,\r\n} from '../interfaces/iClientSideRowModel';\r\nimport type { RowBounds, RowModelType } from '../interfaces/iRowModel';\r\nimport type { IRowNodeStage } from '../interfaces/iRowNodeStage';\r\nimport type { RowDataTransaction } from '../interfaces/rowDataTransaction';\r\nimport type { RowNodeTransaction } from '../interfaces/rowNodeTransaction';\r\nimport { _EmptyArray, _last, _removeFromArray } from '../utils/array';\r\nimport { ChangedPath } from '../utils/changedPath';\r\nimport { _debounce } from '../utils/function';\r\nimport { _warn } from '../validation/logging';\r\nimport type { ValueCache } from '../valueService/valueCache';\r\nimport { ChangedRowNodes } from './changedRowNodes';\r\nimport { updateRowNodeAfterFilter } from './filterStage';\r\nimport { updateRowNodeAfterSort } from './sortStage';\r\n\r\nenum RecursionType {\r\n    Normal,\r\n    AfterFilter,\r\n    AfterFilterAndSort,\r\n    PivotNodes,\r\n}\r\n\r\ninterface ClientSideRowModelRootNode extends RowNode {\r\n    childrenAfterGroup: RowNode[] | null;\r\n}\r\n\r\ninterface ClientSideRowModelRowNode extends RowNode {\r\n    sourceRowIndex: number;\r\n}\r\n\r\nexport interface BatchTransactionItem<TData = any> {\r\n    rowDataTransaction: RowDataTransaction<TData>;\r\n    callback: ((res: RowNodeTransaction<TData>) => void) | undefined;\r\n}\r\n\r\nexport interface RowNodeMap {\r\n    [id: string]: RowNode;\r\n}\r\n\r\nexport class ClientSideRowModel extends BeanStub implements IClientSideRowModel, NamedBean {\r\n    beanName = 'rowModel' as const;\r\n\r\n    private colModel: ColumnModel;\r\n    private valueCache?: ValueCache;\r\n\r\n    // standard stages\r\n    private filterStage?: IRowNodeStage;\r\n    private sortStage?: IRowNodeStage;\r\n    private flattenStage?: IRowNodeStage<RowNode[]>;\r\n\r\n    // enterprise stages\r\n    private groupStage?: IRowNodeStage;\r\n    private aggStage?: IRowNodeStage;\r\n    private pivotStage?: IRowNodeStage;\r\n    private filterAggStage?: IRowNodeStage;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.colModel = beans.colModel;\r\n        this.valueCache = beans.valueCache;\r\n\r\n        this.filterStage = beans.filterStage;\r\n        this.sortStage = beans.sortStage;\r\n        this.flattenStage = beans.flattenStage;\r\n\r\n        this.groupStage = beans.groupStage;\r\n        this.aggStage = beans.aggStage;\r\n        this.pivotStage = beans.pivotStage;\r\n        this.filterAggStage = beans.filterAggStage;\r\n    }\r\n\r\n    private onRowHeightChanged_debounced = _debounce(this, this.onRowHeightChanged.bind(this), 100);\r\n\r\n    // top most node of the tree. the children are the user provided data.\r\n    public rootNode: RowNode | null = null;\r\n\r\n    private rowsToDisplay: RowNode[] = []; // the rows mapped to rows to display\r\n    private nodeManager: IClientSideNodeManager<any>;\r\n    private rowDataTransactionBatch: BatchTransactionItem[] | null;\r\n    private lastHighlightedRow: RowNode | null;\r\n    private applyAsyncTransactionsTimeout: number | undefined;\r\n    /** Has the start method been called */\r\n    private started: boolean = false;\r\n    /** E.g. data has been set into the node manager already */\r\n    private shouldSkipSettingDataOnStart: boolean = false;\r\n    /**\r\n     * This is to prevent refresh model being called when it's already being called.\r\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\r\n     * which then triggers the listener here that calls refresh model again but at the filter stage\r\n     * (which is about to be run by the original call).\r\n     */\r\n    private isRefreshingModel: boolean = false;\r\n    private rowNodesCountReady: boolean = false;\r\n    private rowCountReady: boolean = false;\r\n    private orderedStages: IRowNodeStage[];\r\n\r\n    public postConstruct(): void {\r\n        this.orderedStages = [\r\n            this.groupStage,\r\n            this.filterStage,\r\n            this.pivotStage,\r\n            this.aggStage,\r\n            this.sortStage,\r\n            this.filterAggStage,\r\n            this.flattenStage,\r\n        ].filter((stage) => !!stage) as IRowNodeStage[];\r\n        const refreshEverythingFunc = this.refreshModel.bind(this, { step: 'group' });\r\n        const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\r\n            step: 'group', // after cols change, row grouping (the first stage) could of changed\r\n            afterColumnsChanged: true,\r\n            keepRenderedRows: true,\r\n            // we want animations cos sorting or filtering could be applied\r\n            animate: !this.gos.get('suppressAnimationFrame'),\r\n        });\r\n\r\n        this.addManagedEventListeners({\r\n            newColumnsLoaded: refreshEverythingAfterColsChangedFunc,\r\n            columnRowGroupChanged: refreshEverythingFunc,\r\n            columnValueChanged: this.onValueChanged.bind(this),\r\n            columnPivotChanged: this.refreshModel.bind(this, { step: 'pivot' }),\r\n            filterChanged: this.onFilterChanged.bind(this),\r\n            sortChanged: this.onSortChanged.bind(this),\r\n            columnPivotModeChanged: refreshEverythingFunc,\r\n            gridStylesChanged: this.onGridStylesChanges.bind(this),\r\n            gridReady: this.onGridReady.bind(this),\r\n        });\r\n\r\n        // doesn't need done if doing full reset\r\n        // Property listeners which call `refreshModel` at different stages\r\n        this.addPropertyListeners();\r\n\r\n        this.rootNode = new RowNode(this.beans);\r\n        this.initRowManager();\r\n    }\r\n\r\n    private initRowManager(): void {\r\n        const { gos, beans, nodeManager: oldNodeManager } = this;\r\n\r\n        const treeData = gos.get('treeData');\r\n        const childrenField = gos.get('treeDataChildrenField' as any);\r\n\r\n        const isTree = childrenField || treeData;\r\n\r\n        let nodeManager: IClientSideNodeManager<any> | undefined;\r\n        if (isTree) {\r\n            nodeManager = childrenField ? beans.csrmChildrenTreeNodeSvc : beans.csrmPathTreeNodeSvc;\r\n        }\r\n\r\n        if (!nodeManager) {\r\n            nodeManager = beans.csrmNodeSvc!;\r\n        }\r\n\r\n        if (oldNodeManager !== nodeManager) {\r\n            oldNodeManager?.deactivate();\r\n            this.nodeManager = nodeManager;\r\n        }\r\n\r\n        nodeManager.activate(this.rootNode);\r\n    }\r\n\r\n    private addPropertyListeners() {\r\n        // Omitted Properties\r\n        //\r\n        // We do not act reactively on all functional properties, as it's possible the application is React and\r\n        // has not memoised the property and it's getting set every render.\r\n        //\r\n        // ** LIST OF NON REACTIVE, NO ARGUMENT\r\n        //\r\n        // getDataPath, getRowId -- these are called once for each Node when the Node is created.\r\n        //                       -- these are immutable Node properties (ie a Node ID cannot be changed)\r\n        //\r\n        // isRowMaster           -- called when masterDetail is true and the Node is created or the property was changed\r\n        //\r\n        // getRowHeight - this is called once when Node is created, if a new getRowHeight function is provided,\r\n        //              - we do not revisit the heights of each node.\r\n        //\r\n        // pivotDefaultExpanded - relevant for initial pivot column creation, no impact on existing pivot columns.\r\n        //\r\n        // deltaSort - this changes the type of algorithm used only, it doesn't change the sort order. so no point\r\n        //           - in doing the sort again as the same result will be got. the new Prop will be used next time we sort.\r\n        //\r\n        // ** LIST OF NON REACTIVE, SOME ARGUMENT\r\n        // ** For these, they could be reactive, but not convinced the business argument is strong enough,\r\n        // ** so leaving as non-reactive for now, and see if anyone complains.\r\n        //\r\n        // processPivotResultColDef, processPivotResultColGroupDef\r\n        //                       - there is an argument for having these reactive, that if the application changes\r\n        //                       - these props, we should re-create the Pivot Columns, however it's highly unlikely\r\n        //                       - the application would change these functions, far more likely the functions were\r\n        //                       - non memoised correctly.\r\n\r\n        const allProps: (keyof GridOptions)[] = [\r\n            'treeData',\r\n            'treeDataChildrenField' as any,\r\n            ...this.orderedStages.flatMap(({ refreshProps }) => [...refreshProps]),\r\n        ];\r\n\r\n        this.addManagedPropertyListeners(allProps, (params) => {\r\n            const properties = params.changeSet?.properties;\r\n            if (properties) {\r\n                this.onPropChange(properties);\r\n            }\r\n        });\r\n\r\n        // TODO: HACK: rowData should be in the list of allProps instead of being registered separately.\r\n        // but due to AG-13498, the columnModel will execute AFTER the previous listeners if properties\r\n        // the column model listen to together with the previous listener are changed together.\r\n        // So this is a temporary solution to make sure rowData is processed after the columnModel is ready.\r\n        // Unfortunately this can result in double refresh when multiple properties are changed together, as it was before version 33.\r\n        this.addManagedPropertyListener('rowData', () => this.onPropChange(['rowData']));\r\n\r\n        this.addManagedPropertyListener('rowHeight', () => this.resetRowHeights());\r\n    }\r\n\r\n    public start(): void {\r\n        this.started = true;\r\n        if (this.shouldSkipSettingDataOnStart) {\r\n            this.refreshModel({\r\n                step: 'group',\r\n                newData: true,\r\n                rowDataUpdated: true,\r\n            });\r\n        } else {\r\n            this.setInitialData();\r\n        }\r\n    }\r\n\r\n    private setInitialData(): void {\r\n        const rowData = this.gos.get('rowData');\r\n        if (rowData) {\r\n            this.shouldSkipSettingDataOnStart = true;\r\n            this.onPropChange(['rowData']);\r\n        }\r\n    }\r\n\r\n    public ensureRowHeightsValid(\r\n        startPixel: number,\r\n        endPixel: number,\r\n        startLimitIndex: number,\r\n        endLimitIndex: number\r\n    ): boolean {\r\n        let atLeastOneChange: boolean;\r\n        let res = false;\r\n\r\n        // we do this multiple times as changing the row heights can also change the first and last rows,\r\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\r\n        // more rows.\r\n        do {\r\n            atLeastOneChange = false;\r\n\r\n            const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\r\n            const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\r\n\r\n            // keep check to current page if doing pagination\r\n            const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\r\n            const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\r\n\r\n            for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\r\n                const rowNode = this.getRow(rowIndex);\r\n                if (rowNode.rowHeightEstimated) {\r\n                    const rowHeight = _getRowHeightForNode(this.beans, rowNode);\r\n                    rowNode.setRowHeight(rowHeight.height);\r\n                    atLeastOneChange = true;\r\n                    res = true;\r\n                }\r\n            }\r\n\r\n            if (atLeastOneChange) {\r\n                this.setRowTopAndRowIndex();\r\n            }\r\n        } while (atLeastOneChange);\r\n\r\n        return res;\r\n    }\r\n\r\n    private onPropChange(properties: (keyof GridOptions)[]): void {\r\n        if (!this.rootNode) {\r\n            return; // Destroyed.\r\n        }\r\n\r\n        const gos = this.gos;\r\n\r\n        const changedProps = new Set(properties);\r\n        const params: RefreshModelParams = {\r\n            step: 'nothing',\r\n            changedProps,\r\n        };\r\n\r\n        const rowDataChanged = changedProps.has('rowData');\r\n        const treeDataChanged = changedProps.has('treeData');\r\n        const treeDataChildrenFieldChanged = changedProps.has('treeDataChildrenField' as any);\r\n\r\n        const reset = treeDataChildrenFieldChanged || (treeDataChanged && !gos.get('treeDataChildrenField' as any));\r\n\r\n        let newRowData: any[] | null | undefined;\r\n\r\n        if (treeDataChanged) {\r\n            params.step = 'group';\r\n        }\r\n\r\n        if (reset || rowDataChanged) {\r\n            newRowData = gos.get('rowData');\r\n\r\n            if (newRowData != null && !Array.isArray(newRowData)) {\r\n                newRowData = null;\r\n                _warn(1);\r\n            }\r\n        }\r\n\r\n        if (reset) {\r\n            // If we are here, it means that the row manager need to be changed or fully reloaded\r\n            if (!rowDataChanged) {\r\n                // No new rowData was passed, so to include user executed transaction we need to extract\r\n                // the row data from the node manager as it might be different from the original rowData\r\n                newRowData = this.nodeManager?.extractRowData() ?? newRowData;\r\n            }\r\n            this.initRowManager();\r\n        }\r\n\r\n        if (newRowData) {\r\n            const immutable =\r\n                !reset &&\r\n                this.started &&\r\n                !this.isEmpty() &&\r\n                newRowData.length > 0 &&\r\n                gos.exists('getRowId') &&\r\n                // this property is a backwards compatibility property, for those who want\r\n                // the old behaviour of Row IDs but NOT Immutable Data.\r\n                !gos.get('resetRowDataOnUpdate');\r\n\r\n            if (immutable) {\r\n                params.keepRenderedRows = true;\r\n                params.animate = !this.gos.get('suppressAnimationFrame');\r\n                params.changedRowNodes = new ChangedRowNodes();\r\n\r\n                this.nodeManager.setImmutableRowData(params, newRowData);\r\n            } else {\r\n                params.step = 'group';\r\n                params.rowDataUpdated = true;\r\n                params.newData = true;\r\n\r\n                // no need to invalidate cache, as the cache is stored on the rowNode,\r\n                // so new rowNodes means the cache is wiped anyway.\r\n\r\n                // - clears selection, done before we set row data to ensure it isn't readded via `selectionSvc.syncInOldRowNode`\r\n                this.beans.selectionSvc?.reset('rowDataChanged');\r\n\r\n                this.rowNodesCountReady = true;\r\n                this.nodeManager.setNewRowData(newRowData);\r\n            }\r\n        }\r\n\r\n        if (params.step === 'nothing') {\r\n            for (const { refreshProps, step } of this.orderedStages) {\r\n                if (properties.some((prop) => refreshProps.has(prop))) {\r\n                    params.step = step;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (params.step !== 'nothing') {\r\n            this.refreshModel(params);\r\n        }\r\n    }\r\n\r\n    private setRowTopAndRowIndex(): Set<string> {\r\n        const { beans } = this;\r\n        const defaultRowHeight = beans.environment.getDefaultRowHeight();\r\n        let nextRowTop = 0;\r\n\r\n        // mapping displayed rows is not needed for this method, however it's used in\r\n        // clearRowTopAndRowIndex(), and given we are looping through this.rowsToDisplay here,\r\n        // we create the map here for performance reasons, so we don't loop a second time\r\n        // in clearRowTopAndRowIndex()\r\n        const displayedRowsMapped = new Set<string>();\r\n\r\n        // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\r\n        // with these two layouts.\r\n        const allowEstimate = _isDomLayout(this.gos, 'normal');\r\n\r\n        const rowsToDisplay = this.rowsToDisplay;\r\n        for (let i = 0, len = rowsToDisplay.length; i < len; ++i) {\r\n            const rowNode = rowsToDisplay[i];\r\n\r\n            if (rowNode.id != null) {\r\n                displayedRowsMapped.add(rowNode.id);\r\n            }\r\n\r\n            if (rowNode.rowHeight == null) {\r\n                const rowHeight = _getRowHeightForNode(beans, rowNode, allowEstimate, defaultRowHeight);\r\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\r\n            }\r\n\r\n            rowNode.setRowTop(nextRowTop);\r\n            rowNode.setRowIndex(i);\r\n            nextRowTop += rowNode.rowHeight!;\r\n        }\r\n\r\n        return displayedRowsMapped;\r\n    }\r\n\r\n    private clearRowTopAndRowIndex(changedPath: ChangedPath, displayedRowsMapped: Set<string>): void {\r\n        const changedPathActive = changedPath.active;\r\n\r\n        const clearIfNotDisplayed = (rowNode: RowNode) => {\r\n            if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\r\n                rowNode.clearRowTopAndRowIndex();\r\n            }\r\n        };\r\n\r\n        const recurse = (rowNode: RowNode | null) => {\r\n            if (rowNode === null) {\r\n                return;\r\n            }\r\n\r\n            clearIfNotDisplayed(rowNode);\r\n            clearIfNotDisplayed(rowNode.detailNode);\r\n            clearIfNotDisplayed(rowNode.sibling);\r\n\r\n            if (rowNode.hasChildren()) {\r\n                if (rowNode.childrenAfterGroup) {\r\n                    // if a changedPath is active, it means we are here because of a transaction update or\r\n                    // a change detection. neither of these impacts the open/closed state of groups. so if\r\n                    // a group is not open this time, it was not open last time. so we know all closed groups\r\n                    // already have their top positions cleared. so there is no need to traverse all the way\r\n                    // when changedPath is active and the rowNode is not expanded.\r\n                    const isRootNode = rowNode.level == -1; // we need to give special consideration for root node,\r\n                    // as expanded=undefined for root node\r\n                    const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\r\n                    if (!skipChildren) {\r\n                        rowNode.childrenAfterGroup.forEach(recurse);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        recurse(this.rootNode);\r\n    }\r\n\r\n    // returns false if row was moved, otherwise true\r\n    public ensureRowsAtPixel(rowNodes: RowNode[], pixel: number, increment: number = 0): boolean {\r\n        const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\r\n        const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\r\n        const animate = !this.gos.get('suppressAnimationFrame');\r\n\r\n        if (rowNodeAtPixelNow === rowNodes[0]) {\r\n            return false;\r\n        }\r\n\r\n        const allLeafChildren = this.rootNode?.allLeafChildren;\r\n        if (!allLeafChildren) {\r\n            return false;\r\n        }\r\n\r\n        // TODO: this implementation is currently quite inefficient and it could be optimized to run in O(n) in a single pass\r\n\r\n        rowNodes.forEach((rowNode) => {\r\n            _removeFromArray(allLeafChildren, rowNode);\r\n        });\r\n\r\n        rowNodes.forEach((rowNode, idx) => {\r\n            allLeafChildren.splice(Math.max(indexAtPixelNow + increment, 0) + idx, 0, rowNode);\r\n        });\r\n\r\n        rowNodes.forEach((rowNode: ClientSideRowModelRowNode, index) => {\r\n            rowNode.sourceRowIndex = index; // Update all the sourceRowIndex to reflect the new positions\r\n        });\r\n\r\n        this.refreshModel({\r\n            step: 'group',\r\n            keepRenderedRows: true,\r\n            animate,\r\n            rowNodesOrderChanged: true, // We assume the order changed and we don't need to check if it really did\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    public highlightRowAtPixel(rowNode: RowNode | null, pixel?: number): void {\r\n        const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\r\n        const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\r\n\r\n        if (!rowNodeAtPixelNow || !rowNode || pixel == null) {\r\n            this.clearHighlightedRow();\r\n            return;\r\n        }\r\n\r\n        const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\r\n        const isSamePosition = this.isHighlightingCurrentPosition(rowNode, rowNodeAtPixelNow, highlight);\r\n        const isDifferentNode = this.lastHighlightedRow != null && this.lastHighlightedRow !== rowNodeAtPixelNow;\r\n\r\n        if (isSamePosition || isDifferentNode) {\r\n            this.clearHighlightedRow();\r\n            if (isSamePosition) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setRowNodeHighlighted(rowNodeAtPixelNow, highlight);\r\n        this.lastHighlightedRow = rowNodeAtPixelNow;\r\n    }\r\n\r\n    private setRowNodeHighlighted(rowNode: RowNode, highlighted: RowHighlightPosition | null): void {\r\n        if (rowNode.highlighted !== highlighted) {\r\n            rowNode.highlighted = highlighted;\r\n            rowNode.dispatchRowEvent('rowHighlightChanged');\r\n        }\r\n    }\r\n\r\n    public getHighlightPosition(pixel: number, rowNode?: RowNode): RowHighlightPosition {\r\n        if (!rowNode) {\r\n            const index = this.getRowIndexAtPixel(pixel);\r\n            rowNode = this.getRow(index || 0);\r\n\r\n            if (!rowNode) {\r\n                return 'Below';\r\n            }\r\n        }\r\n\r\n        const { rowTop, rowHeight } = rowNode;\r\n\r\n        return pixel - rowTop! < rowHeight! / 2 ? 'Above' : 'Below';\r\n    }\r\n\r\n    public getLastHighlightedRowNode(): RowNode | null {\r\n        return this.lastHighlightedRow;\r\n    }\r\n\r\n    private isHighlightingCurrentPosition(\r\n        movingRowNode: RowNode,\r\n        hoveredRowNode: RowNode,\r\n        highlightPosition: RowHighlightPosition\r\n    ): boolean {\r\n        if (movingRowNode === hoveredRowNode) {\r\n            return true;\r\n        }\r\n\r\n        const diff = highlightPosition === 'Above' ? -1 : 1;\r\n\r\n        if (this.getRow(hoveredRowNode.rowIndex! + diff) === movingRowNode) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private clearHighlightedRow(): void {\r\n        if (this.lastHighlightedRow) {\r\n            this.setRowNodeHighlighted(this.lastHighlightedRow, null);\r\n            this.lastHighlightedRow = null;\r\n        }\r\n    }\r\n\r\n    public isLastRowIndexKnown(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        if (this.rowsToDisplay) {\r\n            return this.rowsToDisplay.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of rows with level === 1\r\n     */\r\n    public getTopLevelRowCount(): number {\r\n        const rootNode = this.rootNode;\r\n        if (!rootNode) {\r\n            return 0;\r\n        }\r\n\r\n        if (this.rowsToDisplay.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        // exception to func comment, if showing root node, then we return that\r\n        const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === rootNode;\r\n        if (showingRootNode) {\r\n            return 1;\r\n        }\r\n\r\n        const filteredChildren = rootNode.childrenAfterAggFilter;\r\n        const totalFooterInc = rootNode.sibling ? 1 : 0;\r\n        return (filteredChildren ? filteredChildren.length : 0) + totalFooterInc;\r\n    }\r\n\r\n    /**\r\n     * Get the row display index by the top level index\r\n     * top level index is the index of rows with level === 1\r\n     */\r\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\r\n        const { rootNode, rowsToDisplay } = this;\r\n        const showingRootNode = !rootNode || !rowsToDisplay.length || rowsToDisplay[0] === rootNode;\r\n\r\n        // exception to function comment, if showing footer node (level === -1) return 0.\r\n        if (showingRootNode) {\r\n            return topLevelIndex;\r\n        }\r\n\r\n        const { childrenAfterSort } = rootNode;\r\n\r\n        const getDefaultIndex = (adjustedIndex: number) => {\r\n            let rowNode = childrenAfterSort![adjustedIndex];\r\n\r\n            if (this.gos.get('groupHideOpenParents')) {\r\n                // if hideOpenParents, then get lowest displayed descendent\r\n                while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\r\n                    rowNode = rowNode.childrenAfterSort[0];\r\n                }\r\n            }\r\n\r\n            return rowNode.rowIndex!;\r\n        };\r\n\r\n        const { footerSvc } = this.beans;\r\n        if (footerSvc) {\r\n            return footerSvc.getTopDisplayIndex(rowsToDisplay, topLevelIndex, childrenAfterSort!, getDefaultIndex);\r\n        } else {\r\n            return getDefaultIndex(topLevelIndex);\r\n        }\r\n    }\r\n\r\n    public getRowBounds(index: number): RowBounds | null {\r\n        const rowNode = this.rowsToDisplay[index];\r\n\r\n        if (rowNode) {\r\n            return {\r\n                rowTop: rowNode.rowTop!,\r\n                rowHeight: rowNode.rowHeight!,\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public onRowGroupOpened(): void {\r\n        const animate = _isAnimateRows(this.gos);\r\n        this.refreshModel({ step: 'map', keepRenderedRows: true, animate: animate });\r\n    }\r\n\r\n    private onFilterChanged(event: FilterChangedEvent): void {\r\n        if (event.afterDataChange) {\r\n            return;\r\n        }\r\n        const animate = _isAnimateRows(this.gos);\r\n\r\n        const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\r\n        const step: ClientSideRowModelStage = primaryOrQuickFilterChanged ? 'filter' : 'filter_aggregates';\r\n        this.refreshModel({ step: step, keepRenderedRows: true, animate: animate });\r\n    }\r\n\r\n    private onSortChanged(): void {\r\n        const animate = _isAnimateRows(this.gos);\r\n        this.refreshModel({\r\n            step: 'sort',\r\n            keepRenderedRows: true,\r\n            animate: animate,\r\n        });\r\n    }\r\n\r\n    public getType(): RowModelType {\r\n        return 'clientSide';\r\n    }\r\n\r\n    private onValueChanged(): void {\r\n        this.refreshModel({ step: this.colModel.isPivotActive() ? 'pivot' : 'aggregate' });\r\n    }\r\n\r\n    private createChangePath(rowNodeTransactions: (RowNodeTransaction | null)[] | undefined): ChangedPath {\r\n        // for updates, if the row is updated at all, then we re-calc all the values\r\n        // in that row. we could compare each value to each old value, however if we\r\n        // did this, we would be calling the valueSvc twice, once on the old value\r\n        // and once on the new value. so it's less valueGetter calls if we just assume\r\n        // each column is different. that way the changedPath is used so that only\r\n        // the impacted parent rows are recalculated, parents who's children have\r\n        // not changed are not impacted.\r\n\r\n        const noTransactions = !rowNodeTransactions?.length;\r\n\r\n        const changedPath = new ChangedPath(false, this.rootNode!);\r\n\r\n        if (noTransactions) {\r\n            changedPath.active = false;\r\n        }\r\n\r\n        return changedPath;\r\n    }\r\n\r\n    private isSuppressModelUpdateAfterUpdateTransaction(params: RefreshModelParams): boolean {\r\n        if (!this.gos.get('suppressModelUpdateAfterUpdateTransaction')) {\r\n            return false;\r\n        }\r\n\r\n        const rowNodeTransactions = params.rowNodeTransactions;\r\n\r\n        if (!rowNodeTransactions) {\r\n            return false;\r\n        }\r\n\r\n        const transWithAddsOrDeletes = rowNodeTransactions.some(\r\n            (tx) => (tx.add != null && tx.add.length > 0) || (tx.remove != null && tx.remove.length > 0)\r\n        );\r\n\r\n        // return true if we are only doing update transactions\r\n        const transactionsContainUpdatesOnly = !transWithAddsOrDeletes;\r\n        return transactionsContainUpdatesOnly;\r\n    }\r\n\r\n    public refreshModel(params: RefreshModelParams): void {\r\n        if (!this.rootNode) {\r\n            return; // Destroyed\r\n        }\r\n\r\n        // this goes through the pipeline of stages. what's in my head is similar\r\n        // to the diagram on this page:\r\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\r\n        // however we want to keep the results of each stage, hence we manually call\r\n        // each step rather than have them chain each other.\r\n\r\n        // fallthrough in below switch is on purpose,\r\n        // eg if STEP_FILTER, then all steps below this\r\n        // step get done\r\n        // let start: number;\r\n        // console.log('======= start =======');\r\n\r\n        const rowNodeTransactions = params.rowNodeTransactions;\r\n\r\n        const changedPath = (params.changedPath ??= this.createChangePath(rowNodeTransactions));\r\n\r\n        this.nodeManager.refreshModel?.(params);\r\n\r\n        this.eventSvc.dispatchEvent({ type: 'beforeRefreshModel', params });\r\n\r\n        if (!this.started) {\r\n            return; // Destroyed or not yet started\r\n        }\r\n\r\n        if (params.rowDataUpdated) {\r\n            this.eventSvc.dispatchEvent({ type: 'rowDataUpdated' });\r\n        }\r\n\r\n        if (\r\n            this.isRefreshingModel ||\r\n            this.colModel.changeEventsDispatching ||\r\n            this.isSuppressModelUpdateAfterUpdateTransaction(params)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.isRefreshingModel = true;\r\n\r\n        switch (params.step) {\r\n            case 'group': {\r\n                this.doRowGrouping(\r\n                    params.rowNodeTransactions,\r\n                    params.changedRowNodes,\r\n                    changedPath,\r\n                    !!params.rowNodesOrderChanged,\r\n                    !!params.afterColumnsChanged\r\n                );\r\n            }\r\n            /* eslint-disable no-fallthrough */\r\n            case 'filter':\r\n                this.doFilter(changedPath);\r\n            case 'pivot':\r\n                this.doPivot(changedPath);\r\n            case 'aggregate': // depends on agg fields\r\n                this.doAggregate(changedPath);\r\n            case 'filter_aggregates':\r\n                this.doFilterAggregates(changedPath);\r\n            case 'sort':\r\n                this.doSort(params.changedRowNodes, changedPath);\r\n            case 'map':\r\n                this.doRowsToDisplay();\r\n            /* eslint-enable no-fallthrough */\r\n        }\r\n\r\n        // set all row tops to null, then set row tops on all visible rows. if we don't\r\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\r\n        // will still lie around\r\n        const displayedNodesMapped = this.setRowTopAndRowIndex();\r\n        this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\r\n\r\n        this.isRefreshingModel = false;\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'modelUpdated',\r\n            animate: params.animate,\r\n            keepRenderedRows: params.keepRenderedRows,\r\n            newData: params.newData,\r\n            newPage: false,\r\n            keepUndoRedoStack: params.keepUndoRedoStack,\r\n        });\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return !this.rootNode?.allLeafChildren?.length || !this.colModel?.ready;\r\n    }\r\n\r\n    public isRowsToRender(): boolean {\r\n        return this.rowsToDisplay.length > 0;\r\n    }\r\n\r\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\r\n        let started = false;\r\n        let finished = false;\r\n\r\n        const result: RowNode[] = [];\r\n\r\n        const groupsSelectChildren = _getGroupSelectsDescendants(this.gos);\r\n\r\n        this.forEachNodeAfterFilterAndSort((rowNode) => {\r\n            // range has been closed, skip till end\r\n            if (finished) {\r\n                return;\r\n            }\r\n\r\n            if (started) {\r\n                if (rowNode === lastInRange || rowNode === firstInRange) {\r\n                    // check if this is the last node we're going to be adding\r\n                    finished = true;\r\n\r\n                    // if the final node was a group node, and we're doing groupSelectsChildren\r\n                    // make the exception to select all of it's descendants too\r\n                    if (rowNode.group && groupsSelectChildren) {\r\n                        result.push(...rowNode.allLeafChildren!);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!started) {\r\n                if (rowNode !== lastInRange && rowNode !== firstInRange) {\r\n                    // still haven't hit a boundary node, keep searching\r\n                    return;\r\n                }\r\n                started = true;\r\n            }\r\n\r\n            // only select leaf nodes if groupsSelectChildren\r\n            const includeThisNode = !rowNode.group || !groupsSelectChildren;\r\n            if (includeThisNode) {\r\n                result.push(rowNode);\r\n                return;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public getTopLevelNodes(): RowNode[] | null {\r\n        return this.rootNode?.childrenAfterGroup ?? null;\r\n    }\r\n\r\n    public getRow(index: number): RowNode {\r\n        return this.rowsToDisplay[index];\r\n    }\r\n\r\n    public isRowPresent(rowNode: RowNode): boolean {\r\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\r\n    }\r\n\r\n    public getRowIndexAtPixel(pixelToMatch: number): number {\r\n        const rowsToDisplay = this.rowsToDisplay;\r\n        if (this.isEmpty() || rowsToDisplay.length === 0) {\r\n            return -1;\r\n        }\r\n\r\n        // do binary search of tree\r\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\r\n        let bottomPointer = 0;\r\n        let topPointer = rowsToDisplay.length - 1;\r\n\r\n        // quick check, if the pixel is out of bounds, then return last row\r\n        if (pixelToMatch <= 0) {\r\n            // if pixel is less than or equal zero, it's always the first row\r\n            return 0;\r\n        }\r\n        const lastNode = _last(rowsToDisplay);\r\n        if (lastNode.rowTop! <= pixelToMatch) {\r\n            return rowsToDisplay.length - 1;\r\n        }\r\n\r\n        let oldBottomPointer = -1;\r\n        let oldTopPointer = -1;\r\n\r\n        while (true) {\r\n            const midPointer = Math.floor((bottomPointer + topPointer) / 2);\r\n            const currentRowNode = rowsToDisplay[midPointer];\r\n\r\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\r\n                return midPointer;\r\n            }\r\n\r\n            if (currentRowNode.rowTop! < pixelToMatch) {\r\n                bottomPointer = midPointer + 1;\r\n            } else if (currentRowNode.rowTop! > pixelToMatch) {\r\n                topPointer = midPointer - 1;\r\n            }\r\n\r\n            // infinite loops happen when there is space between rows. this can happen\r\n            // when Auto Height is active, cos we re-calculate row tops asynchronously\r\n            // when row heights change, which can temporarily result in gaps between rows.\r\n            const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\r\n            if (caughtInInfiniteLoop) {\r\n                return midPointer;\r\n            }\r\n\r\n            oldBottomPointer = bottomPointer;\r\n            oldTopPointer = topPointer;\r\n        }\r\n    }\r\n\r\n    private isRowInPixel(rowNode: RowNode, pixelToMatch: number): boolean {\r\n        const topPixel = rowNode.rowTop;\r\n        const bottomPixel = rowNode.rowTop! + rowNode.rowHeight!;\r\n        const pixelInRow = topPixel! <= pixelToMatch && bottomPixel > pixelToMatch;\r\n        return pixelInRow;\r\n    }\r\n\r\n    public forEachLeafNode(callback: (node: RowNode, index: number) => void): void {\r\n        this.rootNode?.allLeafChildren?.forEach((rowNode, index) => callback(rowNode, index));\r\n    }\r\n\r\n    public forEachNode(callback: (node: RowNode, index: number) => void, includeFooterNodes: boolean = false): void {\r\n        this.recursivelyWalkNodesAndCallback({\r\n            nodes: [...(this.rootNode?.childrenAfterGroup || [])],\r\n            callback,\r\n            recursionType: RecursionType.Normal,\r\n            index: 0,\r\n            includeFooterNodes,\r\n        });\r\n    }\r\n\r\n    public forEachNodeAfterFilter(\r\n        callback: (node: RowNode, index: number) => void,\r\n        includeFooterNodes: boolean = false\r\n    ): void {\r\n        this.recursivelyWalkNodesAndCallback({\r\n            nodes: [...(this.rootNode?.childrenAfterAggFilter || [])],\r\n            callback,\r\n            recursionType: RecursionType.AfterFilter,\r\n            index: 0,\r\n            includeFooterNodes,\r\n        });\r\n    }\r\n\r\n    public forEachNodeAfterFilterAndSort(\r\n        callback: (node: RowNode, index: number) => void,\r\n        includeFooterNodes: boolean = false\r\n    ): void {\r\n        this.recursivelyWalkNodesAndCallback({\r\n            nodes: [...(this.rootNode?.childrenAfterSort || [])],\r\n            callback,\r\n            recursionType: RecursionType.AfterFilterAndSort,\r\n            index: 0,\r\n            includeFooterNodes,\r\n        });\r\n    }\r\n\r\n    public forEachPivotNode(\r\n        callback: (node: RowNode, index: number) => void,\r\n        includeFooterNodes: boolean = false\r\n    ): void {\r\n        const rootNode = this.rootNode;\r\n        if (rootNode) {\r\n            this.recursivelyWalkNodesAndCallback({\r\n                nodes: [rootNode],\r\n                callback,\r\n                recursionType: RecursionType.PivotNodes,\r\n                index: 0,\r\n                includeFooterNodes,\r\n            });\r\n        }\r\n    }\r\n\r\n    // iterates through each item in memory, and calls the callback function\r\n    // nodes - the rowNodes to traverse\r\n    // callback - the user provided callback\r\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\r\n    // index - works similar to the index in forEach in javascript's array function\r\n    private recursivelyWalkNodesAndCallback(params: {\r\n        nodes: RowNode[];\r\n        callback: (node: RowNode, index: number) => void;\r\n        recursionType: RecursionType;\r\n        index: number;\r\n        includeFooterNodes: boolean;\r\n    }): number {\r\n        const { nodes, callback, recursionType, includeFooterNodes } = params;\r\n        let { index } = params;\r\n\r\n        const { footerSvc } = this.beans;\r\n\r\n        footerSvc?.addNodes(params, nodes, callback, includeFooterNodes, this.rootNode, 'top');\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            callback(node, index++);\r\n            // go to the next level if it is a group\r\n            if (node.hasChildren() && !node.footer) {\r\n                // depending on the recursion type, we pick a difference set of children\r\n                let nodeChildren: RowNode[] | null = null;\r\n                switch (recursionType) {\r\n                    case RecursionType.Normal:\r\n                        nodeChildren = node.childrenAfterGroup;\r\n                        break;\r\n                    case RecursionType.AfterFilter:\r\n                        nodeChildren = node.childrenAfterAggFilter;\r\n                        break;\r\n                    case RecursionType.AfterFilterAndSort:\r\n                        nodeChildren = node.childrenAfterSort;\r\n                        break;\r\n                    case RecursionType.PivotNodes:\r\n                        // for pivot, we don't go below leafGroup levels\r\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\r\n                        break;\r\n                }\r\n                if (nodeChildren) {\r\n                    index = this.recursivelyWalkNodesAndCallback({\r\n                        nodes: [...nodeChildren],\r\n                        callback,\r\n                        recursionType,\r\n                        index,\r\n                        includeFooterNodes,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        footerSvc?.addNodes(params, nodes, callback, includeFooterNodes, this.rootNode, 'bottom');\r\n        return index;\r\n    }\r\n\r\n    // it's possible to recompute the aggregate without doing the other parts\r\n    // + api.refreshClientSideRowModel('aggregate')\r\n    public doAggregate(changedPath?: ChangedPath): void {\r\n        const rootNode = this.rootNode;\r\n        if (rootNode) {\r\n            this.aggStage?.execute({ rowNode: rootNode, changedPath: changedPath });\r\n        }\r\n    }\r\n\r\n    private doFilterAggregates(changedPath: ChangedPath): void {\r\n        const rootNode = this.rootNode!;\r\n        if (this.filterAggStage) {\r\n            this.filterAggStage.execute({ rowNode: rootNode, changedPath: changedPath });\r\n        } else {\r\n            // If filterAggStage is undefined, then so is the grouping stage, so all children should be on the rootNode.\r\n            rootNode.childrenAfterAggFilter = rootNode.childrenAfterFilter;\r\n        }\r\n    }\r\n\r\n    private doSort(changedRowNodes: IChangedRowNodes | undefined, changedPath: ChangedPath) {\r\n        const { groupHideOpenParentsSvc } = this.beans;\r\n        if (this.sortStage) {\r\n            this.sortStage.execute({\r\n                rowNode: this.rootNode!,\r\n                changedRowNodes,\r\n                changedPath: changedPath,\r\n            });\r\n        } else {\r\n            changedPath.forEachChangedNodeDepthFirst((rowNode) => {\r\n                // this needs to run before sorting\r\n                groupHideOpenParentsSvc?.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\r\n\r\n                rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter!.slice(0);\r\n\r\n                updateRowNodeAfterSort(rowNode);\r\n            });\r\n        }\r\n\r\n        // this needs to run after sorting\r\n        groupHideOpenParentsSvc?.updateGroupDataForHideOpenParents(changedPath);\r\n    }\r\n\r\n    private doRowGrouping(\r\n        rowNodeTransactions: RowNodeTransaction[] | undefined,\r\n        changedRowNodes: IChangedRowNodes | undefined,\r\n        changedPath: ChangedPath,\r\n        rowNodesOrderChanged: boolean,\r\n        afterColumnsChanged: boolean\r\n    ) {\r\n        const treeData = this.nodeManager.treeData;\r\n        const rootNode: ClientSideRowModelRootNode = this.rootNode!;\r\n        if (!treeData) {\r\n            const groupStage = this.groupStage;\r\n            if (groupStage) {\r\n                groupStage.execute({\r\n                    rowNode: rootNode,\r\n                    changedPath,\r\n                    changedRowNodes,\r\n                    rowNodeTransactions,\r\n                    rowNodesOrderChanged,\r\n                    afterColumnsChanged,\r\n                });\r\n            } else {\r\n                const sibling: ClientSideRowModelRootNode = rootNode.sibling;\r\n                rootNode.childrenAfterGroup = rootNode.allLeafChildren;\r\n                if (sibling) {\r\n                    sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\r\n                }\r\n                rootNode.updateHasChildren();\r\n            }\r\n        }\r\n\r\n        if (this.rowNodesCountReady) {\r\n            // only if row data has been set\r\n            this.rowCountReady = true;\r\n            this.eventSvc.dispatchEventOnce({ type: 'rowCountReady' });\r\n        }\r\n    }\r\n\r\n    private doFilter(changedPath: ChangedPath) {\r\n        if (this.filterStage) {\r\n            this.filterStage.execute({ rowNode: this.rootNode!, changedPath: changedPath });\r\n        } else {\r\n            changedPath.forEachChangedNodeDepthFirst((rowNode) => {\r\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\r\n\r\n                updateRowNodeAfterFilter(rowNode);\r\n            }, true);\r\n        }\r\n    }\r\n\r\n    private doPivot(changedPath: ChangedPath) {\r\n        this.pivotStage?.execute({ rowNode: this.rootNode!, changedPath: changedPath });\r\n    }\r\n\r\n    public getRowNode(id: string): RowNode | undefined {\r\n        // although id is typed a string, this could be called by the user, and they could have passed a number\r\n        const idIsGroup = typeof id == 'string' && id.indexOf(ROW_ID_PREFIX_ROW_GROUP) == 0;\r\n\r\n        if (idIsGroup) {\r\n            // only one users complained about getRowNode not working for groups, after years of\r\n            // this working for normal rows. so have done quick implementation. if users complain\r\n            // about performance, then GroupStage should store / manage created groups in a map,\r\n            // which is a chunk of work.\r\n            let res: RowNode | undefined = undefined;\r\n            this.forEachNode((node) => {\r\n                if (node.id === id) {\r\n                    res = node;\r\n                }\r\n            });\r\n            return res;\r\n        }\r\n\r\n        return this.nodeManager.getRowNode(id);\r\n    }\r\n\r\n    public batchUpdateRowData(\r\n        rowDataTransaction: RowDataTransaction,\r\n        callback?: (res: RowNodeTransaction) => void\r\n    ): void {\r\n        if (this.applyAsyncTransactionsTimeout == null) {\r\n            this.rowDataTransactionBatch = [];\r\n            const waitMillis = this.gos.get('asyncTransactionWaitMillis');\r\n            this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\r\n                if (this.isAlive()) {\r\n                    // Handle case where grid is destroyed before timeout is triggered\r\n                    this.executeBatchUpdateRowData();\r\n                }\r\n            }, waitMillis);\r\n        }\r\n        this.rowDataTransactionBatch!.push({ rowDataTransaction: rowDataTransaction, callback });\r\n    }\r\n\r\n    public flushAsyncTransactions(): void {\r\n        if (this.applyAsyncTransactionsTimeout != null) {\r\n            clearTimeout(this.applyAsyncTransactionsTimeout);\r\n            this.executeBatchUpdateRowData();\r\n        }\r\n    }\r\n\r\n    private executeBatchUpdateRowData(): void {\r\n        this.valueCache?.onDataChanged();\r\n\r\n        const callbackFuncsBound: ((...args: any[]) => any)[] = [];\r\n        const rowNodeTrans: RowNodeTransaction[] = [];\r\n\r\n        const changedRowNodes = new ChangedRowNodes();\r\n        let orderChanged = false;\r\n        this.rowDataTransactionBatch?.forEach((tranItem) => {\r\n            this.rowNodesCountReady = true;\r\n            const { rowNodeTransaction, rowsInserted } = this.nodeManager.updateRowData(\r\n                tranItem.rowDataTransaction,\r\n                changedRowNodes\r\n            );\r\n            if (rowsInserted) {\r\n                orderChanged = true;\r\n            }\r\n            rowNodeTrans.push(rowNodeTransaction);\r\n            if (tranItem.callback) {\r\n                callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTransaction));\r\n            }\r\n        });\r\n\r\n        this.commitTransactions(rowNodeTrans, orderChanged, changedRowNodes);\r\n\r\n        // do callbacks in next VM turn so it's async\r\n        if (callbackFuncsBound.length > 0) {\r\n            window.setTimeout(() => {\r\n                callbackFuncsBound.forEach((func) => func());\r\n            }, 0);\r\n        }\r\n\r\n        if (rowNodeTrans.length > 0) {\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'asyncTransactionsFlushed',\r\n                results: rowNodeTrans,\r\n            });\r\n        }\r\n\r\n        this.rowDataTransactionBatch = null;\r\n        this.applyAsyncTransactionsTimeout = undefined;\r\n    }\r\n\r\n    /**\r\n     * Used to apply transaction changes.\r\n     * Called by gridApi & rowDragFeature\r\n     */\r\n    public updateRowData(rowDataTran: RowDataTransaction): RowNodeTransaction | null {\r\n        this.valueCache?.onDataChanged();\r\n\r\n        this.rowNodesCountReady = true;\r\n        const changedRowNodes = new ChangedRowNodes();\r\n        const { rowNodeTransaction, rowsInserted } = this.nodeManager.updateRowData(rowDataTran, changedRowNodes);\r\n\r\n        this.commitTransactions([rowNodeTransaction], rowsInserted, changedRowNodes);\r\n\r\n        return rowNodeTransaction;\r\n    }\r\n\r\n    /**\r\n     * Common to:\r\n     * - executeBatchUpdateRowData (batch transactions)\r\n     * - updateRowData (single transaction)\r\n     * - setImmutableRowData (generated transaction)\r\n     *\r\n     * @param rowNodeTrans - the transactions to apply\r\n     * @param orderChanged - whether the order of the rows has changed, either via generated transaction or user provided addIndex\r\n     */\r\n    private commitTransactions(\r\n        rowNodeTransactions: RowNodeTransaction[],\r\n        rowNodesOrderChanged: boolean,\r\n        changedRowNodes: IChangedRowNodes\r\n    ): void {\r\n        this.refreshModel({\r\n            step: 'group',\r\n            rowDataUpdated: true,\r\n            rowNodeTransactions,\r\n            rowNodesOrderChanged,\r\n            keepRenderedRows: true,\r\n            animate: !this.gos.get('suppressAnimationFrame'),\r\n            changedRowNodes,\r\n            changedPath: this.createChangePath(rowNodeTransactions),\r\n        });\r\n    }\r\n\r\n    private doRowsToDisplay() {\r\n        const { flattenStage, rootNode } = this;\r\n        let rowsToDisplay: RowNode[];\r\n        if (flattenStage) {\r\n            rowsToDisplay = flattenStage.execute({ rowNode: rootNode! });\r\n        } else {\r\n            rowsToDisplay = rootNode?.childrenAfterSort ?? [];\r\n            for (const row of rowsToDisplay) {\r\n                row.setUiLevel(0);\r\n            }\r\n        }\r\n        this.rowsToDisplay = rowsToDisplay;\r\n    }\r\n\r\n    public onRowHeightChanged(): void {\r\n        this.refreshModel({\r\n            step: 'map',\r\n            keepRenderedRows: true,\r\n            keepUndoRedoStack: true,\r\n        });\r\n    }\r\n\r\n    /** This method is debounced. It is used for row auto-height. If we don't debounce,\r\n     * then the Row Models will end up recalculating each row position\r\n     * for each row height change and result in the Row Renderer laying out rows.\r\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\r\n     * each row will change it's height, causing Row Model to update 1,000 times.\r\n     */\r\n    public onRowHeightChangedDebounced(): void {\r\n        this.onRowHeightChanged_debounced();\r\n    }\r\n\r\n    public resetRowHeights(): void {\r\n        const rootNode = this.rootNode;\r\n        if (!rootNode) {\r\n            return;\r\n        }\r\n\r\n        const atLeastOne = this.resetRowHeightsForAllRowNodes();\r\n\r\n        rootNode.setRowHeight(rootNode.rowHeight, true);\r\n        if (rootNode.sibling) {\r\n            rootNode.sibling.setRowHeight(rootNode.sibling.rowHeight, true);\r\n        }\r\n\r\n        // when pivotMode but pivot not active, root node is displayed on its own\r\n        // because it's only ever displayed alone, refreshing the model (onRowHeightChanged) is not required\r\n        if (atLeastOne) {\r\n            this.onRowHeightChanged();\r\n        }\r\n    }\r\n\r\n    private resetRowHeightsForAllRowNodes(): boolean {\r\n        let atLeastOne = false;\r\n        this.forEachNode((rowNode) => {\r\n            rowNode.setRowHeight(rowNode.rowHeight, true);\r\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\r\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\r\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\r\n            const detailNode = rowNode.detailNode;\r\n            if (detailNode) {\r\n                detailNode.setRowHeight(detailNode.rowHeight, true);\r\n            }\r\n\r\n            if (rowNode.sibling) {\r\n                rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\r\n            }\r\n            atLeastOne = true;\r\n        });\r\n\r\n        return atLeastOne;\r\n    }\r\n\r\n    private onGridStylesChanges(e: CssVariablesChanged) {\r\n        if (e.rowHeightChanged) {\r\n            if (this.beans.rowAutoHeight?.active) {\r\n                return;\r\n            }\r\n\r\n            this.resetRowHeights();\r\n        }\r\n    }\r\n\r\n    private onGridReady(): void {\r\n        if (!this.started) {\r\n            // App can start using API to add transactions, so need to add data into the node manager if not started\r\n            this.setInitialData();\r\n        }\r\n    }\r\n\r\n    public isRowDataLoaded(): boolean {\r\n        return this.rowCountReady;\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        // Forcefully deallocate memory\r\n        this.clearHighlightedRow();\r\n        this.started = false;\r\n        this.rootNode = null;\r\n        this.nodeManager = null!;\r\n        this.rowDataTransactionBatch = null;\r\n        this.lastHighlightedRow = null;\r\n        this.orderedStages = _EmptyArray;\r\n        this.rowsToDisplay = _EmptyArray;\r\n    }\r\n}\r\n", "import { _getClientSideRowModel } from '../api/rowModelApiUtils';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { ClientSideRowModelStep } from '../interfaces/iClientSideRowModel';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\nimport type { RowDataTransaction } from '../interfaces/rowDataTransaction';\r\nimport type { RowNodeTransaction } from '../interfaces/rowNodeTransaction';\r\nimport { _warn } from '../validation/logging';\r\n\r\nexport function onGroupExpandedOrCollapsed(beans: BeanCollection): void {\r\n    beans.expansionSvc?.onGroupExpandedOrCollapsed();\r\n}\r\n\r\nexport function refreshClientSideRowModel(beans: BeanCollection, step?: ClientSideRowModelStep): void {\r\n    const clientSideRowModel = _getClientSideRowModel(beans);\r\n    if (clientSideRowModel) {\r\n        if (!step || step === 'everything') {\r\n            step = 'group';\r\n        }\r\n        clientSideRowModel.refreshModel({\r\n            step,\r\n            keepRenderedRows: true,\r\n            animate: !beans.gos.get('suppressAnimationFrame'),\r\n        });\r\n    }\r\n}\r\n\r\nexport function isRowDataEmpty(beans: BeanCollection): boolean {\r\n    return _getClientSideRowModel(beans)?.isEmpty() ?? true;\r\n}\r\n\r\nexport function forEachLeafNode<TData = any>(\r\n    beans: BeanCollection,\r\n    callback: (rowNode: IRowNode<TData>) => void\r\n): void {\r\n    _getClientSideRowModel(beans)?.forEachLeafNode(callback);\r\n}\r\n\r\nexport function forEachNodeAfterFilter<TData = any>(\r\n    beans: BeanCollection,\r\n    callback: (rowNode: IRowNode<TData>, index: number) => void\r\n): void {\r\n    _getClientSideRowModel(beans)?.forEachNodeAfterFilter(callback);\r\n}\r\n\r\nexport function forEachNodeAfterFilterAndSort<TData = any>(\r\n    beans: BeanCollection,\r\n    callback: (rowNode: IRowNode<TData>, index: number) => void\r\n): void {\r\n    _getClientSideRowModel(beans)?.forEachNodeAfterFilterAndSort(callback);\r\n}\r\n\r\nexport function resetRowHeights(beans: BeanCollection): void {\r\n    if (beans.rowAutoHeight?.active) {\r\n        _warn(3);\r\n        return;\r\n    }\r\n    _getClientSideRowModel(beans)?.resetRowHeights();\r\n}\r\n\r\nexport function applyTransaction<TData = any>(\r\n    beans: BeanCollection,\r\n    rowDataTransaction: RowDataTransaction<TData>\r\n): RowNodeTransaction<TData> | null | undefined {\r\n    return beans.frameworkOverrides.wrapIncoming(() =>\r\n        _getClientSideRowModel(beans)?.updateRowData(rowDataTransaction)\r\n    );\r\n}\r\n\r\nexport function applyTransactionAsync<TData = any>(\r\n    beans: BeanCollection,\r\n    rowDataTransaction: RowDataTransaction<TData>,\r\n    callback?: (res: RowNodeTransaction<TData>) => void\r\n): void {\r\n    beans.frameworkOverrides.wrapIncoming(() =>\r\n        _getClientSideRowModel(beans)?.batchUpdateRowData(rowDataTransaction, callback)\r\n    );\r\n}\r\n\r\nexport function flushAsyncTransactions(beans: BeanCollection): void {\r\n    beans.frameworkOverrides.wrapIncoming(() => _getClientSideRowModel(beans)?.flushAsyncTransactions());\r\n}\r\n\r\nexport function getBestCostNodeSelection<TData = any>(beans: BeanCollection): IRowNode<TData>[] | undefined {\r\n    return beans.selectionSvc?.getBestCostNodeSelection();\r\n}\r\n", "import type { _ClientSideRowModelGridApi } from '../api/gridApi';\r\nimport { CsrmSsrmSharedApiModule } from '../api/sharedApiModule';\r\nimport type { _ModuleWithApi, _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { SortModule } from '../sort/sortModule';\r\nimport { VERSION } from '../version';\r\nimport { ClientSideNodeManager } from './clientSideNodeManager';\r\nimport { ClientSideRowModel } from './clientSideRowModel';\r\nimport {\r\n    applyTransaction,\r\n    applyTransactionAsync,\r\n    flushAsyncTransactions,\r\n    forEachLeafNode,\r\n    forEachNodeAfterFilter,\r\n    forEachNodeAfterFilterAndSort,\r\n    getBestCostNodeSelection,\r\n    isRowDataEmpty,\r\n    onGroupExpandedOrCollapsed,\r\n    refreshClientSideRowModel,\r\n    resetRowHeights,\r\n} from './clientSideRowModelApi';\r\nimport { SortStage } from './sortStage';\r\n\r\n/**\r\n * @feature Client-Side Row Model\r\n */\r\nexport const ClientSideRowModelModule: _ModuleWithoutApi = {\r\n    moduleName: 'ClientSideRowModel',\r\n    version: VERSION,\r\n    rowModels: ['clientSide'],\r\n    beans: [ClientSideNodeManager, ClientSideRowModel, SortStage],\r\n    dependsOn: [SortModule],\r\n};\r\n\r\n/**\r\n * @feature Client-Side Row Model\r\n */\r\nexport const ClientSideRowModelApiModule: _ModuleWithApi<_ClientSideRowModelGridApi<any>> = {\r\n    moduleName: 'ClientSideRowModelApi',\r\n    version: VERSION,\r\n    rowModels: ['clientSide'],\r\n    apiFunctions: {\r\n        onGroupExpandedOrCollapsed,\r\n        refreshClientSideRowModel,\r\n        isRowDataEmpty,\r\n        forEachLeafNode,\r\n        forEachNodeAfterFilter,\r\n        forEachNodeAfterFilterAndSort,\r\n        resetRowHeights,\r\n        applyTransaction,\r\n        applyTransactionAsync,\r\n        flushAsyncTransactions,\r\n        getBestCostNodeSelection,\r\n    },\r\n    dependsOn: [CsrmSsrmSharedApiModule],\r\n};\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport { isColumnGroupAutoCol, isColumnSelectionCol } from '../columns/columnUtils';\r\nimport { GroupInstanceIdCreator } from '../columns/groupInstanceIdCreator';\r\nimport type { VisibleColsService } from '../columns/visibleColsService';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport { isColumnGroup } from '../entities/agColumnGroup';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _canSkipShowingRowGroup, _isClientSideRowModel, _isServerSideRowModel } from '../gridOptionsUtils';\r\nimport type {\r\n    ExportParams,\r\n    ProcessGroupHeaderForExportParams,\r\n    ShouldRowBeSkippedParams,\r\n} from '../interfaces/exportParams';\r\nimport type { IRowModel } from '../interfaces/iRowModel';\r\nimport type { PinnedRowModel } from '../pinnedRowModel/pinnedRowModel';\r\nimport { _last } from '../utils/array';\r\nimport type { GridSerializingSession, RowAccumulator, RowSpanningAccumulator } from './iGridSerializer';\r\n\r\ntype ProcessGroupHeaderCallback = (params: ProcessGroupHeaderForExportParams) => string;\r\n\r\nexport class GridSerializer extends BeanStub implements NamedBean {\r\n    beanName = 'gridSerializer' as const;\r\n\r\n    private visibleCols: VisibleColsService;\r\n    private colModel: ColumnModel;\r\n    private rowModel: IRowModel;\r\n    private pinnedRowModel?: PinnedRowModel;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.visibleCols = beans.visibleCols;\r\n        this.colModel = beans.colModel;\r\n        this.rowModel = beans.rowModel;\r\n        this.pinnedRowModel = beans.pinnedRowModel;\r\n    }\r\n\r\n    public serialize<T>(gridSerializingSession: GridSerializingSession<T>, params: ExportParams<T> = {}): string {\r\n        const { allColumns, columnKeys, skipRowGroups } = params;\r\n        const columnsToExport = this.getColumnsToExport(\r\n            allColumns,\r\n            skipRowGroups,\r\n            columnKeys as (string | AgColumn)[] | undefined\r\n        );\r\n\r\n        return [\r\n            // first pass, put in the header names of the cols\r\n            this.prepareSession(columnsToExport),\r\n            this.prependContent(params),\r\n            this.exportColumnGroups(params, columnsToExport),\r\n            this.exportHeaders(params, columnsToExport),\r\n            this.processPinnedTopRows(params, columnsToExport),\r\n            this.processRows(params, columnsToExport),\r\n            this.processPinnedBottomRows(params, columnsToExport),\r\n            this.appendContent(params),\r\n        ]\r\n            .reduce((composed, f) => f(composed), gridSerializingSession)\r\n            .parse();\r\n    }\r\n\r\n    private processRow<T>(\r\n        gridSerializingSession: GridSerializingSession<T>,\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[],\r\n        node: RowNode\r\n    ): void {\r\n        const rowSkipper: (params: ShouldRowBeSkippedParams) => boolean = params.shouldRowBeSkipped || (() => false);\r\n        // if onlySelected, we ignore groupHideOpenParents as the user has explicitly selected the rows they wish to export.\r\n        // similarly, if specific rowNodes are provided we do the same. (the clipboard service uses rowNodes to define which rows to export)\r\n        const isClipboardExport = params.rowPositions != null;\r\n        const isExplicitExportSelection = isClipboardExport || !!params.onlySelected;\r\n        const hideOpenParents = this.gos.get('groupHideOpenParents') && !isExplicitExportSelection;\r\n        const isLeafNode = this.colModel.isPivotMode() ? node.leafGroup : !node.group;\r\n        const isFooter = !!node.footer;\r\n        const shouldSkipCurrentGroup =\r\n            node.allChildrenCount === 1 &&\r\n            node.childrenAfterGroup?.length === 1 &&\r\n            _canSkipShowingRowGroup(this.gos, node);\r\n\r\n        if (\r\n            (!isLeafNode && !isFooter && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\r\n            (params.onlySelected && !node.isSelected()) ||\r\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\r\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // if we are in pivotMode, then the grid will show the root node only\r\n        // if it's not a leaf group\r\n        const nodeIsRootNode = node.level === -1;\r\n\r\n        if (nodeIsRootNode && !isLeafNode && !isFooter) {\r\n            return;\r\n        }\r\n\r\n        const shouldRowBeSkipped: boolean = rowSkipper(this.gos.addGridCommonParams({ node }));\r\n\r\n        if (shouldRowBeSkipped) {\r\n            return;\r\n        }\r\n\r\n        const rowAccumulator: RowAccumulator = gridSerializingSession.onNewBodyRow(node);\r\n        columnsToExport.forEach((column: AgColumn, index: number) => {\r\n            rowAccumulator.onColumn(column, index, node);\r\n        });\r\n\r\n        if (params.getCustomContentBelowRow) {\r\n            const content = params.getCustomContentBelowRow(this.gos.addGridCommonParams({ node }));\r\n            if (content) {\r\n                gridSerializingSession.addCustomContent(content);\r\n            }\r\n        }\r\n    }\r\n\r\n    private appendContent<T>(\r\n        params: ExportParams<T>\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession: GridSerializingSession<T>) => {\r\n            const appendContent = params.appendContent;\r\n            if (appendContent) {\r\n                gridSerializingSession.addCustomContent(appendContent);\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private prependContent<T>(\r\n        params: ExportParams<T>\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession: GridSerializingSession<T>) => {\r\n            const prependContent = params.prependContent;\r\n            if (prependContent) {\r\n                gridSerializingSession.addCustomContent(prependContent);\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private prepareSession<T>(\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            gridSerializingSession.prepare(columnsToExport);\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private exportColumnGroups<T>(\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            if (!params.skipColumnGroupHeaders) {\r\n                const idCreator: GroupInstanceIdCreator = new GroupInstanceIdCreator();\r\n                const { colGroupSvc } = this.beans;\r\n                const displayedGroups: (AgColumn | AgColumnGroup)[] = colGroupSvc\r\n                    ? colGroupSvc.createColumnGroups({\r\n                          columns: columnsToExport,\r\n                          idCreator,\r\n                          pinned: null,\r\n                          isStandaloneStructure: true,\r\n                      })\r\n                    : columnsToExport;\r\n\r\n                this.recursivelyAddHeaderGroups(\r\n                    displayedGroups,\r\n                    gridSerializingSession,\r\n                    params.processGroupHeaderCallback\r\n                );\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private exportHeaders<T>(\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            if (!params.skipColumnHeaders) {\r\n                const gridRowIterator = gridSerializingSession.onNewHeaderRow();\r\n                columnsToExport.forEach((column, index) => {\r\n                    gridRowIterator.onColumn(column, index, undefined);\r\n                });\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private processPinnedTopRows<T>(\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\r\n\r\n            if (params.rowPositions) {\r\n                params.rowPositions\r\n                    // only pinnedTop rows, other models are processed by `processRows` and `processPinnedBottomsRows`\r\n                    .filter((position) => position.rowPinned === 'top')\r\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\r\n                    .map((position) => this.pinnedRowModel?.getPinnedTopRow(position.rowIndex))\r\n                    .forEach(processRow);\r\n            } else {\r\n                this.pinnedRowModel?.forEachPinnedRow('top', processRow);\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private processRows<T>(\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            // when in pivot mode, we always render cols on screen, never 'all columns'\r\n            const rowModel = this.rowModel;\r\n            const usingCsrm = _isClientSideRowModel(this.gos, rowModel);\r\n            const usingSsrm = _isServerSideRowModel(this.gos, rowModel);\r\n            const onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\r\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\r\n            const { exportedRows = 'filteredAndSorted' } = params;\r\n\r\n            if (params.rowPositions) {\r\n                params.rowPositions\r\n                    // pinnedRows are processed by `processPinnedTopRows` and `processPinnedBottomsRows`\r\n                    .filter((position) => position.rowPinned == null)\r\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\r\n                    .map((position) => rowModel.getRow(position.rowIndex))\r\n                    .forEach(processRow);\r\n\r\n                return gridSerializingSession;\r\n            }\r\n\r\n            if (this.colModel.isPivotMode()) {\r\n                if (usingCsrm) {\r\n                    rowModel.forEachPivotNode(processRow, true);\r\n                } else if (usingSsrm) {\r\n                    rowModel.forEachNodeAfterFilterAndSort(processRow, true);\r\n                } else {\r\n                    // must be enterprise, so we can just loop through all the nodes\r\n                    rowModel.forEachNode(processRow);\r\n                }\r\n\r\n                return gridSerializingSession;\r\n            }\r\n\r\n            // onlySelectedAllPages: user doing pagination and wants selected items from\r\n            // other pages, so cannot use the standard row model as it won't have rows from\r\n            // other pages.\r\n            // onlySelectedNonStandardModel: if user wants selected in non standard row model\r\n            // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\r\n            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\r\n                const selectedNodes = this.beans.selectionSvc?.getSelectedNodes() ?? [];\r\n                this.replicateSortedOrder(selectedNodes);\r\n                // serialize each node\r\n                selectedNodes.forEach(processRow);\r\n            } else {\r\n                // here is everything else - including standard row model and selected. we don't use\r\n                // the selection model even when just using selected, so that the result is the order\r\n                // of the rows appearing on the screen.\r\n                if (exportedRows === 'all') {\r\n                    rowModel.forEachNode(processRow);\r\n                } else if (usingCsrm || usingSsrm) {\r\n                    rowModel.forEachNodeAfterFilterAndSort(processRow, true);\r\n                } else {\r\n                    rowModel.forEachNode(processRow);\r\n                }\r\n            }\r\n\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private replicateSortedOrder(rows: RowNode[]) {\r\n        const { sortSvc, rowNodeSorter } = this.beans;\r\n        if (!sortSvc || !rowNodeSorter) {\r\n            return;\r\n        }\r\n        const sortOptions = sortSvc.getSortOptions();\r\n        const compareNodes = (rowA: RowNode, rowB: RowNode): number => {\r\n            if (rowA.rowIndex != null && rowB.rowIndex != null) {\r\n                // if the rows have rowIndexes, this is the easiest way to compare,\r\n                // as they're already ordered\r\n                return rowA.rowIndex - rowB.rowIndex;\r\n            }\r\n\r\n            // if the level is the same, compare these nodes, or their parents\r\n            if (rowA.level === rowB.level) {\r\n                if (rowA.parent?.id === rowB.parent?.id) {\r\n                    return rowNodeSorter!.compareRowNodes(\r\n                        sortOptions,\r\n                        {\r\n                            rowNode: rowA,\r\n                            currentPos: rowA.rowIndex ?? -1,\r\n                        },\r\n                        {\r\n                            rowNode: rowB,\r\n                            currentPos: rowB.rowIndex ?? -1,\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // level is same, but parent isn't, compare parents\r\n                return compareNodes(rowA.parent!, rowB.parent!);\r\n            }\r\n\r\n            // if level is different, match levels\r\n            if (rowA.level > rowB.level) {\r\n                return compareNodes(rowA.parent!, rowB);\r\n            }\r\n            return compareNodes(rowA, rowB.parent!);\r\n        };\r\n\r\n        // sort the nodes either by existing row index or compare them\r\n        rows.sort(compareNodes);\r\n    }\r\n\r\n    private processPinnedBottomRows<T>(\r\n        params: ExportParams<T>,\r\n        columnsToExport: AgColumn[]\r\n    ): (gridSerializingSession: GridSerializingSession<T>) => GridSerializingSession<T> {\r\n        return (gridSerializingSession) => {\r\n            const processRow = this.processRow.bind(this, gridSerializingSession, params, columnsToExport);\r\n            if (params.rowPositions) {\r\n                params.rowPositions\r\n                    // only pinnedBottom rows, other models are processed by `processRows` and `processPinnedTopRows`\r\n                    .filter((position) => position.rowPinned === 'bottom')\r\n                    .sort((a, b) => a.rowIndex - b.rowIndex)\r\n                    .map((position) => this.pinnedRowModel?.getPinnedBottomRow(position.rowIndex))\r\n                    .forEach(processRow);\r\n            } else {\r\n                this.pinnedRowModel?.forEachPinnedRow('bottom', processRow);\r\n            }\r\n            return gridSerializingSession;\r\n        };\r\n    }\r\n\r\n    private getColumnsToExport(\r\n        allColumns: boolean = false,\r\n        skipRowGroups: boolean = false,\r\n        columnKeys?: (string | AgColumn)[]\r\n    ): AgColumn[] {\r\n        const { colModel, gos, visibleCols } = this;\r\n        const isPivotMode = colModel.isPivotMode();\r\n\r\n        if (columnKeys && columnKeys.length) {\r\n            return colModel.getColsForKeys(columnKeys);\r\n        }\r\n\r\n        const isTreeData = gos.get('treeData');\r\n\r\n        let columnsToExport: AgColumn[] = [];\r\n\r\n        if (allColumns && !isPivotMode) {\r\n            columnsToExport = colModel.getCols();\r\n        } else {\r\n            columnsToExport = visibleCols.allCols;\r\n        }\r\n\r\n        columnsToExport = columnsToExport.filter(\r\n            (column) =>\r\n                !isColumnSelectionCol(column) && (skipRowGroups && !isTreeData ? !isColumnGroupAutoCol(column) : true)\r\n        );\r\n\r\n        return columnsToExport;\r\n    }\r\n\r\n    private recursivelyAddHeaderGroups<T>(\r\n        displayedGroups: (AgColumn | AgColumnGroup)[],\r\n        gridSerializingSession: GridSerializingSession<T>,\r\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\r\n    ): void {\r\n        const directChildrenHeaderGroups: (AgColumn | AgColumnGroup)[] = [];\r\n        displayedGroups.forEach((columnGroupChild) => {\r\n            const columnGroup = columnGroupChild as AgColumnGroup;\r\n            if (!columnGroup.getChildren) {\r\n                return;\r\n            }\r\n            columnGroup.getChildren()!.forEach((it) => directChildrenHeaderGroups.push(it));\r\n        });\r\n\r\n        if (displayedGroups.length > 0 && isColumnGroup(displayedGroups[0])) {\r\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\r\n        }\r\n\r\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\r\n            this.recursivelyAddHeaderGroups(\r\n                directChildrenHeaderGroups,\r\n                gridSerializingSession,\r\n                processGroupHeaderCallback\r\n            );\r\n        }\r\n    }\r\n\r\n    private doAddHeaderHeader<T>(\r\n        gridSerializingSession: GridSerializingSession<T>,\r\n        displayedGroups: (AgColumn | AgColumnGroup)[],\r\n        processGroupHeaderCallback: ProcessGroupHeaderCallback | undefined\r\n    ) {\r\n        const gridRowIterator: RowSpanningAccumulator = gridSerializingSession.onNewHeaderGroupingRow();\r\n        let columnIndex: number = 0;\r\n        displayedGroups.forEach((columnGroupChild) => {\r\n            const columnGroup: AgColumnGroup = columnGroupChild as AgColumnGroup;\r\n\r\n            let name: string;\r\n            if (processGroupHeaderCallback) {\r\n                name = processGroupHeaderCallback(\r\n                    this.gos.addGridCommonParams({\r\n                        columnGroup: columnGroup,\r\n                    })\r\n                );\r\n            } else {\r\n                name = this.beans.colNames.getDisplayNameForColumnGroup(columnGroup, 'header')!;\r\n            }\r\n\r\n            const collapsibleGroupRanges = columnGroup\r\n                .getLeafColumns()\r\n                .reduce((collapsibleGroups: number[][], currentColumn, currentIdx, arr) => {\r\n                    let lastGroup = _last(collapsibleGroups);\r\n                    const groupShow = currentColumn.getColumnGroupShow() === 'open';\r\n\r\n                    if (!groupShow) {\r\n                        if (lastGroup && lastGroup[1] == null) {\r\n                            lastGroup[1] = currentIdx - 1;\r\n                        }\r\n                    } else if (!lastGroup || lastGroup[1] != null) {\r\n                        lastGroup = [currentIdx];\r\n                        collapsibleGroups.push(lastGroup);\r\n                    }\r\n\r\n                    if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {\r\n                        lastGroup[1] = currentIdx;\r\n                    }\r\n\r\n                    return collapsibleGroups;\r\n                }, []);\r\n\r\n            gridRowIterator.onColumn(\r\n                columnGroup,\r\n                name || '',\r\n                columnIndex++,\r\n                columnGroup.getLeafColumns().length - 1,\r\n                collapsibleGroupRanges\r\n            );\r\n        });\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { GridSerializer } from './gridSerializer';\r\n\r\n// Shared CSV and Excel logic\r\n/**\r\n * @internal\r\n */\r\nexport const SharedExportModule: _ModuleWithoutApi = {\r\n    moduleName: 'SharedExport',\r\n    version: VERSION,\r\n    beans: [GridSerializer],\r\n};\r\n", "import type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { BaseGridSerializingSession } from '../export/baseGridSerializingSession';\r\nimport type { GridSerializingParams, RowAccumulator, RowSpanningAccumulator } from '../export/iGridSerializer';\r\nimport type { CsvCustomContent } from '../interfaces/exportParams';\r\nimport { _warn } from '../validation/logging';\r\n\r\nconst LINE_SEPARATOR = '\\r\\n';\r\n\r\ninterface CsvSerializingParams extends GridSerializingParams {\r\n    suppressQuotes: boolean;\r\n    columnSeparator: string;\r\n}\r\n\r\nexport class CsvSerializingSession extends BaseGridSerializingSession<CsvCustomContent> {\r\n    private isFirstLine = true;\r\n    private result: string = '';\r\n    private suppressQuotes: boolean;\r\n    private columnSeparator: string;\r\n\r\n    constructor(config: CsvSerializingParams) {\r\n        super(config);\r\n\r\n        const { suppressQuotes, columnSeparator } = config;\r\n\r\n        this.suppressQuotes = suppressQuotes;\r\n        this.columnSeparator = columnSeparator;\r\n    }\r\n\r\n    public addCustomContent(content: CsvCustomContent) {\r\n        if (!content) {\r\n            return;\r\n        }\r\n        if (typeof content === 'string') {\r\n            if (!/^\\s*\\n/.test(content)) {\r\n                this.beginNewLine();\r\n            }\r\n            // replace whatever newlines are supplied with the style we're using\r\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\r\n            this.result += content;\r\n        } else {\r\n            content.forEach((row) => {\r\n                this.beginNewLine();\r\n                row.forEach((cell, index) => {\r\n                    if (index !== 0) {\r\n                        this.result += this.columnSeparator;\r\n                    }\r\n                    this.result += this.putInQuotes(cell.data.value || '');\r\n                    if (cell.mergeAcross) {\r\n                        this.appendEmptyCells(cell.mergeAcross);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\r\n        this.beginNewLine();\r\n\r\n        return {\r\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this),\r\n        };\r\n    }\r\n\r\n    private onNewHeaderGroupingRowColumn(columnGroup: AgColumnGroup, header: string, index: number, span: number) {\r\n        if (index != 0) {\r\n            this.result += this.columnSeparator;\r\n        }\r\n\r\n        this.result += this.putInQuotes(header);\r\n\r\n        this.appendEmptyCells(span);\r\n    }\r\n\r\n    private appendEmptyCells(count: number) {\r\n        for (let i = 1; i <= count; i++) {\r\n            this.result += this.columnSeparator + this.putInQuotes('');\r\n        }\r\n    }\r\n\r\n    public onNewHeaderRow(): RowAccumulator {\r\n        this.beginNewLine();\r\n\r\n        return {\r\n            onColumn: this.onNewHeaderRowColumn.bind(this),\r\n        };\r\n    }\r\n\r\n    private onNewHeaderRowColumn(column: AgColumn, index: number): void {\r\n        if (index != 0) {\r\n            this.result += this.columnSeparator;\r\n        }\r\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\r\n    }\r\n\r\n    public onNewBodyRow(): RowAccumulator {\r\n        this.beginNewLine();\r\n\r\n        return {\r\n            onColumn: this.onNewBodyRowColumn.bind(this),\r\n        };\r\n    }\r\n\r\n    private onNewBodyRowColumn(column: AgColumn, index: number, node: RowNode): void {\r\n        if (index != 0) {\r\n            this.result += this.columnSeparator;\r\n        }\r\n        const rowCellValue = this.extractRowCellValue(column, index, index, 'csv', node);\r\n        this.result += this.putInQuotes(rowCellValue.valueFormatted ?? rowCellValue.value);\r\n    }\r\n\r\n    private putInQuotes(value: any): string {\r\n        if (this.suppressQuotes) {\r\n            return value;\r\n        }\r\n\r\n        if (value === null || value === undefined) {\r\n            return '\"\"';\r\n        }\r\n\r\n        let stringValue: string;\r\n        if (typeof value === 'string') {\r\n            stringValue = value;\r\n        } else if (typeof value.toString === 'function') {\r\n            stringValue = value.toString();\r\n        } else {\r\n            _warn(53);\r\n            stringValue = '';\r\n        }\r\n\r\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\r\n        const valueEscaped = stringValue.replace(/\"/g, '\"\"');\r\n\r\n        return '\"' + valueEscaped + '\"';\r\n    }\r\n\r\n    public parse(): string {\r\n        return this.result;\r\n    }\r\n\r\n    private beginNewLine() {\r\n        if (!this.isFirstLine) {\r\n            this.result += LINE_SEPARATOR;\r\n        }\r\n        this.isFirstLine = false;\r\n    }\r\n}\r\n", "import type { ColumnModel } from '../columns/columnModel';\r\nimport type { ColumnNameService } from '../columns/columnNameService';\r\nimport type { NamedBean } from '../context/bean';\r\nimport type { BeanCollection } from '../context/context';\r\nimport { BaseCreator } from '../export/baseCreator';\r\nimport { _downloadFile } from '../export/downloader';\r\nimport type { CsvCustomContent, CsvExportParams } from '../interfaces/exportParams';\r\nimport type { IColsService } from '../interfaces/iColsService';\r\nimport type { ICsvCreator } from '../interfaces/iCsvCreator';\r\nimport { _warn } from '../validation/logging';\r\nimport type { ValueService } from '../valueService/valueService';\r\nimport { CsvSerializingSession } from './csvSerializingSession';\r\n\r\nexport class CsvCreator\r\n    extends BaseCreator<CsvCustomContent, CsvSerializingSession, CsvExportParams>\r\n    implements NamedBean, ICsvCreator\r\n{\r\n    beanName = 'csvCreator' as const;\r\n\r\n    private colModel: ColumnModel;\r\n    private colNames: ColumnNameService;\r\n    private rowGroupColsSvc?: IColsService;\r\n    private valueSvc: ValueService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.colModel = beans.colModel;\r\n        this.colNames = beans.colNames;\r\n        this.rowGroupColsSvc = beans.rowGroupColsSvc;\r\n        this.valueSvc = beans.valueSvc;\r\n    }\r\n\r\n    protected getMergedParams(params?: CsvExportParams): CsvExportParams {\r\n        const baseParams = this.gos.get('defaultCsvExportParams');\r\n        return Object.assign({}, baseParams, params);\r\n    }\r\n\r\n    protected export(userParams?: CsvExportParams): void {\r\n        if (this.isExportSuppressed()) {\r\n            // Export cancelled.\r\n            _warn(51);\r\n            return;\r\n        }\r\n\r\n        const mergedParams = this.getMergedParams(userParams);\r\n        const data = this.getData(mergedParams);\r\n\r\n        const packagedFile = new Blob(['\\ufeff', data], { type: 'text/plain' });\r\n\r\n        const fileName =\r\n            typeof mergedParams.fileName === 'function'\r\n                ? mergedParams.fileName(this.gos.getGridCommonParams())\r\n                : mergedParams.fileName;\r\n\r\n        _downloadFile(this.getFileName(fileName), packagedFile);\r\n    }\r\n\r\n    public exportDataAsCsv(params?: CsvExportParams): void {\r\n        this.export(params);\r\n    }\r\n\r\n    public getDataAsCsv(params?: CsvExportParams, skipDefaultParams = false): string {\r\n        const mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);\r\n\r\n        return this.getData(mergedParams);\r\n    }\r\n\r\n    public getDefaultFileExtension(): string {\r\n        return 'csv';\r\n    }\r\n\r\n    public createSerializingSession(params?: CsvExportParams): CsvSerializingSession {\r\n        const { colModel, colNames, rowGroupColsSvc, valueSvc, gos } = this;\r\n        const {\r\n            processCellCallback,\r\n            processHeaderCallback,\r\n            processGroupHeaderCallback,\r\n            processRowGroupCallback,\r\n            suppressQuotes,\r\n            columnSeparator,\r\n        } = params!;\r\n\r\n        return new CsvSerializingSession({\r\n            colModel,\r\n            colNames,\r\n            valueSvc,\r\n            gos,\r\n            processCellCallback: processCellCallback || undefined,\r\n            processHeaderCallback: processHeaderCallback || undefined,\r\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\r\n            processRowGroupCallback: processRowGroupCallback || undefined,\r\n            suppressQuotes: suppressQuotes || false,\r\n            columnSeparator: columnSeparator || ',',\r\n            rowGroupColsSvc,\r\n        });\r\n    }\r\n\r\n    public isExportSuppressed(): boolean {\r\n        return this.gos.get('suppressCsvExport');\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { CsvExportParams } from '../interfaces/exportParams';\r\n\r\nexport function getDataAsCsv(beans: BeanCollection, params?: CsvExportParams): string | undefined {\r\n    return beans.csvCreator?.getDataAsCsv(params);\r\n}\r\n\r\nexport function exportDataAsCsv(beans: BeanCollection, params?: CsvExportParams): void {\r\n    beans.csvCreator?.exportDataAsCsv(params);\r\n}\r\n", "import type { _CsvExportGridApi } from '../api/gridApi';\r\nimport { SharedExportModule } from '../export/exportModule';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { CsvCreator } from './csvCreator';\r\nimport { exportDataAsCsv, getDataAsCsv } from './csvExportApi';\r\n\r\n/**\r\n * @feature Import & Export -> CSV Export\r\n */\r\nexport const CsvExportModule: _ModuleWithApi<_CsvExportGridApi> = {\r\n    moduleName: 'CsvExport',\r\n    version: VERSION,\r\n    beans: [CsvCreator],\r\n    apiFunctions: {\r\n        getDataAsCsv,\r\n        exportDataAsCsv,\r\n    },\r\n    dependsOn: [SharedExportModule],\r\n};\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport { RowNode } from '../entities/rowNode';\r\nimport type { IGetRowsParams } from '../interfaces/iDatasource';\r\nimport type { LoadSuccessParams } from '../interfaces/iServerSideRowModel';\r\nimport { _exists, _missing } from '../utils/generic';\r\nimport { _warn } from '../validation/logging';\r\nimport type { InfiniteCache, InfiniteCacheParams } from './infiniteCache';\r\n\r\ntype RowNodeBlockState = 'needsLoading' | 'loading' | 'loaded' | 'failed';\r\n\r\nexport type RowNodeBlockEvent = 'loadComplete';\r\n\r\nexport class InfiniteBlock extends BeanStub<RowNodeBlockEvent> {\r\n    public state: RowNodeBlockState = 'needsLoading';\r\n    public version = 0;\r\n\r\n    public readonly startRow: number;\r\n    public readonly endRow: number;\r\n\r\n    public lastAccessed: number;\r\n\r\n    public rowNodes: RowNode[];\r\n\r\n    constructor(\r\n        public readonly id: number,\r\n        private readonly parentCache: InfiniteCache,\r\n        private readonly params: InfiniteCacheParams\r\n    ) {\r\n        super();\r\n\r\n        // we don't need to calculate these now, as the inputs don't change,\r\n        // however it makes the code easier to read if we work them out up front\r\n        this.startRow = id * params.blockSize!;\r\n        this.endRow = this.startRow + params.blockSize!;\r\n    }\r\n\r\n    public load(): void {\r\n        this.state = 'loading';\r\n        this.loadFromDatasource();\r\n    }\r\n\r\n    public setStateWaitingToLoad(): void {\r\n        // in case any current loads in progress, this will have their results ignored\r\n        this.version++;\r\n        this.state = 'needsLoading';\r\n    }\r\n\r\n    private pageLoadFailed(version: number) {\r\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\r\n        if (requestMostRecentAndLive) {\r\n            this.state = 'failed';\r\n        }\r\n\r\n        this.dispatchLocalEvent({ type: 'loadComplete' });\r\n    }\r\n\r\n    private pageLoaded(version: number, rows: any[], lastRow: number) {\r\n        this.successCommon(version, { rowData: rows, rowCount: lastRow });\r\n    }\r\n\r\n    private isRequestMostRecentAndLive(version: number): boolean {\r\n        // thisIsMostRecentRequest - if block was refreshed, then another request\r\n        // could of been sent after this one.\r\n        const thisIsMostRecentRequest = version === this.version;\r\n\r\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\r\n        // and new blocks created. so data loads of old blocks are discarded.\r\n        const weAreNotDestroyed = this.isAlive();\r\n\r\n        return thisIsMostRecentRequest && weAreNotDestroyed;\r\n    }\r\n\r\n    private successCommon(version: number, params: LoadSuccessParams) {\r\n        // need to dispatch load complete before processing the data, as PaginationComp checks\r\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\r\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\r\n        this.dispatchLocalEvent({ type: 'loadComplete' });\r\n\r\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\r\n\r\n        if (requestMostRecentAndLive) {\r\n            this.state = 'loaded';\r\n            this.processServerResult(params);\r\n        }\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        // creates empty row nodes, data is missing as not loaded yet\r\n        this.rowNodes = [];\r\n        const {\r\n            params: { blockSize, rowHeight },\r\n            startRow,\r\n            beans,\r\n            rowNodes,\r\n        } = this;\r\n        for (let i = 0; i < blockSize!; i++) {\r\n            const rowIndex = startRow + i;\r\n\r\n            const rowNode = new RowNode(beans);\r\n\r\n            rowNode.setRowHeight(rowHeight);\r\n            rowNode.uiLevel = 0;\r\n            rowNode.setRowIndex(rowIndex);\r\n            rowNode.setRowTop(rowHeight * rowIndex);\r\n\r\n            rowNodes.push(rowNode);\r\n        }\r\n    }\r\n\r\n    public getBlockStateJson(): { id: string; state: any } {\r\n        const { id, startRow, endRow, state: pageStatus } = this;\r\n        return {\r\n            id: '' + id,\r\n            state: {\r\n                blockNumber: id,\r\n                startRow,\r\n                endRow,\r\n                pageStatus,\r\n            },\r\n        };\r\n    }\r\n\r\n    private setDataAndId(rowNode: RowNode, data: any, index: number): void {\r\n        if (_exists(data)) {\r\n            // this means if the user is not providing id's we just use the\r\n            // index for the row. this will allow selection to work (that is based\r\n            // on index) as long user is not inserting or deleting rows,\r\n            // or wanting to keep selection between server side sorting or filtering\r\n            rowNode.setDataAndId(data, index.toString());\r\n        } else {\r\n            rowNode.setDataAndId(undefined, undefined);\r\n        }\r\n    }\r\n\r\n    private loadFromDatasource(): void {\r\n        const params = this.createLoadParams();\r\n        if (_missing(this.params.datasource.getRows)) {\r\n            _warn(90);\r\n            return;\r\n        }\r\n\r\n        // put in timeout, to force result to be async\r\n        window.setTimeout(() => {\r\n            this.params.datasource.getRows(params);\r\n        }, 0);\r\n    }\r\n\r\n    private createLoadParams(): any {\r\n        const {\r\n            startRow,\r\n            endRow,\r\n            version,\r\n            params: { sortModel, filterModel },\r\n            gos,\r\n        } = this;\r\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\r\n        // is executing before the sort is set up, so server is not getting the sort\r\n        // model. need to change with regards order - so the server side request is\r\n        // AFTER thus it gets the right sort model.\r\n        const params: IGetRowsParams = {\r\n            startRow,\r\n            endRow,\r\n            successCallback: this.pageLoaded.bind(this, version),\r\n            failCallback: this.pageLoadFailed.bind(this, version),\r\n            sortModel,\r\n            filterModel,\r\n            context: gos.getGridCommonParams().context,\r\n        };\r\n        return params;\r\n    }\r\n\r\n    public forEachNode(\r\n        callback: (rowNode: RowNode, index: number) => void,\r\n        sequence: { value: number },\r\n        rowCount: number\r\n    ): void {\r\n        this.rowNodes.forEach((rowNode: RowNode, index: number) => {\r\n            const rowIndex = this.startRow + index;\r\n            if (rowIndex < rowCount) {\r\n                callback(rowNode, sequence.value++);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getRow(rowIndex: number, dontTouchLastAccessed = false): RowNode {\r\n        if (!dontTouchLastAccessed) {\r\n            this.lastAccessed = this.params.lastAccessedSequence.value++;\r\n        }\r\n        const localIndex = rowIndex - this.startRow;\r\n        return this.rowNodes[localIndex];\r\n    }\r\n\r\n    private processServerResult(params: LoadSuccessParams): void {\r\n        const { rowNodes, beans } = this;\r\n        rowNodes.forEach((rowNode: RowNode, index: number) => {\r\n            const data = params.rowData ? params.rowData[index] : undefined;\r\n\r\n            if (!rowNode.id && rowNode.alreadyRendered && data) {\r\n                // if the node had no id and was rendered, but we have data for it now, then\r\n                // destroy the old row and copy its position into new row. This prevents an additional\r\n                // set of events being fired as the row renderer tries to understand the changing id\r\n                rowNodes[index] = new RowNode(beans);\r\n                rowNodes[index].setRowIndex(rowNode.rowIndex!);\r\n                rowNodes[index].setRowTop(rowNode.rowTop!);\r\n                rowNodes[index].setRowHeight(rowNode.rowHeight!);\r\n\r\n                // clean up the old row\r\n                rowNode.clearRowTopAndRowIndex();\r\n            }\r\n            this.setDataAndId(rowNodes[index], data, this.startRow + index);\r\n        });\r\n        const finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\r\n        this.parentCache.pageLoaded(this, finalRowCount);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.rowNodes.forEach((rowNode) => {\r\n            // this is needed, so row render knows to fade out the row, otherwise it\r\n            // sees row top is present, and thinks the row should be shown.\r\n            rowNode.clearRowTopAndRowIndex();\r\n        });\r\n        super.destroy();\r\n    }\r\n}\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { IDatasource } from '../interfaces/iDatasource';\r\nimport type { SortModelItem } from '../interfaces/iSortModelItem';\r\nimport { _logIfDebug } from '../utils/function';\r\nimport { _exists } from '../utils/generic';\r\nimport { InfiniteBlock } from './infiniteBlock';\r\nimport type { RowNodeBlockLoader } from './rowNodeBlockLoader';\r\n\r\nexport interface InfiniteCacheParams {\r\n    datasource: IDatasource;\r\n    initialRowCount: number;\r\n    blockSize?: number;\r\n    overflowSize: number;\r\n    sortModel: SortModelItem[];\r\n    filterModel: any;\r\n    maxBlocksInCache?: number;\r\n    rowHeight: number;\r\n    lastAccessedSequence: { value: number };\r\n    rowNodeBlockLoader?: RowNodeBlockLoader;\r\n    dynamicRowHeight: boolean;\r\n}\r\n\r\n// this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10\r\n// blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly\r\n// scrolled over are not needed to be loaded.\r\nconst MAX_EMPTY_BLOCKS_TO_KEEP = 2;\r\n\r\nexport class InfiniteCache extends BeanStub {\r\n    private rowCount: number;\r\n    private lastRowIndexKnown = false;\r\n\r\n    private blocks: { [blockNumber: string]: InfiniteBlock } = {};\r\n    private blockCount = 0;\r\n\r\n    constructor(private readonly params: InfiniteCacheParams) {\r\n        super();\r\n        this.rowCount = params.initialRowCount;\r\n    }\r\n\r\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\r\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\r\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\r\n    public getRow(rowIndex: number, dontCreatePage = false): RowNode | undefined {\r\n        const blockId = Math.floor(rowIndex / this.params.blockSize!);\r\n        let block = this.blocks[blockId];\r\n\r\n        if (!block) {\r\n            if (dontCreatePage) {\r\n                return undefined;\r\n            }\r\n            block = this.createBlock(blockId);\r\n        }\r\n\r\n        return block.getRow(rowIndex);\r\n    }\r\n\r\n    private createBlock(blockNumber: number): InfiniteBlock {\r\n        const params = this.params;\r\n        const newBlock = this.createBean(new InfiniteBlock(blockNumber, this, params));\r\n\r\n        this.blocks[newBlock.id] = newBlock;\r\n        this.blockCount++;\r\n\r\n        this.purgeBlocksIfNeeded(newBlock);\r\n\r\n        params.rowNodeBlockLoader!.addBlock(newBlock);\r\n\r\n        return newBlock;\r\n    }\r\n\r\n    // we have this on infinite row model only, not server side row model,\r\n    // because for server side, it would leave the children in inconsistent\r\n    // state - eg if a node had children, but after the refresh it had data\r\n    // for a different row, then the children would be with the wrong row node.\r\n    public refreshCache(): void {\r\n        const nothingToRefresh = this.blockCount == 0;\r\n        if (nothingToRefresh) {\r\n            this.purgeCache();\r\n            return;\r\n        }\r\n\r\n        this.getBlocksInOrder().forEach((block) => block.setStateWaitingToLoad());\r\n        this.params.rowNodeBlockLoader!.checkBlockToLoad();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.getBlocksInOrder().forEach((block) => this.destroyBlock(block));\r\n        super.destroy();\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        return this.rowCount;\r\n    }\r\n\r\n    public isLastRowIndexKnown(): boolean {\r\n        return this.lastRowIndexKnown;\r\n    }\r\n\r\n    // block calls this, when page loaded\r\n    public pageLoaded(block: InfiniteBlock, lastRow?: number): void {\r\n        // if we are not active, then we ignore all events, otherwise we could end up getting the\r\n        // grid to refresh even though we are no longer the active cache\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n\r\n        _logIfDebug(this.gos, `InfiniteCache - onPageLoaded: page = ${block.id}, lastRow = ${lastRow}`);\r\n\r\n        this.checkRowCount(block, lastRow);\r\n        // we fire cacheUpdated even if the row count has not changed, as some items need updating even\r\n        // if no new rows to render. for example the pagination panel has '?' as the total rows when loading\r\n        // is underway, which would need to get updated when loading finishes.\r\n        this.onCacheUpdated();\r\n    }\r\n\r\n    private purgeBlocksIfNeeded(blockToExclude: InfiniteBlock): void {\r\n        // we exclude checking for the page just created, as this has yet to be accessed and hence\r\n        // the lastAccessed stamp will not be updated for the first time yet\r\n        const blocksForPurging = this.getBlocksInOrder().filter((b) => b != blockToExclude);\r\n        const lastAccessedComparator = (a: InfiniteBlock, b: InfiniteBlock) => b.lastAccessed - a.lastAccessed;\r\n        blocksForPurging.sort(lastAccessedComparator);\r\n\r\n        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.\r\n        // in other words, after the splice operation below, we have taken out the blocks\r\n        // we want to keep, which means we are left with blocks that we can potentially purge\r\n        const maxBlocksProvided = this.params.maxBlocksInCache! > 0;\r\n        const blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache! - 1 : null;\r\n        const emptyBlocksToKeep = MAX_EMPTY_BLOCKS_TO_KEEP - 1;\r\n\r\n        blocksForPurging.forEach((block: InfiniteBlock, index: number) => {\r\n            const purgeBecauseBlockEmpty = block.state === 'needsLoading' && index >= emptyBlocksToKeep;\r\n\r\n            const purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep! : false;\r\n\r\n            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {\r\n                // if the block currently has rows been displayed, then don't remove it either.\r\n                // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)\r\n                // but the screen is showing 20 rows, so at least 4 blocks are needed.\r\n                if (this.isBlockCurrentlyDisplayed(block)) {\r\n                    return;\r\n                }\r\n\r\n                // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.\r\n                if (this.isBlockFocused(block)) {\r\n                    return;\r\n                }\r\n\r\n                // at this point, block is not needed, so burn baby burn\r\n                this.removeBlockFromCache(block);\r\n            }\r\n        });\r\n    }\r\n\r\n    private isBlockFocused(block: InfiniteBlock): boolean {\r\n        const focusedCell = this.beans.focusSvc.getFocusCellToUseAfterRefresh();\r\n        if (!focusedCell) {\r\n            return false;\r\n        }\r\n        if (focusedCell.rowPinned != null) {\r\n            return false;\r\n        }\r\n\r\n        const { startRow, endRow } = block;\r\n\r\n        const hasFocus = focusedCell.rowIndex >= startRow && focusedCell.rowIndex < endRow;\r\n        return hasFocus;\r\n    }\r\n\r\n    private isBlockCurrentlyDisplayed(block: InfiniteBlock): boolean {\r\n        const { startRow, endRow } = block;\r\n        return this.beans.rowRenderer.isRangeInRenderedViewport(startRow, endRow - 1);\r\n    }\r\n\r\n    private removeBlockFromCache(blockToRemove: InfiniteBlock): void {\r\n        if (!blockToRemove) {\r\n            return;\r\n        }\r\n\r\n        this.destroyBlock(blockToRemove);\r\n\r\n        // we do not want to remove the 'loaded' event listener, as the\r\n        // concurrent loads count needs to be updated when the load is complete\r\n        // if the purged page is in loading state\r\n    }\r\n\r\n    private checkRowCount(block: InfiniteBlock, lastRow?: number): void {\r\n        // if client provided a last row, we always use it, as it could change between server calls\r\n        // if user deleted data and then called refresh on the grid.\r\n        if (typeof lastRow === 'number' && lastRow >= 0) {\r\n            this.rowCount = lastRow;\r\n            this.lastRowIndexKnown = true;\r\n        } else if (!this.lastRowIndexKnown) {\r\n            const { blockSize, overflowSize } = this.params;\r\n            // otherwise, see if we need to add some virtual rows\r\n            const lastRowIndex = (block.id + 1) * blockSize!;\r\n            const lastRowIndexPlusOverflow = lastRowIndex + overflowSize;\r\n\r\n            if (this.rowCount < lastRowIndexPlusOverflow) {\r\n                this.rowCount = lastRowIndexPlusOverflow;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\r\n        this.rowCount = rowCount;\r\n\r\n        // if undefined is passed, we do not set this value, if one of {true,false}\r\n        // is passed, we do set the value.\r\n        if (_exists(lastRowIndexKnown)) {\r\n            this.lastRowIndexKnown = lastRowIndexKnown;\r\n        }\r\n\r\n        // if we are still searching, then the row count must not end at the end\r\n        // of a particular page, otherwise the searching will not pop into the\r\n        // next page\r\n        if (!this.lastRowIndexKnown) {\r\n            if (this.rowCount % this.params.blockSize! === 0) {\r\n                this.rowCount++;\r\n            }\r\n        }\r\n\r\n        this.onCacheUpdated();\r\n    }\r\n\r\n    public forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void): void {\r\n        const sequence = { value: 0 };\r\n        this.getBlocksInOrder().forEach((block) => block.forEachNode(callback, sequence, this.rowCount));\r\n    }\r\n\r\n    public getBlocksInOrder(): InfiniteBlock[] {\r\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\r\n        const blockComparator = (a: InfiniteBlock, b: InfiniteBlock) => a.id - b.id;\r\n        const blocks = Object.values(this.blocks).sort(blockComparator);\r\n        return blocks;\r\n    }\r\n\r\n    private destroyBlock(block: InfiniteBlock): void {\r\n        delete this.blocks[block.id];\r\n        this.destroyBean(block);\r\n        this.blockCount--;\r\n        this.params.rowNodeBlockLoader!.removeBlock(block);\r\n    }\r\n\r\n    // gets called 1) row count changed 2) cache purged 3) items inserted\r\n    private onCacheUpdated(): void {\r\n        if (this.isAlive()) {\r\n            // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer\r\n            // in the valid range. so we must remove these. this can happen if user explicitly sets\r\n            // the virtual row count, or the datasource returns a result and sets lastRow to something\r\n            // less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).\r\n            this.destroyAllBlocksPastVirtualRowCount();\r\n\r\n            // this results in both row models (infinite and server side) firing ModelUpdated,\r\n            // however server side row model also updates the row indexes first\r\n            this.eventSvc.dispatchEvent({\r\n                type: 'storeUpdated',\r\n            });\r\n        }\r\n    }\r\n\r\n    private destroyAllBlocksPastVirtualRowCount(): void {\r\n        const blocksToDestroy: InfiniteBlock[] = [];\r\n        this.getBlocksInOrder().forEach((block) => {\r\n            const startRow = block.id * this.params.blockSize!;\r\n            if (startRow >= this.rowCount) {\r\n                blocksToDestroy.push(block);\r\n            }\r\n        });\r\n        if (blocksToDestroy.length > 0) {\r\n            blocksToDestroy.forEach((block) => this.destroyBlock(block));\r\n        }\r\n    }\r\n\r\n    public purgeCache(): void {\r\n        this.getBlocksInOrder().forEach((block) => this.removeBlockFromCache(block));\r\n        this.lastRowIndexKnown = false;\r\n        // if zero rows in the cache, we need to get the SSRM to start asking for rows again.\r\n        // otherwise if set to zero rows last time, and we don't update the row count, then after\r\n        // the purge there will still be zero rows, meaning the SSRM won't request any rows.\r\n        // to kick things off, at least one row needs to be asked for.\r\n        if (this.rowCount === 0) {\r\n            this.rowCount = this.params.initialRowCount;\r\n        }\r\n\r\n        this.onCacheUpdated();\r\n    }\r\n\r\n    public getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\r\n        const result: RowNode[] = [];\r\n\r\n        let lastBlockId = -1;\r\n        let inActiveRange = false;\r\n        const numberSequence = { value: 0 };\r\n\r\n        let foundGapInSelection = false;\r\n\r\n        this.getBlocksInOrder().forEach((block) => {\r\n            if (foundGapInSelection) {\r\n                return;\r\n            }\r\n\r\n            if (inActiveRange && lastBlockId + 1 !== block.id) {\r\n                foundGapInSelection = true;\r\n                return;\r\n            }\r\n\r\n            lastBlockId = block.id;\r\n\r\n            block.forEachNode(\r\n                (rowNode) => {\r\n                    const hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\r\n                    if (inActiveRange || hitFirstOrLast) {\r\n                        result.push(rowNode);\r\n                    }\r\n\r\n                    if (hitFirstOrLast) {\r\n                        inActiveRange = !inActiveRange;\r\n                    }\r\n                },\r\n                numberSequence,\r\n                this.rowCount\r\n            );\r\n        });\r\n\r\n        // inActiveRange will be still true if we never hit the second rowNode\r\n        const invalidRange = foundGapInSelection || inActiveRange;\r\n        return invalidRange ? [] : result;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport { _getRowHeightAsNumber, _getRowIdCallback } from '../gridOptionsUtils';\r\nimport type { IDatasource } from '../interfaces/iDatasource';\r\nimport type { IRowModel, RowBounds, RowModelType } from '../interfaces/iRowModel';\r\nimport { _jsonEquals } from '../utils/generic';\r\nimport type { InfiniteCacheParams } from './infiniteCache';\r\nimport { InfiniteCache } from './infiniteCache';\r\n\r\nexport class InfiniteRowModel extends BeanStub implements NamedBean, IRowModel {\r\n    beanName = 'rowModel' as const;\r\n\r\n    private infiniteCache: InfiniteCache | null | undefined;\r\n    private datasource: IDatasource | null | undefined;\r\n    private rowHeight: number;\r\n    private cacheParams: InfiniteCacheParams;\r\n\r\n    public getRowBounds(index: number): RowBounds {\r\n        return {\r\n            rowHeight: this.rowHeight,\r\n            rowTop: this.rowHeight * index,\r\n        };\r\n    }\r\n\r\n    // we don't implement as lazy row heights is not supported in this row model\r\n    public ensureRowHeightsValid(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        if (this.gos.get('rowModelType') !== 'infinite') {\r\n            return;\r\n        }\r\n\r\n        this.rowHeight = _getRowHeightAsNumber(this.beans);\r\n\r\n        this.addEventListeners();\r\n\r\n        this.addDestroyFunc(() => this.destroyCache());\r\n    }\r\n\r\n    public start(): void {\r\n        this.setDatasource(this.gos.get('datasource'));\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.destroyDatasource();\r\n        super.destroy();\r\n    }\r\n\r\n    private destroyDatasource(): void {\r\n        if (this.datasource) {\r\n            this.destroyBean(this.datasource);\r\n            this.beans.rowRenderer.datasourceChanged();\r\n            this.datasource = null;\r\n        }\r\n    }\r\n\r\n    private addEventListeners(): void {\r\n        this.addManagedEventListeners({\r\n            filterChanged: this.reset.bind(this),\r\n            sortChanged: this.reset.bind(this),\r\n            newColumnsLoaded: this.onColumnEverything.bind(this),\r\n            storeUpdated: this.dispatchModelUpdatedEvent.bind(this),\r\n        });\r\n\r\n        this.addManagedPropertyListener('datasource', () => this.setDatasource(this.gos.get('datasource')));\r\n        this.addManagedPropertyListener('cacheBlockSize', () => this.resetCache());\r\n        this.addManagedPropertyListener('rowHeight', () => {\r\n            this.rowHeight = _getRowHeightAsNumber(this.beans);\r\n            this.cacheParams.rowHeight = this.rowHeight;\r\n            this.updateRowHeights();\r\n        });\r\n    }\r\n\r\n    private onColumnEverything(): void {\r\n        let resetRequired;\r\n        // if cache params, we require reset only if sort model has changed. we don't need to check\r\n        // for filter model, as the filter manager will fire an event when columns change that result\r\n        // in the filter changing.\r\n        if (this.cacheParams) {\r\n            resetRequired = !_jsonEquals(this.cacheParams.sortModel, this.beans.sortSvc?.getSortModel() ?? []);\r\n        } else {\r\n            // if no cacheParams, means first time creating the cache, so always create one\r\n            resetRequired = true;\r\n        }\r\n        if (resetRequired) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public getType(): RowModelType {\r\n        return 'infinite';\r\n    }\r\n\r\n    public setDatasource(datasource: IDatasource | undefined): void {\r\n        this.destroyDatasource();\r\n        this.datasource = datasource;\r\n\r\n        // only reset if we have a valid datasource to working with\r\n        if (datasource) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return !this.infiniteCache;\r\n    }\r\n\r\n    public isRowsToRender(): boolean {\r\n        return !!this.infiniteCache;\r\n    }\r\n\r\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\r\n        return this.infiniteCache?.getRowNodesInRange(firstInRange, lastInRange) ?? [];\r\n    }\r\n\r\n    private reset() {\r\n        // important to return here, as the user could be setting filter or sort before\r\n        // data-source is set\r\n        if (!this.datasource) {\r\n            return;\r\n        }\r\n\r\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\r\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\r\n        // is done.\r\n        const getRowIdFunc = _getRowIdCallback(this.gos);\r\n        const userGeneratingIds = getRowIdFunc != null;\r\n\r\n        if (!userGeneratingIds) {\r\n            this.beans.selectionSvc?.reset('rowDataChanged');\r\n        }\r\n\r\n        this.resetCache();\r\n    }\r\n\r\n    private dispatchModelUpdatedEvent() {\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'modelUpdated',\r\n            // not sure if these should all be false - noticed if after implementing,\r\n            // maybe they should be true?\r\n            newPage: false,\r\n            newPageSize: false,\r\n            newData: false,\r\n            keepRenderedRows: true,\r\n            animate: false,\r\n        });\r\n    }\r\n\r\n    private resetCache(): void {\r\n        // if not first time creating a cache, need to destroy the old one\r\n        this.destroyCache();\r\n\r\n        const beans = this.beans;\r\n        const { filterManager, sortSvc, rowNodeBlockLoader, eventSvc, gos } = beans;\r\n\r\n        this.cacheParams = {\r\n            // the user provided datasource\r\n            datasource: this.datasource,\r\n\r\n            // sort and filter model\r\n            filterModel: filterManager?.getFilterModel() ?? {},\r\n            sortModel: sortSvc?.getSortModel() ?? [],\r\n\r\n            rowNodeBlockLoader: rowNodeBlockLoader,\r\n\r\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\r\n            // used next time we create a new cache, which is generally after a filter or sort change,\r\n            // or a new datasource is set\r\n            initialRowCount: gos.get('infiniteInitialRowCount'),\r\n            maxBlocksInCache: gos.get('maxBlocksInCache'),\r\n            rowHeight: _getRowHeightAsNumber(beans),\r\n\r\n            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\r\n            // the current page and request first row of next page\r\n            overflowSize: gos.get('cacheOverflowSize'),\r\n\r\n            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\r\n            // server for one page at a time. so the default if not specified is 100.\r\n            blockSize: gos.get('cacheBlockSize'),\r\n\r\n            // the cache could create this, however it is also used by the pages, so handy to create it\r\n            // here as the settings are also passed to the pages\r\n            lastAccessedSequence: { value: 0 },\r\n        } as InfiniteCacheParams;\r\n\r\n        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\r\n\r\n        eventSvc.dispatchEventOnce({\r\n            type: 'rowCountReady',\r\n        });\r\n\r\n        this.dispatchModelUpdatedEvent();\r\n    }\r\n\r\n    private updateRowHeights() {\r\n        this.forEachNode((node) => {\r\n            node.setRowHeight(this.rowHeight);\r\n            node.setRowTop(this.rowHeight * node.rowIndex!);\r\n        });\r\n\r\n        this.dispatchModelUpdatedEvent();\r\n    }\r\n\r\n    private destroyCache(): void {\r\n        this.infiniteCache = this.destroyBean(this.infiniteCache);\r\n    }\r\n\r\n    public getRow(rowIndex: number): RowNode | undefined {\r\n        const infiniteCache = this.infiniteCache;\r\n        if (!infiniteCache) {\r\n            return undefined;\r\n        }\r\n        if (rowIndex >= infiniteCache.getRowCount()) {\r\n            return undefined;\r\n        }\r\n        return infiniteCache.getRow(rowIndex);\r\n    }\r\n\r\n    public getRowNode(id: string): RowNode | undefined {\r\n        let result: RowNode | undefined;\r\n        this.forEachNode((rowNode) => {\r\n            if (rowNode.id === id) {\r\n                result = rowNode;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\r\n        this.infiniteCache?.forEachNodeDeep(callback);\r\n    }\r\n\r\n    public getTopLevelRowCount(): number {\r\n        return this.getRowCount();\r\n    }\r\n\r\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\r\n        return topLevelIndex;\r\n    }\r\n\r\n    public getRowIndexAtPixel(pixel: number): number {\r\n        if (this.rowHeight !== 0) {\r\n            // avoid divide by zero error\r\n            const rowIndexForPixel = Math.floor(pixel / this.rowHeight);\r\n            const lastRowIndex = this.getRowCount() - 1;\r\n            if (rowIndexForPixel > lastRowIndex) {\r\n                return lastRowIndex;\r\n            }\r\n            return rowIndexForPixel;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\r\n    }\r\n\r\n    public isRowPresent(rowNode: RowNode): boolean {\r\n        return !!this.getRowNode(rowNode.id!);\r\n    }\r\n\r\n    public refreshCache(): void {\r\n        this.infiniteCache?.refreshCache();\r\n    }\r\n\r\n    public purgeCache(): void {\r\n        this.infiniteCache?.purgeCache();\r\n    }\r\n\r\n    // for iRowModel\r\n    public isLastRowIndexKnown(): boolean {\r\n        return this.infiniteCache?.isLastRowIndexKnown() ?? false;\r\n    }\r\n\r\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\r\n        this.infiniteCache?.setRowCount(rowCount, lastRowIndexKnown);\r\n    }\r\n}\r\n", "import { _getInfiniteRowModel } from '../api/rowModelApiUtils';\r\nimport type { BeanCollection } from '../context/context';\r\n\r\nexport function refreshInfiniteCache(beans: BeanCollection): void {\r\n    _getInfiniteRowModel(beans)?.refreshCache();\r\n}\r\n\r\nexport function purgeInfiniteCache(beans: BeanCollection): void {\r\n    _getInfiniteRowModel(beans)?.purgeCache();\r\n}\r\n\r\nexport function getInfiniteRowCount(beans: BeanCollection): number | undefined {\r\n    return _getInfiniteRowModel(beans)?.getRowCount();\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { _getMaxConcurrentDatasourceRequests } from '../gridOptionsUtils';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport { _debounce, _logIfDebug } from '../utils/function';\r\nimport type { InfiniteBlock } from './infiniteBlock';\r\n\r\nexport type RowNodeBlockLoaderEvent = 'blockLoaded';\r\nexport class RowNodeBlockLoader extends BeanStub<RowNodeBlockLoaderEvent> implements NamedBean {\r\n    beanName = 'rowNodeBlockLoader' as const;\r\n\r\n    private maxConcurrentRequests: number | undefined;\r\n    private checkBlockToLoadDebounce: () => void;\r\n\r\n    private activeBlockLoadsCount = 0;\r\n    private blocks: InfiniteBlock[] = [];\r\n    private active = true;\r\n\r\n    public postConstruct(): void {\r\n        this.maxConcurrentRequests = _getMaxConcurrentDatasourceRequests(this.gos);\r\n        const blockLoadDebounceMillis = this.gos.get('blockLoadDebounceMillis');\r\n\r\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\r\n            this.checkBlockToLoadDebounce = _debounce(\r\n                this,\r\n                this.performCheckBlocksToLoad.bind(this),\r\n                blockLoadDebounceMillis\r\n            );\r\n        }\r\n    }\r\n\r\n    public addBlock(block: InfiniteBlock): void {\r\n        this.blocks.push(block);\r\n\r\n        // note that we do not remove this listener when removing the block. this is because the\r\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\r\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\r\n        block.addEventListener('loadComplete', this.loadComplete.bind(this));\r\n\r\n        this.checkBlockToLoad();\r\n    }\r\n\r\n    public removeBlock(block: InfiniteBlock): void {\r\n        _removeFromArray(this.blocks, block);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n        this.active = false;\r\n    }\r\n\r\n    private loadComplete(): void {\r\n        this.activeBlockLoadsCount--;\r\n        this.checkBlockToLoad();\r\n    }\r\n\r\n    public checkBlockToLoad(): void {\r\n        if (this.checkBlockToLoadDebounce) {\r\n            this.checkBlockToLoadDebounce();\r\n        } else {\r\n            this.performCheckBlocksToLoad();\r\n        }\r\n    }\r\n\r\n    private performCheckBlocksToLoad(): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n\r\n        this.printCacheStatus();\r\n\r\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\r\n            _logIfDebug(this.gos, `RowNodeBlockLoader - checkBlockToLoad: max loads exceeded`);\r\n            return;\r\n        }\r\n\r\n        const loadAvailability =\r\n            this.maxConcurrentRequests != null ? this.maxConcurrentRequests - this.activeBlockLoadsCount : 1;\r\n        const blocksToLoad: InfiniteBlock[] = this.blocks\r\n            .filter((block) => block.state === 'needsLoading')\r\n            .slice(0, loadAvailability);\r\n        this.activeBlockLoadsCount += blocksToLoad.length;\r\n        blocksToLoad.forEach((block) => block.load());\r\n        this.printCacheStatus();\r\n    }\r\n\r\n    public getBlockState() {\r\n        const result: { [key: string]: any } = {};\r\n        this.blocks.forEach((block: InfiniteBlock) => {\r\n            const { id, state } = block.getBlockStateJson();\r\n            result[id] = state;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private printCacheStatus(): void {\r\n        _logIfDebug(\r\n            this.gos,\r\n            `RowNodeBlockLoader - printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},` +\r\n                ` blocks = ${JSON.stringify(this.getBlockState())}`\r\n        );\r\n    }\r\n}\r\n", "import type { _InfiniteRowModelGridApi } from '../api/gridApi';\r\nimport { SsrmInfiniteSharedApiModule } from '../api/sharedApiModule';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { InfiniteRowModel } from './infiniteRowModel';\r\nimport { getInfiniteRowCount, purgeInfiniteCache, refreshInfiniteCache } from './infiniteRowModelApi';\r\nimport { RowNodeBlockLoader } from './rowNodeBlockLoader';\r\n\r\n/**\r\n * @feature Infinite Row Model\r\n */\r\nexport const InfiniteRowModelModule: _ModuleWithApi<_InfiniteRowModelGridApi> = {\r\n    moduleName: 'InfiniteRowModel',\r\n    version: VERSION,\r\n    rowModels: ['infinite'],\r\n    apiFunctions: {\r\n        refreshInfiniteCache,\r\n        purgeInfiniteCache,\r\n        getInfiniteRowCount,\r\n    },\r\n    beans: [InfiniteRowModel, RowNodeBlockLoader],\r\n    dependsOn: [SsrmInfiniteSharedApiModule],\r\n};\r\n", "import { _clearElement } from '../../utils/dom';\r\nimport { _exists } from '../../utils/generic';\r\nimport { Component } from '../../widgets/component';\r\nimport type { ICellRenderer } from './iCellRenderer';\r\n\r\nconst ARROW_UP = '\\u2191';\r\nconst ARROW_DOWN = '\\u2193';\r\n\r\nexport class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {\r\n    private lastValue: number;\r\n\r\n    private eValue: HTMLElement;\r\n    private eDelta: HTMLElement;\r\n\r\n    private refreshCount = 0;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement('span');\r\n        const delta = document.createElement('span');\r\n        delta.setAttribute('class', 'ag-value-change-delta');\r\n\r\n        const value = document.createElement('span');\r\n        value.setAttribute('class', 'ag-value-change-value');\r\n\r\n        template.appendChild(delta);\r\n        template.appendChild(value);\r\n\r\n        this.setTemplateFromElement(template);\r\n    }\r\n\r\n    public init(params: any): void {\r\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\r\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\r\n\r\n        this.refresh(params, true);\r\n    }\r\n\r\n    private showDelta(params: any, delta: number): void {\r\n        const absDelta = Math.abs(delta);\r\n        const valueFormatted = params.formatValue(absDelta);\r\n\r\n        const valueToUse = _exists(valueFormatted) ? valueFormatted : absDelta;\r\n\r\n        const deltaUp = delta >= 0;\r\n\r\n        const eDelta = this.eDelta;\r\n        if (deltaUp) {\r\n            eDelta.textContent = ARROW_UP + valueToUse;\r\n        } else {\r\n            // because negative, use ABS to remove sign\r\n            eDelta.textContent = ARROW_DOWN + valueToUse;\r\n        }\r\n\r\n        eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\r\n        eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\r\n    }\r\n\r\n    private setTimerToRemoveDelta(): void {\r\n        // the refreshCount makes sure that if the value updates again while\r\n        // the below timer is waiting, then the below timer will realise it\r\n        // is not the most recent and will not try to remove the delta value.\r\n        this.refreshCount++;\r\n        const refreshCountCopy = this.refreshCount;\r\n        this.beans.frameworkOverrides.wrapIncoming(() => {\r\n            window.setTimeout(() => {\r\n                if (refreshCountCopy === this.refreshCount) {\r\n                    this.hideDeltaValue();\r\n                }\r\n            }, 2000);\r\n        });\r\n    }\r\n\r\n    private hideDeltaValue(): void {\r\n        this.eValue.classList.remove('ag-value-change-value-highlight');\r\n        _clearElement(this.eDelta);\r\n    }\r\n\r\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\r\n        const { value, valueFormatted } = params;\r\n\r\n        const { eValue, lastValue, beans } = this;\r\n        if (value === lastValue) {\r\n            return false;\r\n        }\r\n\r\n        if (_exists(valueFormatted)) {\r\n            eValue.textContent = valueFormatted;\r\n        } else if (_exists(value)) {\r\n            eValue.textContent = value;\r\n        } else {\r\n            _clearElement(eValue);\r\n        }\r\n\r\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\r\n        // with regards processingFilterChange\r\n        if (beans.filterManager?.isSuppressFlashingCellsBecauseFiltering()) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof value === 'number' && typeof lastValue === 'number') {\r\n            const delta = value - lastValue;\r\n            this.showDelta(params, delta);\r\n        }\r\n\r\n        // highlight the current value, but only if it's not new, otherwise it\r\n        // would get highlighted first time the value is shown\r\n        if (lastValue) {\r\n            eValue.classList.add('ag-value-change-value-highlight');\r\n        }\r\n\r\n        if (!isInitialRender) {\r\n            this.setTimerToRemoveDelta();\r\n        }\r\n\r\n        this.lastValue = value;\r\n\r\n        return true;\r\n    }\r\n}\r\n", "export const animateSlideCellRendererCSS = /*css*/ `.ag-value-slide-out{opacity:1}:where(.ag-ltr) .ag-value-slide-out{margin-right:5px;transition:opacity 3s,margin-right 3s}:where(.ag-rtl) .ag-value-slide-out{margin-left:5px;transition:opacity 3s,margin-left 3s}:where(.ag-ltr,.ag-rtl) .ag-value-slide-out{transition-timing-function:linear}.ag-value-slide-out-end{opacity:0}:where(.ag-ltr) .ag-value-slide-out-end{margin-right:10px}:where(.ag-rtl) .ag-value-slide-out-end{margin-left:10px}`;\n", "import { _getDocument } from '../../gridOptionsUtils';\r\nimport { _clearElement } from '../../utils/dom';\r\nimport { _exists, _missing } from '../../utils/generic';\r\nimport { Component } from '../../widgets/component';\r\nimport { animateSlideCellRendererCSS } from './animateSlideCellRenderer.css-GENERATED';\r\nimport type { ICellRenderer } from './iCellRenderer';\r\n\r\nexport class AnimateSlideCellRenderer extends Component implements ICellRenderer {\r\n    private eCurrent: HTMLElement;\r\n    private ePrevious: HTMLElement | null;\r\n\r\n    private lastValue: any;\r\n\r\n    private refreshCount = 0;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement('span');\r\n        const slide = document.createElement('span');\r\n        slide.setAttribute('class', 'ag-value-slide-current');\r\n        template.appendChild(slide);\r\n\r\n        this.setTemplateFromElement(template);\r\n\r\n        this.eCurrent = this.queryForHtmlElement('.ag-value-slide-current');\r\n        this.registerCSS(animateSlideCellRendererCSS);\r\n    }\r\n\r\n    public init(params: any): void {\r\n        this.refresh(params, true);\r\n    }\r\n\r\n    public addSlideAnimation(): void {\r\n        this.refreshCount++;\r\n\r\n        // below we keep checking this, and stop working on the animation\r\n        // if it no longer matches - this means another animation has started\r\n        // and this one is stale.\r\n        const refreshCountCopy = this.refreshCount;\r\n\r\n        // if old animation, remove it\r\n        if (this.ePrevious) {\r\n            this.getGui().removeChild(this.ePrevious);\r\n        }\r\n\r\n        const { beans, eCurrent } = this;\r\n        const prevElement = _getDocument(beans).createElement('span');\r\n        prevElement.setAttribute('class', 'ag-value-slide-previous ag-value-slide-out');\r\n        this.ePrevious = prevElement;\r\n\r\n        prevElement.textContent = eCurrent.textContent;\r\n        this.getGui().insertBefore(prevElement, eCurrent);\r\n\r\n        // having timeout of 0 allows use to skip to the next css turn,\r\n        // so we know the previous css classes have been applied. so the\r\n        // complex set of setTimeout below creates the animation\r\n        beans.frameworkOverrides.wrapIncoming(() => {\r\n            window.setTimeout(() => {\r\n                if (refreshCountCopy !== this.refreshCount) {\r\n                    return;\r\n                }\r\n                this.ePrevious!.classList.add('ag-value-slide-out-end');\r\n            }, 50);\r\n\r\n            window.setTimeout(() => {\r\n                if (refreshCountCopy !== this.refreshCount) {\r\n                    return;\r\n                }\r\n                this.getGui().removeChild(this.ePrevious!);\r\n                this.ePrevious = null;\r\n            }, 3000);\r\n        });\r\n    }\r\n\r\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\r\n        let value = params.value;\r\n\r\n        if (_missing(value)) {\r\n            value = '';\r\n        }\r\n\r\n        if (value === this.lastValue) {\r\n            return false;\r\n        }\r\n\r\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\r\n        // with regards processingFilterChange\r\n        if (this.beans.filterManager?.isSuppressFlashingCellsBecauseFiltering()) {\r\n            return false;\r\n        }\r\n\r\n        if (!isInitialRender) {\r\n            this.addSlideAnimation();\r\n        }\r\n\r\n        this.lastValue = value;\r\n\r\n        const eCurrent = this.eCurrent;\r\n        if (_exists(params.valueFormatted)) {\r\n            eCurrent.textContent = params.valueFormatted;\r\n        } else if (_exists(params.value)) {\r\n            eCurrent.textContent = value;\r\n        } else {\r\n            _clearElement(eCurrent);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport { _createCellId } from '../../entities/positionUtils';\r\nimport type { FlashCellsEvent } from '../../events';\r\nimport type { FlashCellsParams } from '../../interfaces/iCellsParams';\r\nimport { _exists } from '../../utils/generic';\r\nimport type { CellCtrl } from './cellCtrl';\r\n\r\nexport class CellFlashService extends BeanStub implements NamedBean {\r\n    beanName = 'cellFlashSvc' as const;\r\n\r\n    public onFlashCells(cellCtrl: CellCtrl, event: FlashCellsEvent): void {\r\n        if (!cellCtrl.comp) {\r\n            return;\r\n        }\r\n        const cellId = _createCellId(cellCtrl.cellPosition);\r\n        const shouldFlash = event.cells[cellId];\r\n        if (shouldFlash) {\r\n            this.animateCell(cellCtrl, 'highlight');\r\n        }\r\n    }\r\n\r\n    public flashCell(cellCtrl: CellCtrl, delays?: Pick<FlashCellsParams, 'fadeDuration' | 'flashDuration'>): void {\r\n        this.animateCell(cellCtrl, 'data-changed', delays?.flashDuration, delays?.fadeDuration);\r\n    }\r\n\r\n    private animateCell(\r\n        cellCtrl: CellCtrl,\r\n        cssName: string,\r\n        flashDuration?: number | null,\r\n        fadeDuration?: number | null\r\n    ): void {\r\n        const cellComp = cellCtrl.comp;\r\n        if (!cellComp) {\r\n            return;\r\n        }\r\n        const { gos } = this;\r\n\r\n        if (!flashDuration) {\r\n            flashDuration = gos.get('cellFlashDuration');\r\n        }\r\n\r\n        if (flashDuration === 0) {\r\n            return;\r\n        }\r\n\r\n        if (!_exists(fadeDuration)) {\r\n            fadeDuration = gos.get('cellFadeDuration');\r\n        }\r\n\r\n        const fullName = `ag-cell-${cssName}`;\r\n        const animationFullName = `ag-cell-${cssName}-animation`;\r\n\r\n        // we want to highlight the cells, without any animation\r\n        cellComp.addOrRemoveCssClass(fullName, true);\r\n        cellComp.addOrRemoveCssClass(animationFullName, false);\r\n\r\n        const { eGui } = cellCtrl;\r\n\r\n        // then once that is applied, we remove the highlight with animation\r\n        this.beans.frameworkOverrides.wrapIncoming(() => {\r\n            window.setTimeout(() => {\r\n                if (!cellCtrl.isAlive()) {\r\n                    return;\r\n                }\r\n                cellComp.addOrRemoveCssClass(fullName, false);\r\n                cellComp.addOrRemoveCssClass(animationFullName, true);\r\n\r\n                eGui.style.transition = `background-color ${fadeDuration}ms`;\r\n                window.setTimeout(() => {\r\n                    if (!cellCtrl.isAlive()) {\r\n                        return;\r\n                    }\r\n                    // and then to leave things as we got them, we remove the animation\r\n                    cellComp.addOrRemoveCssClass(animationFullName, false);\r\n                    eGui.style.transition = '';\r\n                }, fadeDuration!);\r\n            }, flashDuration!);\r\n        });\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { FlashCellsParams } from '../../interfaces/iCellsParams';\r\n\r\nexport function flashCells<TData = any>(beans: BeanCollection, params: FlashCellsParams<TData> = {}): void {\r\n    const { cellFlashSvc } = beans;\r\n    if (!cellFlashSvc) {\r\n        return;\r\n    }\r\n    beans.frameworkOverrides.wrapIncoming(() => {\r\n        beans.rowRenderer\r\n            .getCellCtrls(params.rowNodes, params.columns as AgColumn[])\r\n            .forEach((cellCtrl) => cellFlashSvc.flashCell(cellCtrl, params));\r\n    });\r\n}\r\n", "import type { _HighlightChangesGridApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { AnimateShowChangeCellRenderer } from '../cellRenderers/animateShowChangeCellRenderer';\r\nimport { AnimateSlideCellRenderer } from '../cellRenderers/animateSlideCellRenderer';\r\nimport { CellFlashService } from './cellFlashService';\r\nimport { flashCells } from './highlightChangesApi';\r\n\r\n/**\r\n * @feature Cells -> Highlighting Changes\r\n * @colDef enableCellChangeFlash\r\n */\r\nexport const HighlightChangesModule: _ModuleWithApi<_HighlightChangesGridApi<any>> = {\r\n    moduleName: 'HighlightChanges',\r\n    version: VERSION,\r\n    beans: [CellFlashService],\r\n    userComponents: {\r\n        agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,\r\n        agAnimateSlideCellRenderer: AnimateSlideCellRenderer,\r\n    },\r\n    apiFunctions: {\r\n        flashCells,\r\n    },\r\n};\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { GridState } from '../../interfaces/gridState';\r\n\r\nexport function getState(beans: BeanCollection): GridState {\r\n    return beans.stateSvc?.getState() ?? {};\r\n}\r\n", "import type { GridState } from '../../interfaces/gridState';\r\n\r\nexport function migrateGridStateModel(state: GridState): GridState {\r\n    state = { ...state };\r\n    // The `version` field was introduced in v32.2.0, so anything without that\r\n    // field can be assumed to be compatible with v32.1.0\r\n    if (!state.version) {\r\n        state.version = '32.1.0';\r\n    }\r\n\r\n    switch (state.version) {\r\n        case '32.1.0':\r\n            state = migrateV32_1(state);\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\n/**\r\n * Copies `rangeSelection` (deprecated) to `cellSelection`, but doesn't remove the former\r\n * for backwards compatibility\r\n */\r\nfunction migrateV32_1(state: GridState): GridState {\r\n    state.cellSelection = jsonGet(state, 'rangeSelection');\r\n    return state;\r\n}\r\n\r\nfunction jsonGet(json: unknown, key: string): any {\r\n    if (json && typeof json === 'object') {\r\n        return (json as any)[key];\r\n    }\r\n}\r\n", "import { _applyColumnState, _getColumnState } from '../../columns/columnStateUtils';\r\nimport type { ColumnState, ColumnStateParams } from '../../columns/columnStateUtils';\r\nimport type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport { _isCellSelectionEnabled, _isClientSideRowModel } from '../../gridOptionsUtils';\r\nimport type { CellRange } from '../../interfaces/IRangeService';\r\nimport type {\r\n    AggregationColumnState,\r\n    AggregationState,\r\n    CellSelectionState,\r\n    ColumnGroupState,\r\n    ColumnOrderState,\r\n    ColumnPinningState,\r\n    ColumnSizeState,\r\n    ColumnSizingState,\r\n    ColumnVisibilityState,\r\n    FilterState,\r\n    FocusedCellState,\r\n    GridState,\r\n    PaginationState,\r\n    PivotState,\r\n    RowGroupExpansionState,\r\n    RowGroupState,\r\n    ScrollState,\r\n    SideBarState,\r\n    SortState,\r\n} from '../../interfaces/gridState';\r\nimport type { FilterModel } from '../../interfaces/iFilter';\r\nimport type { SortModelItem } from '../../interfaces/iSortModelItem';\r\nimport type { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from '../../interfaces/selectionState';\r\nimport { _debounce } from '../../utils/function';\r\nimport { _jsonEquals } from '../../utils/generic';\r\nimport { VERSION } from '../../version';\r\nimport { migrateGridStateModel } from './stateModelMigration';\r\n\r\nexport class StateService extends BeanStub implements NamedBean {\r\n    beanName = 'stateSvc' as const;\r\n\r\n    private updateRowGroupExpansionStateTimer: ReturnType<typeof setTimeout> | number = 0;\r\n\r\n    private isClientSideRowModel: boolean;\r\n    private cachedState: GridState;\r\n    private suppressEvents = true;\r\n    private queuedUpdateSources: Set<keyof GridState | 'gridInitializing'> = new Set();\r\n    private dispatchStateUpdateEventDebounced = _debounce(this, () => this.dispatchQueuedStateUpdateEvents(), 0);\r\n    // If user is doing a manual expand all node by node, we don't want to process one at a time.\r\n    // EVENT_ROW_GROUP_OPENED is already async, so no impact of making the state async here.\r\n    private onRowGroupOpenedDebounced = _debounce(\r\n        this,\r\n        () => {\r\n            this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\r\n        },\r\n        0\r\n    );\r\n    // similar to row expansion, want to debounce. However, selection is synchronous, so need to mark as stale in case `getState` is called.\r\n    private onRowSelectedDebounced = _debounce(\r\n        this,\r\n        () => {\r\n            this.staleStateKeys.delete('rowSelection');\r\n            this.updateCachedState('rowSelection', this.getRowSelectionState());\r\n        },\r\n        0\r\n    );\r\n    private columnStates?: ColumnState[];\r\n    private columnGroupStates?: { groupId: string; open: boolean | undefined }[];\r\n    private staleStateKeys: Set<keyof GridState> = new Set();\r\n\r\n    public postConstruct(): void {\r\n        this.isClientSideRowModel = _isClientSideRowModel(this.gos);\r\n\r\n        this.cachedState = this.getInitialState();\r\n        this.setCachedStateValue('version', VERSION);\r\n\r\n        const suppressEventsAndDispatchInitEvent = this.suppressEventsAndDispatchInitEvent.bind(this);\r\n\r\n        this.beans.ctrlsSvc.whenReady(this, () =>\r\n            suppressEventsAndDispatchInitEvent(() => this.setupStateOnGridReady())\r\n        );\r\n\r\n        const [newColumnsLoadedDestroyFunc, rowCountReadyDestroyFunc, firstDataRenderedDestroyFunc] =\r\n            this.addManagedEventListeners({\r\n                newColumnsLoaded: ({ source }) => {\r\n                    if (source === 'gridInitializing') {\r\n                        newColumnsLoadedDestroyFunc();\r\n                        suppressEventsAndDispatchInitEvent(() => this.setupStateOnColumnsInitialised());\r\n                    }\r\n                },\r\n                rowCountReady: () => {\r\n                    rowCountReadyDestroyFunc?.();\r\n                    suppressEventsAndDispatchInitEvent(() => this.setupStateOnRowCountReady());\r\n                },\r\n                firstDataRendered: () => {\r\n                    firstDataRenderedDestroyFunc?.();\r\n                    suppressEventsAndDispatchInitEvent(() => this.setupStateOnFirstDataRendered());\r\n                },\r\n            });\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        // Release memory\r\n        clearTimeout(this.updateRowGroupExpansionStateTimer);\r\n        this.queuedUpdateSources.clear();\r\n    }\r\n\r\n    private getInitialState(): GridState {\r\n        return migrateGridStateModel(this.gos.get('initialState') ?? {});\r\n    }\r\n\r\n    public getState(): GridState {\r\n        if (this.staleStateKeys.size) {\r\n            this.refreshStaleState();\r\n        }\r\n        return this.cachedState;\r\n    }\r\n\r\n    private setupStateOnGridReady(): void {\r\n        // sidebar reads the initial state itself, so don't need to set\r\n        const stateUpdater = () => this.updateCachedState('sideBar', this.getSideBarState());\r\n        stateUpdater();\r\n        this.addManagedEventListeners({\r\n            toolPanelVisibleChanged: stateUpdater,\r\n            sideBarUpdated: stateUpdater,\r\n        });\r\n    }\r\n\r\n    private setupStateOnColumnsInitialised(): void {\r\n        const initialState = this.getInitialState();\r\n        this.setColumnState(initialState);\r\n        this.setColumnGroupState(initialState);\r\n\r\n        this.updateColumnState([\r\n            'aggregation',\r\n            'columnOrder',\r\n            'columnPinning',\r\n            'columnSizing',\r\n            'columnVisibility',\r\n            'pivot',\r\n            'pivot',\r\n            'rowGroup',\r\n            'sort',\r\n        ]);\r\n        this.updateCachedState('columnGroup', this.getColumnGroupState());\r\n\r\n        const onUpdate = (state: keyof GridState) => () => this.updateColumnState([state]);\r\n        this.addManagedEventListeners({\r\n            columnValueChanged: onUpdate('aggregation'),\r\n            columnMoved: onUpdate('columnOrder'),\r\n            columnPinned: onUpdate('columnPinning'),\r\n            columnResized: onUpdate('columnSizing'),\r\n            columnVisible: onUpdate('columnVisibility'),\r\n            columnPivotChanged: onUpdate('pivot'),\r\n            columnPivotModeChanged: onUpdate('pivot'),\r\n            columnRowGroupChanged: onUpdate('rowGroup'),\r\n            sortChanged: onUpdate('sort'),\r\n            newColumnsLoaded: () =>\r\n                this.updateColumnState([\r\n                    'aggregation',\r\n                    'columnOrder',\r\n                    'columnPinning',\r\n                    'columnSizing',\r\n                    'columnVisibility',\r\n                    'pivot',\r\n                    'rowGroup',\r\n                    'sort',\r\n                ]),\r\n            columnGroupOpened: () => this.updateCachedState('columnGroup', this.getColumnGroupState()),\r\n        });\r\n    }\r\n\r\n    private setupStateOnRowCountReady(): void {\r\n        const {\r\n            filter: filterState,\r\n            rowGroupExpansion: rowGroupExpansionState,\r\n            rowSelection: rowSelectionState,\r\n            pagination: paginationState,\r\n        } = this.getInitialState();\r\n        if (filterState) {\r\n            this.setFilterState(filterState);\r\n        }\r\n        if (rowGroupExpansionState) {\r\n            this.setRowGroupExpansionState(rowGroupExpansionState);\r\n        }\r\n        if (rowSelectionState) {\r\n            this.setRowSelectionState(rowSelectionState);\r\n        }\r\n        if (paginationState) {\r\n            this.setPaginationState(paginationState);\r\n        }\r\n\r\n        const updateCachedState = this.updateCachedState.bind(this);\r\n        updateCachedState('filter', this.getFilterState());\r\n        updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\r\n        updateCachedState('rowSelection', this.getRowSelectionState());\r\n        updateCachedState('pagination', this.getPaginationState());\r\n\r\n        const updateRowGroupExpansionState = () => {\r\n            this.updateRowGroupExpansionStateTimer = 0;\r\n            updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\r\n        };\r\n\r\n        this.addManagedEventListeners({\r\n            filterChanged: () => updateCachedState('filter', this.getFilterState()),\r\n            rowGroupOpened: () => this.onRowGroupOpenedDebounced(),\r\n            expandOrCollapseAll: updateRowGroupExpansionState,\r\n            // `groupDefaultExpanded` updates expansion state without an expansion event\r\n            columnRowGroupChanged: updateRowGroupExpansionState,\r\n            rowDataUpdated: () => {\r\n                if (this.gos.get('groupDefaultExpanded') !== 0) {\r\n                    // once rows are loaded, they may be expanded, start the timer only once\r\n                    this.updateRowGroupExpansionStateTimer ||= setTimeout(updateRowGroupExpansionState);\r\n                }\r\n            },\r\n            selectionChanged: () => {\r\n                this.staleStateKeys.add('rowSelection');\r\n                this.onRowSelectedDebounced();\r\n            },\r\n            paginationChanged: (event) => {\r\n                if (event.newPage || event.newPageSize) {\r\n                    updateCachedState('pagination', this.getPaginationState());\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    private setupStateOnFirstDataRendered(): void {\r\n        const {\r\n            scroll: scrollState,\r\n            cellSelection: cellSelectionState,\r\n            focusedCell: focusedCellState,\r\n            columnOrder: columnOrderState,\r\n        } = this.getInitialState();\r\n        if (focusedCellState) {\r\n            this.setFocusedCellState(focusedCellState);\r\n        }\r\n        if (cellSelectionState) {\r\n            this.setCellSelectionState(cellSelectionState);\r\n        }\r\n        if (scrollState) {\r\n            this.setScrollState(scrollState);\r\n        }\r\n        this.setColumnPivotState(!!columnOrderState?.orderedColIds);\r\n\r\n        const updateCachedState = this.updateCachedState.bind(this);\r\n        // reset sidebar as it could have updated when columns changed\r\n        updateCachedState('sideBar', this.getSideBarState());\r\n        updateCachedState('focusedCell', this.getFocusedCellState());\r\n        const cellSelection = this.getRangeSelectionState();\r\n        updateCachedState('rangeSelection', cellSelection);\r\n        updateCachedState('cellSelection', cellSelection);\r\n        updateCachedState('scroll', this.getScrollState());\r\n\r\n        this.addManagedEventListeners({\r\n            cellFocused: () => updateCachedState('focusedCell', this.getFocusedCellState()),\r\n            cellSelectionChanged: (event) => {\r\n                if (event.finished) {\r\n                    const cellSelection = this.getRangeSelectionState();\r\n                    updateCachedState('rangeSelection', cellSelection);\r\n                    updateCachedState('cellSelection', cellSelection);\r\n                }\r\n            },\r\n            bodyScrollEnd: () => updateCachedState('scroll', this.getScrollState()),\r\n        });\r\n    }\r\n\r\n    private getColumnState(): {\r\n        sort?: SortState;\r\n        rowGroup?: RowGroupState;\r\n        aggregation?: AggregationState;\r\n        pivot?: PivotState;\r\n        columnPinning?: ColumnPinningState;\r\n        columnVisibility?: ColumnVisibilityState;\r\n        columnSizing?: ColumnSizingState;\r\n        columnOrder?: ColumnOrderState;\r\n    } {\r\n        const beans = this.beans;\r\n        const pivotMode = beans.colModel.isPivotMode();\r\n        const sortColumns: SortModelItem[] = [];\r\n        const groupColIds: string[] = [];\r\n        const aggregationColumns: AggregationColumnState[] = [];\r\n        const pivotColIds: string[] = [];\r\n        const leftColIds: string[] = [];\r\n        const rightColIds: string[] = [];\r\n        const hiddenColIds: string[] = [];\r\n        const columnSizes: ColumnSizeState[] = [];\r\n        const columns: string[] = [];\r\n\r\n        let defaultSortIndex = 0;\r\n        const columnState = _getColumnState(beans);\r\n        for (let i = 0; i < columnState.length; i++) {\r\n            const {\r\n                colId,\r\n                sort,\r\n                sortIndex,\r\n                rowGroup,\r\n                rowGroupIndex,\r\n                aggFunc,\r\n                pivot,\r\n                pivotIndex,\r\n                pinned,\r\n                hide,\r\n                width,\r\n                flex,\r\n            } = columnState[i];\r\n            columns.push(colId);\r\n            if (sort) {\r\n                sortColumns[sortIndex ?? defaultSortIndex++] = { colId, sort };\r\n            }\r\n            if (rowGroup) {\r\n                groupColIds[rowGroupIndex ?? 0] = colId;\r\n            }\r\n            if (typeof aggFunc === 'string') {\r\n                aggregationColumns.push({ colId, aggFunc });\r\n            }\r\n            if (pivot) {\r\n                pivotColIds[pivotIndex ?? 0] = colId;\r\n            }\r\n            if (pinned) {\r\n                (pinned === 'right' ? rightColIds : leftColIds).push(colId);\r\n            }\r\n            if (hide) {\r\n                hiddenColIds.push(colId);\r\n            }\r\n            if (flex || width) {\r\n                columnSizes.push({ colId, flex: flex ?? undefined, width });\r\n            }\r\n        }\r\n\r\n        return {\r\n            sort: sortColumns.length ? { sortModel: sortColumns } : undefined,\r\n            rowGroup: groupColIds.length ? { groupColIds } : undefined,\r\n            aggregation: aggregationColumns.length ? { aggregationModel: aggregationColumns } : undefined,\r\n            pivot: pivotColIds.length || pivotMode ? { pivotMode, pivotColIds } : undefined,\r\n            columnPinning: leftColIds.length || rightColIds.length ? { leftColIds, rightColIds } : undefined,\r\n            columnVisibility: hiddenColIds.length ? { hiddenColIds } : undefined,\r\n            columnSizing: columnSizes.length ? { columnSizingModel: columnSizes } : undefined,\r\n            columnOrder: columns.length ? { orderedColIds: columns } : undefined,\r\n        };\r\n    }\r\n\r\n    private setColumnState(initialState: GridState): void {\r\n        const {\r\n            sort: sortState,\r\n            rowGroup: groupState,\r\n            aggregation: aggregationState,\r\n            pivot: pivotState,\r\n            columnPinning: columnPinningState,\r\n            columnVisibility: columnVisibilityState,\r\n            columnSizing: columnSizingState,\r\n            columnOrder: columnOrderState,\r\n            partialColumnState,\r\n        } = initialState;\r\n        const columnStateMap: { [colId: string]: ColumnState } = {};\r\n        const getColumnState = (colId: string) => {\r\n            let columnState = columnStateMap[colId];\r\n            if (columnState) {\r\n                return columnState;\r\n            }\r\n            columnState = { colId };\r\n            columnStateMap[colId] = columnState;\r\n            return columnState;\r\n        };\r\n        // for partial state we don't want to override default\r\n        const defaultState: ColumnStateParams = partialColumnState\r\n            ? {}\r\n            : {\r\n                  sort: null,\r\n                  sortIndex: null,\r\n                  rowGroup: null,\r\n                  rowGroupIndex: null,\r\n                  aggFunc: null,\r\n                  pivot: null,\r\n                  pivotIndex: null,\r\n                  pinned: null,\r\n                  hide: null,\r\n                  flex: null,\r\n              };\r\n        if (sortState) {\r\n            sortState.sortModel.forEach(({ colId, sort }, sortIndex) => {\r\n                const columnState = getColumnState(colId);\r\n                columnState.sort = sort;\r\n                columnState.sortIndex = sortIndex;\r\n            });\r\n            defaultState.sort = null;\r\n            defaultState.sortIndex = null;\r\n        }\r\n        if (groupState) {\r\n            groupState.groupColIds.forEach((colId, rowGroupIndex) => {\r\n                const columnState = getColumnState(colId);\r\n                columnState.rowGroup = true;\r\n                columnState.rowGroupIndex = rowGroupIndex;\r\n            });\r\n            defaultState.rowGroup = null;\r\n            defaultState.rowGroupIndex = null;\r\n        }\r\n        if (aggregationState) {\r\n            aggregationState.aggregationModel.forEach(({ colId, aggFunc }) => {\r\n                getColumnState(colId).aggFunc = aggFunc;\r\n            });\r\n            defaultState.aggFunc = null;\r\n        }\r\n        if (pivotState) {\r\n            pivotState.pivotColIds.forEach((colId, pivotIndex) => {\r\n                const columnState = getColumnState(colId);\r\n                columnState.pivot = true;\r\n                columnState.pivotIndex = pivotIndex;\r\n            });\r\n            this.gos.updateGridOptions({\r\n                options: { pivotMode: pivotState.pivotMode },\r\n                source: 'gridInitializing' as any,\r\n            });\r\n            defaultState.pivot = null;\r\n            defaultState.pivotIndex = null;\r\n        }\r\n        if (columnPinningState) {\r\n            columnPinningState.leftColIds.forEach((colId) => {\r\n                getColumnState(colId).pinned = 'left';\r\n            });\r\n            columnPinningState.rightColIds.forEach((colId) => {\r\n                getColumnState(colId).pinned = 'right';\r\n            });\r\n            defaultState.pinned = null;\r\n        }\r\n        if (columnVisibilityState) {\r\n            columnVisibilityState.hiddenColIds.forEach((colId) => {\r\n                getColumnState(colId).hide = true;\r\n            });\r\n            defaultState.hide = null;\r\n        }\r\n        if (columnSizingState) {\r\n            columnSizingState.columnSizingModel.forEach(({ colId, flex, width }) => {\r\n                const columnState = getColumnState(colId);\r\n                columnState.flex = flex ?? null;\r\n                columnState.width = width;\r\n            });\r\n            defaultState.flex = null;\r\n        }\r\n        const columns = columnOrderState?.orderedColIds;\r\n        const applyOrder = !!columns?.length;\r\n        const columnStates = applyOrder ? columns.map((colId) => getColumnState(colId)) : Object.values(columnStateMap);\r\n\r\n        if (columnStates.length) {\r\n            this.columnStates = columnStates;\r\n            _applyColumnState(\r\n                this.beans,\r\n                {\r\n                    state: columnStates,\r\n                    applyOrder,\r\n                    defaultState,\r\n                },\r\n                'gridInitializing'\r\n            );\r\n        }\r\n    }\r\n\r\n    private setColumnPivotState(applyOrder: boolean): void {\r\n        const columnStates = this.columnStates;\r\n        this.columnStates = undefined;\r\n        const columnGroupStates = this.columnGroupStates;\r\n        this.columnGroupStates = undefined;\r\n\r\n        const beans = this.beans;\r\n        const { pivotResultCols, colGroupSvc } = beans;\r\n        if (!pivotResultCols?.isPivotResultColsPresent()) {\r\n            return;\r\n        }\r\n\r\n        if (columnStates) {\r\n            const secondaryColumnStates: ColumnState[] = [];\r\n            for (const columnState of columnStates) {\r\n                if (pivotResultCols.getPivotResultCol(columnState.colId)) {\r\n                    secondaryColumnStates.push(columnState);\r\n                }\r\n            }\r\n\r\n            _applyColumnState(\r\n                beans,\r\n                {\r\n                    state: secondaryColumnStates,\r\n                    applyOrder,\r\n                },\r\n                'gridInitializing'\r\n            );\r\n        }\r\n\r\n        if (columnGroupStates) {\r\n            // no easy/performant way of knowing which column groups are pivot column groups\r\n            colGroupSvc?.setColumnGroupState(columnGroupStates, 'gridInitializing');\r\n        }\r\n    }\r\n\r\n    private getColumnGroupState(): ColumnGroupState | undefined {\r\n        const colGroupSvc = this.beans.colGroupSvc;\r\n        if (!colGroupSvc) {\r\n            return undefined;\r\n        }\r\n        const columnGroupState = colGroupSvc.getColumnGroupState();\r\n        const openColumnGroups: string[] = [];\r\n        columnGroupState.forEach(({ groupId, open }) => {\r\n            if (open) {\r\n                openColumnGroups.push(groupId);\r\n            }\r\n        });\r\n        return openColumnGroups.length ? { openColumnGroupIds: openColumnGroups } : undefined;\r\n    }\r\n\r\n    private setColumnGroupState(initialState: GridState): void {\r\n        const colGroupSvc = this.beans.colGroupSvc;\r\n        if (!Object.prototype.hasOwnProperty.call(initialState, 'columnGroup') || !colGroupSvc) {\r\n            return;\r\n        }\r\n\r\n        const openColumnGroups = new Set(initialState.columnGroup?.openColumnGroupIds);\r\n        const existingColumnGroupState = colGroupSvc.getColumnGroupState();\r\n        const stateItems = existingColumnGroupState.map(({ groupId }) => {\r\n            const open = openColumnGroups.has(groupId);\r\n            if (open) {\r\n                openColumnGroups.delete(groupId);\r\n            }\r\n            return {\r\n                groupId,\r\n                open,\r\n            };\r\n        });\r\n        // probably pivot cols\r\n        openColumnGroups.forEach((groupId) => {\r\n            stateItems.push({\r\n                groupId,\r\n                open: true,\r\n            });\r\n        });\r\n        if (stateItems.length) {\r\n            this.columnGroupStates = stateItems;\r\n        }\r\n        colGroupSvc.setColumnGroupState(stateItems, 'gridInitializing');\r\n    }\r\n\r\n    private getFilterState(): FilterState | undefined {\r\n        const filterManager = this.beans.filterManager;\r\n        let filterModel: FilterModel | undefined = filterManager?.getFilterModel();\r\n        if (filterModel && Object.keys(filterModel).length === 0) {\r\n            filterModel = undefined;\r\n        }\r\n        const advancedFilterModel = filterManager?.getAdvFilterModel() ?? undefined;\r\n        return filterModel || advancedFilterModel ? { filterModel, advancedFilterModel } : undefined;\r\n    }\r\n\r\n    private setFilterState(filterState?: FilterState): void {\r\n        const filterManager = this.beans.filterManager;\r\n        const { filterModel, advancedFilterModel } = filterState ?? {};\r\n        if (filterModel) {\r\n            filterManager?.setFilterModel(filterModel, 'columnFilter');\r\n        }\r\n        if (advancedFilterModel) {\r\n            filterManager?.setAdvFilterModel(advancedFilterModel);\r\n        }\r\n    }\r\n\r\n    private getRangeSelectionState(): CellSelectionState | undefined {\r\n        const cellRanges = this.beans.rangeSvc?.getCellRanges().map((cellRange) => {\r\n            const { id, type, startRow, endRow, columns, startColumn } = cellRange;\r\n            return {\r\n                id,\r\n                type,\r\n                startRow,\r\n                endRow,\r\n                colIds: columns.map((column) => column.getColId()),\r\n                startColId: startColumn.getColId(),\r\n            };\r\n        });\r\n        return cellRanges?.length ? { cellRanges } : undefined;\r\n    }\r\n\r\n    private setCellSelectionState(cellSelectionState: CellSelectionState): void {\r\n        const { gos, rangeSvc, colModel, visibleCols } = this.beans;\r\n\r\n        if (!_isCellSelectionEnabled(gos) || !rangeSvc) {\r\n            return;\r\n        }\r\n\r\n        const cellRanges: CellRange[] = [];\r\n        cellSelectionState.cellRanges.forEach((cellRange) => {\r\n            const columns: AgColumn[] = [];\r\n            cellRange.colIds.forEach((colId) => {\r\n                const column = colModel.getCol(colId);\r\n                if (column) {\r\n                    columns.push(column);\r\n                }\r\n            });\r\n            if (!columns.length) {\r\n                return;\r\n            }\r\n            let startColumn = colModel.getCol(cellRange.startColId);\r\n            if (!startColumn) {\r\n                // find the first remaining column\r\n                const allColumns = visibleCols.allCols;\r\n                const columnSet = new Set(columns);\r\n                startColumn = allColumns.find((column) => columnSet.has(column))!;\r\n            }\r\n            cellRanges.push({\r\n                ...cellRange,\r\n                columns,\r\n                startColumn,\r\n            });\r\n        });\r\n\r\n        rangeSvc.setCellRanges(cellRanges);\r\n    }\r\n\r\n    private getScrollState(): ScrollState | undefined {\r\n        if (!this.isClientSideRowModel) {\r\n            // can't restore, so don't provide\r\n            return undefined;\r\n        }\r\n        const scrollFeature = this.beans.ctrlsSvc.getScrollFeature();\r\n        const { left } = scrollFeature?.getHScrollPosition() ?? { left: 0 };\r\n        const { top } = scrollFeature?.getVScrollPosition() ?? { top: 0 };\r\n        return top || left\r\n            ? {\r\n                  top,\r\n                  left,\r\n              }\r\n            : undefined;\r\n    }\r\n\r\n    private setScrollState(scrollState: ScrollState): void {\r\n        if (!this.isClientSideRowModel) {\r\n            return;\r\n        }\r\n        const { top, left } = scrollState;\r\n        const { frameworkOverrides, rowRenderer, animationFrameSvc, ctrlsSvc } = this.beans;\r\n        frameworkOverrides.wrapIncoming(() => {\r\n            ctrlsSvc.get('center').setCenterViewportScrollLeft(left);\r\n            ctrlsSvc.getScrollFeature()?.setVerticalScrollPosition(top);\r\n            rowRenderer.redraw({ afterScroll: true });\r\n            animationFrameSvc?.flushAllFrames();\r\n        });\r\n    }\r\n\r\n    private getSideBarState(): SideBarState | undefined {\r\n        return this.beans.sideBar?.comp?.getState();\r\n    }\r\n\r\n    private getFocusedCellState(): FocusedCellState | undefined {\r\n        if (!this.isClientSideRowModel) {\r\n            // can't restore, so don't provide\r\n            return undefined;\r\n        }\r\n        const focusedCell = this.beans.focusSvc.getFocusedCell();\r\n        if (focusedCell) {\r\n            const { column, rowIndex, rowPinned } = focusedCell;\r\n            return {\r\n                colId: column.getColId(),\r\n                rowIndex,\r\n                rowPinned,\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private setFocusedCellState(focusedCellState: FocusedCellState): void {\r\n        if (!this.isClientSideRowModel) {\r\n            return;\r\n        }\r\n        const { colId, rowIndex, rowPinned } = focusedCellState;\r\n        const { focusSvc, colModel } = this.beans;\r\n        focusSvc.setFocusedCell({\r\n            column: colModel.getCol(colId),\r\n            rowIndex,\r\n            rowPinned,\r\n            forceBrowserFocus: true,\r\n            preventScrollOnBrowserFocus: true,\r\n        });\r\n    }\r\n\r\n    private getPaginationState(): PaginationState | undefined {\r\n        const { pagination, gos } = this.beans;\r\n        if (!pagination) {\r\n            return undefined;\r\n        }\r\n        const page = pagination.getCurrentPage();\r\n        const pageSize = !gos.get('paginationAutoPageSize') ? pagination.getPageSize() : undefined;\r\n\r\n        if (!page && !pageSize) {\r\n            return;\r\n        }\r\n        return { page, pageSize };\r\n    }\r\n\r\n    private setPaginationState(paginationState: PaginationState): void {\r\n        const { pagination, gos } = this.beans;\r\n        if (!pagination) {\r\n            return;\r\n        }\r\n        if (paginationState.pageSize && !gos.get('paginationAutoPageSize')) {\r\n            pagination.setPageSize(paginationState.pageSize, 'initialState');\r\n        }\r\n\r\n        if (typeof paginationState.page === 'number') {\r\n            pagination.setPage(paginationState.page);\r\n        }\r\n    }\r\n\r\n    private getRowSelectionState():\r\n        | string[]\r\n        | ServerSideRowSelectionState\r\n        | ServerSideRowGroupSelectionState\r\n        | undefined {\r\n        const selectionSvc = this.beans.selectionSvc;\r\n        if (!selectionSvc) {\r\n            return undefined;\r\n        }\r\n        const selectionState = selectionSvc.getSelectionState();\r\n        const noSelections =\r\n            !selectionState ||\r\n            (!Array.isArray(selectionState) &&\r\n                ((selectionState as ServerSideRowSelectionState).selectAll === false ||\r\n                    (selectionState as ServerSideRowGroupSelectionState).selectAllChildren === false) &&\r\n                !selectionState?.toggledNodes?.length);\r\n        return noSelections ? undefined : selectionState;\r\n    }\r\n\r\n    private setRowSelectionState(\r\n        rowSelectionState: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState\r\n    ): void {\r\n        this.beans.selectionSvc?.setSelectionState(rowSelectionState, 'gridInitializing');\r\n    }\r\n\r\n    private getRowGroupExpansionState(): RowGroupExpansionState | undefined {\r\n        const { expansionSvc, rowModel } = this.beans;\r\n        if (!expansionSvc) {\r\n            return undefined;\r\n        }\r\n\r\n        const expandedRowGroups: string[] = [];\r\n        rowModel.forEachNode(({ expanded, id }) => {\r\n            if (expanded && id) {\r\n                expandedRowGroups.push(id);\r\n            }\r\n        });\r\n        return expandedRowGroups.length\r\n            ? {\r\n                  expandedRowGroupIds: expandedRowGroups,\r\n              }\r\n            : undefined;\r\n    }\r\n\r\n    private setRowGroupExpansionState(rowGroupExpansionState: RowGroupExpansionState): void {\r\n        this.beans.expansionSvc?.expandRows(rowGroupExpansionState.expandedRowGroupIds);\r\n    }\r\n\r\n    private updateColumnState(features: (keyof GridState)[]): void {\r\n        const newColumnState = this.getColumnState();\r\n        let hasChanged = false;\r\n        const cachedState = this.cachedState;\r\n        Object.entries(newColumnState).forEach(([key, value]: [keyof GridState, any]) => {\r\n            if (!_jsonEquals(value, cachedState[key])) {\r\n                hasChanged = true;\r\n            }\r\n        });\r\n        this.cachedState = {\r\n            ...cachedState,\r\n            ...newColumnState,\r\n        };\r\n        if (hasChanged) {\r\n            this.dispatchStateUpdateEvent(features);\r\n        }\r\n    }\r\n\r\n    private updateCachedState<K extends keyof GridState>(key: K, value: GridState[K]): void {\r\n        const existingValue = this.cachedState[key];\r\n        this.setCachedStateValue(key, value);\r\n        if (!_jsonEquals(value, existingValue)) {\r\n            this.dispatchStateUpdateEvent([key]);\r\n        }\r\n    }\r\n\r\n    private setCachedStateValue<K extends keyof GridState>(key: K, value: GridState[K]): void {\r\n        this.cachedState = {\r\n            ...this.cachedState,\r\n            [key]: value,\r\n        };\r\n    }\r\n\r\n    private refreshStaleState(): void {\r\n        const staleStateKeys = this.staleStateKeys;\r\n        staleStateKeys.forEach((key) => {\r\n            switch (key) {\r\n                // only row selection supported for now\r\n                case 'rowSelection':\r\n                    this.setCachedStateValue(key, this.getRowSelectionState());\r\n                    break;\r\n            }\r\n        });\r\n        staleStateKeys.clear();\r\n    }\r\n\r\n    private dispatchStateUpdateEvent(sources: (keyof GridState | 'gridInitializing')[]): void {\r\n        if (this.suppressEvents) {\r\n            return;\r\n        }\r\n        sources.forEach((source) => this.queuedUpdateSources.add(source));\r\n        this.dispatchStateUpdateEventDebounced();\r\n    }\r\n\r\n    private dispatchQueuedStateUpdateEvents(): void {\r\n        const queuedUpdateSources = this.queuedUpdateSources;\r\n        const sources = Array.from(queuedUpdateSources);\r\n        queuedUpdateSources.clear();\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'stateUpdated',\r\n            sources,\r\n            state: this.cachedState,\r\n        });\r\n    }\r\n\r\n    private suppressEventsAndDispatchInitEvent(updateFunc: () => void): void {\r\n        this.suppressEvents = true;\r\n        const colAnimation = this.beans.colAnimation;\r\n        colAnimation?.setSuppressAnimation(true);\r\n        updateFunc();\r\n        // We want to suppress any grid events, but not user events.\r\n        // Using a timeout here captures things like column resizing and emits a single grid initializing event.\r\n        setTimeout(() => {\r\n            this.suppressEvents = false;\r\n            // We only want the grid initializing source.\r\n            this.queuedUpdateSources.clear();\r\n            if (!this.isAlive()) {\r\n                // Ensure the grid is still alive before dispatching the event.\r\n                return;\r\n            }\r\n            colAnimation?.setSuppressAnimation(false);\r\n            this.dispatchStateUpdateEvent(['gridInitializing']);\r\n        });\r\n    }\r\n}\r\n", "import type { _StateGridApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { getState } from './stateApi';\r\nimport { StateService } from './stateService';\r\n\r\n/**\r\n * @feature API -> Grid State\r\n * @gridOption initialState\r\n */\r\nexport const GridStateModule: _ModuleWithApi<_StateGridApi> = {\r\n    moduleName: 'GridState',\r\n    version: VERSION,\r\n    beans: [StateService],\r\n    apiFunctions: {\r\n        getState,\r\n    },\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\n\r\nexport function paginationIsLastPageFound(beans: BeanCollection): boolean {\r\n    return beans.rowModel.isLastRowIndexKnown();\r\n}\r\n\r\nexport function paginationGetPageSize(beans: BeanCollection): number {\r\n    return beans.pagination?.getPageSize() ?? 100;\r\n}\r\n\r\nexport function paginationGetCurrentPage(beans: BeanCollection): number {\r\n    return beans.pagination?.getCurrentPage() ?? 0;\r\n}\r\n\r\nexport function paginationGetTotalPages(beans: BeanCollection): number {\r\n    return beans.pagination?.getTotalPages() ?? 1;\r\n}\r\n\r\nexport function paginationGetRowCount(beans: BeanCollection): number {\r\n    return beans.pagination ? beans.pagination.getMasterRowCount() : beans.rowModel.getRowCount();\r\n}\r\n\r\nexport function paginationGoToNextPage(beans: BeanCollection): void {\r\n    beans.pagination?.goToNextPage();\r\n}\r\n\r\nexport function paginationGoToPreviousPage(beans: BeanCollection): void {\r\n    beans.pagination?.goToPreviousPage();\r\n}\r\n\r\nexport function paginationGoToFirstPage(beans: BeanCollection): void {\r\n    beans.pagination?.goToFirstPage();\r\n}\r\n\r\nexport function paginationGoToLastPage(beans: BeanCollection): void {\r\n    beans.pagination?.goToLastPage();\r\n}\r\n\r\nexport function paginationGoToPage(beans: BeanCollection, page: number): void {\r\n    beans.pagination?.goToPage(page);\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowContainerCtrl } from '../gridBodyComp/rowContainer/rowContainerCtrl';\r\nimport { _getRowHeightAsNumber } from '../gridOptionsUtils';\r\nimport { _debounce } from '../utils/function';\r\n\r\nexport class PaginationAutoPageSizeService extends BeanStub implements NamedBean {\r\n    beanName = 'paginationAutoPageSizeSvc' as const;\r\n\r\n    private centerRowsCtrl: RowContainerCtrl;\r\n\r\n    // Once the body is rendered, we debounce changes to the page size,\r\n    // but we do not want to debounce the first time the body is rendered.\r\n    private isBodyRendered: boolean;\r\n\r\n    public postConstruct(): void {\r\n        this.beans.ctrlsSvc.whenReady(this, (p) => {\r\n            this.centerRowsCtrl = p.center;\r\n\r\n            const listener = this.checkPageSize.bind(this);\r\n            this.addManagedEventListeners({\r\n                bodyHeightChanged: listener,\r\n                scrollVisibilityChanged: listener,\r\n            });\r\n            this.addManagedPropertyListener('paginationAutoPageSize', this.onPaginationAutoSizeChanged.bind(this));\r\n\r\n            this.checkPageSize();\r\n        });\r\n    }\r\n\r\n    private notActive(): boolean {\r\n        return !this.gos.get('paginationAutoPageSize') || this.centerRowsCtrl == null;\r\n    }\r\n\r\n    private onPaginationAutoSizeChanged(): void {\r\n        if (this.notActive()) {\r\n            this.beans.pagination!.unsetAutoCalculatedPageSize();\r\n        } else {\r\n            this.checkPageSize();\r\n        }\r\n    }\r\n\r\n    private checkPageSize(): void {\r\n        if (this.notActive()) {\r\n            return;\r\n        }\r\n\r\n        const bodyHeight = this.centerRowsCtrl.viewportSizeFeature!.getBodyHeight();\r\n\r\n        if (bodyHeight > 0) {\r\n            const beans = this.beans;\r\n            const update = () => {\r\n                const rowHeight = Math.max(_getRowHeightAsNumber(beans), 1); // prevent divide by zero error if row height is 0\r\n                const newPageSize = Math.floor(bodyHeight / rowHeight);\r\n                beans.pagination!.setPageSize(newPageSize, 'autoCalculated');\r\n            };\r\n\r\n            if (!this.isBodyRendered) {\r\n                update();\r\n                this.isBodyRendered = true;\r\n            } else {\r\n                // TODO: this is weird, since this _debounce is inlined here this seems to act just as a setTimeout?\r\n                _debounce(this, update, 50)();\r\n            }\r\n        } else {\r\n            this.isBodyRendered = false;\r\n        }\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { PaginationChangedEvent } from '../../events';\r\nimport type { WithoutGridCommon } from '../../interfaces/iCommon';\r\nimport { _areEqual } from '../../utils/array';\r\nimport { _clearElement } from '../../utils/dom';\r\nimport { _warn } from '../../validation/logging';\r\nimport type { ListOption } from '../../widgets/agList';\r\nimport { AgSelect } from '../../widgets/agSelect';\r\nimport type { ComponentSelector } from '../../widgets/component';\r\nimport { Component } from '../../widgets/component';\r\nimport type { PaginationService } from '../paginationService';\r\n\r\nconst paginationPageSizeSelector = 'paginationPageSizeSelector';\r\n\r\nexport class PageSizeSelectorComp extends Component {\r\n    private pagination: PaginationService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.pagination = beans.pagination!;\r\n    }\r\n\r\n    private selectPageSizeComp: AgSelect | undefined;\r\n    private hasEmptyOption = false;\r\n    private pageSizeOptions?: (string | number)[];\r\n\r\n    constructor() {\r\n        super(/* html */ `<span class=\"ag-paging-page-size\"></span>`);\r\n    }\r\n\r\n    public postConstruct() {\r\n        this.addManagedPropertyListener(paginationPageSizeSelector, () => {\r\n            this.onPageSizeSelectorValuesChange();\r\n        });\r\n\r\n        this.addManagedEventListeners({ paginationChanged: (event) => this.handlePaginationChanged(event) });\r\n    }\r\n\r\n    private handlePageSizeItemSelected = (): void => {\r\n        if (!this.selectPageSizeComp) {\r\n            return;\r\n        }\r\n\r\n        const newValue = this.selectPageSizeComp.getValue();\r\n\r\n        if (!newValue) {\r\n            return;\r\n        }\r\n\r\n        const paginationPageSize = Number(newValue);\r\n\r\n        if (\r\n            isNaN(paginationPageSize) ||\r\n            paginationPageSize < 1 ||\r\n            paginationPageSize === this.pagination.getPageSize()\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.pagination.setPageSize(paginationPageSize, 'pageSizeSelector');\r\n\r\n        if (this.hasEmptyOption) {\r\n            // Toggle the selector to force a refresh of the options and hide the empty option,\r\n            // as it's no longer needed.\r\n            this.toggleSelectDisplay(true);\r\n        }\r\n\r\n        this.selectPageSizeComp.getFocusableElement().focus();\r\n    };\r\n\r\n    private handlePaginationChanged(paginationChangedEvent?: WithoutGridCommon<PaginationChangedEvent>): void {\r\n        if (!this.selectPageSizeComp || !paginationChangedEvent?.newPageSize) {\r\n            return;\r\n        }\r\n\r\n        const paginationPageSize = this.pagination.getPageSize();\r\n        if (this.getPageSizeSelectorValues().includes(paginationPageSize)) {\r\n            this.selectPageSizeComp.setValue(paginationPageSize.toString());\r\n        } else {\r\n            if (this.hasEmptyOption) {\r\n                this.selectPageSizeComp.setValue('');\r\n            } else {\r\n                this.toggleSelectDisplay(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public toggleSelectDisplay(show: boolean) {\r\n        if (this.selectPageSizeComp && !show) {\r\n            this.reset();\r\n        }\r\n\r\n        if (!show) {\r\n            return;\r\n        }\r\n\r\n        this.reloadPageSizesSelector();\r\n\r\n        if (!this.selectPageSizeComp) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    private reset(): void {\r\n        _clearElement(this.getGui());\r\n\r\n        if (!this.selectPageSizeComp) {\r\n            return;\r\n        }\r\n\r\n        this.selectPageSizeComp = this.destroyBean(this.selectPageSizeComp);\r\n    }\r\n\r\n    private onPageSizeSelectorValuesChange(): void {\r\n        if (!this.selectPageSizeComp) {\r\n            return;\r\n        }\r\n\r\n        if (this.shouldShowPageSizeSelector()) {\r\n            this.reloadPageSizesSelector();\r\n        }\r\n    }\r\n\r\n    public shouldShowPageSizeSelector(): boolean {\r\n        return (\r\n            this.gos.get('pagination') &&\r\n            !this.gos.get('suppressPaginationPanel') &&\r\n            !this.gos.get('paginationAutoPageSize') &&\r\n            this.gos.get(paginationPageSizeSelector) !== false\r\n        );\r\n    }\r\n\r\n    private reloadPageSizesSelector(): void {\r\n        const pageSizeOptions: (number | string)[] = this.getPageSizeSelectorValues();\r\n        const paginationPageSizeOption: number = this.pagination.getPageSize();\r\n        const shouldAddAndSelectEmptyOption =\r\n            !paginationPageSizeOption || !pageSizeOptions.includes(paginationPageSizeOption);\r\n        if (shouldAddAndSelectEmptyOption) {\r\n            const pageSizeSet = this.gos.exists('paginationPageSize');\r\n            const pageSizesSet = this.gos.get(paginationPageSizeSelector) !== true;\r\n\r\n            _warn(94, { pageSizeSet, pageSizesSet, pageSizeOptions, paginationPageSizeOption });\r\n            if (!pageSizesSet) {\r\n                _warn(95, { paginationPageSizeOption, paginationPageSizeSelector });\r\n            }\r\n            // When the paginationPageSize option is set to a value that is\r\n            // not in the list of page size options.\r\n            pageSizeOptions.unshift('');\r\n        }\r\n\r\n        const value = String(shouldAddAndSelectEmptyOption ? '' : paginationPageSizeOption);\r\n\r\n        if (this.selectPageSizeComp) {\r\n            if (!_areEqual(this.pageSizeOptions, pageSizeOptions)) {\r\n                this.selectPageSizeComp.clearOptions().addOptions(this.createPageSizeSelectOptions(pageSizeOptions));\r\n                this.pageSizeOptions = pageSizeOptions;\r\n            }\r\n            this.selectPageSizeComp.setValue(value, true);\r\n        } else {\r\n            this.createPageSizeSelectorComp(pageSizeOptions, value);\r\n        }\r\n\r\n        this.hasEmptyOption = shouldAddAndSelectEmptyOption;\r\n    }\r\n\r\n    private createPageSizeSelectOptions(pageSizeOptions: (string | number)[]): ListOption<string>[] {\r\n        return pageSizeOptions.map((value) => ({\r\n            value: String(value),\r\n        }));\r\n    }\r\n\r\n    private createPageSizeSelectorComp(pageSizeOptions: (string | number)[], value: string): void {\r\n        const localeTextFunc = this.getLocaleTextFunc();\r\n\r\n        const localisedLabel = localeTextFunc('pageSizeSelectorLabel', 'Page Size:');\r\n        const localisedAriaLabel = localeTextFunc('ariaPageSizeSelectorLabel', 'Page Size');\r\n\r\n        this.selectPageSizeComp = this.createManagedBean(new AgSelect())\r\n            .addOptions(this.createPageSizeSelectOptions(pageSizeOptions))\r\n            .setValue(value)\r\n            .setAriaLabel(localisedAriaLabel)\r\n            .setLabel(localisedLabel)\r\n            .onValueChange(() => this.handlePageSizeItemSelected());\r\n\r\n        this.appendChild(this.selectPageSizeComp);\r\n    }\r\n\r\n    private getPageSizeSelectorValues(): number[] {\r\n        const defaultValues = [20, 50, 100];\r\n        const paginationPageSizeSelectorValues = this.gos.get(paginationPageSizeSelector);\r\n\r\n        if (!Array.isArray(paginationPageSizeSelectorValues) || !paginationPageSizeSelectorValues?.length) {\r\n            return defaultValues;\r\n        }\r\n\r\n        return [...paginationPageSizeSelectorValues].sort((a, b) => a - b);\r\n    }\r\n\r\n    public override destroy() {\r\n        this.toggleSelectDisplay(false);\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nexport const PageSizeSelectorSelector: ComponentSelector = {\r\n    selector: 'AG-PAGE-SIZE-SELECTOR',\r\n    component: PageSizeSelectorComp,\r\n};\r\n", "export const paginationCompCSS = /*css*/ `.ag-paging-panel{align-items:center;border-top:var(--ag-footer-row-border);display:flex;gap:calc(var(--ag-spacing)*4);height:max(var(--ag-row-height),22px);justify-content:flex-end;padding:0 var(--ag-cell-horizontal-padding)}:where(.ag-paging-page-size) .ag-wrapper{min-width:50px}.ag-paging-page-summary-panel{align-items:center;display:flex;gap:var(--ag-cell-widget-spacing);.ag-disabled &{pointer-events:none}}.ag-paging-button{cursor:pointer;position:relative;&.ag-disabled{cursor:default;opacity:.5}}.ag-paging-number,.ag-paging-row-summary-panel-number{font-weight:500}`;\n", "import { KeyCode } from '../constants/keyCode';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { PaginationNumberFormatterParams } from '../interfaces/iCallbackParams';\r\nimport type { WithoutGridCommon } from '../interfaces/iCommon';\r\nimport type { FocusableContainer } from '../interfaces/iFocusableContainer';\r\nimport type { IRowModel } from '../interfaces/iRowModel';\r\nimport type { AriaAnnouncementService } from '../rendering/ariaAnnouncementService';\r\nimport { _setAriaDisabled } from '../utils/aria';\r\nimport { _addFocusableContainerListener, _focusGridInnerElement } from '../utils/focus';\r\nimport { _createIconNoSpan } from '../utils/icon';\r\nimport { _formatNumberCommas } from '../utils/number';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { RefPlaceholder } from '../widgets/component';\r\nimport { TabGuardComp } from '../widgets/tabGuardComp';\r\nimport type { PageSizeSelectorComp } from './pageSizeSelector/pageSizeSelectorComp';\r\nimport { PageSizeSelectorSelector } from './pageSizeSelector/pageSizeSelectorComp';\r\nimport { paginationCompCSS } from './paginationComp.css-GENERATED';\r\nimport type { PaginationService } from './paginationService';\r\n\r\nexport class PaginationComp extends TabGuardComp implements FocusableContainer {\r\n    private rowModel: IRowModel;\r\n    private pagination: PaginationService;\r\n    private ariaAnnounce?: AriaAnnouncementService;\r\n\r\n    public wireBeans(beans: BeanCollection): void {\r\n        this.rowModel = beans.rowModel;\r\n        this.pagination = beans.pagination!;\r\n        this.ariaAnnounce = beans.ariaAnnounce;\r\n    }\r\n\r\n    private readonly btFirst: HTMLElement = RefPlaceholder;\r\n    private readonly btPrevious: HTMLElement = RefPlaceholder;\r\n    private readonly btNext: HTMLElement = RefPlaceholder;\r\n    private readonly btLast: HTMLElement = RefPlaceholder;\r\n\r\n    private readonly lbRecordCount: any = RefPlaceholder;\r\n    private readonly lbFirstRowOnPage: any = RefPlaceholder;\r\n    private readonly lbLastRowOnPage: any = RefPlaceholder;\r\n    private readonly lbCurrent: any = RefPlaceholder;\r\n    private readonly lbTotal: any = RefPlaceholder;\r\n\r\n    private readonly pageSizeComp: PageSizeSelectorComp = RefPlaceholder;\r\n\r\n    private previousAndFirstButtonsDisabled = false;\r\n    private nextButtonDisabled = false;\r\n    private lastButtonDisabled = false;\r\n    private areListenersSetup = false;\r\n    private allowFocusInnerElement = false;\r\n\r\n    private ariaRowStatus: string;\r\n    private ariaPageStatus: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.registerCSS(paginationCompCSS);\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        const isRtl = this.gos.get('enableRtl');\r\n        this.setTemplate(this.getTemplate(), [PageSizeSelectorSelector]);\r\n\r\n        const { btFirst, btPrevious, btNext, btLast } = this;\r\n        this.activateTabIndex([btFirst, btPrevious, btNext, btLast]);\r\n\r\n        btFirst.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'last' : 'first', this.beans)!);\r\n        btPrevious.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'next' : 'previous', this.beans)!);\r\n        btNext.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'previous' : 'next', this.beans)!);\r\n        btLast.insertAdjacentElement('afterbegin', _createIconNoSpan(isRtl ? 'first' : 'last', this.beans)!);\r\n\r\n        this.addManagedPropertyListener('pagination', this.onPaginationChanged.bind(this));\r\n        this.addManagedPropertyListener('suppressPaginationPanel', this.onPaginationChanged.bind(this));\r\n        this.addManagedPropertyListeners(\r\n            ['paginationPageSizeSelector', 'paginationAutoPageSize', 'suppressPaginationPanel'],\r\n            () => this.onPageSizeRelatedOptionsChange()\r\n        );\r\n\r\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\r\n\r\n        this.initialiseTabGuard({\r\n            // prevent tab guard default logic\r\n            onTabKeyDown: () => {},\r\n            focusInnerElement: (fromBottom) => {\r\n                if (this.allowFocusInnerElement) {\r\n                    this.tabGuardFeature.getTabGuardCtrl().focusInnerElement(fromBottom);\r\n                } else {\r\n                    _focusGridInnerElement(this.beans, fromBottom);\r\n                }\r\n            },\r\n            forceFocusOutWhenTabGuardsAreEmpty: true,\r\n        });\r\n\r\n        this.onPaginationChanged();\r\n    }\r\n\r\n    public setAllowFocus(allowFocus: boolean): void {\r\n        this.allowFocusInnerElement = allowFocus;\r\n    }\r\n\r\n    private onPaginationChanged(): void {\r\n        const isPaging = this.gos.get('pagination');\r\n        const paginationPanelEnabled = isPaging && !this.gos.get('suppressPaginationPanel');\r\n\r\n        this.setDisplayed(paginationPanelEnabled);\r\n        if (!paginationPanelEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.setupListeners();\r\n\r\n        this.enableOrDisableButtons();\r\n        this.updateLabels();\r\n        this.onPageSizeRelatedOptionsChange();\r\n    }\r\n\r\n    private onPageSizeRelatedOptionsChange(): void {\r\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\r\n    }\r\n\r\n    private setupListeners() {\r\n        if (!this.areListenersSetup) {\r\n            this.addManagedEventListeners({ paginationChanged: this.onPaginationChanged.bind(this) });\r\n\r\n            [\r\n                { el: this.btFirst, fn: this.onBtFirst.bind(this) },\r\n                { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },\r\n                { el: this.btNext, fn: this.onBtNext.bind(this) },\r\n                { el: this.btLast, fn: this.onBtLast.bind(this) },\r\n            ].forEach((item) => {\r\n                const { el, fn } = item;\r\n                this.addManagedListeners(el, {\r\n                    click: fn,\r\n                    keydown: (e: KeyboardEvent) => {\r\n                        if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\r\n                            e.preventDefault();\r\n                            fn();\r\n                        }\r\n                    },\r\n                });\r\n            });\r\n\r\n            _addFocusableContainerListener(this.beans, this, this.getGui());\r\n\r\n            this.areListenersSetup = true;\r\n        }\r\n    }\r\n\r\n    private onBtFirst() {\r\n        if (!this.previousAndFirstButtonsDisabled) {\r\n            this.pagination.goToFirstPage();\r\n        }\r\n    }\r\n\r\n    private formatNumber(value: number): string {\r\n        const userFunc = this.gos.getCallback('paginationNumberFormatter');\r\n\r\n        if (userFunc) {\r\n            const params: WithoutGridCommon<PaginationNumberFormatterParams> = { value: value };\r\n            return userFunc(params);\r\n        }\r\n\r\n        return _formatNumberCommas(value, this.getLocaleTextFunc.bind(this));\r\n    }\r\n\r\n    private getTemplate(): string {\r\n        const localeTextFunc = this.getLocaleTextFunc();\r\n\r\n        const strPage = localeTextFunc('page', 'Page');\r\n        const strTo = localeTextFunc('to', 'to');\r\n        const strOf = localeTextFunc('of', 'of');\r\n        const strFirst = localeTextFunc('firstPage', 'First Page');\r\n        const strPrevious = localeTextFunc('previousPage', 'Previous Page');\r\n        const strNext = localeTextFunc('nextPage', 'Next Page');\r\n        const strLast = localeTextFunc('lastPage', 'Last Page');\r\n        const compId = this.getCompId();\r\n\r\n        return /* html */ `<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-${compId}\">\r\n                <ag-page-size-selector data-ref=\"pageSizeComp\"></ag-page-size-selector>\r\n                <span class=\"ag-paging-row-summary-panel\">\r\n                    <span id=\"ag-${compId}-first-row\" data-ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\r\n                    <span id=\"ag-${compId}-to\">${strTo}</span>\r\n                    <span id=\"ag-${compId}-last-row\" data-ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\r\n                    <span id=\"ag-${compId}-of\">${strOf}</span>\r\n                    <span id=\"ag-${compId}-row-count\" data-ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\r\n                </span>\r\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\r\n                    <div data-ref=\"btFirst\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strFirst}\"></div>\r\n                    <div data-ref=\"btPrevious\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strPrevious}\"></div>\r\n                    <span class=\"ag-paging-description\">\r\n                        <span id=\"ag-${compId}-start-page\">${strPage}</span>\r\n                        <span id=\"ag-${compId}-start-page-number\" data-ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\r\n                        <span id=\"ag-${compId}-of-page\">${strOf}</span>\r\n                        <span id=\"ag-${compId}-of-page-number\" data-ref=\"lbTotal\" class=\"ag-paging-number\"></span>\r\n                    </span>\r\n                    <div data-ref=\"btNext\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strNext}\"></div>\r\n                    <div data-ref=\"btLast\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strLast}\"></div>\r\n                </span>\r\n            </div>`;\r\n    }\r\n\r\n    private onBtNext() {\r\n        if (!this.nextButtonDisabled) {\r\n            this.pagination.goToNextPage();\r\n        }\r\n    }\r\n\r\n    private onBtPrevious() {\r\n        if (!this.previousAndFirstButtonsDisabled) {\r\n            this.pagination.goToPreviousPage();\r\n        }\r\n    }\r\n\r\n    private onBtLast() {\r\n        if (!this.lastButtonDisabled) {\r\n            this.pagination.goToLastPage();\r\n        }\r\n    }\r\n\r\n    private enableOrDisableButtons() {\r\n        const currentPage = this.pagination.getCurrentPage();\r\n        const maxRowFound = this.rowModel.isLastRowIndexKnown();\r\n        const totalPages = this.pagination.getTotalPages();\r\n\r\n        this.previousAndFirstButtonsDisabled = currentPage === 0;\r\n        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);\r\n        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);\r\n\r\n        const zeroPagesToDisplay = this.isZeroPagesToDisplay();\r\n        const onLastPage = currentPage === totalPages - 1;\r\n\r\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\r\n        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;\r\n\r\n        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);\r\n        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);\r\n    }\r\n\r\n    private toggleButtonDisabled(button: HTMLElement, disabled: boolean) {\r\n        _setAriaDisabled(button, disabled);\r\n        button.classList.toggle('ag-disabled', disabled);\r\n    }\r\n\r\n    private isZeroPagesToDisplay() {\r\n        const maxRowFound = this.rowModel.isLastRowIndexKnown();\r\n        const totalPages = this.pagination.getTotalPages();\r\n        return maxRowFound && totalPages === 0;\r\n    }\r\n\r\n    private updateLabels(): void {\r\n        const lastPageFound = this.rowModel.isLastRowIndexKnown();\r\n        const totalPages = this.pagination.getTotalPages();\r\n        const masterRowCount = this.pagination.getMasterRowCount();\r\n        const rowCount = lastPageFound ? masterRowCount : null;\r\n\r\n        // When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in\r\n        // the grid and the pagination totals will correctly display total = 1. However this is confusing to users as\r\n        // they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.\r\n        if (rowCount === 1) {\r\n            const firstRow = this.rowModel.getRow(0);\r\n\r\n            // a group node with no group or agg data will not be visible to users\r\n            const hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);\r\n            if (hiddenGroupRow) {\r\n                this.setTotalLabelsToZero();\r\n                return;\r\n            }\r\n        }\r\n\r\n        const currentPage = this.pagination.getCurrentPage();\r\n        const pageSize = this.pagination.getPageSize();\r\n\r\n        let startRow: any;\r\n        let endRow: any;\r\n\r\n        if (this.isZeroPagesToDisplay()) {\r\n            startRow = endRow = 0;\r\n        } else {\r\n            startRow = pageSize * currentPage + 1;\r\n            endRow = startRow + pageSize - 1;\r\n            if (lastPageFound && endRow > rowCount!) {\r\n                endRow = rowCount;\r\n            }\r\n        }\r\n\r\n        const theoreticalEndRow = startRow + pageSize - 1;\r\n        const isLoadingPageSize = !lastPageFound && masterRowCount < theoreticalEndRow;\r\n        const lbFirstRowOnPage = this.formatNumber(startRow);\r\n        this.lbFirstRowOnPage.textContent = lbFirstRowOnPage;\r\n        let lbLastRowOnPage: string;\r\n        const localeTextFunc = this.getLocaleTextFunc();\r\n        if (isLoadingPageSize) {\r\n            lbLastRowOnPage = localeTextFunc('pageLastRowUnknown', '?');\r\n        } else {\r\n            lbLastRowOnPage = this.formatNumber(endRow);\r\n        }\r\n        this.lbLastRowOnPage.textContent = lbLastRowOnPage;\r\n\r\n        const pagesExist = totalPages > 0;\r\n        const toDisplay = pagesExist ? currentPage + 1 : 0;\r\n\r\n        const lbCurrent = this.formatNumber(toDisplay);\r\n        this.lbCurrent.textContent = lbCurrent;\r\n\r\n        let lbTotal: string;\r\n        let lbRecordCount: string;\r\n        if (lastPageFound) {\r\n            lbTotal = this.formatNumber(totalPages);\r\n            lbRecordCount = this.formatNumber(rowCount!);\r\n        } else {\r\n            const moreText = localeTextFunc('more', 'more');\r\n            lbTotal = moreText;\r\n            lbRecordCount = moreText;\r\n        }\r\n        this.lbTotal.textContent = lbTotal;\r\n        this.lbRecordCount.textContent = lbRecordCount;\r\n\r\n        this.announceAriaStatus(lbFirstRowOnPage, lbLastRowOnPage, lbRecordCount, lbCurrent, lbTotal);\r\n    }\r\n\r\n    private announceAriaStatus(\r\n        lbFirstRowOnPage: string,\r\n        lbLastRowOnPage: string,\r\n        lbRecordCount: string,\r\n        lbCurrent: string,\r\n        lbTotal: string\r\n    ): void {\r\n        const localeTextFunc = this.getLocaleTextFunc();\r\n        const strPage = localeTextFunc('page', 'Page');\r\n        const strTo = localeTextFunc('to', 'to');\r\n        const strOf = localeTextFunc('of', 'of');\r\n        const ariaRowStatus = `${lbFirstRowOnPage} ${strTo} ${lbLastRowOnPage} ${strOf} ${lbRecordCount}`;\r\n        const ariaPageStatus = `${strPage} ${lbCurrent} ${strOf} ${lbTotal}`;\r\n\r\n        if (ariaRowStatus !== this.ariaRowStatus) {\r\n            this.ariaRowStatus = ariaRowStatus;\r\n            this.ariaAnnounce?.announceValue(ariaRowStatus, 'paginationRow');\r\n        }\r\n        if (ariaPageStatus !== this.ariaPageStatus) {\r\n            this.ariaPageStatus = ariaPageStatus;\r\n            this.ariaAnnounce?.announceValue(ariaPageStatus, 'paginationPage');\r\n        }\r\n    }\r\n\r\n    private setTotalLabelsToZero() {\r\n        const strZero = this.formatNumber(0);\r\n        this.lbFirstRowOnPage.textContent = strZero;\r\n        this.lbCurrent.textContent = strZero;\r\n        this.lbLastRowOnPage.textContent = strZero;\r\n        this.lbTotal.textContent = strZero;\r\n        this.lbRecordCount.textContent = strZero;\r\n        this.announceAriaStatus(strZero, strZero, strZero, strZero, strZero);\r\n    }\r\n}\r\n\r\nexport const PaginationSelector: ComponentSelector = {\r\n    selector: 'AG-PAGINATION',\r\n    component: PaginationComp,\r\n};\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { RowNode } from '../entities/rowNode';\r\nimport type { RowPosition } from '../interfaces/iRowPosition';\r\nimport { _exists } from '../utils/generic';\r\nimport type { ComponentSelector } from '../widgets/component';\r\nimport { PaginationSelector } from './paginationComp';\r\n\r\nexport class PaginationService extends BeanStub implements NamedBean {\r\n    beanName = 'pagination' as const;\r\n\r\n    private active: boolean;\r\n    private paginateChildRows: boolean;\r\n\r\n    // We should track all the different sources of page size, as we can fall back to the next one if one is missing.\r\n    // or if user preferences change (Example: disabling auto page size option should mean we get page size from\r\n    // page size selector value - if a value was previously selected .. otherwise fall back to initial state value).\r\n    // IMPORTANT: We should always use this.pageSize getter to get the page size instead of accessing\r\n    // directly to these variables, as the getter takes care of returning the correct value based on precedence.\r\n    private pageSizeAutoCalculated?: number; // When paginationAutoPageSize = true or when the pages panel is disabled\r\n    private pageSizeFromPageSizeSelector?: number; // When user selects page size from page size selector.\r\n    private pageSizeFromInitialState?: number; // When the initial grid state is loaded, and a page size rehydrated\r\n    private pageSizeFromGridOptions?: number; // When user sets gridOptions.paginationPageSize.\r\n    private defaultPageSize: 100; // When nothing else set, default page size is 100.\r\n\r\n    private totalPages: number;\r\n    private currentPage = 0;\r\n\r\n    private topDisplayedRowIndex = 0;\r\n    private bottomDisplayedRowIndex = 0;\r\n\r\n    private masterRowCount: number = 0;\r\n\r\n    public postConstruct() {\r\n        const gos = this.gos;\r\n        this.active = gos.get('pagination');\r\n        this.pageSizeFromGridOptions = gos.get('paginationPageSize');\r\n        this.paginateChildRows = this.isPaginateChildRows();\r\n\r\n        this.addManagedPropertyListener('pagination', this.onPaginationGridOptionChanged.bind(this));\r\n        this.addManagedPropertyListener('paginationPageSize', this.onPageSizeGridOptionChanged.bind(this));\r\n    }\r\n\r\n    public getPaginationSelector(): ComponentSelector {\r\n        return PaginationSelector;\r\n    }\r\n\r\n    private isPaginateChildRows(): boolean {\r\n        const gos = this.gos;\r\n        const shouldPaginate =\r\n            gos.get('groupHideParentOfSingleChild') ||\r\n            // following two properties deprecated v32.3.0\r\n            gos.get('groupRemoveSingleChildren') ||\r\n            gos.get('groupRemoveLowestSingleChildren');\r\n        if (shouldPaginate) {\r\n            return true;\r\n        }\r\n        return gos.get('paginateChildRows');\r\n    }\r\n\r\n    private onPaginationGridOptionChanged(): void {\r\n        this.active = this.gos.get('pagination');\r\n        this.calculatePages();\r\n\r\n        // important to keep rendered rows, otherwise every time grid is resized,\r\n        // we would destroy all the rows.\r\n        this.dispatchPaginationChangedEvent({ keepRenderedRows: true });\r\n    }\r\n\r\n    private onPageSizeGridOptionChanged(): void {\r\n        this.setPageSize(this.gos.get('paginationPageSize'), 'gridOptions');\r\n    }\r\n\r\n    public goToPage(page: number): void {\r\n        const currentPage = this.currentPage;\r\n        if (!this.active || currentPage === page || typeof currentPage !== 'number') {\r\n            return;\r\n        }\r\n\r\n        this.currentPage = page;\r\n        this.calculatePages();\r\n\r\n        this.dispatchPaginationChangedEvent({ newPage: true });\r\n    }\r\n\r\n    public isRowPresent(rowNode: RowNode): boolean {\r\n        const nodeIsInPage =\r\n            rowNode.rowIndex! >= this.topDisplayedRowIndex && rowNode.rowIndex! <= this.bottomDisplayedRowIndex;\r\n        return nodeIsInPage;\r\n    }\r\n\r\n    private getPageForIndex(index: number): number {\r\n        return Math.floor(index / this.pageSize);\r\n    }\r\n\r\n    public goToPageWithIndex(index: any): void {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n\r\n        const pageNumber = this.getPageForIndex(index);\r\n        this.goToPage(pageNumber);\r\n    }\r\n\r\n    public isRowInPage(row: RowPosition): boolean {\r\n        if (!this.active) {\r\n            return true;\r\n        }\r\n        const rowPage = this.getPageForIndex(row.rowIndex);\r\n        return rowPage === this.currentPage;\r\n    }\r\n\r\n    public getCurrentPage(): number {\r\n        return this.currentPage;\r\n    }\r\n\r\n    public goToNextPage(): void {\r\n        this.goToPage(this.currentPage + 1);\r\n    }\r\n\r\n    public goToPreviousPage(): void {\r\n        this.goToPage(this.currentPage - 1);\r\n    }\r\n\r\n    public goToFirstPage(): void {\r\n        this.goToPage(0);\r\n    }\r\n\r\n    public goToLastPage(): void {\r\n        const rowCount = this.beans.rowModel.getRowCount();\r\n        const lastPage = Math.floor(rowCount / this.pageSize);\r\n        this.goToPage(lastPage);\r\n    }\r\n\r\n    public getPageSize(): number {\r\n        return this.pageSize;\r\n    }\r\n\r\n    public getTotalPages(): number {\r\n        return this.totalPages;\r\n    }\r\n\r\n    /** This is only for state setting before data has been loaded */\r\n    public setPage(page: number): void {\r\n        this.currentPage = page;\r\n    }\r\n\r\n    private get pageSize(): number {\r\n        // Explicitly check for autosize status as this can be set to false before the calculated value is cleared.\r\n        // Due to a race condition in when event listeners are added.\r\n        if (_exists(this.pageSizeAutoCalculated) && this.gos.get('paginationAutoPageSize')) {\r\n            return this.pageSizeAutoCalculated;\r\n        }\r\n        if (_exists(this.pageSizeFromPageSizeSelector)) {\r\n            return this.pageSizeFromPageSizeSelector;\r\n        }\r\n        if (_exists(this.pageSizeFromInitialState)) {\r\n            return this.pageSizeFromInitialState;\r\n        }\r\n        if (_exists(this.pageSizeFromGridOptions)) {\r\n            return this.pageSizeFromGridOptions;\r\n        }\r\n        return this.defaultPageSize;\r\n    }\r\n\r\n    public calculatePages(): void {\r\n        if (this.active) {\r\n            if (this.paginateChildRows) {\r\n                this.calculatePagesAllRows();\r\n            } else {\r\n                this.calculatePagesMasterRowsOnly();\r\n            }\r\n        } else {\r\n            this.calculatedPagesNotActive();\r\n        }\r\n\r\n        this.beans.pageBounds.calculateBounds(this.topDisplayedRowIndex, this.bottomDisplayedRowIndex);\r\n    }\r\n\r\n    public unsetAutoCalculatedPageSize(): void {\r\n        if (this.pageSizeAutoCalculated === undefined) {\r\n            return;\r\n        }\r\n        const oldPageSize = this.pageSizeAutoCalculated;\r\n\r\n        this.pageSizeAutoCalculated = undefined;\r\n\r\n        if (this.pageSize === oldPageSize) {\r\n            return;\r\n        }\r\n\r\n        this.calculatePages();\r\n\r\n        this.dispatchPaginationChangedEvent({ newPageSize: true });\r\n    }\r\n\r\n    public setPageSize(\r\n        size: number | undefined,\r\n        source: 'autoCalculated' | 'pageSizeSelector' | 'initialState' | 'gridOptions'\r\n    ): void {\r\n        const currentSize = this.pageSize;\r\n        switch (source) {\r\n            case 'autoCalculated':\r\n                this.pageSizeAutoCalculated = size;\r\n                break;\r\n            case 'pageSizeSelector':\r\n                this.pageSizeFromPageSizeSelector = size;\r\n                if (this.currentPage !== 0) {\r\n                    this.goToFirstPage();\r\n                }\r\n                break;\r\n            case 'initialState':\r\n                this.pageSizeFromInitialState = size;\r\n                break;\r\n            case 'gridOptions':\r\n                this.pageSizeFromGridOptions = size;\r\n                this.pageSizeFromInitialState = undefined;\r\n                this.pageSizeFromPageSizeSelector = undefined;\r\n                if (this.currentPage !== 0) {\r\n                    this.goToFirstPage();\r\n                }\r\n                break;\r\n        }\r\n\r\n        if (currentSize !== this.pageSize) {\r\n            this.calculatePages();\r\n\r\n            this.dispatchPaginationChangedEvent({ newPageSize: true, keepRenderedRows: true });\r\n        }\r\n    }\r\n\r\n    private setZeroRows(): void {\r\n        this.masterRowCount = 0;\r\n        this.topDisplayedRowIndex = 0;\r\n        this.bottomDisplayedRowIndex = -1;\r\n        this.currentPage = 0;\r\n        this.totalPages = 0;\r\n    }\r\n\r\n    private adjustCurrentPageIfInvalid() {\r\n        const totalPages = this.totalPages;\r\n        if (this.currentPage >= totalPages) {\r\n            this.currentPage = totalPages - 1;\r\n        }\r\n\r\n        const currentPage = this.currentPage;\r\n\r\n        if (!isFinite(currentPage) || isNaN(currentPage) || currentPage < 0) {\r\n            this.currentPage = 0;\r\n        }\r\n    }\r\n\r\n    private calculatePagesMasterRowsOnly(): void {\r\n        const rowModel = this.beans.rowModel;\r\n\r\n        const masterRowCount = rowModel.getTopLevelRowCount();\r\n        this.masterRowCount = masterRowCount;\r\n\r\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\r\n        if (masterRowCount <= 0) {\r\n            this.setZeroRows();\r\n            return;\r\n        }\r\n\r\n        const pageSize = this.pageSize;\r\n\r\n        const masterLastRowIndex = masterRowCount - 1;\r\n        this.totalPages = Math.floor(masterLastRowIndex / pageSize) + 1;\r\n\r\n        this.adjustCurrentPageIfInvalid();\r\n\r\n        const currentPage = this.currentPage;\r\n\r\n        const masterPageStartIndex = pageSize * currentPage;\r\n        let masterPageEndIndex = pageSize * (currentPage + 1) - 1;\r\n\r\n        if (masterPageEndIndex > masterLastRowIndex) {\r\n            masterPageEndIndex = masterLastRowIndex;\r\n        }\r\n\r\n        this.topDisplayedRowIndex = rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\r\n        // masterRows[masterPageStartIndex].rowIndex;\r\n\r\n        if (masterPageEndIndex === masterLastRowIndex) {\r\n            // if showing the last master row, then we want to show the very last row of the model\r\n            this.bottomDisplayedRowIndex = rowModel.getRowCount() - 1;\r\n        } else {\r\n            const firstIndexNotToShow = rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\r\n            //masterRows[masterPageEndIndex + 1].rowIndex;\r\n            // this gets the index of the last child - eg current row is open, we want to display all children,\r\n            // the index of the last child is one less than the index of the next parent row.\r\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\r\n        }\r\n    }\r\n\r\n    public getMasterRowCount(): number {\r\n        return this.masterRowCount;\r\n    }\r\n\r\n    private calculatePagesAllRows(): void {\r\n        const masterRowCount = this.beans.rowModel.getRowCount();\r\n        this.masterRowCount = masterRowCount;\r\n\r\n        if (masterRowCount === 0) {\r\n            this.setZeroRows();\r\n            return;\r\n        }\r\n\r\n        const { pageSize, currentPage } = this;\r\n        const maxRowIndex = masterRowCount - 1;\r\n        this.totalPages = Math.floor(maxRowIndex / pageSize) + 1;\r\n\r\n        this.adjustCurrentPageIfInvalid();\r\n\r\n        this.topDisplayedRowIndex = pageSize * currentPage;\r\n        this.bottomDisplayedRowIndex = pageSize * (currentPage + 1) - 1;\r\n\r\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\r\n            this.bottomDisplayedRowIndex = maxRowIndex;\r\n        }\r\n    }\r\n\r\n    private calculatedPagesNotActive(): void {\r\n        // when pagination is not active we don't use any page size variables,\r\n        // however need to unset this so if enabled we recalculate.\r\n        this.setPageSize(undefined, 'autoCalculated');\r\n        this.totalPages = 1;\r\n        this.currentPage = 0;\r\n        this.topDisplayedRowIndex = 0;\r\n        this.bottomDisplayedRowIndex = this.beans.rowModel.getRowCount() - 1;\r\n    }\r\n\r\n    private dispatchPaginationChangedEvent(params: {\r\n        newPage?: boolean;\r\n        newPageSize?: boolean;\r\n        keepRenderedRows?: boolean;\r\n    }): void {\r\n        const { keepRenderedRows = false, newPage = false, newPageSize = false } = params;\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'paginationChanged',\r\n            animate: false,\r\n            newData: false,\r\n            newPage,\r\n            newPageSize,\r\n            keepRenderedRows,\r\n        });\r\n    }\r\n}\r\n", "import type { _PaginationGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { PopupModule } from '../widgets/popupModule';\r\nimport {\r\n    paginationGetCurrentPage,\r\n    paginationGetPageSize,\r\n    paginationGetRowCount,\r\n    paginationGetTotalPages,\r\n    paginationGoToFirstPage,\r\n    paginationGoToLastPage,\r\n    paginationGoToNextPage,\r\n    paginationGoToPage,\r\n    paginationGoToPreviousPage,\r\n    paginationIsLastPageFound,\r\n} from './paginationApi';\r\nimport { PaginationAutoPageSizeService } from './paginationAutoPageSizeService';\r\nimport { PaginationService } from './paginationService';\r\n\r\n/**\r\n * @feature Rows -> Row Pagination\r\n * @gridOption pagination\r\n */\r\nexport const PaginationModule: _ModuleWithApi<_PaginationGridApi> = {\r\n    moduleName: 'Pagination',\r\n    version: VERSION,\r\n    beans: [PaginationService, PaginationAutoPageSizeService],\r\n    icons: {\r\n        // \"go to first\" button in pagination controls\r\n        first: 'first',\r\n        // \"go to previous\" button in pagination controls\r\n        previous: 'previous',\r\n        // \"go to next\" button in pagination controls\r\n        next: 'next',\r\n        // \"go to last\" button in pagination controls\r\n        last: 'last',\r\n    },\r\n    apiFunctions: {\r\n        paginationIsLastPageFound,\r\n        paginationGetPageSize,\r\n        paginationGetCurrentPage,\r\n        paginationGetTotalPages,\r\n        paginationGetRowCount,\r\n        paginationGoToNextPage,\r\n        paginationGoToPreviousPage,\r\n        paginationGoToFirstPage,\r\n        paginationGoToLastPage,\r\n        paginationGoToPage,\r\n    },\r\n    dependsOn: [PopupModule],\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { RenderedRowEvent } from '../interfaces/iCallbackParams';\r\nimport type { RedrawRowsParams } from '../interfaces/iRedrawRowsParams';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport function redrawRows<TData = any>(beans: BeanCollection, params: RedrawRowsParams<TData> = {}): void {\r\n    const rowNodes = params ? params.rowNodes : undefined;\r\n    beans.frameworkOverrides.wrapIncoming(() => beans.rowRenderer.redrawRows(rowNodes));\r\n}\r\n\r\nexport function setRowNodeExpanded(\r\n    beans: BeanCollection,\r\n    rowNode: IRowNode,\r\n    expanded: boolean,\r\n    expandParents?: boolean,\r\n    forceSync?: boolean\r\n): void {\r\n    if (rowNode) {\r\n        // expand all parents recursively, except root node.\r\n        if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {\r\n            setRowNodeExpanded(beans, rowNode.parent, expanded, expandParents, forceSync);\r\n        }\r\n\r\n        rowNode.setExpanded(expanded, undefined, forceSync);\r\n    }\r\n}\r\n\r\nexport function getRowNode<TData = any>(beans: BeanCollection, id: string): IRowNode<TData> | undefined {\r\n    return beans.rowModel.getRowNode(id);\r\n}\r\n\r\nexport function addRenderedRowListener(\r\n    beans: BeanCollection,\r\n    eventName: RenderedRowEvent,\r\n    rowIndex: number,\r\n    callback: (...args: any[]) => any\r\n) {\r\n    beans.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback as any);\r\n}\r\n\r\nexport function getRenderedNodes<TData = any>(beans: BeanCollection): IRowNode<TData>[] {\r\n    return beans.rowRenderer.getRenderedNodes();\r\n}\r\n\r\nexport function forEachNode<TData = any>(\r\n    beans: BeanCollection,\r\n    callback: (rowNode: IRowNode<TData>, index: number) => void,\r\n    includeFooterNodes?: boolean\r\n) {\r\n    beans.rowModel.forEachNode(callback, includeFooterNodes);\r\n}\r\n\r\nexport function getFirstDisplayedRowIndex(beans: BeanCollection): number {\r\n    return beans.rowRenderer.firstRenderedRow;\r\n}\r\n\r\nexport function getLastDisplayedRowIndex(beans: BeanCollection): number {\r\n    return beans.rowRenderer.lastRenderedRow;\r\n}\r\n\r\nexport function getDisplayedRowAtIndex<TData = any>(beans: BeanCollection, index: number): IRowNode<TData> | undefined {\r\n    return beans.rowModel.getRow(index);\r\n}\r\n\r\nexport function getDisplayedRowCount(beans: BeanCollection): number {\r\n    return beans.rowModel.getRowCount();\r\n}\r\n", "import type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport type { _RowGridApi, _ScrollGridApi } from './gridApi';\r\nimport {\r\n    addRenderedRowListener,\r\n    forEachNode,\r\n    getDisplayedRowAtIndex,\r\n    getDisplayedRowCount,\r\n    getFirstDisplayedRowIndex,\r\n    getLastDisplayedRowIndex,\r\n    getRenderedNodes,\r\n    getRowNode,\r\n    redrawRows,\r\n    setRowNodeExpanded,\r\n} from './rowApi';\r\nimport {\r\n    ensureColumnVisible,\r\n    ensureIndexVisible,\r\n    ensureNodeVisible,\r\n    getHorizontalPixelRange,\r\n    getVerticalPixelRange,\r\n} from './scrollApi';\r\n\r\n/**\r\n * @feature Rows\r\n */\r\nexport const RowApiModule: _ModuleWithApi<_RowGridApi<any>> = {\r\n    moduleName: 'RowApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        redrawRows,\r\n        setRowNodeExpanded,\r\n        getRowNode,\r\n        addRenderedRowListener,\r\n        getRenderedNodes,\r\n        forEachNode,\r\n        getFirstDisplayedRowIndex,\r\n        getLastDisplayedRowIndex,\r\n        getDisplayedRowAtIndex,\r\n        getDisplayedRowCount,\r\n    },\r\n};\r\n\r\n/**\r\n * @feature Scrolling\r\n */\r\nexport const ScrollApiModule: _ModuleWithApi<_ScrollGridApi<any>> = {\r\n    moduleName: 'ScrollApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        getVerticalPixelRange,\r\n        getHorizontalPixelRange,\r\n        ensureColumnVisible,\r\n        ensureIndexVisible,\r\n        ensureNodeVisible,\r\n    },\r\n};\r\n", "import { _unwrapUserComp } from '../components/framework/unwrapUserComp';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport { _getRowHeightAsNumber } from '../gridOptionsUtils';\r\nimport { getHeaderHeight } from '../headerRendering/headerUtils';\r\nimport type { RefreshCellsParams } from '../interfaces/iCellsParams';\r\nimport type { GetCellRendererInstancesParams, ICellRenderer } from './cellRenderers/iCellRenderer';\r\nimport { isRowInMap, mapRowNodes } from './rowRenderer';\r\n\r\nexport function setGridAriaProperty(beans: BeanCollection, property: string, value: string | null): void {\r\n    if (!property) {\r\n        return;\r\n    }\r\n    const eGrid = beans.ctrlsSvc.getGridBodyCtrl().eGridBody;\r\n    const ariaProperty = `aria-${property}`;\r\n\r\n    if (value === null) {\r\n        eGrid.removeAttribute(ariaProperty);\r\n    } else {\r\n        eGrid.setAttribute(ariaProperty, value);\r\n    }\r\n}\r\n\r\nexport function refreshCells<TData = any>(beans: BeanCollection, params: RefreshCellsParams<TData> = {}): void {\r\n    beans.frameworkOverrides.wrapIncoming(() => beans.rowRenderer.refreshCells(params));\r\n}\r\n\r\nexport function refreshHeader(beans: BeanCollection) {\r\n    beans.frameworkOverrides.wrapIncoming(() =>\r\n        beans.ctrlsSvc.getHeaderRowContainerCtrls().forEach((c) => c.refresh())\r\n    );\r\n}\r\n\r\nexport function isAnimationFrameQueueEmpty(beans: BeanCollection): boolean {\r\n    return beans.animationFrameSvc?.isQueueEmpty() ?? true;\r\n}\r\n\r\nexport function flushAllAnimationFrames(beans: BeanCollection): void {\r\n    beans.animationFrameSvc?.flushAllFrames();\r\n}\r\n\r\nexport function getSizesForCurrentTheme(beans: BeanCollection) {\r\n    return {\r\n        rowHeight: _getRowHeightAsNumber(beans),\r\n        headerHeight: getHeaderHeight(beans),\r\n    };\r\n}\r\n\r\nexport function getCellRendererInstances<TData = any>(\r\n    beans: BeanCollection,\r\n    params: GetCellRendererInstancesParams<TData> = {}\r\n): ICellRenderer[] {\r\n    const cellRenderers: ICellRenderer[] = [];\r\n    beans.rowRenderer.getCellCtrls(params.rowNodes, params.columns as AgColumn[]).forEach((cellCtrl) => {\r\n        const cellRenderer = cellCtrl.getCellRenderer();\r\n        if (cellRenderer != null) {\r\n            cellRenderers.push(_unwrapUserComp(cellRenderer));\r\n        }\r\n    });\r\n    if (params.columns?.length) {\r\n        return cellRenderers;\r\n    }\r\n\r\n    const fullWidthRenderers: ICellRenderer[] = [];\r\n    const rowIdMap = mapRowNodes(params.rowNodes);\r\n\r\n    beans.rowRenderer.getAllRowCtrls().forEach((rowCtrl) => {\r\n        if (rowIdMap && !isRowInMap(rowCtrl.rowNode, rowIdMap)) {\r\n            return;\r\n        }\r\n\r\n        if (!rowCtrl.isFullWidth()) {\r\n            return;\r\n        }\r\n\r\n        const renderers = rowCtrl.getFullWidthCellRenderers();\r\n        for (let i = 0; i < renderers.length; i++) {\r\n            const renderer = renderers[i];\r\n            if (renderer != null) {\r\n                fullWidthRenderers.push(_unwrapUserComp(renderer));\r\n            }\r\n        }\r\n    });\r\n\r\n    return [...fullWidthRenderers, ...cellRenderers];\r\n}\r\n", "import type { _RenderGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport {\r\n    flushAllAnimationFrames,\r\n    getCellRendererInstances,\r\n    getSizesForCurrentTheme,\r\n    isAnimationFrameQueueEmpty,\r\n    refreshCells,\r\n    refreshHeader,\r\n    setGridAriaProperty,\r\n} from './renderApi';\r\n\r\n/**\r\n * @feature Rendering\r\n */\r\nexport const RenderApiModule: _ModuleWithApi<_RenderGridApi<any>> = {\r\n    moduleName: 'RenderApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        setGridAriaProperty,\r\n        refreshCells,\r\n        refreshHeader,\r\n        isAnimationFrameQueueEmpty,\r\n        flushAllAnimationFrames,\r\n        getSizesForCurrentTheme,\r\n        getCellRendererInstances,\r\n    },\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { ColDef } from '../entities/colDef';\r\nimport type { ISizeColumnsToFitParams } from '../interfaces/autoSize';\r\nimport type { Column } from '../interfaces/iColumn';\r\n\r\nexport function sizeColumnsToFit(beans: BeanCollection, paramsOrGridWidth?: ISizeColumnsToFitParams | number) {\r\n    if (typeof paramsOrGridWidth === 'number') {\r\n        beans.colAutosize?.sizeColumnsToFit(paramsOrGridWidth, 'api');\r\n    } else {\r\n        beans.colAutosize?.sizeColumnsToFitGridBody(paramsOrGridWidth);\r\n    }\r\n}\r\n\r\nexport function autoSizeColumns(beans: BeanCollection, keys: (string | ColDef | Column)[], skipHeader?: boolean): void {\r\n    beans.colAutosize?.autoSizeCols({ colKeys: keys, skipHeader: skipHeader, source: 'api' });\r\n}\r\n\r\nexport function autoSizeAllColumns(beans: BeanCollection, skipHeader?: boolean): void {\r\n    beans.colAutosize?.autoSizeAllColumns('api', skipHeader);\r\n}\r\n", "import { dispatchColumnResizedEvent } from '../columns/columnEventUtils';\r\nimport type { ColKey, Maybe } from '../columns/columnModel';\r\nimport { getWidthOfColsInList } from '../columns/columnUtils';\r\nimport type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { AgColumnGroup } from '../entities/agColumnGroup';\r\nimport type { ColumnEventType } from '../events';\r\nimport type { HeaderGroupCellCtrl } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\r\nimport type { IColumnLimit, ISizeColumnsToFitParams } from '../interfaces/autoSize';\r\nimport { _removeFromArray } from '../utils/array';\r\nimport { _getInnerWidth } from '../utils/dom';\r\nimport { _warn } from '../validation/logging';\r\nimport { TouchListener } from '../widgets/touchListener';\r\n\r\nexport class ColumnAutosizeService extends BeanStub implements NamedBean {\r\n    beanName = 'colAutosize' as const;\r\n\r\n    private timesDelayed = 0;\r\n\r\n    // when we're waiting for cell data types to be inferred, we need to defer column resizing\r\n    public shouldQueueResizeOperations: boolean = false;\r\n    private resizeOperationQueue: (() => void)[] = [];\r\n\r\n    public postConstruct(): void {\r\n        this.addManagedEventListeners({ firstDataRendered: () => this.onFirstDataRendered() });\r\n    }\r\n\r\n    public autoSizeCols(params: {\r\n        colKeys: ColKey[];\r\n        skipHeader?: boolean;\r\n        skipHeaderGroups?: boolean;\r\n        stopAtGroup?: AgColumnGroup;\r\n        source?: ColumnEventType;\r\n    }): void {\r\n        if (this.shouldQueueResizeOperations) {\r\n            this.pushResizeOperation(() => this.autoSizeCols(params));\r\n            return;\r\n        }\r\n\r\n        const { colKeys, skipHeader, skipHeaderGroups, stopAtGroup, source = 'api' } = params;\r\n        // because of column virtualisation, we can only do this function on columns that are\r\n        // actually rendered, as non-rendered columns (outside the viewport and not rendered\r\n        // due to column virtualisation) are not present. this can result in all rendered columns\r\n        // getting narrowed, which in turn introduces more rendered columns on the RHS which\r\n        // did not get autosized in the original run, leaving the visible grid with columns on\r\n        // the LHS sized, but RHS no. so we keep looping through the visible columns until\r\n        // no more cols are available (rendered) to be resized\r\n\r\n        const { animationFrameSvc, renderStatus, colModel, autoWidthCalc, visibleCols } = this.beans;\r\n\r\n        // we autosize after animation frames finish in case any cell renderers need to complete first. this can\r\n        // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid\r\n        // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).\r\n        animationFrameSvc?.flushAllFrames();\r\n\r\n        if (this.timesDelayed < 5 && renderStatus && !renderStatus.areHeaderCellsRendered()) {\r\n            // This is needed for React, as it doesn't render the headers synchronously all the time.\r\n            // Added a defensive check to avoid infinite loop in case headers are never rendered.\r\n            this.timesDelayed++;\r\n            setTimeout(() => {\r\n                if (this.isAlive()) {\r\n                    this.autoSizeCols(params);\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        this.timesDelayed = 0;\r\n\r\n        // keep track of which cols we have resized in here\r\n        const columnsAutosized: AgColumn[] = [];\r\n        // initialise with anything except 0 so that while loop executes at least once\r\n        let changesThisTimeAround = -1;\r\n\r\n        const shouldSkipHeader = skipHeader != null ? skipHeader : this.gos.get('skipHeaderOnAutoSize');\r\n        const shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;\r\n\r\n        while (changesThisTimeAround !== 0) {\r\n            changesThisTimeAround = 0;\r\n\r\n            const updatedColumns: AgColumn[] = [];\r\n\r\n            colKeys.forEach((key) => {\r\n                if (!key) {\r\n                    return;\r\n                }\r\n                const column = colModel.getCol(key);\r\n                if (!column) {\r\n                    return;\r\n                }\r\n\r\n                // if already autosized, skip it\r\n                if (columnsAutosized.indexOf(column) >= 0) {\r\n                    return;\r\n                }\r\n\r\n                // get how wide this col should be\r\n                const preferredWidth = autoWidthCalc!.getPreferredWidthForColumn(column, shouldSkipHeader);\r\n\r\n                // preferredWidth = -1 if this col is not on the screen\r\n                if (preferredWidth > 0) {\r\n                    const newWidth = normaliseColumnWidth(column, preferredWidth);\r\n                    column.setActualWidth(newWidth, source);\r\n                    columnsAutosized.push(column);\r\n                    changesThisTimeAround++;\r\n                }\r\n\r\n                updatedColumns.push(column);\r\n            });\r\n\r\n            if (!updatedColumns.length) {\r\n                continue;\r\n            }\r\n\r\n            visibleCols.refresh(source);\r\n        }\r\n\r\n        if (!shouldSkipHeaderGroups) {\r\n            this.autoSizeColumnGroupsByColumns(colKeys, source, stopAtGroup);\r\n        }\r\n\r\n        dispatchColumnResizedEvent(this.eventSvc, columnsAutosized, true, 'autosizeColumns');\r\n    }\r\n\r\n    public autoSizeColumn(key: Maybe<ColKey>, source: ColumnEventType, skipHeader?: boolean): void {\r\n        if (key) {\r\n            this.autoSizeCols({ colKeys: [key], skipHeader, skipHeaderGroups: true, source });\r\n        }\r\n    }\r\n\r\n    private autoSizeColumnGroupsByColumns(\r\n        keys: ColKey[],\r\n        source: ColumnEventType,\r\n        stopAtGroup?: AgColumnGroup\r\n    ): AgColumn[] {\r\n        const { colModel, ctrlsSvc } = this.beans;\r\n        const columnGroups: Set<AgColumnGroup> = new Set();\r\n        const columns = colModel.getColsForKeys(keys);\r\n\r\n        columns.forEach((col) => {\r\n            let parent: AgColumnGroup | null = col.getParent();\r\n            while (parent && parent != stopAtGroup) {\r\n                if (!parent.isPadding()) {\r\n                    columnGroups.add(parent);\r\n                }\r\n                parent = parent.getParent();\r\n            }\r\n        });\r\n\r\n        let headerGroupCtrl: HeaderGroupCellCtrl | undefined;\r\n\r\n        const resizedColumns: AgColumn[] = [];\r\n\r\n        for (const columnGroup of columnGroups) {\r\n            for (const headerContainerCtrl of ctrlsSvc.getHeaderRowContainerCtrls()) {\r\n                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup) as\r\n                    | HeaderGroupCellCtrl\r\n                    | undefined;\r\n                if (headerGroupCtrl) {\r\n                    break;\r\n                }\r\n            }\r\n            if (headerGroupCtrl) {\r\n                headerGroupCtrl.resizeLeafColumnsToFit(source);\r\n            }\r\n        }\r\n\r\n        return resizedColumns;\r\n    }\r\n\r\n    public autoSizeAllColumns(source: ColumnEventType, skipHeader?: boolean): void {\r\n        if (this.shouldQueueResizeOperations) {\r\n            this.pushResizeOperation(() => this.autoSizeAllColumns(source, skipHeader));\r\n            return;\r\n        }\r\n\r\n        const allDisplayedColumns = this.beans.visibleCols.allCols;\r\n        this.autoSizeCols({ colKeys: allDisplayedColumns, skipHeader, source });\r\n    }\r\n\r\n    public addColumnAutosize(element: HTMLElement, column: AgColumn): () => void {\r\n        const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\r\n\r\n        const autoSizeColListener = () => {\r\n            this.autoSizeColumn(column, 'uiColumnResized', skipHeaderOnAutoSize);\r\n        };\r\n\r\n        element.addEventListener('dblclick', autoSizeColListener);\r\n        const touchListener: TouchListener = new TouchListener(element);\r\n        touchListener.addEventListener('doubleTap', autoSizeColListener);\r\n\r\n        return () => {\r\n            element.removeEventListener('dblclick', autoSizeColListener);\r\n            touchListener.removeEventListener('doubleTap', autoSizeColListener);\r\n            touchListener.destroy();\r\n        };\r\n    }\r\n\r\n    public addColumnGroupResize(element: HTMLElement, columnGroup: AgColumnGroup, callback: () => void): () => void {\r\n        const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\r\n\r\n        const listener = () => {\r\n            // get list of all the column keys we are responsible for\r\n            const keys: string[] = [];\r\n            const leafCols = columnGroup.getDisplayedLeafColumns();\r\n\r\n            leafCols.forEach((column) => {\r\n                // not all cols in the group may be participating with auto-resize\r\n                if (!column.getColDef().suppressAutoSize) {\r\n                    keys.push(column.getColId());\r\n                }\r\n            });\r\n\r\n            if (keys.length > 0) {\r\n                this.autoSizeCols({\r\n                    colKeys: keys,\r\n                    skipHeader: skipHeaderOnAutoSize,\r\n                    stopAtGroup: columnGroup,\r\n                    source: 'uiColumnResized',\r\n                });\r\n            }\r\n\r\n            callback();\r\n        };\r\n\r\n        element.addEventListener('dblclick', listener);\r\n\r\n        return () => element.removeEventListener('dblclick', listener);\r\n    }\r\n\r\n    // method will call itself if no available width. this covers if the grid\r\n    // isn't visible, but is just about to be visible.\r\n    public sizeColumnsToFitGridBody(params?: ISizeColumnsToFitParams, nextTimeout?: number): void {\r\n        if (!this.isAlive()) {\r\n            return;\r\n        }\r\n\r\n        const { ctrlsSvc, scrollVisibleSvc } = this.beans;\r\n        const gridBodyCtrl = ctrlsSvc.getGridBodyCtrl();\r\n        const removeScrollWidth = gridBodyCtrl.isVerticalScrollShowing();\r\n        const scrollWidthToRemove = removeScrollWidth ? scrollVisibleSvc.getScrollbarWidth() : 0;\r\n        // bodyViewportWidth should be calculated from eGridBody, not eBodyViewport\r\n        // because we change the width of the bodyViewport to hide the real browser scrollbar\r\n        const bodyViewportWidth = _getInnerWidth(gridBodyCtrl.eGridBody);\r\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\r\n\r\n        if (availableWidth > 0) {\r\n            this.sizeColumnsToFit(availableWidth, 'sizeColumnsToFit', false, params);\r\n            return;\r\n        }\r\n\r\n        if (nextTimeout === undefined) {\r\n            window.setTimeout(() => {\r\n                this.sizeColumnsToFitGridBody(params, 100);\r\n            }, 0);\r\n        } else if (nextTimeout === 100) {\r\n            window.setTimeout(() => {\r\n                this.sizeColumnsToFitGridBody(params, 500);\r\n            }, 100);\r\n        } else if (nextTimeout === 500) {\r\n            window.setTimeout(() => {\r\n                this.sizeColumnsToFitGridBody(params, -1);\r\n            }, 500);\r\n        } else {\r\n            // Grid coming back with zero width, maybe the grid is not visible yet on the screen?\r\n            _warn(29);\r\n        }\r\n    }\r\n\r\n    // called from api\r\n    public sizeColumnsToFit(\r\n        gridWidth: any,\r\n        source: ColumnEventType = 'sizeColumnsToFit',\r\n        silent?: boolean,\r\n        params?: ISizeColumnsToFitParams\r\n    ): void {\r\n        if (this.shouldQueueResizeOperations) {\r\n            this.pushResizeOperation(() => this.sizeColumnsToFit(gridWidth, source, silent, params));\r\n            return;\r\n        }\r\n\r\n        const limitsMap: { [colId: string]: Omit<IColumnLimit, 'key'> } = {};\r\n        if (params) {\r\n            params?.columnLimits?.forEach(({ key, ...dimensions }) => {\r\n                limitsMap[typeof key === 'string' ? key : key.getColId()] = dimensions;\r\n            });\r\n        }\r\n\r\n        // avoid divide by zero\r\n        const allDisplayedColumns = this.beans.visibleCols.allCols;\r\n\r\n        const doColumnsAlreadyFit = gridWidth === getWidthOfColsInList(allDisplayedColumns);\r\n        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {\r\n            return;\r\n        }\r\n\r\n        const colsToSpread: AgColumn[] = [];\r\n        const colsToNotSpread: AgColumn[] = [];\r\n\r\n        allDisplayedColumns.forEach((column) => {\r\n            if (column.getColDef().suppressSizeToFit === true) {\r\n                colsToNotSpread.push(column);\r\n            } else {\r\n                colsToSpread.push(column);\r\n            }\r\n        });\r\n\r\n        // make a copy of the cols that are going to be resized\r\n        const colsToDispatchEventFor = colsToSpread.slice(0);\r\n        let finishedResizing = false;\r\n\r\n        const moveToNotSpread = (column: AgColumn) => {\r\n            _removeFromArray(colsToSpread, column);\r\n            colsToNotSpread.push(column);\r\n        };\r\n\r\n        // resetting cols to their original width makes the sizeColumnsToFit more deterministic,\r\n        // rather than depending on the current size of the columns. most users call sizeColumnsToFit\r\n        // immediately after grid is created, so will make no difference. however if application is calling\r\n        // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want\r\n        // the columns to start shrinking / growing over time.\r\n        //\r\n        // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events\r\n        // for this reason we need to manually dispatch resize events after the resize has been done for each column.\r\n        colsToSpread.forEach((column) => {\r\n            column.resetActualWidth(source);\r\n\r\n            const widthOverride = limitsMap?.[column.getId()];\r\n            const minOverride = widthOverride?.minWidth ?? params?.defaultMinWidth;\r\n            const maxOverride = widthOverride?.maxWidth ?? params?.defaultMaxWidth;\r\n\r\n            const colWidth = column.getActualWidth();\r\n            if (typeof minOverride === 'number' && colWidth < minOverride) {\r\n                column.setActualWidth(minOverride, source, true);\r\n            } else if (typeof maxOverride === 'number' && colWidth > maxOverride) {\r\n                column.setActualWidth(maxOverride, source, true);\r\n            }\r\n        });\r\n\r\n        while (!finishedResizing) {\r\n            finishedResizing = true;\r\n            const availablePixels = gridWidth - getWidthOfColsInList(colsToNotSpread);\r\n            if (availablePixels <= 0) {\r\n                // no width, set everything to minimum\r\n                colsToSpread.forEach((column) => {\r\n                    const widthOverride = limitsMap?.[column.getId()]?.minWidth ?? params?.defaultMinWidth;\r\n                    if (typeof widthOverride === 'number') {\r\n                        column.setActualWidth(widthOverride, source, true);\r\n                        return;\r\n                    }\r\n                    column.setActualWidth(column.minWidth, source);\r\n                });\r\n            } else {\r\n                const scale = availablePixels / getWidthOfColsInList(colsToSpread);\r\n                // we set the pixels for the last col based on what's left, as otherwise\r\n                // we could be a pixel or two short or extra because of rounding errors.\r\n                let pixelsForLastCol = availablePixels;\r\n                // backwards through loop, as we are removing items as we go\r\n                for (let i = colsToSpread.length - 1; i >= 0; i--) {\r\n                    const column = colsToSpread[i];\r\n\r\n                    const widthOverride = limitsMap?.[column.getId()];\r\n                    const minOverride = widthOverride?.minWidth ?? params?.defaultMinWidth;\r\n                    const maxOverride = widthOverride?.maxWidth ?? params?.defaultMaxWidth;\r\n                    const colMinWidth = column.getMinWidth();\r\n                    const colMaxWidth = column.getMaxWidth();\r\n                    const minWidth =\r\n                        typeof minOverride === 'number' && minOverride > colMinWidth ? minOverride : colMinWidth;\r\n                    const maxWidth =\r\n                        typeof maxOverride === 'number' && maxOverride < colMaxWidth ? maxOverride : colMaxWidth;\r\n                    let newWidth = Math.round(column.getActualWidth() * scale);\r\n\r\n                    if (newWidth < minWidth) {\r\n                        newWidth = minWidth;\r\n                        moveToNotSpread(column);\r\n                        finishedResizing = false;\r\n                    } else if (newWidth > maxWidth) {\r\n                        newWidth = maxWidth;\r\n                        moveToNotSpread(column);\r\n                        finishedResizing = false;\r\n                    } else if (i === 0) {\r\n                        // if this is the last column\r\n                        newWidth = pixelsForLastCol;\r\n                    }\r\n\r\n                    column.setActualWidth(newWidth, source, true);\r\n                    pixelsForLastCol -= newWidth;\r\n                }\r\n            }\r\n        }\r\n\r\n        // see notes above\r\n        colsToDispatchEventFor.forEach((col) => {\r\n            col.fireColumnWidthChangedEvent(source);\r\n        });\r\n\r\n        const visibleCols = this.beans.visibleCols;\r\n        visibleCols.setLeftValues(source);\r\n        visibleCols.updateBodyWidths();\r\n\r\n        if (silent) {\r\n            return;\r\n        }\r\n\r\n        dispatchColumnResizedEvent(this.eventSvc, colsToDispatchEventFor, true, source);\r\n    }\r\n\r\n    public applyAutosizeStrategy(): void {\r\n        const autoSizeStrategy = this.gos.get('autoSizeStrategy');\r\n        if (!autoSizeStrategy) {\r\n            return;\r\n        }\r\n\r\n        const { type } = autoSizeStrategy;\r\n        // ensure things like aligned grids have linked first\r\n        setTimeout(() => {\r\n            if (type === 'fitGridWidth') {\r\n                const { columnLimits: propColumnLimits, defaultMinWidth, defaultMaxWidth } = autoSizeStrategy;\r\n                const columnLimits = propColumnLimits?.map(({ colId: key, minWidth, maxWidth }) => ({\r\n                    key,\r\n                    minWidth,\r\n                    maxWidth,\r\n                }));\r\n                this.sizeColumnsToFitGridBody({\r\n                    defaultMinWidth,\r\n                    defaultMaxWidth,\r\n                    columnLimits,\r\n                });\r\n            } else if (type === 'fitProvidedWidth') {\r\n                this.sizeColumnsToFit(autoSizeStrategy.width, 'sizeColumnsToFit');\r\n            }\r\n        });\r\n    }\r\n\r\n    private onFirstDataRendered(): void {\r\n        const autoSizeStrategy = this.gos.get('autoSizeStrategy');\r\n        if (autoSizeStrategy?.type !== 'fitCellContents') {\r\n            return;\r\n        }\r\n\r\n        const { colIds: columns, skipHeader } = autoSizeStrategy;\r\n        // ensure render has finished\r\n        setTimeout(() => {\r\n            if (columns) {\r\n                this.autoSizeCols({\r\n                    colKeys: columns,\r\n                    skipHeader,\r\n                    source: 'autosizeColumns',\r\n                });\r\n            } else {\r\n                this.autoSizeAllColumns('autosizeColumns', skipHeader);\r\n            }\r\n        });\r\n    }\r\n\r\n    public processResizeOperations(): void {\r\n        this.shouldQueueResizeOperations = false;\r\n        this.resizeOperationQueue.forEach((resizeOperation) => resizeOperation());\r\n        this.resizeOperationQueue = [];\r\n    }\r\n\r\n    public pushResizeOperation(func: () => void): void {\r\n        this.resizeOperationQueue.push(func);\r\n    }\r\n\r\n    public override destroy(): void {\r\n        this.resizeOperationQueue.length = 0;\r\n        super.destroy();\r\n    }\r\n}\r\n\r\n/** returns the width we can set to this col, taking into consideration min and max widths */\r\nfunction normaliseColumnWidth(column: AgColumn, newWidth: number): number {\r\n    const minWidth = column.getMinWidth();\r\n\r\n    if (newWidth < minWidth) {\r\n        newWidth = minWidth;\r\n    }\r\n\r\n    const maxWidth = column.getMaxWidth();\r\n    if (column.isGreaterThanMax(newWidth)) {\r\n        newWidth = maxWidth;\r\n    }\r\n\r\n    return newWidth;\r\n}\r\n", "import type { _ColumnAutosizeApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { AutoWidthModule } from '../rendering/autoWidthModule';\r\nimport { VERSION } from '../version';\r\nimport { autoSizeAllColumns, autoSizeColumns, sizeColumnsToFit } from './columnAutosizeApi';\r\nimport { ColumnAutosizeService } from './columnAutosizeService';\r\n\r\n/**\r\n * @feature Columns -> Column Sizing\r\n * @gridOption autoSizeStrategy\r\n */\r\nexport const ColumnAutoSizeModule: _ModuleWithApi<_ColumnAutosizeApi> = {\r\n    moduleName: 'ColumnAutoSize',\r\n    version: VERSION,\r\n    beans: [ColumnAutosizeService],\r\n    apiFunctions: {\r\n        sizeColumnsToFit,\r\n        autoSizeColumns,\r\n        autoSizeAllColumns,\r\n    },\r\n    dependsOn: [AutoWidthModule],\r\n};\r\n", "import type { BeanCollection } from '../context/context';\r\nimport type { IRowNode } from '../interfaces/iRowNode';\r\n\r\nexport function getPinnedTopRowCount(beans: BeanCollection): number {\r\n    return beans.pinnedRowModel?.getPinnedTopRowCount() ?? 0;\r\n}\r\n\r\nexport function getPinnedBottomRowCount(beans: BeanCollection): number {\r\n    return beans.pinnedRowModel?.getPinnedBottomRowCount() ?? 0;\r\n}\r\n\r\nexport function getPinnedTopRow(beans: BeanCollection, index: number): IRowNode | undefined {\r\n    return beans.pinnedRowModel?.getPinnedTopRow(index);\r\n}\r\n\r\nexport function getPinnedBottomRow(beans: BeanCollection, index: number): IRowNode | undefined {\r\n    return beans.pinnedRowModel?.getPinnedBottomRow(index);\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport { ROW_ID_PREFIX_BOTTOM_PINNED, ROW_ID_PREFIX_TOP_PINNED, RowNode } from '../entities/rowNode';\r\nimport type { CssVariablesChanged } from '../events';\r\nimport { _getRowHeightForNode, _getRowIdCallback } from '../gridOptionsUtils';\r\nimport type { RowPinnedType } from '../interfaces/iRowNode';\r\nimport { _warn } from '../validation/logging';\r\n\r\n/**\r\n * Cache that maintains record of insertion order\r\n *\r\n * Allows lookup by key as well as insertion order (which is why we didn't use Map)\r\n */\r\ninterface OrderedCache<T extends { id: string | undefined }> {\r\n    cache: Partial<Record<string, T>>;\r\n    order: string[];\r\n}\r\n\r\nexport class PinnedRowModel extends BeanStub implements NamedBean {\r\n    beanName = 'pinnedRowModel' as const;\r\n\r\n    private nextId = 0;\r\n    private pinnedTopRows: OrderedCache<RowNode> = { cache: {}, order: [] };\r\n    private pinnedBottomRows: OrderedCache<RowNode> = { cache: {}, order: [] };\r\n\r\n    public postConstruct(): void {\r\n        const gos = this.gos;\r\n        this.setPinnedRowData(gos.get('pinnedTopRowData'), 'top');\r\n        this.setPinnedRowData(gos.get('pinnedBottomRowData'), 'bottom');\r\n        this.addManagedPropertyListener('pinnedTopRowData', (e) => this.setPinnedRowData(e.currentValue, 'top'));\r\n        this.addManagedPropertyListener('pinnedBottomRowData', (e) => this.setPinnedRowData(e.currentValue, 'bottom'));\r\n        this.addManagedEventListeners({ gridStylesChanged: this.onGridStylesChanges.bind(this) });\r\n    }\r\n\r\n    public isEmpty(floating: RowPinnedType): boolean {\r\n        return this.getCache(floating).order.length === 0;\r\n    }\r\n\r\n    public isRowsToRender(floating: RowPinnedType): boolean {\r\n        return !this.isEmpty(floating);\r\n    }\r\n\r\n    private onGridStylesChanges(e: CssVariablesChanged) {\r\n        if (e.rowHeightChanged) {\r\n            const estimateRowHeight = (rowNode: RowNode) => {\r\n                rowNode.setRowHeight(rowNode.rowHeight, true);\r\n            };\r\n            forEach(this.pinnedBottomRows, estimateRowHeight);\r\n            forEach(this.pinnedTopRows, estimateRowHeight);\r\n        }\r\n    }\r\n\r\n    public ensureRowHeightsValid(): boolean {\r\n        let anyChange = false;\r\n        let rowTop = 0;\r\n        const updateRowHeight = (rowNode: RowNode) => {\r\n            if (rowNode.rowHeightEstimated) {\r\n                const rowHeight = _getRowHeightForNode(this.beans, rowNode);\r\n                rowNode.setRowTop(rowTop);\r\n                rowNode.setRowHeight(rowHeight.height);\r\n                rowTop += rowHeight.height;\r\n                anyChange = true;\r\n            }\r\n        };\r\n        forEach(this.pinnedBottomRows, updateRowHeight);\r\n        rowTop = 0;\r\n        forEach(this.pinnedTopRows, updateRowHeight);\r\n\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'pinnedHeightChanged',\r\n        });\r\n\r\n        return anyChange;\r\n    }\r\n\r\n    private setPinnedRowData(rowData: any[] | undefined, floating: NonNullable<RowPinnedType>): void {\r\n        this.updateNodesFromRowData(rowData, floating);\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'pinnedRowDataChanged',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates existing RowNode instances and creates new ones if necessary\r\n     *\r\n     * Setting data as `undefined` will clear row nodes\r\n     */\r\n    private updateNodesFromRowData(allData: any[] | undefined, floating: NonNullable<RowPinnedType>): void {\r\n        const nodes = this.getCache(floating);\r\n\r\n        if (allData === undefined) {\r\n            nodes.order.length = 0;\r\n            nodes.cache = {};\r\n            return;\r\n        }\r\n\r\n        const getRowId = _getRowIdCallback(this.gos);\r\n        const idPrefix = floating === 'top' ? ROW_ID_PREFIX_TOP_PINNED : ROW_ID_PREFIX_BOTTOM_PINNED;\r\n\r\n        // We'll want to remove all nodes that aren't matched to data\r\n        const nodesToRemove = new Set(nodes.order);\r\n\r\n        // Data that matches based on ID can nonetheless still appear in a different order than before\r\n        const newOrder: string[] = [];\r\n\r\n        // Used for catching duplicate IDs/rows within `allData` itself\r\n        const dataIds = new Set<string>();\r\n\r\n        let nextRowTop = 0;\r\n        let i = -1;\r\n        for (const data of allData) {\r\n            const id = getRowId?.({ data, level: 0, rowPinned: floating }) ?? idPrefix + this.nextId++;\r\n\r\n            if (dataIds.has(id)) {\r\n                _warn(96, { id, data });\r\n                continue;\r\n            }\r\n\r\n            i++;\r\n            dataIds.add(id);\r\n            newOrder.push(id);\r\n\r\n            const existingNode = getById(nodes, id);\r\n            if (existingNode !== undefined) {\r\n                if (existingNode.data !== data) {\r\n                    existingNode.setData(data);\r\n                }\r\n                nextRowTop += this.setRowTopAndRowIndex(existingNode, nextRowTop, i);\r\n\r\n                // existing nodes that are re-used/updated shouldn't be deleted\r\n                nodesToRemove.delete(id);\r\n            } else {\r\n                // new node\r\n                const rowNode = new RowNode(this.beans);\r\n                rowNode.id = id;\r\n                rowNode.data = data;\r\n                rowNode.rowPinned = floating;\r\n                nextRowTop += this.setRowTopAndRowIndex(rowNode, nextRowTop, i);\r\n                nodes.cache[id] = rowNode;\r\n                nodes.order.push(id);\r\n            }\r\n        }\r\n\r\n        nodesToRemove.forEach((id) => {\r\n            getById(nodes, id)?.clearRowTopAndRowIndex();\r\n            delete nodes.cache[id];\r\n        });\r\n\r\n        nodes.order = newOrder;\r\n    }\r\n\r\n    private setRowTopAndRowIndex(rowNode: RowNode, rowTop: number, rowIndex: number): number {\r\n        rowNode.setRowTop(rowTop);\r\n        rowNode.setRowHeight(_getRowHeightForNode(this.beans, rowNode).height);\r\n        rowNode.setRowIndex(rowIndex);\r\n        return rowNode.rowHeight!;\r\n    }\r\n\r\n    public getPinnedTopTotalHeight(): number {\r\n        return getTotalHeight(this.pinnedTopRows);\r\n    }\r\n\r\n    public getPinnedBottomTotalHeight(): number {\r\n        return getTotalHeight(this.pinnedBottomRows);\r\n    }\r\n\r\n    public getPinnedTopRowCount(): number {\r\n        return getSize(this.pinnedTopRows);\r\n    }\r\n\r\n    public getPinnedBottomRowCount(): number {\r\n        return getSize(this.pinnedBottomRows);\r\n    }\r\n\r\n    public getPinnedTopRow(index: number): RowNode | undefined {\r\n        return getByIndex(this.pinnedTopRows, index);\r\n    }\r\n\r\n    public getPinnedBottomRow(index: number): RowNode | undefined {\r\n        return getByIndex(this.pinnedBottomRows, index);\r\n    }\r\n\r\n    public getPinnedRowById(id: string, floating: NonNullable<RowPinnedType>): RowNode | undefined {\r\n        return getById(this.getCache(floating), id);\r\n    }\r\n\r\n    public forEachPinnedRow(\r\n        floating: NonNullable<RowPinnedType>,\r\n        callback: (node: RowNode, index: number) => void\r\n    ): void {\r\n        return forEach(this.getCache(floating), callback);\r\n    }\r\n\r\n    private getCache(floating: RowPinnedType): OrderedCache<RowNode> {\r\n        return floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\r\n    }\r\n}\r\n\r\nfunction getTotalHeight(rowNodes: OrderedCache<RowNode>): number {\r\n    const size = getSize(rowNodes);\r\n    if (size === 0) {\r\n        return 0;\r\n    }\r\n\r\n    const node = getByIndex(rowNodes, size - 1);\r\n    if (node === undefined) {\r\n        return 0;\r\n    }\r\n\r\n    return node.rowTop! + node.rowHeight!;\r\n}\r\n\r\nfunction getById<T extends { id: string | undefined }>(cache: OrderedCache<T>, id: string): T | undefined {\r\n    return cache.cache[id];\r\n}\r\n\r\nfunction getByIndex<T extends { id: string | undefined }>(cache: OrderedCache<T>, i: number): T | undefined {\r\n    return getById(cache, cache.order[i]);\r\n}\r\n\r\nfunction forEach<T extends { id: string | undefined }>(\r\n    cache: OrderedCache<T>,\r\n    callback: (item: T, index: number) => void\r\n): void {\r\n    cache.order.forEach((id, index) => {\r\n        const node = getById(cache, id);\r\n        node && callback(node, index);\r\n    });\r\n}\r\n\r\nfunction getSize<T extends { id: string | undefined }>(cache: OrderedCache<T>): number {\r\n    return cache.order.length;\r\n}\r\n", "import type { _PinnedRowGridApi } from '../api/gridApi';\r\nimport type { _ModuleWithApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { getPinnedBottomRow, getPinnedBottomRowCount, getPinnedTopRow, getPinnedTopRowCount } from './pinnedRowApi';\r\nimport { PinnedRowModel } from './pinnedRowModel';\r\n\r\n/**\r\n * @feature Rows -> Row Pinning\r\n * @gridOption pinnedTopRowData, pinnedBottomRowData\r\n */\r\nexport const PinnedRowModule: _ModuleWithApi<_PinnedRowGridApi> = {\r\n    moduleName: 'PinnedRow',\r\n    version: VERSION,\r\n    beans: [PinnedRowModel],\r\n    apiFunctions: {\r\n        getPinnedTopRowCount,\r\n        getPinnedBottomRowCount,\r\n        getPinnedTopRow,\r\n        getPinnedBottomRow,\r\n    },\r\n};\r\n", "import { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { CellClassParams, CellClassRules, ColDef } from '../entities/colDef';\r\nimport type { CellStyle } from '../entities/colDef';\r\nimport type { CellCtrl, ICellComp } from '../rendering/cell/cellCtrl';\r\nimport { processClassRules } from './stylingUtils';\r\n\r\nexport class CellCustomStyleFeature extends BeanStub {\r\n    private readonly column: AgColumn;\r\n    private staticClasses: string[] = [];\r\n\r\n    private cellComp: ICellComp;\r\n\r\n    private cellClassRules?: CellClassRules;\r\n\r\n    constructor(\r\n        private readonly cellCtrl: CellCtrl,\r\n        beans: BeanCollection\r\n    ) {\r\n        super();\r\n\r\n        this.beans = beans;\r\n\r\n        this.column = cellCtrl.column;\r\n    }\r\n\r\n    public setComp(comp: ICellComp): void {\r\n        this.cellComp = comp;\r\n\r\n        this.applyUserStyles();\r\n        this.applyCellClassRules();\r\n        this.applyClassesFromColDef();\r\n    }\r\n\r\n    public applyCellClassRules(): void {\r\n        const { column, cellComp } = this;\r\n        const colDef = column.colDef;\r\n        const cellClassRules = colDef.cellClassRules;\r\n        const cellClassParams = this.getCellClassParams(column, colDef);\r\n\r\n        processClassRules(\r\n            this.beans.expressionSvc,\r\n            // if current was previous, skip\r\n            cellClassRules === this.cellClassRules ? undefined : this.cellClassRules,\r\n            cellClassRules,\r\n            cellClassParams,\r\n            (className) => cellComp.addOrRemoveCssClass(className, true),\r\n            (className) => cellComp.addOrRemoveCssClass(className, false)\r\n        );\r\n        this.cellClassRules = cellClassRules;\r\n    }\r\n\r\n    public applyUserStyles() {\r\n        const column = this.column;\r\n        const colDef = column.colDef;\r\n        const cellStyle = colDef.cellStyle;\r\n\r\n        if (!cellStyle) {\r\n            return;\r\n        }\r\n\r\n        let styles: CellStyle | null | undefined;\r\n\r\n        if (typeof cellStyle === 'function') {\r\n            const cellStyleParams = this.getCellClassParams(column, colDef);\r\n            styles = cellStyle(cellStyleParams);\r\n        } else {\r\n            styles = cellStyle;\r\n        }\r\n\r\n        if (styles) {\r\n            this.cellComp.setUserStyles(styles);\r\n        }\r\n    }\r\n\r\n    public applyClassesFromColDef() {\r\n        const { column, cellComp } = this;\r\n        const colDef = column.colDef;\r\n        const cellClassParams = this.getCellClassParams(column, colDef);\r\n\r\n        this.staticClasses.forEach((className) => cellComp.addOrRemoveCssClass(className, false));\r\n\r\n        const newStaticClasses = this.beans.cellStyles!.getStaticCellClasses(colDef, cellClassParams);\r\n        this.staticClasses = newStaticClasses;\r\n\r\n        newStaticClasses.forEach((className) => cellComp.addOrRemoveCssClass(className, true));\r\n    }\r\n\r\n    private getCellClassParams(column: AgColumn, colDef: ColDef): CellClassParams {\r\n        const { value, rowNode } = this.cellCtrl;\r\n        return this.beans.gos.addGridCommonParams({\r\n            value,\r\n            data: rowNode.data,\r\n            node: rowNode,\r\n            colDef,\r\n            column,\r\n            rowIndex: rowNode.rowIndex!,\r\n        });\r\n    }\r\n}\r\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { CellClassParams, ColDef } from '../entities/colDef';\r\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport { CellCustomStyleFeature } from './cellCustomStyleFeature';\r\nimport { processClassRules } from './stylingUtils';\r\n\r\nexport class CellStyleService extends BeanStub implements NamedBean {\r\n    beanName = 'cellStyles' as const;\r\n\r\n    public processAllCellClasses(\r\n        colDef: ColDef,\r\n        params: CellClassParams,\r\n        onApplicableClass: (className: string) => void,\r\n        onNotApplicableClass?: (className: string) => void\r\n    ) {\r\n        processClassRules(\r\n            this.beans.expressionSvc,\r\n            undefined,\r\n            colDef.cellClassRules,\r\n            params,\r\n            onApplicableClass,\r\n            onNotApplicableClass\r\n        );\r\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\r\n    }\r\n\r\n    public getStaticCellClasses(colDef: ColDef, params: CellClassParams): string[] {\r\n        const { cellClass } = colDef;\r\n\r\n        if (!cellClass) {\r\n            return [];\r\n        }\r\n\r\n        let classOrClasses: string | string[] | null | undefined;\r\n\r\n        if (typeof cellClass === 'function') {\r\n            const cellClassFunc = cellClass;\r\n            classOrClasses = cellClassFunc(params);\r\n        } else {\r\n            classOrClasses = cellClass;\r\n        }\r\n\r\n        if (typeof classOrClasses === 'string') {\r\n            classOrClasses = [classOrClasses];\r\n        }\r\n\r\n        return classOrClasses || [];\r\n    }\r\n\r\n    public createCellCustomStyleFeature(ctrl: CellCtrl, beans: BeanCollection): CellCustomStyleFeature {\r\n        return new CellCustomStyleFeature(ctrl, beans);\r\n    }\r\n\r\n    private processStaticCellClasses(\r\n        colDef: ColDef,\r\n        params: CellClassParams,\r\n        onApplicableClass: (className: string) => void\r\n    ) {\r\n        const classOrClasses = this.getStaticCellClasses(colDef, params);\r\n\r\n        classOrClasses.forEach((cssClassItem: string) => {\r\n            onApplicableClass(cssClassItem);\r\n        });\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { CellStyleService } from './cellStyleService';\r\nimport { RowStyleService } from './rowStyleService';\r\n\r\n/**\r\n * @feature Cells -> Styling Cells\r\n * @colDef cellStyle, cellClass, cellClassRules\r\n */\r\nexport const CellStyleModule: _ModuleWithoutApi = {\r\n    moduleName: 'CellStyle',\r\n    version: VERSION,\r\n    beans: [CellStyleService],\r\n};\r\n\r\n/**\r\n * @feature Rows -> Styling Rows\r\n * @gridOption rowStyle, getRowStyle, rowClass, getRowClass, rowClassRules\r\n */\r\nexport const RowStyleModule: _ModuleWithoutApi = {\r\n    moduleName: 'RowStyle',\r\n    version: VERSION,\r\n    beans: [RowStyleService],\r\n};\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { Column } from '../../interfaces/iColumn';\r\n\r\nexport function isColumnHovered(beans: BeanCollection, column: Column): boolean {\r\n    return !!beans.colHover?.isHovered(column as AgColumn);\r\n}\r\n", "import { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\n\r\nexport class HoverFeature extends BeanStub {\r\n    constructor(\r\n        private readonly columns: AgColumn[],\r\n        private readonly element: HTMLElement\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public postConstruct(): void {\r\n        if (this.gos.get('columnHoverHighlight')) {\r\n            const colHover = this.beans.colHover!;\r\n            this.addManagedListeners(this.element, {\r\n                mouseout: colHover.clearMouseOver.bind(colHover),\r\n                mouseover: colHover.setMouseOver.bind(colHover, this.columns),\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { IHeaderCellComp } from '../../headerRendering/cells/column/headerCellCtrl';\r\nimport type { IHeaderFilterCellComp } from '../../headerRendering/cells/floatingFilter/iHeaderFilterCellComp';\r\nimport type { ICellComp } from '../../rendering/cell/cellCtrl';\r\nimport { HoverFeature } from './hoverFeature';\r\n\r\nconst CSS_COLUMN_HOVER = 'ag-column-hover';\r\n\r\nexport class ColumnHoverService extends BeanStub implements NamedBean {\r\n    beanName = 'colHover' as const;\r\n\r\n    private selectedColumns: AgColumn[] | null;\r\n\r\n    public setMouseOver(columns: AgColumn[]): void {\r\n        this.updateState(columns);\r\n    }\r\n\r\n    public clearMouseOver(): void {\r\n        this.updateState(null);\r\n    }\r\n\r\n    public isHovered(column: AgColumn): boolean {\r\n        const selectedColumns = this.selectedColumns;\r\n        return !!selectedColumns && selectedColumns.indexOf(column) >= 0;\r\n    }\r\n\r\n    public addHeaderColumnHoverListener(compBean: BeanStub, comp: IHeaderCellComp, column: AgColumn): void {\r\n        const listener = () => {\r\n            if (!this.gos.get('columnHoverHighlight')) {\r\n                return;\r\n            }\r\n            const isHovered = this.isHovered(column);\r\n            comp.addOrRemoveCssClass('ag-column-hover', isHovered);\r\n        };\r\n\r\n        compBean.addManagedEventListeners({ columnHoverChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    public onCellColumnHover(column: AgColumn, cellComp?: ICellComp): void {\r\n        if (!cellComp) {\r\n            return;\r\n        }\r\n        if (!this.gos.get('columnHoverHighlight')) {\r\n            return;\r\n        }\r\n\r\n        const isHovered = this.isHovered(column);\r\n        cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);\r\n    }\r\n\r\n    public addHeaderFilterColumnHoverListener(\r\n        compBean: BeanStub,\r\n        comp: IHeaderFilterCellComp,\r\n        column: AgColumn,\r\n        eGui: HTMLElement\r\n    ): void {\r\n        this.createHoverFeature(compBean, [column], eGui);\r\n\r\n        const listener = () => {\r\n            if (!this.gos.get('columnHoverHighlight')) {\r\n                return;\r\n            }\r\n            const hovered = this.isHovered(column);\r\n            comp.addOrRemoveCssClass('ag-column-hover', hovered);\r\n        };\r\n\r\n        compBean.addManagedEventListeners({ columnHoverChanged: listener });\r\n        listener();\r\n    }\r\n\r\n    public createHoverFeature(compBean: BeanStub, columns: AgColumn[], eGui: HTMLElement): void {\r\n        compBean.createManagedBean(new HoverFeature(columns, eGui));\r\n    }\r\n\r\n    private updateState(columns: AgColumn[] | null): void {\r\n        this.selectedColumns = columns;\r\n        this.eventSvc.dispatchEvent({\r\n            type: 'columnHoverChanged',\r\n        });\r\n    }\r\n}\r\n", "import type { _ColumnHoverApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { isColumnHovered } from './columnHoverApi';\r\nimport { ColumnHoverService } from './columnHoverService';\r\n\r\n/**\r\n * @feature Rows -> Styling Rows\r\n * @gridOption columnHoverHighlight\r\n */\r\nexport const ColumnHoverModule: _ModuleWithApi<_ColumnHoverApi> = {\r\n    moduleName: 'ColumnHover',\r\n    version: VERSION,\r\n    beans: [ColumnHoverService],\r\n    apiFunctions: {\r\n        isColumnHovered,\r\n    },\r\n};\r\n", "import type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgEventType } from '../../eventTypes';\r\nimport type { AgEventListener, AgGlobalEventListener } from '../../events';\r\nimport { ALWAYS_SYNC_GLOBAL_EVENTS } from '../../events';\r\nimport type { IFrameworkEventListenerService } from '../../interfaces/iFrameworkEventListenerService';\r\n\r\nexport class ApiEventService extends BeanStub<AgEventType> implements NamedBean {\r\n    beanName = 'apiEventSvc' as const;\r\n\r\n    private syncListeners: Map<AgEventType, Set<AgEventListener>> = new Map();\r\n    private asyncListeners: Map<AgEventType, Set<AgEventListener>> = new Map();\r\n    private syncGlobalListeners: Set<AgGlobalEventListener> = new Set();\r\n    private globalListenerPairs = new Map<\r\n        AgGlobalEventListener,\r\n        { syncListener: AgGlobalEventListener; asyncListener: AgGlobalEventListener }\r\n    >();\r\n    /** wraps events for frameworks */\r\n    private wrapSvc?: IFrameworkEventListenerService<AgEventListener, AgGlobalEventListener>;\r\n\r\n    public postConstruct(): void {\r\n        this.wrapSvc = this.beans.frameworkOverrides.createGlobalEventListenerWrapper?.();\r\n    }\r\n\r\n    public override addEventListener<T extends AgEventType>(eventType: T, userListener: AgEventListener): void {\r\n        const listener = this.wrapSvc?.wrap(userListener) ?? userListener;\r\n\r\n        const async = !ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType);\r\n        const listeners = async ? this.asyncListeners : this.syncListeners;\r\n        if (!listeners.has(eventType)) {\r\n            listeners.set(eventType, new Set());\r\n        }\r\n        listeners.get(eventType)!.add(listener);\r\n        this.eventSvc.addEventListener(eventType, listener, async);\r\n    }\r\n    public override removeEventListener<T extends AgEventType>(eventType: T, userListener: AgEventListener): void {\r\n        const listener = this.wrapSvc?.unwrap(userListener) ?? userListener;\r\n        const asyncListeners = this.asyncListeners.get(eventType);\r\n        const hasAsync = !!asyncListeners?.delete(listener);\r\n        if (!hasAsync) {\r\n            this.syncListeners.get(eventType)?.delete(listener);\r\n        }\r\n        this.eventSvc.removeEventListener(eventType, listener, hasAsync);\r\n    }\r\n\r\n    public addGlobalListener(userListener: AgGlobalEventListener): void {\r\n        const listener = this.wrapSvc?.wrapGlobal(userListener) ?? userListener;\r\n\r\n        // if async then need to setup the global listener for sync to handle alwaysSyncGlobalEvents\r\n        const syncListener: AgGlobalEventListener = (eventType, event) => {\r\n            if (ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)) {\r\n                listener(eventType, event);\r\n            }\r\n        };\r\n        const asyncListener: AgGlobalEventListener = (eventType, event) => {\r\n            if (!ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)) {\r\n                listener(eventType, event);\r\n            }\r\n        };\r\n        this.globalListenerPairs.set(userListener, { syncListener, asyncListener });\r\n        const eventSvc = this.eventSvc;\r\n        eventSvc.addGlobalListener(syncListener, false);\r\n        eventSvc.addGlobalListener(asyncListener, true);\r\n    }\r\n\r\n    public removeGlobalListener(userListener: AgGlobalEventListener): void {\r\n        const { eventSvc, wrapSvc, globalListenerPairs } = this;\r\n        const listener = wrapSvc?.unwrapGlobal(userListener) ?? userListener;\r\n\r\n        const hasAsync = globalListenerPairs.has(listener);\r\n        if (hasAsync) {\r\n            // If it was async also remove the always sync listener we added\r\n            const { syncListener, asyncListener } = globalListenerPairs.get(listener)!;\r\n            eventSvc.removeGlobalListener(syncListener, false);\r\n            eventSvc.removeGlobalListener(asyncListener, true);\r\n            globalListenerPairs.delete(userListener);\r\n        } else {\r\n            this.syncGlobalListeners.delete(listener);\r\n            eventSvc.removeGlobalListener(listener, false);\r\n        }\r\n    }\r\n\r\n    private destroyEventListeners(map: Map<AgEventType, Set<AgEventListener>>, async: boolean): void {\r\n        map.forEach((listeners, eventType) => {\r\n            listeners.forEach((listener) => this.eventSvc.removeEventListener(eventType, listener, async));\r\n            listeners.clear();\r\n        });\r\n        map.clear();\r\n    }\r\n\r\n    private destroyGlobalListeners(set: Set<AgGlobalEventListener>, async: boolean): void {\r\n        set.forEach((listener) => this.eventSvc.removeGlobalListener(listener, async));\r\n        set.clear();\r\n    }\r\n\r\n    public override destroy(): void {\r\n        super.destroy();\r\n\r\n        this.destroyEventListeners(this.syncListeners, false);\r\n        this.destroyEventListeners(this.asyncListeners, true);\r\n        this.destroyGlobalListeners(this.syncGlobalListeners, false);\r\n        const { globalListenerPairs, eventSvc } = this;\r\n        globalListenerPairs.forEach(({ syncListener, asyncListener }) => {\r\n            eventSvc.removeGlobalListener(syncListener, false);\r\n            eventSvc.removeGlobalListener(asyncListener, true);\r\n        });\r\n        globalListenerPairs.clear();\r\n    }\r\n}\r\n", "import type { BeanCollection } from '../../context/context';\r\nimport type { AgPublicEventType } from '../../eventTypes';\r\nimport type { AgEventListener, AgGlobalEventListener } from '../../events';\r\n\r\nexport function addEventListener<TEventType extends AgPublicEventType>(\r\n    beans: BeanCollection,\r\n    eventType: TEventType,\r\n    listener: AgEventListener<any, any, TEventType>\r\n): void {\r\n    beans.apiEventSvc?.addEventListener(eventType, listener);\r\n}\r\nexport function removeEventListener<TEventType extends AgPublicEventType>(\r\n    beans: BeanCollection,\r\n    eventType: TEventType,\r\n    listener: AgEventListener<any, any, TEventType>\r\n): void {\r\n    beans.apiEventSvc?.removeEventListener(eventType, listener as AgEventListener);\r\n}\r\n\r\nexport function addGlobalListener<TEventType extends AgPublicEventType>(\r\n    beans: BeanCollection,\r\n    listener: AgGlobalEventListener<any, any, TEventType>\r\n): void {\r\n    beans.apiEventSvc?.addGlobalListener(listener);\r\n}\r\n\r\nexport function removeGlobalListener<TEventType extends AgPublicEventType>(\r\n    beans: BeanCollection,\r\n    listener: AgGlobalEventListener<any, any, TEventType>\r\n): void {\r\n    beans.apiEventSvc?.removeGlobalListener(listener);\r\n}\r\n", "import type { _EventGridApi } from '../../api/gridApi';\r\nimport type { _ModuleWithApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { ApiEventService } from './apiEventService';\r\nimport { addEventListener, addGlobalListener, removeEventListener, removeGlobalListener } from './eventApi';\r\n\r\n/**\r\n * @feature API -> Grid Events\r\n */\r\nexport const EventApiModule: _ModuleWithApi<_EventGridApi<any>> = {\r\n    moduleName: 'EventApi',\r\n    version: VERSION,\r\n    apiFunctions: {\r\n        addEventListener,\r\n        addGlobalListener,\r\n        removeEventListener,\r\n        removeGlobalListener,\r\n    },\r\n    beans: [ApiEventService],\r\n};\r\n", "export const tooltipCSS = /*css*/ `.ag-tooltip{background-color:var(--ag-tooltip-background-color);border:var(--ag-tooltip-border);border-radius:var(--ag-border-radius);color:var(--ag-tooltip-text-color);padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);white-space:normal}.ag-tooltip,.ag-tooltip-custom{position:absolute;z-index:99999}.ag-tooltip-custom:where(:not(.ag-tooltip-interactive)),.ag-tooltip:where(:not(.ag-tooltip-interactive)){pointer-events:none}.ag-tooltip-animate{transition:opacity 1s;&:where(.ag-tooltip-hiding){opacity:0}}`;\n", "import type { NamedBean } from '../context/bean';\r\nimport { BeanStub } from '../context/beanStub';\r\nimport type { BeanCollection } from '../context/context';\r\nimport type { AgColumn } from '../entities/agColumn';\r\nimport type { HeaderCellCtrl } from '../headerRendering/cells/column/headerCellCtrl';\r\nimport type { HeaderGroupCellCtrl } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\r\nimport type { CellCtrl } from '../rendering/cell/cellCtrl';\r\nimport type { RowCtrl } from '../rendering/row/rowCtrl';\r\nimport { _exists } from '../utils/generic';\r\nimport { _getValueUsingField } from '../utils/object';\r\nimport type { ITooltipCtrl, TooltipFeature } from './tooltipFeature';\r\nimport { _isShowTooltipWhenTruncated, _shouldDisplayTooltip } from './tooltipFeature';\r\n\r\nexport class TooltipService extends BeanStub implements NamedBean {\r\n    beanName = 'tooltipSvc' as const;\r\n\r\n    public setupHeaderTooltip(\r\n        existingTooltipFeature: TooltipFeature | undefined,\r\n        ctrl: HeaderCellCtrl,\r\n        value?: string,\r\n        shouldDisplayTooltip?: () => boolean\r\n    ): TooltipFeature | undefined {\r\n        if (existingTooltipFeature) {\r\n            ctrl.destroyBean(existingTooltipFeature);\r\n        }\r\n\r\n        const isTooltipWhenTruncated = _isShowTooltipWhenTruncated(this.gos);\r\n        const { column, eGui } = ctrl;\r\n        const colDef = column.getColDef();\r\n\r\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colDef.headerComponent) {\r\n            shouldDisplayTooltip = _shouldDisplayTooltip(\r\n                () => eGui.querySelector('.ag-header-cell-text') as HTMLElement | undefined\r\n            );\r\n        }\r\n\r\n        const tooltipCtrl: ITooltipCtrl = {\r\n            getColumn: () => column,\r\n            getColDef: () => column.getColDef(),\r\n            getGui: () => eGui,\r\n            getLocation: () => 'header',\r\n            getTooltipValue: () => {\r\n                if (value != null) {\r\n                    return value;\r\n                }\r\n\r\n                const res = column.getColDef().headerTooltip;\r\n                return res;\r\n            },\r\n            shouldDisplayTooltip,\r\n        };\r\n\r\n        let tooltipFeature = this.createTooltipFeature(tooltipCtrl);\r\n        if (tooltipFeature) {\r\n            tooltipFeature = ctrl.createBean(tooltipFeature);\r\n            ctrl.setRefreshFunction('tooltip', () => tooltipFeature!.refreshTooltip());\r\n        }\r\n        return tooltipFeature;\r\n    }\r\n\r\n    public setupHeaderGroupTooltip(\r\n        existingTooltipFeature: TooltipFeature | undefined,\r\n        ctrl: HeaderGroupCellCtrl,\r\n        value?: string,\r\n        shouldDisplayTooltip?: () => boolean\r\n    ): TooltipFeature | undefined {\r\n        if (existingTooltipFeature) {\r\n            ctrl.destroyBean(existingTooltipFeature);\r\n        }\r\n\r\n        const isTooltipWhenTruncated = _isShowTooltipWhenTruncated(this.gos);\r\n        const { column, eGui } = ctrl;\r\n        const colGroupDef = column.getColGroupDef();\r\n\r\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colGroupDef?.headerGroupComponent) {\r\n            shouldDisplayTooltip = _shouldDisplayTooltip(\r\n                () => eGui.querySelector('.ag-header-group-text') as HTMLElement | undefined\r\n            );\r\n        }\r\n\r\n        const tooltipCtrl: ITooltipCtrl = {\r\n            getColumn: () => column,\r\n            getGui: () => eGui,\r\n            getLocation: () => 'headerGroup',\r\n            getTooltipValue: () => value ?? (colGroupDef && colGroupDef.headerTooltip),\r\n            shouldDisplayTooltip,\r\n        };\r\n\r\n        if (colGroupDef) {\r\n            tooltipCtrl.getColDef = () => colGroupDef;\r\n        }\r\n\r\n        const tooltipFeature = this.createTooltipFeature(tooltipCtrl);\r\n        return tooltipFeature ? ctrl.createBean(tooltipFeature) : tooltipFeature;\r\n    }\r\n\r\n    public enableCellTooltipFeature(\r\n        ctrl: CellCtrl,\r\n        value?: string,\r\n        shouldDisplayTooltip?: () => boolean\r\n    ): TooltipFeature | undefined {\r\n        const { column, rowNode } = ctrl;\r\n\r\n        const getTooltipValue = () => {\r\n            const colDef = column.getColDef();\r\n            const data = rowNode.data;\r\n\r\n            if (colDef.tooltipField && _exists(data)) {\r\n                return _getValueUsingField(data, colDef.tooltipField, column.isTooltipFieldContainsDots());\r\n            }\r\n\r\n            const valueGetter = colDef.tooltipValueGetter;\r\n\r\n            if (valueGetter) {\r\n                return valueGetter(\r\n                    this.gos.addGridCommonParams({\r\n                        location: 'cell',\r\n                        colDef: column.getColDef(),\r\n                        column: column,\r\n                        rowIndex: ctrl.cellPosition.rowIndex,\r\n                        node: rowNode,\r\n                        data: rowNode.data,\r\n                        value: ctrl.value,\r\n                        valueFormatted: ctrl.valueFormatted,\r\n                    })\r\n                );\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        const isTooltipWhenTruncated = _isShowTooltipWhenTruncated(this.gos);\r\n\r\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !ctrl.isCellRenderer()) {\r\n            shouldDisplayTooltip = _shouldDisplayTooltip(() => {\r\n                const { eGui } = ctrl;\r\n                return eGui.children.length === 0\r\n                    ? eGui\r\n                    : (eGui.querySelector('.ag-cell-value') as HTMLElement | undefined);\r\n            });\r\n        }\r\n\r\n        const tooltipCtrl: ITooltipCtrl = {\r\n            getColumn: () => column,\r\n            getColDef: () => column.getColDef(),\r\n            getRowIndex: () => ctrl.cellPosition.rowIndex,\r\n            getRowNode: () => rowNode,\r\n            getGui: () => ctrl.eGui,\r\n            getLocation: () => 'cell',\r\n            getTooltipValue: value != null ? () => value : getTooltipValue,\r\n\r\n            // this makes no sense, why is the cell formatted value passed to the tooltip???\r\n            getValueFormatted: () => ctrl.valueFormatted,\r\n            shouldDisplayTooltip,\r\n        };\r\n\r\n        return this.createTooltipFeature(tooltipCtrl, this.beans);\r\n    }\r\n\r\n    public refreshRowTooltip(\r\n        existingTooltipFeature: TooltipFeature | undefined,\r\n        ctrl: RowCtrl,\r\n        value: string,\r\n        shouldDisplayTooltip?: () => boolean\r\n    ): TooltipFeature | undefined {\r\n        const tooltipParams: ITooltipCtrl = {\r\n            getGui: () => ctrl.getFullWidthElement()!,\r\n            getTooltipValue: () => value,\r\n            getLocation: () => 'fullWidthRow',\r\n            shouldDisplayTooltip,\r\n        };\r\n\r\n        const beans = this.beans;\r\n        const context = beans.context;\r\n\r\n        if (existingTooltipFeature) {\r\n            ctrl.destroyBean(existingTooltipFeature, context);\r\n        }\r\n\r\n        const tooltipFeature = this.createTooltipFeature(tooltipParams, beans);\r\n\r\n        return ctrl.createBean(tooltipFeature, context);\r\n    }\r\n\r\n    public initCol(column: AgColumn): void {\r\n        const { colDef } = column;\r\n        column.tooltipEnabled =\r\n            _exists(colDef.tooltipField) || _exists(colDef.tooltipValueGetter) || _exists(colDef.tooltipComponent);\r\n    }\r\n\r\n    private createTooltipFeature(tooltipCtrl: ITooltipCtrl, beans?: BeanCollection): TooltipFeature | undefined {\r\n        return this.beans.registry.createDynamicBean<TooltipFeature>('tooltipFeature', false, tooltipCtrl, beans);\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../interfaces/iModule';\r\nimport { VERSION } from '../version';\r\nimport { PopupModule } from '../widgets/popupModule';\r\nimport { tooltipCSS } from './tooltip.css-GENERATED';\r\nimport { TooltipComponent } from './tooltipComponent';\r\nimport { TooltipFeature } from './tooltipFeature';\r\nimport { TooltipService } from './tooltipService';\r\n\r\n/**\r\n * @feature Tooltips\r\n * @colDef tooltipField, tooltipValueGetter, headerTooltip\r\n */\r\nexport const TooltipModule: _ModuleWithoutApi = {\r\n    moduleName: 'Tooltip',\r\n    version: VERSION,\r\n    beans: [TooltipService],\r\n    dynamicBeans: {\r\n        tooltipFeature: TooltipFeature as any,\r\n    },\r\n    userComponents: {\r\n        agTooltipComponent: TooltipComponent,\r\n    },\r\n    dependsOn: [PopupModule],\r\n    css: [tooltipCSS],\r\n};\r\n", "import type { _ModuleWithoutApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { LocaleService } from './localeService';\r\n\r\n/**\r\n * @feature Interactivity -> Localisation\r\n * @gridOption localeText, getLocaleText\r\n */\r\nexport const LocaleModule: _ModuleWithoutApi = {\r\n    moduleName: 'Locale',\r\n    version: VERSION,\r\n    beans: [LocaleService],\r\n};\r\n", "import type { ColumnCollections } from '../../columns/columnModel';\r\nimport type { NamedBean } from '../../context/bean';\r\nimport { BeanStub } from '../../context/beanStub';\r\nimport type { AgColumn } from '../../entities/agColumn';\r\nimport type { RowNode } from '../../entities/rowNode';\r\nimport { _getDocument, _getRowHeightForNode } from '../../gridOptionsUtils';\r\nimport type { IClientSideRowModel } from '../../interfaces/iClientSideRowModel';\r\nimport type { IServerSideRowModel } from '../../interfaces/iServerSideRowModel';\r\nimport { _getElementSize, _observeResize } from '../../utils/dom';\r\nimport { _debounce } from '../../utils/function';\r\nimport type { CellCtrl } from '../cell/cellCtrl';\r\n\r\nexport class RowAutoHeightService extends BeanStub implements NamedBean {\r\n    beanName = 'rowAutoHeight' as const;\r\n\r\n    /** grid columns have colDef.autoHeight set */\r\n    public active: boolean;\r\n    private wasEverActive = false;\r\n\r\n    public setRowAutoHeight(rowNode: RowNode, cellHeight: number | undefined, column: AgColumn): void {\r\n        if (!rowNode.__autoHeights) {\r\n            rowNode.__autoHeights = {};\r\n        }\r\n        rowNode.__autoHeights[column.getId()] = cellHeight;\r\n\r\n        if (cellHeight != null) {\r\n            if (rowNode.__checkAutoHeightsDebounced == null) {\r\n                rowNode.__checkAutoHeightsDebounced = _debounce(this, this.doCheckAutoHeights.bind(this, rowNode), 1);\r\n            }\r\n            rowNode.__checkAutoHeightsDebounced();\r\n        }\r\n    }\r\n\r\n    public checkAutoHeights(rowNode: RowNode): void {\r\n        if (this.wasEverActive) {\r\n            this.doCheckAutoHeights(rowNode);\r\n        }\r\n    }\r\n\r\n    private doCheckAutoHeights(rowNode: RowNode): void {\r\n        const autoHeights = rowNode.__autoHeights;\r\n        if (autoHeights == null) {\r\n            return;\r\n        }\r\n\r\n        let notAllPresent = false;\r\n        let nonePresent = true;\r\n        let newRowHeight = 0;\r\n\r\n        const { visibleCols, colModel, colViewport, rowModel } = this.beans;\r\n        const displayedAutoHeightCols = visibleCols.autoHeightCols;\r\n        displayedAutoHeightCols.forEach((col) => {\r\n            let cellHeight = autoHeights[col.getId()];\r\n\r\n            if (cellHeight == null) {\r\n                // If column spanning is active a column may not provide auto height for a row if that\r\n                // cell is not present for the given row due to a previous cell spanning over the auto height column.\r\n                if (colModel.colSpanActive) {\r\n                    let activeColsForRow: AgColumn[] = [];\r\n                    switch (col.getPinned()) {\r\n                        case 'left':\r\n                            activeColsForRow = visibleCols.getLeftColsForRow(rowNode);\r\n                            break;\r\n                        case 'right':\r\n                            activeColsForRow = visibleCols.getRightColsForRow(rowNode);\r\n                            break;\r\n                        case null:\r\n                            activeColsForRow = colViewport.getColsWithinViewport(rowNode);\r\n                            break;\r\n                    }\r\n                    if (activeColsForRow.includes(col)) {\r\n                        // Column is present in the row, i.e not spanned over, but no auto height was provided so we cannot calculate the row height\r\n                        notAllPresent = true;\r\n                        return;\r\n                    }\r\n                    // Ignore this column as it is spanned over and not present in the row\r\n                    cellHeight = -1;\r\n                } else {\r\n                    notAllPresent = true;\r\n                    return;\r\n                }\r\n            } else {\r\n                // At least one auto height is present\r\n                nonePresent = false;\r\n            }\r\n\r\n            if (cellHeight > newRowHeight) {\r\n                newRowHeight = cellHeight;\r\n            }\r\n        });\r\n\r\n        if (notAllPresent) {\r\n            return;\r\n        }\r\n\r\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\r\n        // this prevents the row starting very small when waiting for async components,\r\n        // which would then mean the grid squashes in far to many rows (as small heights\r\n        // means more rows fit in) which looks crap. so best ignore small values and assume\r\n        // we are still waiting for values to render.\r\n        if (nonePresent || newRowHeight < 10) {\r\n            newRowHeight = _getRowHeightForNode(this.beans, rowNode).height;\r\n        }\r\n\r\n        if (newRowHeight == rowNode.rowHeight) {\r\n            return;\r\n        }\r\n\r\n        rowNode.setRowHeight(newRowHeight);\r\n\r\n        (rowModel as IClientSideRowModel | IServerSideRowModel).onRowHeightChangedDebounced?.();\r\n    }\r\n\r\n    public setupCellAutoHeight(cellCtrl: CellCtrl, eCellWrapper: HTMLElement, compBean: BeanStub): void {\r\n        const eParentCell = eCellWrapper.parentElement!;\r\n        const { rowNode, column } = cellCtrl;\r\n        const beans = this.beans;\r\n        // taking minRowHeight from getRowHeightForNode means the getRowHeight() callback is used,\r\n        // thus allowing different min heights for different rows.\r\n        const minRowHeight = _getRowHeightForNode(beans, rowNode).height;\r\n\r\n        const measureHeight = (timesCalled: number) => {\r\n            if (cellCtrl.editing) {\r\n                return;\r\n            }\r\n            // because of the retry's below, it's possible the retry's go beyond\r\n            // the rows life.\r\n            if (!cellCtrl.isAlive() || !compBean.isAlive()) {\r\n                return;\r\n            }\r\n\r\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = _getElementSize(eParentCell);\r\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\r\n\r\n            const wrapperHeight = eCellWrapper!.offsetHeight;\r\n            const autoHeight = wrapperHeight + extraHeight;\r\n\r\n            if (timesCalled < 5) {\r\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\r\n                // maybe it will be ready next VM turn\r\n                const doc = _getDocument(beans);\r\n                const notYetInDom = !doc || !doc.contains(eCellWrapper);\r\n\r\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\r\n                // as a) may not be React and b) the cell could be empty anyway\r\n                const possiblyNoContentYet = autoHeight == 0;\r\n\r\n                if (notYetInDom || possiblyNoContentYet) {\r\n                    window.setTimeout(() => measureHeight(timesCalled + 1), 0);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const newHeight = Math.max(autoHeight, minRowHeight);\r\n            this.setRowAutoHeight(rowNode, newHeight, column);\r\n        };\r\n\r\n        const listener = () => measureHeight(0);\r\n\r\n        // do once to set size in case size doesn't change, common when cell is blank\r\n        listener();\r\n\r\n        const destroyResizeObserver = _observeResize(beans, eCellWrapper, listener);\r\n\r\n        compBean.addDestroyFunc(() => {\r\n            destroyResizeObserver();\r\n            this.setRowAutoHeight(rowNode, undefined, column);\r\n        });\r\n    }\r\n\r\n    public setAutoHeightActive(cols: ColumnCollections): void {\r\n        this.active = cols.list.some((col) => col.isVisible() && col.isAutoHeight());\r\n\r\n        if (this.active) {\r\n            this.wasEverActive = true;\r\n        }\r\n    }\r\n}\r\n", "import type { _ModuleWithoutApi } from '../../interfaces/iModule';\r\nimport { VERSION } from '../../version';\r\nimport { RowAutoHeightService } from './rowAutoHeightService';\r\n\r\n/**\r\n * @feature Rows -> Row Height\r\n * @colDef autoHeight\r\n */\r\nexport const RowAutoHeightModule: _ModuleWithoutApi = {\r\n    moduleName: 'RowAutoHeight',\r\n    version: VERSION,\r\n    beans: [RowAutoHeightService],\r\n};\r\n", "import { AlignedGridsModule } from './alignedGrids/alignedGridsModule';\r\nimport { RowApiModule, ScrollApiModule } from './api/apiModule';\r\nimport { ClientSideRowModelModule } from './clientSideRowModel/clientSideRowModelModule';\r\nimport { ClientSideRowModelApiModule } from './clientSideRowModel/clientSideRowModelModule';\r\nimport { ColumnAutoSizeModule } from './columnAutosize/columnAutosizeModule';\r\nimport { ColumnHoverModule } from './columns/columnHover/columnHoverModule';\r\nimport { ColumnApiModule } from './columns/columnModule';\r\nimport { CsvExportModule } from './csvExport/csvExportModule';\r\nimport { DragAndDropModule, RowDragModule } from './dragAndDrop/dragModule';\r\nimport {\r\n    CheckboxEditorModule,\r\n    CustomEditorModule,\r\n    DateEditorModule,\r\n    LargeTextEditorModule,\r\n    NumberEditorModule,\r\n    SelectEditorModule,\r\n    TextEditorModule,\r\n    UndoRedoEditModule,\r\n} from './edit/editModule';\r\nimport {\r\n    CustomFilterModule,\r\n    DateFilterModule,\r\n    ExternalFilterModule,\r\n    NumberFilterModule,\r\n    QuickFilterModule,\r\n    TextFilterModule,\r\n} from './filter/filterModule';\r\nimport { InfiniteRowModelModule } from './infiniteRowModel/infiniteRowModelModule';\r\nimport type { _ModuleWithoutApi } from './interfaces/iModule';\r\nimport { EventApiModule } from './misc/apiEvents/apiEventModule';\r\nimport { LocaleModule } from './misc/locale/localeModule';\r\nimport { GridStateModule } from './misc/state/stateModule';\r\nimport { PaginationModule } from './pagination/paginationModule';\r\nimport { PinnedRowModule } from './pinnedRowModel/pinnedRowModule';\r\nimport { HighlightChangesModule } from './rendering/cell/highlightChangesModule';\r\nimport { RenderApiModule } from './rendering/renderModule';\r\nimport { RowAutoHeightModule } from './rendering/row/rowAutoHeightModule';\r\nimport { RowSelectionModule } from './selection/rowSelectionModule';\r\nimport { CellStyleModule, RowStyleModule } from './styling/stylingModule';\r\nimport { TooltipModule } from './tooltip/tooltipModule';\r\nimport { ValidationModule } from './validation/validationModule';\r\nimport { CellApiModule, ValueCacheModule } from './valueService/valueModule';\r\nimport { VERSION } from './version';\r\n\r\n/**\r\n * @feature All Community Features\r\n */\r\nexport const AllCommunityModule: _ModuleWithoutApi = {\r\n    moduleName: 'AllCommunity',\r\n    version: VERSION,\r\n    dependsOn: [\r\n        ClientSideRowModelModule,\r\n        CsvExportModule,\r\n        InfiniteRowModelModule,\r\n        ValidationModule,\r\n        TextEditorModule,\r\n        NumberEditorModule,\r\n        DateEditorModule,\r\n        CheckboxEditorModule,\r\n        SelectEditorModule,\r\n        LargeTextEditorModule,\r\n        CustomEditorModule,\r\n        UndoRedoEditModule,\r\n        TextFilterModule,\r\n        NumberFilterModule,\r\n        DateFilterModule,\r\n        CustomFilterModule,\r\n        QuickFilterModule,\r\n        ExternalFilterModule,\r\n        GridStateModule,\r\n        AlignedGridsModule,\r\n        PaginationModule,\r\n        ColumnApiModule,\r\n        RowApiModule,\r\n        ScrollApiModule,\r\n        RenderApiModule,\r\n        ColumnAutoSizeModule,\r\n        RowDragModule,\r\n        PinnedRowModule,\r\n        RowSelectionModule,\r\n        ValueCacheModule,\r\n        CellStyleModule,\r\n        ColumnHoverModule,\r\n        RowStyleModule,\r\n        EventApiModule,\r\n        CellApiModule,\r\n        HighlightChangesModule,\r\n        TooltipModule,\r\n        LocaleModule,\r\n        RowAutoHeightModule,\r\n        DragAndDropModule,\r\n        ClientSideRowModelApiModule,\r\n    ],\r\n};\r\n"],
  "mappings": "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",
  "names": ["listeners", "originalListeners", "func", "getById", "unmatchedAndAutoStates", "unmatchedCount", "changedColumns", "res", "cols", "validation", "validation", "childComp", "validation", "instanceIdSequence", "value", "DragSourceType", "mouseEvent", "mouseEvent", "isColumnGroup", "instanceIdSequence", "gui", "invisibleScrollbar", "invisibleScrollbar", "isColumnGroup", "instanceIdSequence", "instanceIdSequence", "ctrl", "LoadingOverlayComponent", "NoRowsOverlayComponent", "DragAndDropImageComponent", "ServerSideTransactionResultStatus", "node", "selectAll", "gui", "CellRangeType", "DragAndDropImageComponent", "isColumnGroup", "columns", "isColumnGroup", "isColumnGroup", "validation", "colDef", "type", "mergedParams", "baseParams", "isColumnGroup", "isColumn", "params", "validation", "LoadingOverlayComponent", "NoRowsOverlayComponent", "rowNode", "TooltipComponent", "node", "paginationPageSizeSelector", "key", "alignSide", "getSize", "selectAll", "selectAll", "rowNode", "isColumnGroup", "baseParams", "cellSelection", "getColumnState", "TooltipComponent"]
}
